#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0 and h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]
        priorities[i][1] -= J[k,i%N,i//N]
      elif J[k,i%N,i//N] < 0 and h[i//N][i%N] < 0:
        priorities[i][0] -= J[k,i%N,i//N]
        priorities[i][1] += J[k,i%N,i//N]

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][1]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.12336898148148148}
#island_id: 2
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[site_nbr_k][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[site_nbr_k][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0005304012345679017}
#island_id: 2
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[0, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[0, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002570524691358025}
#island_id: 3
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      k = (j-1)%2
      site_nbr_j = (site_nbr + ((i//N+j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001609567901234572}
#island_id: 3
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N or (k + i % N) % N == (i // N + 1) % N: 
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 3
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015989197530864203}
#island_id: 3
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[k][i%N] if k == site_nbr else J[0,k,i//N]*h[k][i%N] for k in range(N)]).sum()
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.14141095679012364}
#island_id: 2
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 2
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012359567901234565}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (site_nbr1 + (site_nbr2-site_nbr1) % N) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010632716049382682}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sites = [(i+1)%N, (i-1+N*N)%N]
    for site in neighbor_sites:
      if J[0,i//N,site//N] > 0:
        h_site += sum([J[k,i//N,site//N]*h[k%N][site%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i//N,site//N]*h[k%N][site%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007514660493827161}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i%N,i//N]
    else:
      h_site = -J[0,i%N,i//N]

    for k in range(4):
      if k == 0:
        site_nbr_nbr = (site_nbr + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        site_nbr_nbr = (site_nbr + ((i//N+1)%2 - 1)) % N
      elif k == 2:
        site_nbr_nbr = (site_nbr + ((i%N-1)%N - (i//N-1)%2)) % N
      else:
        site_nbr_nbr = (site_nbr + ((i%N+1)%N - (i//N-1)%2)) % N

      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_nbr][i%N]
      else:
        h_site -= h[site_nbr_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.00229891975308642}
#island_id: 1
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(N):
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin += [h[i//N][j], h[j][i%N], J[1,i//N,j]*h_site, J[2,j,i//N]*h_site_j]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[k] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total
    priorities[i][1] = -total

  return(priorities)




#score: {'data2D.txt': -0.016002314814814813}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0, 0]
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[0] += J[j,i//N,i%N]
        total_spin[1] -= J[j,i//N,i%N]
      else:
        total_spin[0] -= J[j,i//N,i%N]
        total_spin[1] += J[j,i//N,i%N]
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.007316203703703705}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = (np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]) > 0
    priorities[i][0] = h_site if site_spin else -h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 2
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 0
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    for j in [(i+N-1)%N, (i+N+1)%N]:
      if i != j and J[0,(j-N)%N,i//N] * h[(j//N)%N][(j%N)%N] > 0:
        spin *= -1
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004239660493827161}
#island_id: 3
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1)%N, ((i+N-1)%N)]
    for neighbor in neighbors:
      if J[0,neighbor,i//N] > 0:
        h_site += sum([J[k,neighbor,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,neighbor,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 3
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_magnetism = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      site_magnetism = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = site_magnetism + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0962057098765433}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -J[0,i%N,i//N]
    for j in range(3):
      h_site += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011410956790123456}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = sum([h[k][i%N] for k in range(N)])
      else:
        h_site = -sum([h[k][i%N] for k in range(N)])

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -sum([h[k][i%N] for k in range(N)])
      else:
        h_site = sum([h[k][i%N] for k in range(N)])

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008060185185185192}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        J_term = J[k,i%N,i//N]
      else:
        J_term = -J[k,i%N,i//N]

      h_site += J_term*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009979938271604937}
#island_id: 2
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (i//N == k//N and abs(i%N-k%N) <= 1):
          priorities[i][0] += J[0,k//N,i//N]*h[k%N,k//N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (i//N == k//N and abs(i%N-k%N) <= 1):
          priorities[i][0] -= J[0,k//N,i//N]*h[k%N,k//N]

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002751543209876546}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site = (j + i % N) % N
      if J[1,site,i//N] > 0:
        h_site += h[j][i%N]
      else:
        h_site -= h[j][i%N]
        
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[2,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[2,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004798611111111111}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][k] > 0:
        total_spin[0] += h_site
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    neighbor_mags = [J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if site_mag > 0:
      priorities[i][0] = h_site + sum(neighbor_mags)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbor_mags)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 2
#version_generated: 3
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k, i%N, i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k, i%N, i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011921296296296298}
#island_id: 2
#version_generated: 3
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i % N + k) // N - 1)) % N
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += h_site * h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= h_site * h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (1 + sum([abs(J[k,i%N,i//N]) for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (1 + sum([abs(J[k,i%N,i//N]) for k in range(4)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00754891975308642}
#island_id: 2
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [0,0]
      for j in range(3):
        k = (j+N-1)%N
        if J[j,i%N,i//N] > 0:
          total_spin[0] += h[k][i%N]
          total_spin[1] -= 1
        else:
          total_spin[0] -= h[k][i%N]
          total_spin[1] += 1
      priorities[i][0] = sum([J[j,i%N,i//N]*total_spin[0] for j in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = [0,0]
      for j in range(3):
        k = (j+N-1)%N
        if J[j,i%N,i//N] > 0:
          total_spin[0] -= h[k][i%N]
          total_spin[1] += 1
        else:
          total_spin[0] += h[k][i%N]
          total_spin[1] -= 1
      priorities[i][0] = -sum([J[j,i%N,i//N]*total_spin[0] for j in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.32518811728394975}
#island_id: 2
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (0,-1), (1,0), (-1,0)]:
      if i//N + dir[0] < 0 or i//N + dir[0] >= N or i%N + dir[1] < 0 or i%N + dir[1] >= N:
        continue
      h_dir = J[dir[0],i%N,i//N]*h[(i//N+dir[0])%N][i%N+dir[1]]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_dir
        priorities[i][1] -= 1 + h_dir
      else:
        priorities[i][0] -= h_site + h_dir
        priorities[i][1] += 1 + h_dir

  return(priorities)




#score: {'data2D.txt': -0.00024305555555555547}
#island_id: 2
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = 0
    for k in range(4):
      if k == 0 or k == 1:
        sum_neighbors += J[k, i%N, i//N]*h[(k+N-1)%2][i%N]
      elif k == 2:
        sum_neighbors += J[3, (i+1)%N, i//N]*h[1,(i+1)%N]
      else:
        sum_neighbors += J[3, (i-1)%N, i//N]*h[1,(i-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00011311728395061715}
#island_id: 2
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site) - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011288425925925927}
#island_id: 2
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0][i][j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      priorities[i*N+j][0] = h_site + sum([J[k][i][min(k,j)]*(2*h[min(k,j)%N][min(k,j)%N]-1) for k in range(4)])
      priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009331790123456794}
#island_id: 1
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20617608024691378}
#island_id: 1
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin[i][0] += h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  return total_spin




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 0
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001427469135802466}
#island_id: 0
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    site_nbr2 = (site_nbr + ((site_nbr+N-1)%N - N//2)) % N
    h_site2 = h[site_nbr2][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr2][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h_site2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        if h[i//N][i%N] > 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if h[i//N][i%N] > 0:
          priorities[i][j] = -priorities[i][0]
        else:
          priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.01069027777777778}
#island_id: 2
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011651388888888888}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.031488425925925934}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[0, i, j]
        priorities[i*N+j][1] -= J[0, i, j]
      else:
        priorities[i*N+j][0] -= J[0, i, j]
        priorities[i*N+j][1] += J[0, i, j]

  return(priorities)




#score: {'data2D.txt': 0.0001393518518518517}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 0 and i % N > 0) or (k == 1 and i // N > 0) or (k == 2 and i % N < N-1):
        h_site += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.13497854938271622}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (site_nbr + ((k-1)%2 - 1)) % N
      priorities[i][0] += J[k,i//N,i%N]*h[site_nbr_2][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i//N,i%N]*h[site_nbr_2][i%N]
      else:
        priorities[i][1] += J[k,i//N,i%N]*h[site_nbr_2][i%N]

  return(priorities)




#score: {'data2D.txt': -0.00011651234567901258}
#island_id: 2
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    for k in range(3):
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] += h_site
      else:
        priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021128086419753113}
#island_id: 0
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,i%N,k]*h[k,N-1] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[2,i%N,k]*h[k,N-1] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017041666666666663}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007121913580246914}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total = h[i//N][i%N]
      if J[0,i%N,i//N] > 0:
        total += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        total -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total
      else:
        priorities[i][j] = -h_site - total

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site)
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.005426388888888889}
#island_id: 0
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for k in range(3):
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000597993827160494}
#island_id: 0
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] == 1 and J[0,i%N,i//N] > 0:
        priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif h[i//N][i%N] == -1 and J[0,i%N,i//N] < 0:
        priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] == 1 and J[0,i%N,i//N] < 0:
        priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif h[i//N][i%N] == -1 and J[0,i%N,i//N] > 0:
        priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00016342592592592627}
#island_id: 3
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      if i // N == (k + ((k-1)%2 - 1)) % N and abs(i % N - k) <= 1:
        site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
        h_site += J[0, min(k, i%N), max(0, min(N-1, k+i%N-2*N))]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015473765432098654}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J.sum() / 4
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J.sum() / 4
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11426589506172853}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i-1)%N][i%N] + J[2,i%N,i//N]*h[(i+1)%N][i%N]) * h_site
    else:
      priorities[i][0] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.26864768518518484}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0036325617283950633}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(np.sum(J, axis=2), axis=0)[i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(np.sum(J, axis=2), axis=0)[i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004875}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0021313271604938263}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % N - 1)) % N
    h_site1, h_site2 = h[site_nbr1][i%N], h[site_nbr2][i//N]
    J_site = sum([J[k,i%N,i//N]*h[(((k-1)%N + i//N)%N) + (k-1)//N][(i+N-1)%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J_site + h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J_site - h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_j = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_j
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_j
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016791666666666673}
#island_id: 0
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_h = [h[s][i%N] if J[0,i%N,s//N]*h[s][i%N]>0 else -h[s][i%N] for s in site_nbrs]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(site_nbr_h) + np.sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(site_nbr_h) - np.sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011291666666666668}
#island_id: 0
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    for j in range(2):
      if (J[(j+1)%2,i%N,i//N] > 0) == (total_h > 0):
        priorities[i][j] = sum([abs(J[k,i%N,i//N]*h[(k+N-1)%N][i%N]) for k in range(3)])
      else:
        priorities[i][j] = -sum([abs(J[k,i%N,i//N]*h[(k+N-1)%N][i%N]) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.007664043209876542}
#island_id: 0
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,i//N][i%N]*h[site_nbr1][i%N], J[1,i//N][i%N]*h[site_nbr2][i%N]]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[0,i//N][i%N]*h[site_nbr1][i%N], J[1,i//N][i%N]*h[site_nbr2][i%N]]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004390432098765439}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = (i % N + ((i//N-1)%2 - j) % N)
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018705246913580246}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N)//N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009282561728395063}
#island_id: 2
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if i // N == site_nbr // N and (j % 2) == J[j//2,i%N,i//N]:
        if h[i//N][i%N] > 0:
          priorities[i][0] += h_site
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.16910262345679036}
#island_id: 2
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(-h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00028564814814814875}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006734722222222223}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07256280864197535}
#island_id: 2
#version_generated: 3
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[0] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[1-k] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[1-k] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006498456790123464}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014964506172839508}
#island_id: 3
#version_generated: 3
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k, i%N, i//N]
      else:
        total_spin -= J[k, i%N, i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      temp_sum = 0
      for k in range(-1,2):
        if i//N+k >= 0 and i//N+k < N and (k == 0 or i % N + k >= 0 and i % N + k < N):
          temp_sum += J[k,i%N+k,i//N+k]*h[(i//N+k)%N][i%N+k]
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + temp_sum
      else:
        priorities[i][j] = -h_site - temp_sum

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007217592592592593}
#island_id: 3
#version_generated: 3
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[j,i//N,k]%2*h[site_nbr][k] for j,k in itertools.product(range(N),range(N)) if (j==0 and k<i) or (j==1 and k>i)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[j,i//N,k]%2*h[site_nbr][k] for j,k in itertools.product(range(N),range(N)) if (j==0 and k<i) or (j==1 and k>i)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007137345679012348}
#island_id: 2
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k==0 and (i//N==0 or i%N==N-1):#top edge
        J_val = J[k,i%N,i//N]
      elif k==1 and (i//N==N-1 or i%N==0):#right edge
        J_val = J[k,i%N,i//N]
      else:
        J_val = J[0,i%N,i//N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J_val*h[(k+N-1)%N][i%N]
        priorities[i][1] -= 2*J_val
      else:
        priorities[i][0] -= h_site - J_val*h[(k+N-1)%N][i%N]
        priorities[i][1] += 2*J_val

  return(priorities)




#score: {'data2D.txt': -0.032676080246913576}
#island_id: 2
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    spin_1 = total_spin[0]
    spin_2 = total_spin[1]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + spin_1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - spin_2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009594135802469127}
#island_id: 2
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i-1)%N, (i+1)%N, ((i+N-1)%N)]
    for j in range(3):
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 3
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = 0
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      spin_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_energy
      priorities[i][1] = -spin_energy
    else:
      spin_energy = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_energy
      priorities[i][1] = spin_energy

  return(priorities)




#score: {'data2D.txt': 0.01749521604938272}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr = (k + ((i//N-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        total_spin[0] += h[site_nbr][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if (j == 0 and h[i//N][i%N] > 0) or (j == 1 and h[i//N][i%N] < 0):
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001600771604938272}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N:
        break
      site_nbr2 = ((i//N)%N + ((k+i%N-1)%2 - 1)) % N
      h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00027700617283950605}
#island_id: 3
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      jnbr = (i % N + ((k+N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_jnbr = h[jnbr][i%N]
      else:
        h_jnbr = -h[jnbr][i%N]
      priorities[i][0] += h_site + h_jnbr
      priorities[i][1] -= h_site + h_jnbr

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 2
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.22690540123456793}
#island_id: 2
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N])
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N])*h_site
      priorities[i][1] = 1 - J[0,i%N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.0007705246913580246}
#island_id: 2
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for j in range(3):
      if i // N == (j + N - 1) % N:
        energy = J[j,i//N,i%N] * h[(j+N-1)%N][i%N]
      else:
        energy = 2 * J[j,i//N,i%N] * h[site_nbr][i%N]
      total_energy += energy

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.904320987654297e-05}
#island_id: 2
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008797839506172839}
#island_id: 0
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    if i % N > 0:
      site_nbrs.append(i-1)
    if i % N < N-1:
      site_nbrs.append(i+1)
    if i//N > 0:
      site_nbrs.append(i-N)
    if i//N < N-1:
      site_nbrs.append(i+N)

    h_site = sum([h[sitenbr % N][sitenbr // N] * J[0,sitenbr%N,i//N] for sitenbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016202160493827163}
#island_id: 0
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N), i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N), i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026597222222222217}
#island_id: 2
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N]
    for k in range(3):
      if k == 1:
        site_nbr = (i % N + ((i//N-1)%2)) % N
      elif k == 2:
        site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
      total_h_site += J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002036574074074074}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    
    for k in range(4):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if magnetism > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002787191358024691}
#island_id: 1
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      neighbor_i, neighbor_j = (i % N + ((k-1)%2 - 1)) % N, i//N
      if J[k,i%N,i//N] > 0:
        h_neighbor = h[neighbor_i][neighbor_j]
      else:
        h_neighbor = -h[neighbor_i][neighbor_j]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h_neighbor for k in range(3)])
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h_neighbor for k in range(3)])
        priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.013006327160493826}
#island_id: 1
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_up = total_spin[i][0]
      spin_down = total_spin[i][1]
    else:
      spin_up = total_spin[i][1]
      spin_down = total_spin[i][0]

    priorities[i][0] = spin_up + sum([J[k,i%N,i//N]*spin_down for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001407253086419753}
#island_id: 3
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h[site_nbrs[k]][i%N]*J[k,i//N,i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h[site_nbrs[k]][i%N]*J[k,i//N,i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 3
#version_generated: 3
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    for k in range(3):
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0525625}
#island_id: 3
#version_generated: 3
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_magnetism = 1
    else:
      site_magnetism = -1

    for k in range(4):
      j_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        interaction = 1
      else:
        interaction = -1

      if h[j_nbr][i%N] > 0:
        site_nbr_magnetism = 1
      else:
        site_nbr_magnetism = -1

      priorities[i][0] += interaction * site_nbr_magnetism
      priorities[i][1] -= interaction * site_nbr_magnetism

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 3
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001157561728395062}
#island_id: 3
#version_generated: 3
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i % (2**k) < N // (2**k):
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for j in range(N)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for j in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + (i//N+1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017669753086419716}
#island_id: 3
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbours = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbours
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbours
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011651388888888888}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias + h[site_nbr][i%N]
      priorities[i][1] = -spin_bias
    else:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_bias - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006924382716049373}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or i%N == (k+N-1)%N:
        if J[k,i%N,i//N] > 0:
          h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
          h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007655864197530866}
#island_id: 2
#version_generated: 3
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1) + (-j+2)%2) % N
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011702160493827151}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for j in range(N):
      total_h += h[j][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008106481481481484}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k, i % N, i // N] * h[(k + i // N) % N][i % N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= abs(J[k, i % N, i // N]) * h[(k + i // N) % N][i % N]
      else:
        priorities[i][1] += abs(J[k, i % N, i // N]) * h[(k + i // N) % N][i % N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin - 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.05303873456790125}
#island_id: 2
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][i%N] for k in range(N)]) + sum([J[0,k,i//N]*h[k][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([-h[k][i%N] for k in range(N)]) + sum([J[0,k,i//N]*-h[k][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01081496913580247}
#island_id: 1
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)]) * -1
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)], axis=0)
    
    priorities[i][0] = h_site + neighbors_h
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 0
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002317129629629628}
#island_id: 0
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if abs(J[k,i%N,i//N]) > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    h_site = h[site_nbr][i%N] + total_spin
    priorities[i][0] = h_site if h[i//N][i%N] > 0 else -h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.2619396604938269}
#island_id: 2
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_i = h[i//N][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (2*h_i)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 2
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': -0.0099375}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    h_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = 1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.001222376543209876}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+1)%N, (i+N-1)%N, (i+1+N//2)%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in enumerate(site_nbrs)])
    priorities[i][0] = h_site + neighbors_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011528549382716026}
#island_id: 1
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum([J[k,j,k//N]*h[(k+N-1)%N][j] for k in range(3)]) for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [h[site_nbr][i%N], sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]
    else:
      total_spin = [-h[site_nbr][i%N], -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]

    priorities[i][0] = total_spin[0] + sum([abs(J[k,i%N,i//N]-J[3-k,i%N,i//N])*total_spin[0] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0042078703703703705}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i < N**2 // 2:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr_flip = (site_nbr + N) % N
      h_site_flip = -h[site_nbr_flip][i%N]
      priorities[i][0] = h_site_flip + sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033189814814814818}
#island_id: 0
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N + ((i % N+1) % N - 1)) % N,
           (i % N + ((i//N+1) % N - 1)) % N,
           (i // N + ((i % N-1) % N - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    J_sites = [J[k,i%N,i//N]*h_sites[(k+2)%4] for k in range(4)]
    
    if sum(h_sites) > 0:
      priorities[i][0] = sum(J_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(J_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 0
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] * J[k,i//N,i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.015903240740740742}
#island_id: 3
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,:,i//N].dot(h[i//N]), axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.30007299382715985}
#island_id: 3
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    
    total_spin[i][0] += h_site1 + J[0,i%N,i//N]*h[site_nbr1][i%N] + J[1,i%N,i//N]*h[site_nbr2][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002797993827160494}
#island_id: 1
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(3))]) > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(3))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(3))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001847993827160493}
#island_id: 1
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = 0
    for j in range(4):
      k = (i // N + ((j-1)%2 - 1)) % N
      if J[j,i//N,k]:
        spin_sum += h[k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003742283950617276}
#island_id: 2
#version_generated: 3
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009538580246913577}
#island_id: 2
#version_generated: 3
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N)%N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07077700617283955}
#island_id: 1
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N-1)%N + i%N) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = site_energy

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000515895061728395}
#island_id: 1
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+N-1)%N,(i-N)%(N),((i+2)%N),((i-2+N*N)%(N))]
    J_sum = sum([J[k,i%N,i//N]*h[s][i%N] for k,s in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009112654320987659}
#island_id: 1
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.012788734567901234}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        if J[1,i%N,i//N] > 0:
          priorities[i][1] = max(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
        else:
          priorities[i][1] = min(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        if J[1,i%N,i//N] < 0:
          priorities[i][1] = max(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
        else:
          priorities[i][1] = min(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10781620370370376}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h[i//N][i%N] + h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002769907407407407}
#island_id: 3
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N != N - 1 and (i // N) % 2 == 1:
        priorities[i][0] += sum([J[3,j,i//N]*h[j,N-1] for j in range(N)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N != N - 1 and (i // N) % 2 == 1:
        priorities[i][0] -= sum([J[3,j,i//N]*h[j,N-1] for j in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 3
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([-J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 3
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + site_nbr_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_nbr_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006640277777777778}
#island_id: 0
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N-1)%2 - 1)) % N,
           ((i+N-1)%N + ((i//N-1)%2 - 1)) % N,
           ((i+N-1)%N + ((i//N-1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum([J[k,i%N,i//N]*h_site for k, h_site in zip(range(4), h_sites)]) > 0:
      priorities[i][0] = sum(h_sites) + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000185648148148148}
#island_id: 0
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+N-1)%N, (i+1)%N, (i-N-1)%N, (i-1)%N]
    sum_neighbors = 0
    for neighbor in neighbors:
      if i//N == neighbor//N and i%N != neighbor%N:  # horizontal neighbor
        if J[1,i%N,neighbor//N] > 0:
          sum_neighbors += h[i//N][i%N]
        else:
          sum_neighbors -= h[i//N][i%N]
      elif i//N != neighbor//N and i%N == neighbor%N:  # vertical neighbor
        if J[2,i//N,neighbor%N] > 0:
          sum_neighbors += h[neighbor//N][i%N]
        else:
          sum_neighbors -= h[neighbor//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00014459876543209904}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    for j in range(3):
      if i//N == (j+N-1)//N:
        continue
      if abs(J[j,i%N,i//N]) > 1e-6:
        h_site += J[j,i%N,i//N] * h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if i//N == (i+N-1)%N and i % N == j:  # right neighbor
        priorities[i][0] += J[j,i//N,i//N]*h[(j+2)%4][i//N]
        priorities[i][1] -= priorities[i][0]
      elif i//N == (i+N-1)%N and i % N != j:  # left neighbor
        priorities[i][0] += J[j,i//N,i//N]*h[(j+2)%4][i//N]
        priorities[i][1] -= priorities[i][0]
      elif i % N == (i+N-1)%N and i//N != j:  # top neighbor
        priorities[i][0] += J[j,i//N,i//N]*h[(j+2)%4][i//N]
        priorities[i][1] -= priorities[i][0]
      elif i % N == (i+N-1)%N and i//N == j:  # bottom neighbor
        priorities[i][0] += J[j,i//N,i//N]*h[(j+2)%4][i//N]
        priorities[i][1] -= priorities[i][0]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.040539351851851854}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h_site + J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009233024691358027}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      d_nb = (i + ((d-1)%2)*N + (i//N)%N) % N
      if J[d,d_nb,i//N] > 0:
        h_site += J[d,d_nb,i//N]*h[d_nb][i%N]
      else:
        h_site -= J[d,d_nb,i//N]*h[d_nb][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006018364197530864}
#island_id: 0
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add some additional logic here to further improve the priority assignment
  for i in range(N):
    for j in range(N):
      if J[2,i,j] > 0:
        priorities[i*N+j,0] += sum([J[k,i,k] for k in range(3)])
        priorities[i*N+j,1] -= sum([J[k,i,k] for k in range(3)])
      else:
        priorities[i*N+j,0] -= sum([J[k,i,k] for k in range(3)])
        priorities[i*N+j,1] += sum([J[k,i,k] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(N**2) if (k % N == i % N or k // N == i // N)]
    for neighbor in neighbors:
      if J[0,neighbor%N,neighbor//N] > 0:
        h_neighbor = h[neighbor//N][neighbor%N]
      else:
        h_neighbor = -h[neighbor//N][neighbor%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= 2
      else:
        priorities[i][0] -= h_site + h_neighbor
        priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': -0.14364151234567907}
#island_id: 2
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k==0:
        total_spin = h[i//N][i%N] + sum([J[l,i//N,i%N]*h[(l+N-1)%N][i%N] for l in [k+1,k]])
      else:
        total_spin = -sum([J[l,i//N,i%N]*h[(l+N-1)%N][i%N] for l in range(k)])

      if k==0 and h[i//N][i%N] > 0:
        priorities[i][0] += h_site + total_spin
        priorities[i][1] -= priorities[i][0]
      elif k==0 and h[i//N][i%N] < 0:
        priorities[i][0] -= h_site - total_spin
        priorities[i][1] = -priorities[i][0]
      else:
        if h[i//N][i%N] > 0:
          priorities[i][0] += total_spin
          priorities[i][1] -= priorities[i][0]
        else:
          priorities[i][0] -= total_spin
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001016203703703704}
#island_id: 2
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001135030864197531}
#island_id: 1
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k==0 and i%2==1) or (k==1 and i//N % 2 == 1):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif (k==0 and i//N % 2 == 0) or (k==1 and i%2==0):
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001399537037037037}
#island_id: 1
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if (i % N + ((i//N-1)%2 - 1)) % N == i % N and j == 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0024859567901234568}
#island_id: 2
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_term = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site *= -1

    priorities[i][0] = h_site + spin_term
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00033040123456790137}
#island_id: 2
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = np.sign(h[i//N][i%N])
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009208487654320986}
#island_id: 1
#version_generated: 2
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[j][i%N] for j in site_nbrs])
    J_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005775462962962963}
#island_id: 1
#version_generated: 2
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if (J[0,i%N,i//N] + J[2,(i+1)%N,i//N]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018822530864197535}
#island_id: 3
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 0 and i % N != 0) or (k == 1 and i % N == N-1) or (k == 2 and (i//N)%N == N-1):
        total = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][0] = total
        priorities[i][1] = -total
  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 3
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      term1 = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - term1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.342592592592577e-05}
#island_id: 2
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N, i%N] > 0 and J[2,(i//N+1)%N, i%N] > 0:
        priorities[i][0] += sum([J[k,(i//N+1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N, i%N] < 0 and J[2,(i//N+1)%N, i%N] < 0:
        priorities[i][0] -= sum([J[k,(i//N+1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N, i%N] > 0 and J[1,(i//N+1)%N, i%N] > 0:
        priorities[i][0] -= sum([J[k,i//N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N, i%N] < 0 and J[1,(i//N+1)%N, i%N] < 0:
        priorities[i][0] += sum([J[k,i//N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N, i%N] > 0 and J[2,(i//N+1)%N, i%N] > 0:
        priorities[i][0] -= sum([J[k,(i//N+1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N, i%N] < 0 and J[2,(i//N+1)%N, i%N] < 0:
        priorities[i][0] += sum([J[k,(i//N+1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N, i%N] > 0 and J[1,(i//N+1)%N, i%N] > 0:
        priorities[i][0] += sum([J[k,i//N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N, i%N] < 0 and J[1,(i//N+1)%N, i%N] < 0:
        priorities[i][0] -= sum([J[k,i//N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.12540046296296312}
#island_id: 2
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (1 + 2*sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (1 + 2*sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate the total priority for each spin state
    site_priority = 2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Normalize the priority values to be between -1 and 1
    priorities[i][0] = (site_priority - np.min(site_priority)) / (np.max(site_priority) - np.min(site_priority))
    priorities[i][1] = 1 - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008699845679012344}
#island_id: 0
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      neighbor = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_neighbor = h[neighbor][i%N]
      else:
        h_neighbor = -h[neighbor][i%N]

      priorities[i][0] += (J[j,i//N,i%N]*h_neighbor) + h_site
      if J[j,i//N,i%N] > 0:
        priorities[i][1] -= 2*h_neighbor
      else:
        priorities[i][1] += 2*h_neighbor

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 0
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N,N,2))
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[i//N,i%N][0] += J[k,i%N,i//N]*h[site_nbr][i%N]
        total_spin[i//N,i%N][1] -= J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        total_spin[i//N,i%N][0] -= J[k,i%N,i//N]*h[site_nbr][i%N]
        total_spin[i//N,i%N][1] += J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin[i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin[i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 1
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003180555555555554}
#island_id: 1
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[j][i%N] if j == i//N else J[0,site_nbrs.index(j),i//N]*h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007149691358024699}
#island_id: 3
#version_generated: 3
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or J[0,i%N,i//N] > 0: 
        h_site = -h_site
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09287453703703714}
#island_id: 3
#version_generated: 3
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / ((2*h[i//N][i%N]+1) ** (1/2))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / ((2*h[i//N][i%N]+1) ** (1/2))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term2 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0022665123456790132}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_neighbors_h = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*neighbor_h for k, neighbor_h in zip(range(3), site_neighbors_h)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*neighbor_h for k, neighbor_h in zip(range(3), site_neighbors_h)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2193569444444444}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbor = 0
    for j in range(3):
      k = (i//N + ((j-1)%2 - 1)) % N
      if J[j,i%N,k]:
        sum_h_neighbor += h[k][i%N]
    
    priorities[i][0] = h_site + sum_h_neighbor
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0019467592592592594}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else h[i//N][0]
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else h[i//N][N-1]
    top_h = h[i//N][(i-1)%N] if i % N != 0 else h[0][i%N]
    bot_h = h[i//N][(i+1)%N] if i % N != N-1 else h[N-1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*top_h + J[1,i%N,i//N]*bot_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*top_h - J[1,i%N,i//N]*bot_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006296450617283951}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)])
    priorities[i][0] = site_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*(h[site_nbr2][i%N]-h[site_nbr1][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*(h[site_nbr2][i%N]-h[site_nbr1][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026712962962962975}
#island_id: 0
#version_generated: 2
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.050780401234567916}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0 and j == 1:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif h[i//N][i%N] < 0 and j == 0:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if J[0,i%N,i//N] > 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.0004140432098765432}
#island_id: 0
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priority_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1623770061728395}
#island_id: 0
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.008477623456790123}
#island_id: 1
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -np.sign(h_site)
    priorities[i][1] = 1 - np.abs(priorities[i][0])
  return priorities




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.020816203703703712}
#island_id: 1
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N_half

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr2][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_fields = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_fields
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_fields
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 2
#version_generated: 3
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31103626543209806}
#island_id: 2
#version_generated: 3
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (1 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy

  return(priorities)




#score: {'data2D.txt': 0.14498904320987674}
#island_id: 2
#version_generated: 3
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        priorities[i][1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.002260956790123458}
#island_id: 2
#version_generated: 3
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 2
#version_generated: 3
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014214506172839504}
#island_id: 1
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 1
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = (h[i//N][i%N] + h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)) if h[i//N][i%N]>0 else -sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)), 1 if h[i//N][i%N]>0 else -1])
    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005668209876543204}
#island_id: 1
#version_generated: 2
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4),site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000677006172839506}
#island_id: 1
#version_generated: 2
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      priorities[i][0] += J[j, i % N, i // N] * h[(j + (i//N-1)%2 - 1) % N][i % N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022665123456790132}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_values = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]
    total_site_value = sum([J[k,i%N,i//N]*v for k,v in zip(range(3), site_nbr_values)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_site_value
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_site_value
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009791203703703705}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priorities[i*N+j][0] = total_spin[i*N+site_nbr][0]
      priorities[i*N+j][1] = total_spin[i*N+site_nbr][1]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0506908950617284}
#island_id: 3
#version_generated: 3
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for j in range(4):
      neighbor = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        total_priority += h[neighbor][i%N]
      else:
        total_priority -= h[neighbor][i%N]

    priorities[i][0] = h_site + total_priority
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        factor = 1
      else:
        factor = -1

      priorities[i][j] += h_site * factor + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*factor for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.tanh(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.054174228395061745}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == N // 2 and (i // N) < N // 2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = max(-priorities[i][0], sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == N // 2 and (i // N) < N // 2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = min(-priorities[i][0], sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_plus = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priority_minus = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
    else:
      priority_plus = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priority_minus = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    priorities[i][0] = priority_plus
    priorities[i][1] = priority_minus
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009112654320987659}
#island_id: 1
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h = h[i//N][i%N]
    sum_j = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = 2*h_site + sum_j
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006402777777777775}
#island_id: 0
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0002470679012345682}
#island_id: 3
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (-1,0), (1,0)]:
      neighbor_i = i + direction[0]
      neighbor_j = i % N + direction[1]
      if 0 <= neighbor_i < N and 0 <= neighbor_j < N:
        site_nbr_val = J[direction[0],i%N,i//N]*h[neighbor_i][neighbor_j]
        h_site += site_nbr_val
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00038472222222222206}
#island_id: 3
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      priorities[i][0] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004113425925925927}
#island_id: 1
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    neighbors_h = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if sum(neighbors_h) > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*neighbors_h[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*neighbors_h[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026496913580246925}
#island_id: 1
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i // N + 1) % N * N + i % N
    site_nbr_down = (i // N - 1) % N * N + i % N
    site_nbr_left = i // N * N + (i % N - 1) % N
    site_nbr_right = i // N * N + (i % N + 1) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

    if i % N > 0:
      site_nbr_left_val = h[i//N][i%N - 1]
    else:
      site_nbr_left_val = h[i//N][N-1]

    if i % N < N - 1:
      site_nbr_right_val = h[i//N][i%N + 1]
    else:
      site_nbr_right_val = h[i//N][0]

    if i // N > 0:
      site_nbr_up_val = h[(i // N) - 1][i % N]
    else:
      site_nbr_up_val = h[N-1][i % N]

    if i // N < N - 1:
      site_nbr_down_val = h[(i // N) + 1][i % N]
    else:
      site_nbr_down_val = h[0][i % N]

    priorities[i][0] += J[3,i%N,i//N]*h_site*site_nbr_left_val
    priorities[i][0] -= J[3,i%N,i//N]*h_site*site_nbr_right_val
    priorities[i][0] += J[1,i%N,i//N]*h_site*site_nbr_up_val
    priorities[i][0] -= J[1,i%N,i//N]*h_site*site_nbr_down_val

  return(priorities)




#score: {'data2D.txt': -0.00015385802469135767}
#island_id: 1
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]-h_site) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]+h_site) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.04940972222222223}
#island_id: 1
#version_generated: 2
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
      if J[direction[0], i % N, i // N] > 0:
        h_site += sum([J[dir[0], i % N, i // N]*h[(i//N+dir[1])%N][i%N] for dir in [(0, 1), (1, 0), (-1, 0), (0, -1)] if ((i//N+dir[1])%N, (i%N+dir[0])) != (i//N, i%N)])
      else:
        h_site -= sum([J[dir[0], i % N, i // N]*h[(i//N+dir[1])%N][i%N] for dir in [(0, 1), (1, 0), (-1, 0), (0, -1)] if ((i//N+dir[1])%N, (i%N+dir[0])) != (i//N, i%N)])

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -2.793209876543126e-05}
#island_id: 1
#version_generated: 2
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % 2 == 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014405864197530862}
#island_id: 0
#version_generated: 2
#generate time01:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbrs[j]][i%N] if J[0,i%N,i//N]>0 else -h[site_nbrs[j]][i%N] for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h_sites[k-1] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h_sites[k-1] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007232561728395062}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0][i][j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      if h[i][j] > 0:
        priorities[i*N+j][0] += h_site + sum([J[k][i][j]*h[(k+N-1)%N][j] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] -= h_site - sum([J[k][i][j]*h[(k+N-1)%N][j] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_up = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = -priority_up
    else:
      priority_up = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = -priority_up

    priorities[i][0] = priority_up
    priorities[i][1] = priority_down

  return(priorities)




#score: {'data2D.txt': -0.00015756172839506233}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N and i % N == site_nbr:
        J_val = J[d,i//N,site_nbr]
        break
    else:
      J_val = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J_val
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J_val
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.15338441358024693}
#island_id: 3
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    h_site += (h[i//N][i%N]+(-1)**((i//N + i%N) % 2)*h[site_nbr][i%N])
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.000919598765432099}
#island_id: 0
#version_generated: 2
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      neighbor = (i+N-1)%N
      if J[k,i//N,neighbor] > 0 and J[k,i//N,i%N] > 0:
        h_site += 2*h[neighbor][(k+N-1)%N]
      elif J[k,i//N,neighbor] < 0 and J[k,i//N,i%N] < 0:
        h_site -= 2*h[neighbor][(k+N-1)%N]
      elif J[k,i//N,neighbor] > 0 and J[k,i//N,i%N] < 0:
        h_site += h[neighbor][(k+N-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0004594135802469137}
#island_id: 1
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023140432098765432}
#island_id: 1
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+((j-1)%2)-1)%N for j in range(4)]
    if all([J[k,i%N,i//N]*h[s][i%N] > 0 for k,s in zip(range(4),site_nbrs)]):
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(4),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(4),site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001631018518518518}
#island_id: 1
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(3)]
    J_sum = sum([J[k,i//N,k//N]*h[s][i%N] for s, k in zip(site_nbrs, range(3))])

    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008149691358024689}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+J[0,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+J[0,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 0
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 0
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011615740740740738}
#island_id: 0
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = 0
    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      spin_sum += J[k,i%N,i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03461373456790125}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_spin[i][0] - J[0,i//N,i%N]*total_spin[site_nbr][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[i][0] + J[0,i//N,i%N]*total_spin[site_nbr][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009560185185185183}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = J_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] + h_site > 0:
      priorities[i][0] = total_spin[i][0] + h_site
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -total_spin[i][0] - h_site
      priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018075617283950616}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i//N + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site_nbr_j][i%N]
      else:
        h_site -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005047839506172844}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j,i%N,i//N] == 1:  # up
        if i < N**2 - N:
          h_site += h[(i//N + 1) % N][i%N]
      elif J[j,i%N,i//N] == -1:  # down
        if i >= N:
          h_site -= h[(i//N - 1) % N][i%N]
      else:  # right or left
        if i % N > 0:
          h_site += h[i//N][((i-1)%N)]
        elif i % N < N-1:
          h_site -= h[i//N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05297206790123459}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i // N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_k = h[site_k][i%N]
      else:
        h_k = -h[site_k][i%N]

      priorities[i][0] += h_site + h_k
      priorities[i][1] -= h_site + h_k

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003692901234567896}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sites = [h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, [0,1,2])])
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00041219135802469123}
#island_id: 0
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 0 and i % N > 0) or (k == 1 and i // N < N-1) or (k == 2 and i % N < N-1):
        h_site += J[k,i%N,i//N]*h[(i+k-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.003138117283950617}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00012638888888888956}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009791666666666666}
#island_id: 0
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N + (i % N + 1) % N),
           (i // N + ((i%N+1)%N-1) % N),
           (i // N + (i % N - 1) % N)]
    site_nbrs = [j for j in set(site_nbrs) if j != i]
    
    h_site = h[i//N][i%N] * sum([J[k,i//N,i%N]*h[j//N][j%N] for k,j in zip(range(4),site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001304475308641975}
#island_id: 0
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      J_val = J[k, i%N, i//N]
      if (k+1)%2 == 0: 
        h_site += J_val*h[(k+N-1)%N][i%N]
      else:
        h_site -= J_val*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038334876543209876}
#island_id: 0
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i%N,i//N]*h[i//N][i%N] + J[2,i%N,i//N]*(h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i%N,i//N]*h[i//N][i%N] - J[2,i%N,i//N]*(h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007544753086419756}
#island_id: 3
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-1)%N][i%N]) + h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J[0, i % N, i // N] * h[site_nbr][i % N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2862100308641974}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (i-1+N)%N]
      if h[i][j] > 0:
        h_site = h[i][j]
        priorities[i*N+j][0] = h_site + sum([J[k,i,j]*h[site_nbrs[k]][j] for k in range(2)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        h_site = -h[i][j]
        priorities[i*N+j][0] = -h_site - sum([J[k,i,j]*h[site_nbrs[k]][j] for k in range(2)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011211419753086422}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -J[0,i%N,i//N]*h_site
      priorities[i][1] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = J[0,i%N,i//N]*h_site
      priorities[i][1] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.18731249999999994}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00664182098765432}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17770046296296324}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00768503086419753}
#island_id: 1
#version_generated: 2
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_energy = h[i//N][i%N]*2*h_site
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_energy += J[j,i%N,i//N]*h[site_nbr1][i%N]
      else:
        total_energy -= J[j,i%N,i//N]*h[site_nbr1][i%N]

    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011162037037037035}
#island_id: 2
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + total_h) / (1 + sum([J[k,i%N,i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + total_h) / (1 + sum([J[k,i%N,i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025217592592592596}
#island_id: 2
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or i % N == N - 1:
        h_site = -2*h_site
      elif (i // N) % 2 == 0:
        h_site *= -1
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000447067901234568}
#island_id: 0
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0), (-1,0), (0,1), (0,-1)]:
      if i % N + d[0] >= 0 and i % N + d[0] < N and i//N + d[1] >= 0 and i//N + d[1] < N:
        site_nbr = (i % N + d[0], i//N + d[1])
        h_site += J[(d[1]+1)%2,site_nbr[0],site_nbr[1]]*h[site_nbr[1]][site_nbr[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3413822530864187}
#island_id: 0
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if d == 0: # up
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif d == 1: # right
        site_nbr = (i % N + (i//N)%N) % N
      elif d == 2: # down
        site_nbr = (i % N + ((i//N+1)%N-1)) % N
      else: # left
        site_nbr = (i % N + ((i//N-1)%N-1)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J[d,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[d,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 0
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.608024691358095e-05}
#island_id: 3
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h,axis=0)
    site_magnetism = total_spin[i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - site_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001343364197530864}
#island_id: 3
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h[i//N][i%N])*J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1+h[i//N][i%N])*J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001448611111111111}
#island_id: 3
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i-N) % (N*N)
    site_down = (i+N) % (N*N)
    site_left = (i-1)%N*N + i//N
    site_right = ((i+1)%N)*N+i//N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, i%N]
      priorities[i][1] -= J[0, i//N, i%N]
    else:
      priorities[i][0] -= J[0, i//N, i%N]
      priorities[i][1] += J[0, i//N, i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, (i-1)%N] - J[0, i//N, (i+1)%N]
      priorities[i][1] -= J[0, i//N, (i-1)%N] + J[0, i//N, (i+1)%N]
    else:
      priorities[i][0] -= J[0, i//N, (i-1)%N] + J[0, i//N, (i+1)%N]
      priorities[i][1] += J[0, i//N, (i-1)%N] - J[0, i//N, (i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, (site_up)//N]*h[(site_up)//N][(site_up)%N]
      priorities[i][1] -= J[0, i//N, (site_up)//N]*h[(site_up)//N][(site_up)%N]
    else:
      priorities[i][0] -= J[0, i//N, (site_up)//N]*h[(site_up)//N][(site_up)%N]
      priorities[i][1] += J[0, i//N, (site_up)//N]*h[(site_up)//N][(site_up)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, (site_down)//N]*h[(site_down)//N][(site_down)%N]
      priorities[i][1] -= J[0, i//N, (site_down)//N]*h[(site_down)//N][(site_down)%N]
    else:
      priorities[i][0] -= J[0, i//N, (site_down)//N]*h[(site_down)//N][(site_down)%N]
      priorities[i][1] += J[0, i//N, (site_down)//N]*h[(site_down)//N][(site_down)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, (site_left)//N]*h[(site_left)//N][(site_left)%N]
      priorities[i][1] -= J[0, i//N, (site_left)//N]*h[(site_left)//N][(site_left)%N]
    else:
      priorities[i][0] -= J[0, i//N, (site_left)//N]*h[(site_left)//N][(site_left)%N]
      priorities[i][1] += J[0, i//N, (site_left)//N]*h[(site_left)//N][(site_left)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0, i//N, (site_right)//N]*h[(site_right)//N][(site_right)%N]
      priorities[i][1] -= J[0, i//N, (site_right)//N]*h[(site_right)//N][(site_right)%N]
    else:
      priorities[i][0] -= J[0, i//N, (site_right)//N]*h[(site_right)//N][(site_right)%N]
      priorities[i][1] += J[0, i//N, (site_right)//N]*h[(site_right)//N][(site_right)%N]

  return priorities




#score: {'data2D.txt': -0.0008628086419753096}
#island_id: 3
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008044753086419751}
#island_id: 0
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0 and j == 1 or h[i//N][i%N] < 0 and j == 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009054012345679016}
#island_id: 0
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_h + total_J) / abs(total_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_h + total_J) / abs(total_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2683205246913577}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[i//N][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(3):
      site_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_k][i%N]
      else:
        total_spin -= h[site_k][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01051033950617284}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= h_site - h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006899691358024694}
#island_id: 0
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(i+N-1)%N][i%N] if i % N != 0 else 0
    right_spin = h[(i-N+1)%N][i%N] if i % N != N-1 else 0
    up_spin = h[i//N][(i%N-1+N)%N] if i % N != 0 else 0
    down_spin = h[i//N][(i%N+1)%N] if i % N != N-1 else 0

    priorities[i][0] = h_site + J[0,i%N,i//N]*left_spin + J[2,i%N,i//N]*right_spin + J[3,i//N,i%N]*up_spin + J[1,i//N,i%N]*down_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00605324074074074}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, (i//N)*N+i%N]]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    if all(h[i//N][i%N]>0 for i in range(N**2)):
      priorities[i][0] = sum(h_sites)
      priorities[i][1] = -priorities[i][0]
    elif all(h[i//N][i%N]<0 for i in range(N**2)):
      priorities[i][0] = -sum(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      if sum(1 for j in range(N) if h[j][0]>0)>sum(1 for j in range(N) if h[j][0]<0):
        priorities[i][0] = sum(h_sites)
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum(h_sites)
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024591049382716042}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(4):
      site = (k % N + ((k//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site][i%N]
      else:
        h_site -= h[site][i%N]
      total_spin[k] = h_site

    priorities[i][0] = sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06342824074074078}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    total_h = h[i//N][i%N] + h_site
    
    priorities[i][1] = max(0, min(total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 2))
    priorities[i][0] = 2 - priorities[i][1]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013152777777777774}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        term = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + term
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - term
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0180766975308642}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        priorities[i][1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 2*h_site

  return(priorities)




#score: {'data2D.txt': 0.00062175925925926}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003226388888888889}
#island_id: 2
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += sum([J[k,i,j]*h[site_nbr,k] for k in range(4)]) + J[3,i,j]
        priorities[i*N+j][1] -= 2 * (sum([J[k,i,j]*h[site_nbr,k] for k in range(4)]) + J[3,i,j])
      else:
        priorities[i*N+j][0] -= sum([J[k,i,j]*h[site_nbr,k] for k in range(4)]) + J[3,i,j]
        priorities[i*N+j][1] += 2 * (sum([J[k,i,j]*h[site_nbr,k] for k in range(4)]) + J[3,i,j])
  return(priorities)




#score: {'data2D.txt': -0.002010339506172839}
#island_id: 3
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      j_idx = (k + i % N) % N
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += J[k, i%N, i//N]*h[j_idx][i//N]
        priorities[i][1] -= J[k, i%N, i//N]*h[j_idx][i//N]
      else:
        priorities[i][0] -= J[k, i%N, i//N]*h[j_idx][i//N]
        priorities[i][1] += J[k, i%N, i//N]*h[j_idx][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if total_h > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -total_h
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 0
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    priority_sum = sum(h_site for h_site in h_sites)
    priorities[i][0] = priority_sum
    priorities[i][1] = -priority_sum
  return(priorities)




#score: {'data2D.txt': -0.3430544753086409}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i % N + ((i//N-1)%2 - (k%2)) - 1) % N
      if k == 0:
        h_side = h[i//N][i%N]
      else:
        h_side = J[k-1,i%N,i//N]*h[site_nbr_k][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_side
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h_side
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004420833333333333}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if i // N + ((j-1) % 2 - 1) >= 0 and i // N + ((j-1) % 2 - 1) < N and i % N + (j-1) >= 0 and i % N + (j-1) < N:
        priorities[i][0] += J[j,i//N,i%N]*h[(i+N-1)%N][i%N]
        priorities[i][1] -= J[j,i//N,i%N]*h[(i+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_hamiltonian_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_hamiltonian_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_hamiltonian_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09821342592592604}
#island_id: 2
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[site_nbr][j]*J[0,i%N,j] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + 1
      priorities[i][1] = -2*h_site - 1
    else:
      priorities[i][0] = -h_site - 1
      priorities[i][1] = 2*h_site + 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 3
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 2
#version_generated: 2
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 2
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) % N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003742283950617276}
#island_id: 1
#version_generated: 2
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if priority_sum > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31028719135802396}
#island_id: 1
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    # Calculate the priority for spin up
    priority_up = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    # Calculate the priority for spin down
    priority_down = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(priority_up, priority_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(priority_up, priority_down)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001078858024691358}
#island_id: 0
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = sum([J[k,i%N,(i-1)%N]*h[(k+N-1)%N][(i-1)%N] for k in range(3)])
    right_spin = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    top_spin = sum([J[k,(i-1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    bottom_spin = sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + left_spin + top_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000160030864197531}
#island_id: 0
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)%N + (i%N-1)%N) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,site_nbr2,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,site_nbr2,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) - 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00018070987654320925}
#island_id: 3
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = []
  for i in range(N**2):
    spin_priority = (total_spin[i][0], -total_spin[i][1])
    priorities.append(spin_priority)
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029967592592592593}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, i%N, i%N-1]]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012757716049382718}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(site_nbr+N-1)%N][i%N] + J[2,i%N,i//N]*h[(site_nbr+N+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(site_nbr+N-1)%N][i%N] + J[2,i%N,i//N]*h[(site_nbr+N+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for j in range(3):
      total_energy += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00305108024691358}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = J[0,i%N,i//N]*h[site_nbr1][i%N]
    h_site2 = J[1,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.168375462962963}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    h_site += h[i//N][i%N]
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001688425925925926}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i//N,i%N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J[0,i//N,i%N]*-h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001372376543209877}
#island_id: 1
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N if k == 0 else (i % N + ((i//N+1)%2 - 1)) % N if k == 1 else (i // N + ((i%N-1)%N - N//2)) % N for k in range(4)]
    h_site = sum([h[site_nbrs[k]][i%N]*J[k,i//N,i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 2
#version_generated: 3
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07299459876543213}
#island_id: 0
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.01900725308641975}
#island_id: 0
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]*(2*h[site_nbr][i%N]-1)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]*(2*h[site_nbr][i%N]-1)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00378533950617284}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_sum
      priorities[i][1] = -site_sum
    else:
      priorities[i][0] = -site_sum
      priorities[i][1] = site_sum

  return(priorities)




#score: {'data2D.txt': -0.03153966049382716}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]
      if i%N == 0:
        priorities[i][0] += J[3,i//N,i%N]
      elif i%N == N-1:
        priorities[i][0] -= J[2,i//N,i%N]
    else:
      priorities[i][0] -= J[0,i//N,i%N]
      if i%N == 0:
        priorities[i][0] -= J[3,i//N,i%N]
      elif i%N == N-1:
        priorities[i][0] += J[2,i//N,i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004970679012345676}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + J_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - J_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02448719135802469}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i // N + ((i % N + j)%2 - 1)) % N
      h_site += J[j,i//N,i%N]*h[site_nbr_j][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013195987654320994}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_interactions = J[0,i%N,i//N]*h[site_nbr][i%N]
      for k in range(3):
        if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0):
          sum_interactions += J[k,i%N,i//N]*h[(i//N+k)%N][i%N]
      priorities[i][0] = h[site_nbr][i%N] + sum_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      sum_interactions = J[0,i%N,i//N]*h[site_nbr][i%N]
      for k in range(3):
        if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0):
          sum_interactions += J[k,i%N,i//N]*h[(i//N+k)%N][i%N]
      priorities[i][0] = -h[site_nbr][i%N] - sum_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 3
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    if magnetism > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008684722222222224}
#island_id: 3
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i % N + ((k+N-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 0
#version_generated: 2
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005538580246913582}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k == 0:
        site_nbr_north = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        site_nbr_east = (i // N + ((i % N+1-1)%2 - 1)) % N
      else:
        site_nbr_south = (i % N + ((i//N+1-1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_north][i%N] if k == 0 else h[site_nbr_east][i//N] if k == 1 else h[site_nbr_south][i%N]
      else:
        h_site -= h[site_nbr_north][i%N] if k == 0 else h[site_nbr_east][i//N] if k == 1 else h[site_nbr_south][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000991820987654321}
#island_id: 3
#version_generated: 3
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i//N+1)%N,i%N] * h[(i//N+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i//N+1)%N,i%N] * h[(i//N+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018379629629629578}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_spin = sum([J[k,i%N,i//N]*(-1 if k==0 else 1) for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.15123456790126e-05}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N),min((k+1)%N,i%N)] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N),min((k+1)%N,i%N)] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.05155293209876545}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  memo = {}
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if i not in memo:
      total_spin = [0, 0]
      for j in range(N):
        site_nbr_j = (j + ((site_nbr-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr_j][i%N]
        total_spin[1] -= 1 if h[i//N][i%N] > 0 else 1
      memo[i] = total_spin
    priorities[i][0] = memo[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0924970679012346}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[i//N][i%N] > 0 else -h[i//N][i%N]
    for k in range(3):
      j_nbr = ((i//N*4 + (k+1) + i%N - 2)%N)
      h_nbr = 0 if h[j_nbr][k%N] > 0 else -h[j_nbr][k%N]
      priorities[i][0] += J[k,i//N,j_nbr]*h_nbr
    priorities[i][0] += h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00021280864197530713}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, h[i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, h[i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0056569444444444445}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N]) * (2*h[i//N][i%N] - 1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025949074074074078}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + \
              sum([J[k,i%N,i//N]*h[(k-N+1)%N][i%N] for k in range(-1,2) if (k!=0 and 0<=i%N<N)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 1
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_up = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_down = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + (priority_up + priority_down) / 2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0014121913580246912}
#island_id: 1
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  # Calculate total magnetism at each site
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  # Calculate priority for each site based on total magnetism and interactions
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][1] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][1] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][1] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 1
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 1
#version_generated: 2
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h_sum = sum([h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h_sum + sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h_sum - sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002060648148148148}
#island_id: 1
#version_generated: 2
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if np.sum(h) > 0:
      priorities[i][0] = h_site + sum([J[0,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[0,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0029921296296296297}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0) + sum([np.sum(J[k,:,i//N]*h, axis=1) for k in range(3)])
    
    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_bias
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0286016975308642}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[j][site_nbr] if abs(i//N-j) + abs(i%N-site_nbr) == 1 else h[j][i%N] for j in range(N)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002796450617283951}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total = h_site
      for k in range(3):
        total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      total = -h_site
      for k in range(3):
        total -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': 0.0012606481481481481}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007557098765432098}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[i//N][i%N]
    total_priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_priority
      priorities[i][1] = total_priority
    else:
      priorities[i][0] = total_priority
      priorities[i][1] = -total_priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) % 2)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002621913580246924}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[site_nbr][i%N] - sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002313271604938272}
#island_id: 0
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[(k+N-1)%N][i%N] if J[k,i%N,i//N] > 0 else -h[(k+N-1)%N][i%N] for k in range(3)])
    spin_magnetism = h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_magnetism + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -spin_magnetism - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003216512345679013}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 3
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        if j == 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
      else:
        if j == 0:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01239212962962963}
#island_id: 3
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_k][i%N]
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_k][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort sites by priority
  sorted_indices = np.argsort(priorities)
  for i in range(N**2):
    if i % 2 == 0:
      priorities[sorted_indices[i]][0], priorities[sorted_indices[i+1]][0] = priorities[sorted_indices[i+1]][0], priorities[sorted_indices[i]][0]
  
  return(priorities)




#score: {'data2D.txt': 0.1548177469135805}
#island_id: 3
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      site = ((i + (k-1)%2) % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*total_spin[1] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*total_spin[1] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001662037037037035}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr1 = (i + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i+N+((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr,k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr,k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008729938271604934}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for j in range(3):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if i//N == site_nbr//N and abs(i%N-site_nbr%N) == 1:
        h_site += J[j,i%N,i//N]*h[site_nbr][i%N]
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 2
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 1
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply a correction to ensure the priority sums up to 0
  priorities -= priorities.sum(axis=1, keepdims=True)

  return(priorities)




#score: {'data2D.txt': 0.05864645061728398}
#island_id: 1
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term based on the site's own magnetism
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] += h_site
    priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': 0.0017041666666666663}
#island_id: 3
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003615586419753087}
#island_id: 3
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[2,i//N,i%N]+J[3,i//N,i%N])*h[i//N][i%N] + J[1,i//N,i%N]*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[2,i//N,i%N]+J[3,i//N,i%N])*h[i//N][i%N] - J[1,i//N,i%N]*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002424845679012347}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N > 0 and J[0, (i-1) % N, i // N] > 0:
        h_site -= J[0, (i-1) % N, i // N]*h[(i//N + 1)%N][i%N]
      elif i % N < N - 1 and J[3, i % N, i // N] > 0:
        h_site += J[3, i % N, i // N]*h[(i//N-1)%N][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0016220679012345668}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(i+1)%N, (i+N-1)%N]:
      if J[1,(d-i)//N,i//N] > 0:
        h_site += J[1,(d-i)//N,i//N]*h[d][i%N]
      else:
        h_site -= J[1,(d-i)//N,i//N]*h[d][i%N]

    for d in [(i+1)%N, (i-1+N)%N]:
      if J[2,(d-i)//N,i//N] > 0:
        h_site += J[2,(d-i)//N,i//N]*h[d][i%N]
      else:
        h_site -= J[2,(d-i)//N,i//N]*h[d][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00038070987654320956}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      h_site = h[i][site_nbr] if J[0,i,j] > 0 else -h[i][site_nbr]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += h_site + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] -= priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] -= h_site - sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0015637345679012354}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i//N,i%N]+J[2,i//N,i%N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i//N,i%N]+J[2,i//N,i%N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007834876543209875}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total = 0
    if h[i//N][i%N] > 0:
      for k in range(3):
        total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      for k in range(3):
        total += -J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    h_site = sum([J[0,i%N,i//N]*h[j%N][i//N] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004030401234567901}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(h[j] for j in range(N))])
    for k in range(3):
      if J[k,i//N,i%N] > 0:
        total_spin += h[(k+N-1)%N]
      else:
        total_spin -= h[(k+N-1)%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h_site for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = h[site_nbr][i%N]
      interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = -h[site_nbr][i%N]
      interaction_sum = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias + interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014649691358024684}
#island_id: 1
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j in site_nbrs:
      if i!=j and J[0,j//N,j%N] > 0:
        h_site += J[1,i//N,j//N]*h[j//N][j%N]
      else:
        h_site -= J[1,i//N,j//N]*h[j//N][j%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001002932098765431}
#island_id: 1
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 1
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.014612499999999999}
#island_id: 0
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] * j > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if J[0,k,i//N]%N==j else -J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if J[0,k,i//N]%N==j else -J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.03255632716049382}
#island_id: 0
#version_generated: 2
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (0,-1), (1,0), (-1,0)]:
      if J[d[0],i//N,i%N]*h[(i//N+d[0])%N,(i+d[1])%N] > 0:
        h_site += J[d[0],i//N,i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr2][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    neighbor_interactions = sum([J[k, i%N, i//N]*magnetism for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = h_site + neighbor_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0037665123456790115}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(4):
      k = (j-1)%4
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[(k+N-1)%N][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[(k+N-1)%N][i%N]
        total_spin[1] += 1

    priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*total_spin[0] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_j][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001936265432098765}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006202932098765432}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i//N,i//N] + J[2,i//N,i//N]) * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i//N,i//N] + J[2,i//N,i//N]) * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003480092592592593}
#island_id: 3
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.05972824074074074}
#island_id: 1
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[site_nbr1][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[site_nbr2][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008498456790123454}
#island_id: 1
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[site_nbr2][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*h[site_nbr2][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001541512345679012}
#island_id: 1
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0),(-1,0),(0,1),(0,-1)]:
      if i % N + d[0] >= 0 and i % N + d[0] < N and i//N + d[1] >= 0 and i//N + d[1] < N:
        h_nbr = J[d[0],i%N,i//N]*h[(i//N+d[1])%N][i%N+d[0]]
        if h[i//N][i%N] > 0:
          priorities[i][0] += h_site + h_nbr
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site - h_nbr
          priorities[i][1] += 1

    return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -7.608024691357984e-05}
#island_id: 2
#version_generated: 3
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006970679012345678}
#island_id: 1
#version_generated: 2
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities
  priorities = np.sort(priorities, axis=0)

  return(priorities)




#score: {'data2D.txt': 0.3287841049382707}
#island_id: 1
#version_generated: 2
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = [0, 0]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbrs[j]][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbrs[j]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0]
      priorities[i][1] = -total_spin[0]
    else:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018288580246913586}
#island_id: 0
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = -h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 7.145061728395091e-05}
#island_id: 0
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((i//N-j)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    priorities[i][0] = h_site + np.sum([J[k,i%N,j]*total_spin for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 0
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.10594274691358035}
#island_id: 0
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0 and (j == 0 or J[1,i%N,i//N] < 0) or (j == 1 and J[1,i%N,i//N] >= 0):
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006594135802469136}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00839645061728395}
#island_id: 1
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i // N + ((i % N + k) % N - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(3):
      sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019050925925925934}
#island_id: 2
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -h_site
    priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0011791666666666671}
#island_id: 1
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(1,0),(-1,0),(0,1),(0,-1)]:
      x,y = (i//N)%N + direction[0], i%N + direction[1]
      if 0 <= x < N and 0 <= y < N:
        h_sum = sum([J[k,i//N,x]*h[(k+N-1)%N][y] for k in range(4)])
        if J[0,i%N,i//N] > 0:
          priorities[i][0] += h_site + h_sum
          priorities[i][1] -= 2*(priorities[i][0])
        else:
          priorities[i][0] -= h_site - h_sum
          priorities[i][1] += 2*(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.13756250000000006}
#island_id: 1
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - abs(h_site2)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + abs(h_site2)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0: 
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -priorities[i][1-j]
  return(priorities)




#score: {'data2D.txt': -0.0029692901234567924}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006594135802469136}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002796450617283951}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total = h_site
      for k in range(3):
        total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      total = -h_site
      for k in range(3):
        total -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 3
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i // N, (i % N) + 1)
    site_down = (i // N, i % N - 1)
    site_left = ((i // N + 1) % N, i % N)
    site_right = ((i // N - 1) % N, i % N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011584876543209882}
#island_id: 0
#version_generated: 2
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1) % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.33541342592592494}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      x = (i//N + ((d-1)%2 - 1)) % N
      y = (i % N + ((d+1)%2 - 1)) % N
      if J[d,i//N,i%N] > 0:
        h_sum = h[x][y]
      else:
        h_sum = -h[x][y]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_sum
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h_sum
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.23261033950617288}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site) - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.87345679012348e-05}
#island_id: 1
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N and i%N != (k+1)%N:
        h_site += 2*J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012878086419753115}
#island_id: 1
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011335648148148149}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Improved version: prioritize spins that align with local magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0012266975308641967}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i==k*N+k:
        continue
      if J[k,i%N,i//N]>0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0027195987654320994}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017745370370370371}
#island_id: 1
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr1][i%N] + J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr1][i%N] - J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008973765432098784}
#island_id: 2
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 2
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006055401234567902}
#island_id: 2
#version_generated: 3
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      site_nbr_d = (site_nbr + ((d-1)%2 - 1)) % N
      if J[d,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[d,i%N,i//N]*h[site_nbr_d][i%N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[d,i%N,i//N]*h[site_nbr_d][i%N]
        priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    if site_mag > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 3
#version_generated: 3
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin += np.array([h_site + h_site_j, -h_site - h_site_j])

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0017041666666666663}
#island_id: 3
#version_generated: 3
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14355787037037035}
#island_id: 1
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (1,0)]:
      x, y = i // N, i % N
      if 0 <= x + d[0] < N and 0 <= y + d[1] < N:
        h_sum = sum([J[k,x,y]*h[(k+N-1)%N][y] for k in range(3)])
        if J[0,x,y] > 0:
          priorities[i][0] += h_site + h_sum
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site - h_sum
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 4.089506172839547e-05}
#island_id: 1
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002754629629629625}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012094135802469138}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and h[site_nbr][i%N] > 0:
        priorities[i][0] = 2*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] > 0 and h[site_nbr][i%N] < 0:
        priorities[i][0] = 2*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] < 0 and h[site_nbr][i%N] > 0:
        priorities[i][0] = -2*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = -2*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

    else:
      if J[0,i%N,i//N] > 0 and h[site_nbr][i%N] > 0:
        priorities[i][0] = -2*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] > 0 and h[site_nbr][i%N] < 0:
        priorities[i][0] = -2*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] < 0 and h[site_nbr][i%N] > 0:
        priorities[i][0] = 2*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = 2*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 2
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    if total_h > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006444907407407408}
#island_id: 2
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010609567901234567}
#island_id: 2
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[0,j,i//N] > 0:
        h_site_j = h[site_nbr_j][i//N]
      else:
        h_site_j = -h[site_nbr_j][i//N]

      total_priority[0] += h_site + h_site_j
      total_priority[1] -= (h_site+h_site_j)

    priorities[i][0] = total_priority[0]
    priorities[i][1] = -total_priority[0]

  return(priorities)




#score: {'data2D.txt': -2.268518518518488e-05}
#island_id: 2
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006332870370370371}
#island_id: 3
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        site_h += h[(k+N-1)%N][i%N]
      else:
        site_h -= h[(k+N-1)%N][i%N]

    if site_h > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i//N==d%N or (i//N+d)%2!=(i//N+d+1)%2:
        continue
      if J[d,i//N,i%N]>0:
        h_site += sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0030828703703703712}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i < N or (J[0,i%N,i//N] > 0 and J[2,i%N,i//N] > 0):
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) + (i % N - 1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14429305555555574}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N // 2 - 1:
        priorities[i][1] = priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N // 2 - 1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007729938271604939}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
    else:
      priorities[i][0] = -(1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = (1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site

  return(priorities)




#score: {'data2D.txt': -0.002481018518518519}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_k = h[site_k][i%N]
      else:
        h_k = -h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h_k for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h_k for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1452205246913582}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002665586419753086}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = max(h_site, sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h_site, -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2920458333333327}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N] == h[i//N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N] == h[i//N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19955725308641972}
#island_id: 1
#version_generated: 2
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      site_energy = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      site_energy = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002411574074074074}
#island_id: 1
#version_generated: 2
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+N-1)%N, (i+N+1)%N if i % N != 0 else (i+N-2)%N, ((i//N)-1)%N if i % N == 0 else ((i//N)+1)%N]
    h_neighbors = [h[s][i%N] for s in site_nbrs]
    J_neighbors = [J[k,i%N,s] for k, s in enumerate(site_nbrs)]
    
    priorities[i][0] = h_site + sum([j*h for j, h in zip(J_neighbors, h_neighbors)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00350108024691358}
#island_id: 1
#version_generated: 2
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_interaction = 0
    for j in range(3):
      if i//N == (j+N-1)%N or i % N == (j+N-1)%N:
        sum_interaction += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]
      elif abs((j+N-1)%N - i//N) + abs((j+N-1)%N - i % N) == 1:
        sum_interaction += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0051754629629629624}
#island_id: 1
#version_generated: 2
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site) - sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005640432098765429}
#island_id: 0
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N-1)%2 + 1)) % N,
           (i//N + ((i%N-1)%2 - 1)) % N,
           (i//N + ((i%N-1)%2 + 1)) % N]
    
    site_nbr_values = [h[s][i%N] for s in site_nbrs]
    
    if sum(site_nbr_values) > 0:
      priorities[i][0] = np.mean([J[0,s,i//N]*v for s,v in zip(site_nbrs, site_nbr_values)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.mean([J[0,s,i//N]*v for s,v in zip(site_nbrs, site_nbr_values)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011405864197530863}
#island_id: 2
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007976851851851853}
#island_id: 2
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - J[2,i%N,i//N]*(h[i//N][i%N] + h_site)
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + J[2,i%N,i//N]*(h[i//N][i%N] + h_site)

  return(priorities)




#score: {'data2D.txt': -0.00044429012345679}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022967592592592592}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2,i//N,i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2,i//N,i%N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006152777777777772}
#island_id: 0
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term to the priority that is proportional to the number of nearest neighbors with the same spin
  for i in range(N**2):
    site_nbrs = [(i % N + (j-1)%2 - 1) % N for j in range(3)]
    same_spin_count = sum([int(h[site_nbr][i%N] == h[i//N][i%N]) for site_nbr in site_nbrs])
    priorities[i][0] += same_spin_count
    priorities[i][1] -= same_spin_count

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18323472222222223}
#island_id: 0
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N + (i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_neighbor = h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
      h_neighbor = -h[site_nbr2][i%N]

    if (h[i//N][i%N] + h_site + h_neighbor) > 0:
      priorities[i][0] = 1
      priorities[i][1] = -3
    else:
      priorities[i][0] = -1
      priorities[i][1] = 3

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017692901234567916}
#island_id: 1
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h[site_nbrs[j]][i%N] + J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for j,k in zip(range(3),range(3))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h[site_nbrs[j]][i%N] + J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for j,k in zip(range(3),range(3))])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 1
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002927623456790123}
#island_id: 0
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      j_plus = (k+1) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_nbr][j_plus]
        priorities[i][1] -= -priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_nbr][j_plus]
        priorities[i][1] += -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000674845679012346}
#island_id: 0
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N] if J[0,i%N,i//N] > 0 else -h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbor_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(3):
        site = (i % N + ((k-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          total_spin += h[site][i%N]
        else:
          total_spin -= h[site][i%N]
      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005372685185185185}
#island_id: 3
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = 0
    for k in range(4):
      nn_site = (i % N + ((k-1)%2)*((i//N-1)//2*N + i//N) % N)
      if J[k,i//N,nn_site//N] > 0:
        sum_nn += h[nn_site//N][nn_site%N]
      else:
        sum_nn -= h[nn_site//N][nn_site%N]

    priorities[i][0] = h_site + sum_nn
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012319444444444446}
#island_id: 1
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in [0,1,3]]
    
    if all(J[0,k,i//N] > 0 for k in site_nbrs):
      h_site = sum([h[k][i%N]*J[0,k,i//N] for k in site_nbrs])
    elif all(J[0,k,i//N] < 0 for k in site_nbrs):
      h_site = -sum([h[k][i%N]*J[0,k,i//N] for k in site_nbrs])
    else:
      h_site = sum([abs(h[k][i%N])*J[0,k,i//N] for k in site_nbrs])
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.620370370370372e-05}
#island_id: 1
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N+1,i//N-1,i%N]]
    site_nbr_h = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    h_site = sum([J[0,i%N,i//N]*h[i//N][i%N] for _ in range(4)]) + np.sum(site_nbr_h)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001044598765432099}
#island_id: 1
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020359567901234595}
#island_id: 3
#version_generated: 3
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      sitenbr = (i % N + ((k-1)%2 - 1)) % N
      if J[0,i%N,k] > 0:
        total_spin += h[sitenbr][i%N]
      else:
        total_spin -= h[sitenbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0003325617283950621}
#island_id: 1
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = J[1,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004983179012345672}
#island_id: 3
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1] - interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0] + interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 3
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    priority_total = sum([J[k,i%N,i//N]*magnetism for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + priority_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([j for j in range(N) if J[0,i%N,j]%2 == i//N%2])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([j for j in range(N) if J[0,i%N,j]%2 == i//N%2])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014733024691358024}
#island_id: 3
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N > 0 and i // N < N-1: 
        if J[2,(i+1)%N,i//N] > 0:
          priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
      elif i % N == 0 and i // N < N-1: 
        if J[2,N-1,i//N] > 0:
          priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
      elif i % N == N-1 and i // N < N-1: 
        if J[2,0,i//N] > 0:
          priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
      else: 
        if J[2,(i+1)%N,i//N] > 0:
          priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3023115740740734}
#island_id: 3
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(3):
      site_nbr_k = (site_nbr + ((k+1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site_nbr_k][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19955725308641972}
#island_id: 0
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priority_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      priority_sum = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23186466049382715}
#island_id: 0
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_neighbor = h[(k+N-1)%N][i%N]
      else:
        h_neighbor = -h[(k+N-1)%N][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= (1+2*h[site_nbr][i%N]+h_neighbor)
      else:
        priorities[i][0] -= h_site - h_neighbor
        priorities[i][1] += (1-2*h[site_nbr][i%N]-h_neighbor)

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_nn
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006296450617283951}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] -= J[0,i//N,i%N]*h[site_nbr][i%N]
    else:
      priorities[i][0] -= J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] += J[0,i//N,i%N]*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.059343055555555566}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]) > 0:
      h_site = sum([abs(h[site_nbr][i%N]) for site_nbr in site_nbrs])
    else:
      h_site = -sum([abs(h[site_nbr][i%N]) for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += J[0,i%N,j]
        total_spin[i*N+j][1] -= J[0,i%N,j]
      else:
        total_spin[i*N+j][0] -= J[0,i%N,j]
        total_spin[i*N+j][1] += J[0,i%N,j]

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0]
    else:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0024266975308641983}
#island_id: 3
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k, i%N, (k+N-1)%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004594135802469135}
#island_id: 3
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002743055555555559}
#island_id: 3
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k, i%N, (k+N-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004223765432098773}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i//N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00261466049382716}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1) + k) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h_site + h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site - h[site_nbr][i%N]
        total_spin[1] += 1

    if total_spin[2] > total_spin[3]:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[2] - sum([J[k,i%N,i//N]*h[(k+N-3)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002391820987654321}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_neighbor = (i % N + ((j-1)%N - N//2)) % N
      if h[i//N][j] > 0:
        total_spin[0] += h_site + J[0,j,i//N]*h[site_neighbor][j]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site - J[0,j,i//N]*h[site_neighbor][j]
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0017739197530864193}
#island_id: 2
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k%2 == 0 else -J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024896604938271613}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([priorities[j][1] for j in range(i)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([priorities[j][1] for j in range(i)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002110956790123457}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    h_site = h[site_nbr1][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr1][i%N]
    site_nbr3 = (site_nbr1 + ((site_nbr1-site_nbr2)%N - N//2)) % N
    site_nbr4 = (site_nbr2 + ((site_nbr2-site_nbr1)%N - N//2)) % N
    priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr1][i%N] + J[1,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = [0,0]
    for j in range(3):
      if h[site_nbrs[j]][i%N] > 0:
        total_spin[0] += J[j,i//N,i%N]
        total_spin[1] -= J[j,i//N,i%N]
      else:
        total_spin[0] -= J[j,i//N,i%N]
        total_spin[1] += J[j,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010297839506172844}
#island_id: 0
#version_generated: 2
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N]) * (h[i//N][i%N] if J[0,i%N,i//N] > 0 else -h[i//N][i%N])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0028168209876543223}
#island_id: 0
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011229938271604936}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[3,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[3,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07870725308641979}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site*total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    site_sum_J = sum([J[k,i%N,i//N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020498456790123453}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs,range(3))]
    priorities[i][0] = sum([h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for h_site, (site_nbr, k) in zip(h_sites,zip(site_nbrs,range(3)))])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0037328703703703695}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N + i%N) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,site_nbr2,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00019398148148148174}
#island_id: 3
#version_generated: 3
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1),(0,-1),(1,0),(-1,0)]:
      if i % N + d[0] >= 0 and i % N + d[0] < N and (i // N) * N + i % N + d[1] >= 0 and (i // N) * N + i % N + d[1] < N:
        site_nbr = (i % N + d[0] + ((i//N-1)%2 - 1)) % N
        h_site += J[0,i%N+d[0],i//N+d[1]]*h[site_nbr][i%N+d[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016563271604938259}
#island_id: 3
#version_generated: 3
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k, i%N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 7.330246913580274e-05}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    site_nbrs.sort()
    
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016785493827160488}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      nbr_i, nbr_j = (i % N + ((k-1)%2 - 1)) % N, i//N
      if J[k,i%N,i//N] > 0:
        h_nbr = h[nbr_i][nbr_j]
      else:
        h_nbr = -h[nbr_i][nbr_j]
      priorities[i][0] += h_site + h_nbr
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[j][i%N] for j in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005856481481481486}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % N - N//2)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007260802469135795}
#island_id: 2
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[site_k][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012263888888888895}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j==0: 
        site_nbr_up = (i % N + ((i//N-1)%2)) % N
        site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
      elif j==1: 
        site_nbr_left = (max(0, i % N - 1), min(N-1, i // N))
        site_nbr_right = (min(N-1, i % N + 1), i // N)
      elif j==2: 
        site_nbr_up_left = ((i % N - 1 + (i//N-1)%2 - 1) % N, min(N-1, i // N))
        site_nbr_down_right = ((min(N-1, i % N + 1) + (i//N+1)%2 - 1) % N, max(0, i // N))
      elif j==3: 
        site_nbr_up_right = ((min(N-1, i % N + 1) + (i//N-1)%2 - 1) % N, min(N-1, i // N))
        site_nbr_down_left = ((max(0, i % N - 1) + (i//N+1)%2 - 1) % N, max(0, i // N))

      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] += -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015884259259259254}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0:
        site_nbr_x = (i % N + ((i//N-1)%2 - 1)) % N
        site_nbr_y = i // N
      elif k == 1:
        site_nbr_x = (i % N + ((i//N+1)%2 - 1)) % N
        site_nbr_y = (i // N + 1) % N
      elif k == 2:
        site_nbr_x = (i % N + ((i//N-1)%2 - 1)) % N
        site_nbr_y = (i // N + 1) % N
      else:
        site_nbr_x = (i % N + ((i//N+1)%2 - 1)) % N
        site_nbr_y = i // N

      if h[site_nbr_y][site_nbr_x] > 0:
        h_site += J[k, i%N, i//N]*h[site_nbr_y][site_nbr_x]
      else:
        h_site -= J[k, i%N, i//N]*h[site_nbr_y][site_nbr_x]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002038425925925927}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0), (-1,0), (0,1), (0,-1)]:
      if i % N + d[0] < 0 or i % N + d[0] >= N or i // N + d[1] < 0 or i // N + d[1] >= N:
        continue
      site_nbr = (i % N + d[0], i // N + d[1])
      if J[0,site_nbr[0],site_nbr[1]] > 0:
        h_site += J[0,i%N,i//N]*h[site_nbr[1]][site_nbr[0]]
      else:
        h_site -= J[0,i%N,i//N]*h[site_nbr[1]][site_nbr[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 3
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.26230169753086385}
#island_id: 2
#version_generated: 3
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N] * 2
    
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]
        
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.014953240740740741}
#island_id: 0
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if sum([J[k,i%N,i//N] for k in range(3)]) > 0:
        priorities[i][0] = -h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        if J[2,i%N,i//N] > 0:
          priorities[i][0] = h_site + J[2,i%N,i//N]*h[(i+N-1)%N][i%N]
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = -h_site - J[2,i%N,i//N]*h[(i+N-1)%N][i%N]
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007162037037037028}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += h[(k+N-1)%N][i%N]
      else:
        h_site -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / (1 + np.sum(np.abs(J)))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / (1 + np.sum(np.abs(J)))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022402777777777777}
#island_id: 1
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i//N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004669598765432081}
#island_id: 1
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0] - 2*total_spin[1]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0] + 2*total_spin[1]

  return(priorities)




#score: {'data2D.txt': 0.00017669753086419716}
#island_id: 2
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N*N,2))
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      total_spin[i][0] += h_site
      if h[i//N][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(total_spin[:,0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin[:,0])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016572530864197525}
#island_id: 2
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, i//N] * h[(site_nbr+1)%N][i%N] + J[2, i%N, i//N] * h[(site_nbr+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, i//N] * h[(site_nbr+1)%N][i%N] - J[2, i%N, i//N] * h[(site_nbr+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.010084722222222222}
#island_id: 2
#version_generated: 3
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if ((i + k) % N == i) or (j == 0 and k != 0) else -h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 2
#version_generated: 3
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00454706790123455}
#island_id: 2
#version_generated: 3
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020751543209876545}
#island_id: 3
#version_generated: 3
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[j,i//N,i%N]*h[i//N][i%N]
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[j,i//N,i%N]*h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 3
#version_generated: 3
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + total_energy) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + total_energy) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + site_interaction_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + site_interaction_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028168209876543223}
#island_id: 0
#version_generated: 2
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -2.3611111111111026e-05}
#island_id: 0
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbrs.insert(0, (i % N + ((i//N-1)%2 - 1)) % N)
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 0
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i+N*k)%N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009202160493827155}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term to favor same-spin neighbors
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N-1) % N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += sum([J[k,site_nbr1,k]*h[(k+N-1)%N][site_nbr1] for k in range(3)])
      priorities[i][1] -= sum([J[k,site_nbr2,k]*h[(k+N-1)%N][site_nbr2] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,site_nbr1,k]*h[(k+N-1)%N][site_nbr1] for k in range(3)])
      priorities[i][1] += sum([J[k,site_nbr2,k]*h[(k+N-1)%N][site_nbr2] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities by distance from zero
  sorted_priorities = np.zeros_like(priorities)
  for i in range(N**2):
    sorted_priorities[i] = priorities[i, np.argsort(np.abs([p for p in priorities[i]]))[::-1]]

  return(sorted_priorities)




#score: {'data2D.txt': -0.00035262345679012286}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr2][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr2][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016825617283950615}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(3))]
    
    if np.prod([1 if x > 0 else -1 for x in h_sites]) > 0:
      priorities[i][0] = sum(h_sites) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000893364197530864}
#island_id: 0
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           ((i//N-1)%N + (i%N)) % N,
           ((i//N+1)%N + (i%N)) % N]
    h_site = np.sum([h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005381172839506171}
#island_id: 1
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (0,-1), (1,0), (-1,0)]:
      j_here = i % N + d[1]
      j_neighbor = site_nbr + d[1]
      if 0 <= j_here < N and 0 <= j_neighbor < N:
        J_val = J[d[0],j_here,j_neighbor]
        h_site += J_val * (h[i//N][j_here] - h[i//N][j_neighbor])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003127006172839507}
#island_id: 1
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (i % N + ((i//N-2)%2 - 1)) % N
    if J[0,i%N,(i//N+1)%N] > 0:
      h_site_1 = h[site_nbr_1][(i+N-1)%N]
    else:
      h_site_1 = -h[site_nbr_1][(i+N-1)%N]

    site_nbr_2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,(i+N-1)%N,i//N] > 0:
      h_site_2 = h[site_nbr_2][i%N]
    else:
      h_site_2 = -h[site_nbr_2][i%N]

    site_nbr_3 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,(i+N-1)%N,i//N] > 0:
      h_site_3 = h[site_nbr_3][(i+N-1)%N]
    else:
      h_site_3 = -h[site_nbr_3][(i+N-1)%N]

    site_nbr_4 = (i % N + ((i//N+2)%2 - 1)) % N
    if J[0,(i+N-1)%N,i//N] > 0:
      h_site_4 = h[site_nbr_4][i%N]
    else:
      h_site_4 = -h[site_nbr_4][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h_site_2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012007716049382716}
#island_id: 1
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (1,0), (-1,0)]:
      jnbr = (i//N + direction[0], i % N + direction[1])
      if 0 <= jnbr[0] < N and 0 <= jnbr[1] < N:
        priorities[i][0] += J[direction[0],jnbr[0],jnbr[1]]*h[jnbr[0]][jnbr[1]]
        priorities[i][1] -= J[direction[0],jnbr[0],jnbr[1]]*h[jnbr[0]][jnbr[1]]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -0.0013427469135802472}
#island_id: 2
#version_generated: 3
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012307098765432089}
#island_id: 2
#version_generated: 3
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(2):
      total_spin = 0
      for j in range(N):
        site_nbr1 = (i % N + ((i//N-j)%2 - 1)) % N
        if J[d,i%N,j] > 0:
          total_spin += h[site_nbr1][j]
        else:
          total_spin -= h[site_nbr1][j]

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + total_spin
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - total_spin
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001246141975308642}
#island_id: 3
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + h_sum) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + h_sum) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00668533950617284}
#island_id: 3
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for j in range(4):
        if j == 0 and J[0,i%N,i//N] < 0:
          priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][i%N]
        elif j == 1 and J[1,i%N,i//N] < 0:
          priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][i%N]
        elif j == 2 and J[2,i%N,i//N] < 0:
          priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][i%N]
    else:
      for j in range(4):
        if j == 0 and J[0,i%N,i//N] > 0:
          priorities[i][0] -= J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] += J[j,i%N,i//N]*h[site_nbr][i%N]
        elif j == 1 and J[1,i%N,i//N] > 0:
          priorities[i][0] -= J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] += J[j,i%N,i//N]*h[site_nbr][i%N]
        elif j == 2 and J[2,i%N,i//N] > 0:
          priorities[i][0] -= J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] += J[j,i%N,i//N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[i//N][i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = 2*h_site + site_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008286882716049384}
#island_id: 0
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -h_site
    priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 3
#version_generated: 3
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003260802469135788}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  def calculate_priority(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    return priority

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = calculate_priority(i//N, i%N)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -calculate_priority(i//N, i%N)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003960339506172839}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k-1)%N - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr_k][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N] * h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00046373456790123503}
#island_id: 0
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i//N,i%N]*h[i//N,(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i//N,i%N]*h[i//N,(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009893518518518509}
#island_id: 0
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i//N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i//N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    if sum(total_spin[i]) > N**2/2:
      priorities[i][0] = -N**2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = N**2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07652700617283954}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr1 = (i % N + ((i // N - 1) % 2 - 1)) % N
    site_nbr2 = ((i // N + (i % N - 1) % N - N//2) % N)
    
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    priority = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = priority
      priorities[i][1] = -priority
    else:
      priorities[i][0] = -priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018050925925925938}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][k] for j,k in [(site_nbr, k) for k in range(N)]]) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([h[j][k] for j,k in [(site_nbr, k) for k in range(N)]]) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0008455246913580245}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = max(-1, min(1, spin_bias + J[0,i%N,i//N]*h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(max(-1, -spin_bias - J[0,i%N,i//N]*h[site_nbr][i%N]), 1)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006011574074074073}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if i % N == 0:
      x = i // N
      y = 0
    elif i % N == N-1:
      x = i // N
      y = N-1
    else:
      x = (i//N + ((i%N-1)%2 - 1)) % N
      y = i % N

    site_nbr = (x + ((y-1)%2 - 1)) % N
    if J[0,x,y] > 0:
      h_site = h[site_nbr][y]
    else:
      h_site = -h[site_nbr][y]

    if h[x][y] > 0:
      priorities[i][0] = h_site + sum([J[k,x,y]*h[(k+N-1)%N][y] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,x,y]*h[(k+N-1)%N][y] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005711419753086418}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1)%N, ((i+N-1)%N)]
    sum_neighbors = sum([J[k,i//N,i%N]*h[j][i%N] for j,k in zip(neighbors,[0,2,-1])])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002250462962962963}
#island_id: 0
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004646604938271596}
#island_id: 0
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1),(1,0)]:
      site_nbr2 = (i % N + ((i//N+d[1])%2 - 1)) % N
      if J[d[0],i%N,i//N] > 0:
        h_site += J[d[0],i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[d[0],i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.330246913580274e-05}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sum = sum([h[site][i%N] for site in site_nbrs])
    J_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k%2]][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sum + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00041188271604938165}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site = h[site_nbrs[k]][i%N]
      else:
        h_site = -h[site_nbrs[k]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h_site for _ in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_site for _ in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.01583070987654322}
#island_id: 0
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_neighbors_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if np.sum(site_neighbors_spin) > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*site_neighbor for k, site_neighbor in enumerate(site_neighbors_spin)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.15865231481481482}
#island_id: 0
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00027978395061728446}
#island_id: 0
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0, i%N, i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0, i%N, i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006433641975308641}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    total_spin = np.zeros(2)
    
    for j in range(N**2):
      site_diff = abs((j % N) - (i % N)) + abs((j//N) - (i//N))
      
      if site_diff > 1:
        continue
      
      neighbor_nbr = (j % N + ((j//N-1)%2 - 1)) % N
      total_spin[0] += J[site_diff,i%N,j//N]*h[neighbor_nbr][j%N]
      total_spin[1] -= total_spin[0]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002427314814814815}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[site][i%N] if J[k,i//N,i%N] > 0 else -h[site][i%N] for site, k in zip(site_nbrs, [0, 1])])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0020199074074074073}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      if h_site > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h_site > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.022211265432098764}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0014825617283950614}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+j][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+j][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004194907407407407}
#island_id: 0
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    site_nbr3 = (i % N + ((i//N+1)%2)) % N
    if J[2,i%N,i//N] > 0:
      h_site3 = h[site_nbr3][i%N]
    else:
      h_site3 = -h[site_nbr3][i%N]

    site_nbr4 = (i % N + ((i//N-1)%2)) % N
    if J[3,i%N,i//N] > 0:
      h_site4 = h[site_nbr4][i%N]
    else:
      h_site4 = -h[site_nbr4][i%N]

    priorities[i][0] = h_site + h_site2 + h_site3 + h_site4
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.exp(2*h_site)) / ((1 + np.exp(2*h_site)) + (1 + np.exp(-2*h_site)))
      priorities[i][1] = 1 - priorities[i][0]
    else:
      priorities[i][0] = (1 + np.exp(-2*h_site)) / ((1 + np.exp(2*h_site)) + (1 + np.exp(-2*h_site)))
      priorities[i][1] = 1 - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00019429012345679019}
#island_id: 3
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0, i % N, i // N] * (2 * h[site_nbr][i % N])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J[0, i % N, i // N] * (2 * h[site_nbr][i % N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003501697530864198}
#island_id: 0
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[0, i//N, i%N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[0, i//N, i%N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 1
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_energy + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      spin_energy = sum([J[k,i%N,i//N]*(-h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -spin_energy - J[0,i%N,i//N]*(-h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002032253086419753}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,site_nbr2, site_nbr1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,site_nbr2, site_nbr1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013035493827160496}
#island_id: 2
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (0,-1), (1,0), (-1,0)]:
      x, y = i//N + d[0], i%N + d[1]
      if 0 <= x < N and 0 <= y < N:
        h_site += J[d[1],i//N,i%N]*h[x][y]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -1.712962962962933e-05}
#island_id: 1
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_site1 = ((i//N-1)%N + (i % N)) % N
    nn_site2 = ((i//N+1)%N + (i % N)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[0,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[0,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010884259259259258}
#island_id: 3
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[site_nbr][k] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015084876543209873}
#island_id: 2
#version_generated: 3
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N and i%N != (k+N-1)%N:
        J_val = J[k,i%N,i//N]
      elif i//N != (k+N-1)%N and i%N == (k+N-1)%N:
        J_val = J[k,i//N,k]
      else:
        J_val = 0

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] -= J_val - priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] += J_val - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017669753086419664}
#island_id: 2
#version_generated: 3
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0),(-1,0),(0,1),(0,-1)]:
      site_nbr = (i % N + d[0]) % N
      if J[0,i%N,i//N] > 0:
        h_site += J[0,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[0,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31269583333333256}
#island_id: 2
#version_generated: 3
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = 1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.06371188271604941}
#island_id: 2
#version_generated: 3
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if J[0,i%N,i//N] > 0:
      h_site += h[i//N][i%N]
    else:
      h_site -= h[i//N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.0013983024691358033}
#island_id: 2
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]+J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]+J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2855942901234563}
#island_id: 2
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the priority based on the site's magnetism
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.007825462962962963}
#island_id: 2
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      site_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = -total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 1
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0027121913580246916}
#island_id: 1
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    total_spin[i][1] -= 2*h_site
  return(total_spin)




#score: {'data2D.txt': 0.004758487654320988}
#island_id: 1
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00071466049382716}
#island_id: 3
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011668209876543214}
#island_id: 3
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      total_spin[0] += J[0,j,i//N]*h[site_nbr_j][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01214614197530864}
#island_id: 3
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      j_neigh = (k+N-1)%N
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += J[k, i%N, i//N]*h[j_neigh][i%N]
        priorities[i][1] -= J[k, i%N, i//N]*h[j_neigh][i%N]
      else:
        priorities[i][0] -= J[k, i%N, i//N]*h[j_neigh][i%N]
        priorities[i][1] += J[k, i%N, i//N]*h[j_neigh][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + priorities[i][0]
      priorities[i][1] -= priorities[i][1]
    else:
      priorities[i][0] -= h_site + priorities[i][0]
      priorities[i][1] += priorities[i][1]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if total_spin[i*N+j][0] > 0:
        if h[i][j] > 0:
          priorities[i*N+j][0]=total_spin[i*N+j][1]
          priorities[i*N+j][1]=-priorities[i*N+j][0]
        else:
          priorities[i*N+j][0]=-total_spin[i*N+j][1]
          priorities[i*N+j][1]=-priorities[i*N+j][0]
      else:
        if h[i][j] > 0:
          priorities[i*N+j][0]=total_spin[i*N+j][1]
          priorities[i*N+j][1]=-priorities[i*N+j][0]
        else:
          priorities[i*N+j][0]=-total_spin[i*N+j][1]
          priorities[i*N+j][1]=-priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_site = h[site_nbr][i%N]
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = priority_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priority_site = -h[site_nbr][i%N]
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = priority_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009322530864197533}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N] + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N] + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014683641975308643}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total = h[site_nbr][i%N]
    for k in range(3):
      total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total + (sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])/2)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total - (sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))/2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 1
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06672793209876546}
#island_id: 1
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for k in range(3):
      site_nbr = (site_nbrs[0] + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007072530864197526}
#island_id: 1
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      if i%N == k or (k == N-1 and i%N == 0):
        J_val = J[0,i//N,k]
      elif i//N == k or (k == N-1 and i//N == 0):
        J_val = J[2,i//N,k]
      else:
        J_val = J[1,i//N,k]

      h_site += J_val*h[k][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0007402777777777771}
#island_id: 0
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i + ((j-1)%2 - 1)) % N for j in range(3) if abs((i//N) - (j//N)) <= 1 and i != j]
    neighbor_sum = sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in enumerate(neighbors)])
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00989429012345679}
#island_id: 0
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    for k in range(3):
      total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009668209876543216}
#island_id: 0
#version_generated: 2
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for j in range(4):
      if j == 0 and i % N != 0:
        continue
      elif j == 1 and (i//N*N + i)%N != 0:
        continue
      elif j == 2 and i % N == 0:
        continue
      elif j == 3 and (i//N*N + i)%N == N-1:
        continue

      if J[j,i%N,i//N] > 0:
        total_priority += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4) if (j-k)%4 != 3])
      else:
        total_priority -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4) if (j-k)%4 != 3])

    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority

  return(priorities)




#score: {'data2D.txt': -0.112963425925926}
#island_id: 0
#version_generated: 2
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_sum = sum([h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    priorities[i][0] = h[i//N][i%N] + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.29957577160493765}
#island_id: 3
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if k == 0 and i%N != 0:
        site_nbr_up = (site_nbr + N) % N
        total_spin += J[k,i//N,site_nbr] * h[site_nbr_up][i%N]
      elif k == 1 and i%N == N-1:
        site_nbr_down = (site_nbr - N) % N
        total_spin += J[k,i//N,site_nbr] * h[site_nbr_down][i%N]
      elif k == 2 and i//N != 0:
        site_nbr_left = (site_nbr - 1) % N
        total_spin += J[k,i//N,site_nbr] * h[i//N,site_nbr_left]
      elif k == 3 and i//N != N-1:
        site_nbr_right = (site_nbr + 1) % N
        total_spin += J[k,i//N,site_nbr] * h[i//N,site_nbr_right]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.00034521604938271566}
#island_id: 3
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (0,-1), (-1,0), (1,0)]:
      if i//N + dir[0] >= 0 and i//N + dir[0] < N and i%N + dir[1] >= 0 and i%N + dir[1] < N:
        h_site += J[dir[0],i%N,i//N]*h[i//N + dir[0]][i%N + dir[1]]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022748456790123465}
#island_id: 1
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 1
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.20978040123456781}
#island_id: 1
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = 2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site1 - h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013723765432098762}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N, site_nbr2), i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002706944444444444}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(8):
      site_nbr_neighbors = [(i+N-1)%N, (i+N+1)%N, (i+N//2-1)%N, (i+N//2+1)%N][(i//N)%2]
      if J[0,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[site_nbr_neighbors][i%N] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[site_nbr_neighbors][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0045297839506172844}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % N - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[2,i//N,i//N] > 0:
      h_neighbor = h[site_nbr2][i % N]
    else:
      h_neighbor = -h[site_nbr2][i % N]

    priorities[i][0] = h_site + h_neighbor
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03160632716049383}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02820416666666665}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i%N+1)%N + ((i//N)%2 - 1)) % N
    site_nbr3 = ((i%N+N-1)%N + ((i//N)%2 - 1)) % N
    site_nbr4 = (i // N + ((i % N-1)%2 - 1)) % N

    h_site = h[i//N][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.0005464506172839504}
#island_id: 1
#version_generated: 2
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term2 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[a,b] for a,b in total_spin]




#score: {'data2D.txt': 0.0008350308641975309}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = 2*h[i//N][i%N]
    for k in range(4):
      if k == 0 and i % 2 == 0:
        continue
      elif k == 1 and i % 2 == 1:
        continue
      elif k == 2 and (i % N + ((i//N-1)%2 - 1)) % N == site_nbr1:
        continue
      elif k == 3 and (i % N + ((i//N+1)%2 - 1)) % N == site_nbr2:
        continue
      else:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010307098765432092}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(1,0),(-1,0),(0,1),(0,-1)]:
      i_nbr, j_nbr = (i//N + direction[0]) % N , (i%N + direction[1]) % N
      if J[direction[1],i%N,j_nbr] > 0:
        h_site += sum([J[k,i%N,j_nbr]*h[(k+N-1)%N][j_nbr] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,j_nbr]*h[(k+N-1)%N][j_nbr] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012396604938271607}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # sort the sites based on their priorities
  sorted_indices = np.argsort(priorities[:, 0])
  priorities = priorities[sorted_indices, :]

  return priorities




#score: {'data2D.txt': -9.429012345679033e-05}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if np.sum(h) == 0: # Check if the total magnetism is zero
        priorities[i][0] = h_site
        priorities[i][1] = -h_site
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003652777777777779}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0025356481481481497}
#island_id: 3
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site = ((i + j) % N + ((i//N-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038751543209876544}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    priorities[i][0] = site_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.01368966049382716}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      neighbors_sum = sum([2*J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - neighbors_sum
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      neighbors_sum = sum([-2*J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + neighbors_sum

  return(priorities)




#score: {'data2D.txt': 0.008050154320987631}
#island_id: 2
#version_generated: 3
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(np.multiply(J, h))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(np.multiply(J, h))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005456635802469135}
#island_id: 2
#version_generated: 3
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -priority_site
      priorities[i][1] = priority_site
    else:
      priority_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -priority_site
      priorities[i][1] = priority_site

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 2
#version_generated: 3
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    
    for j in range(2):
      if (j == 0 and magnetism > 0) or (j == 1 and magnetism < 0):
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0005353395061728401}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))
  
  # Calculate total spin
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  # Calculate priority
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    priorities[i][0] = total_spin[i][0]*h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021365740740740746}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,:,i//N], axis=0)
    if total_spin[0] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, h[:,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, h[:,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1338498456790125}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - np.sign(h[i//N][i%N]) * 2
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 1
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i-N-1) % (N*N)
    right_nbr = (i+1)% (N*N)
    up_nbr = ((i//N-1)*N + i%N) if i//N > 0 else None
    down_nbr = ((i//N+1)*N + i%N) % (N*N)

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06327330246913583}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[0,k,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[0,k,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001523611111111112}
#island_id: 3
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      jnbr = (i // N + ((i % N - N//2 + k)%N - N//2)) % N
      if J[k,i%N,i//N] > 0:
        h_jnbr = h[jnbr][i%N]
      else:
        h_jnbr = -h[jnbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_jnbr
        priorities[i][1] -= 2*h_site + 2*h_jnbr
      else:
        priorities[i][0] -= h_site - h_jnbr
        priorities[i][1] += 2*h_site - 2*h_jnbr

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return (priorities)




#score: {'data2D.txt': -0.001244907407407408}
#island_id: 0
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = np.sign(priorities[i][0])
  
  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 0
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014418209876543209}
#island_id: 0
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009655864197530864}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[(k+N-1)%N][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[(k+N-1)%N][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008121141975308643}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i + ((j-1)%N - N//2)) % N
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.33639583333333234}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = ((j-1)%2*N + (i//N) + i % N) % N
      if J[j,i%N,i//N] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_site_j
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site + h_site_j
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382714}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(N):
      total_spin += h[k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0] - total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0] - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017584876543209878}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors = [h[j][i%N] if h[i//N][i%N]*J[0,i%N,j] > 0 else -h[j][i%N] for j in site_nbrs]
    total_h_site = sum(neighbors)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016989197530864215}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(i+1)%N, (i-1+N*N)%N, (i-N)%N, (i+1+N*N)%N]
    for nb in nbs:
      if J[0,i%N,nb//N] > 0:
        h_site += sum([J[k,i%N,nb//N]*h[nb//N][nb%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,nb//N]*h[nb//N][nb%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.112963425925926}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    site_h += h[i//N][i%N]
    
    priorities[i][0] = site_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007467592592592598}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    if i < N**2-N:
      site_nbr_down = (i % N + ((i//N-1)%2 - 1)) % N
      h_site += J[0,i%N,i//N]*h[site_nbr_up][i%N]
    else:
      site_nbr_down = None

    site_nbr_left = (i % N) + (i//N-1)*N
    if i % N > 0:
      site_nbr_right = i - 1
      h_site += J[1,i//N,i%N]*h[i//N][site_nbr_right%N]
    else:
      site_nbr_right = None

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(2) if k!=1])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012637345679012335}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N] if J[0,i%N,i//N] > 0 else -h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,k,i//N]*priorities[k*N+i%N][0] if J[2,k,i//N] > 0 else -priorities[k*N+i%N][0] for k in range(N)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005634259259259286}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 1
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    total_spin = sum(sites)
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013412037037037043}
#island_id: 1
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(k, (i+N-1)%N) for k in range(3)]
    if h[i//N][i%N] > 0:
      total = h_site + sum([J[k,i%N,j]*h[j][i%N] for k,j in neighbors])
    else:
      total = -h_site - sum([J[k,i%N,j]*h[j][i%N] for k,j in neighbors])

    if total > 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    elif total < 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      if np.random.rand() < 0.5:
        priorities[i][0] = 1
        priorities[i][1] = -1
      else:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': -0.0015442901234567908}
#island_id: 1
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if all([J[k,i%N,i//N] > 0 for k in range(3)]):
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00019645061728395096}
#island_id: 3
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      if i % N + dir[0] >= 0 and i % N + dir[0] < N and i // N + dir[1] >= 0 and i // N + dir[1] < N:
        site_nbr_dir = (i % N + dir[0], i // N + dir[1])
        h_site += J[dir[0], i%N, i//N]*h[site_nbr_dir[1]][site_nbr_dir[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0185195987654321}
#island_id: 3
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(3):
      site_nbr2 = (i % N + ((i//N+j-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[j,i%N,i//N]*h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[j,i%N,i//N]*h[site_nbr2][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 0
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr1][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010797839506172843}
#island_id: 0
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (2*h[i//N][i%N] + J[1,i//N,i%N] + J[2,i//N,i%N])
    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006298611111111112}
#island_id: 0
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_neighbor = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_neighbor][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_neighbor][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.330246913580274e-05}
#island_id: 1
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.22633842592592596}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N])*h_site
      priorities[i][1] = -(1 + J[1,i%N,i//N])
    else:
      priorities[i][0] = -(1 - J[1,i%N,i//N])*h_site
      priorities[i][1] = (1 - J[1,i%N,i//N])

  return(priorities)




#score: {'data2D.txt': -0.00023935185185185038}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    sum_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_left - sum_right
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - (sum_left - sum_right)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001338734567901235}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if i % N > 0 or i // N > 0 else 0
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 0
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2672751543209873}
#island_id: 0
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i%N,j//N]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[0,i%N,j//N]
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i,j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[0,i,j]
        total_spin[i*N+j][1] += 1
        
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if total_spin[i][0] > 0:
        priorities[i][0] = -1
        priorities[i][1] = 1
      else:
        priorities[i][0] = 1
        priorities[i][1] = -1
        
  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contribs = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_contribs
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_contribs
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006245370370370373}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[0,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])
    else:
      h_site = -sum([J[0,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])

    if J[0, i%N, i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014552469135802436}
#island_id: 3
#version_generated: 3
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) * 0.5
      priorities[i][1] = 1 - priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) * 0.5
      priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00016527777777777786}
#island_id: 3
#version_generated: 3
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h[i//N][i%N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h[i//N][i%N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * J[0,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 1
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] * J[k,i//N,i%N] for k, site_nbr in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020884259259259263}
#island_id: 1
#version_generated: 2
#generate time04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    h_sites = [h[i//N][i%N] if J[0,i%N,i//N]>0 else -h[i//N][i%N] for i in site_nbrs]
    total_spin = sum(h_sites)
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = [0,0]
      site_nbrs = [(i % N + ((k-1)%2 - 1)) % N if k!=3 else (i % N + (1-1)%2) % N for k in range(4)]
      for k in range(4):
        total_spin[0] += J[k,i%N,i//N]*h[site_nbrs[k]][i%N]
        if J[0,i%N,i//N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      priorities[i][j] = h_site + sum(total_spin)
  return(priorities)




#score: {'data2D.txt': 0.00026712962962962975}
#island_id: 1
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006714506172839504}
#island_id: 3
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = (1-j)*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -(1-j)*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0010313271604938268}
#island_id: 3
#version_generated: 3
#generate time04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    for j in range(N):
      site_nbr_nbr = (j + ((i//N-1)%2 - 1)) % N
      if J[0,j,i//N] > 0:
        total_spin += h[site_nbr_nbr][j]
      else:
        total_spin -= h[site_nbr_nbr][j]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 3
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + 2*neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 2
#version_generated: 3
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    spin_energy = sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006845833333333334}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] == 0 and J[1,i%N,i//N] == 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] == 0 and J[1,i%N,i//N] == 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sign = 1
    else:
      sign = -1
    h_site = sign*h[site_nbr][i%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016563271604938259}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00036589506172839446}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(-1,2):
      if i+j < N and i+j >= 0:
        total_spin += J[j,i//N,i%N]*h[(i+j)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017072530864197526}
#island_id: 0
#version_generated: 2
#generate time04:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % N - 1)) % N
    
    if J[0, i%N, i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0):
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time04:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.29719706790123396}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum([J[k,i,j]*h[site_nbr][k%N] for k in range(4)])
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= sum([J[k,i,j]*h[site_nbr][k%N] for k in range(4)])
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.044193364197530866}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[1,i%N,i//N] > 0 and h_site > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] < 0 and h_site > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006461419753086426}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00038533950617283927}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005094135802469128}
#island_id: 3
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = 0
    for k in range(3):
      sum_nn += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011405864197530863}
#island_id: 0
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    priorities[i][0] = total_spin[i][0]
    priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k+1)%2 == 0: 
        site_nbr_k = (i % N + ((i//N-1+k)%2 - 1)) % N
      else: 
        site_nbr_k = (i % N + ((i//N+k-1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 2
#version_generated: 3
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time04:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002082561728395061}
#island_id: 2
#version_generated: 3
#generate time04:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      jnbr = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_j = h[jnbr][i%N]
      else:
        h_j = -h[jnbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h_j for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h_j for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time04:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[j][min(i+N//2-1,N-1)]*J[0,i%N,j] if J[0,i%N,j] > 0 else -h[j][min(i+N//2-1,N-1)]*J[0,i%N,j] for j in range(N)])
    total_spin += h[i//N][i%N]
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008615277777777777}
#island_id: 3
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1.0
    else:
      h_site = -1.0

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 0
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate total magnetism at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate total magnetism at each site with its nearest neighbors
    for k in range(3):
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[(k+N-1)%N][i%N]

    # Calculate priority for each spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.24103132716049386}
#island_id: 1
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = []
    if i % N > 0:
      site_nbrs.append(i-1)
    if i % N < N-1:
      site_nbrs.append(i+1)
    if (i//N) % N > 0:
      site_nbrs.append(i-N)
    if (i//N) % N < N-1:
      site_nbrs.append(i+N)

    h_site = 0
    for j in range(len(site_nbrs)):
      if J[0, i%N, site_nbrs[j]//N]*h[site_nbrs[j]//N][site_nbrs[j]%N] > 0:
        h_site += J[0, i%N, site_nbrs[j]//N]*h[site_nbrs[j]//N][site_nbrs[j]%N]
      else:
        h_site -= J[0, i%N, site_nbrs[j]//N]*h[site_nbrs[j]//N][site_nbrs[j]%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011297839506172838}
#island_id: 1
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i//N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004415123456790122}
#island_id: 1
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      priorities[i][0] += J[j,i%N,i//N]*h[(j+N-1)%2][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008628086419753096}
#island_id: 0
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    site_h = sum([h[site_nbrs[j]][i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008800925925925925}
#island_id: 0
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    site_spin = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -1*h[i//N][i%N] + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[i//N][i%N] + site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036084876543209876}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002378086419753085}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site_k = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_k][i%N]
      else:
        total_spin -= h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1596445987654321}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a correction term based on the magnetism
  for i in range(N**2):
    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] -= h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018828703703703711}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for d in [(0,1), (1,0), (-1,0), (0,-1)]:
      x,y = i % N + d[0], i // N + d[1]
      h_site += J[d[0]+1,i%N,x] * h[y][x] if 0 <= x < N and 0 <= y < N else 0
      
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023992283950617283}
#island_id: 2
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] += h[site_nbr][i%N]
    else:
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025081790123456793}
#island_id: 0
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 0
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -0.009043364197530828}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - np.sum(h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006495370370370372}
#island_id: 0
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013612654320987658}
#island_id: 0
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k*N+i%N + ((i//N-1)%2 - 1)) % N
      if J[k+1,i%N,i//N] > 0:
        h_site += J[k+1,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k+1,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005981327160493826}
#island_id: 0
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 0
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)%N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0):
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    
    if h[i//N][i%N] > 0:
      for j in site_nbrs:
        if J[0,i%N,i//N]*h[j][i%N] > 0:
          priorities[i][0] += J[0,i%N,i//N]*h[j][i%N]
          priorities[i][1] -= J[0,i%N,i//N]*h[j][i%N]
        else:
          priorities[i][0] -= J[0,i%N,i//N]*h[j][i%N]
          priorities[i][1] += J[0,i%N,i//N]*h[j][i%N]
    else:
      for j in site_nbrs:
        if J[0,i%N,i//N]*h[j][i%N] > 0:
          priorities[i][0] -= J[0,i%N,i//N]*h[j][i%N]
          priorities[i][1] -= J[0,i%N,i//N]*h[j][i%N]
        else:
          priorities[i][0] += J[0,i%N,i//N]*h[j][i%N]
          priorities[i][1] += J[0,i%N,i//N]*h[j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': -0.30143996913580196}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(3))]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = np.sum([hs + h_site for hs, h_site in zip(h_sites, [h[i//N][i%N]] * 3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([hs - h_site for hs, h_site in zip(h_sites, [h[i//N][i%N]] * 3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.23142824074074078}
#island_id: 2
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(4):
        if k == 0:
          if J[0,i%N,i//N] > 0:
            priorities[i][0] += h[site_nbr][i%N]
          else:
            priorities[i][0] -= h[site_nbr][i%N]
        elif k == 1:
          priorities[i][0] += sum([J[k,i%N,j]*h[j//N][j%N] for j in range(N) if (j//N==i//N and abs((j%N)-i%N)<2)])
          if J[0,i%N,i//N] > 0:
            priorities[i][1] -= sum([J[k,i%N,j]*h[j//N][j%N] for j in range(N) if (j//N==i//N and abs((j%N)-i%N)<2)])
          else:
            priorities[i][1] += sum([J[k,i%N,j]*h[j//N][j%N] for j in range(N) if (j//N==i//N and abs((j%N)-i%N)<2)])
        elif k == 2:
          if J[0,i%N,i//N] > 0:
            priorities[i][1] -= h[i//N][i%N]
          else:
            priorities[i][1] += h[i//N][i%N]
        elif k == 3:
          priorities[i][0] = -priorities[i][1]
  return(priorities)




#score: {'data2D.txt': -0.002215586419753086}
#island_id: 2
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1+N)%N]
    for j in range(2):
      if J[j,i//N,i%N] > 0:
        h_site += h[neighbors[j]][i%N]
      else:
        h_site -= h[neighbors[j]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23166929012345686}
#island_id: 2
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 1
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if j == 0 and h[i//N][i%N] > 0:
        priorities[i][j] = h_site + neighbor_sum
      elif j == 0 and h[i//N][i%N] < 0:
        priorities[i][j] = -h_site - neighbor_sum
      elif j == 1 and h[i//N][i%N] > 0:
        priorities[i][j] = -priorities[i][0]
      else:
        priorities[i][j] = -priorities[i][1]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00034089506172839477}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,(i+1)%N]) if i % N != 0 else h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,(i+1)%N]) if i % N != 0 else -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011533487654320988}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    sites = [h[j][i%N] if J[k,i//N,i%N]>0 else -h[j][i%N] for k,j in enumerate(site_nbrs)]
    priorities[i][0] = sum([J[k,i//N,i%N]*s for k,s in zip(range(4),sites)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3403918209876533}
#island_id: 2
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 1 and i % N != 0) or (k == 2 and i // N != 0):
        J_val = J[k,i%N,i//N]
      else:
        J_val = -J[k-1,i%N,i//N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J_val*h[(k+N-1)%N][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J_val*h[(k+N-1)%N][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][1]
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][1]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
      else:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.013217129629629627}
#island_id: 2
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sites = [(i, j) for i in range(N) for j in range(N) if (abs(i-site_nbr)+abs(j-i//N)) == 1]
    for site in neighbor_sites:
      if J[0, site[1], site[0]] > 0:
        h_site += sum([J[k,site[1],site[0]]*h[(k+N-1)%N][site[1]] for k in range(3)])
      else:
        h_site -= sum([J[k,site[1],site[0]]*h[(k+N-1)%N][site[1]] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007365586419753086}
#island_id: 0
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i + ((i//N-1)%2 - 1)) % N
    site_down = (i + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003246141975308642}
#island_id: 0
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (site_nbr + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)]) + J[1, i//N, i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)]) - J[1, i//N, i%N]

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.13015756172839513}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -h[i//N][i%N]
    h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008868827160493828}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013291666666666669}
#island_id: 2
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-1)//2) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-1)//2) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006079475308641975}
#island_id: 2
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h_site
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.0008554012345679014}
#island_id: 2
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (0,-1), (1,0), (-1,0)]:
      if i+d[0]*N + d[1] >= N**2 or i+d[0]*N + d[1] < 0:
        continue
      priorities[i][0] += J[(i+d[0]*N + d[1])%N//N,d[1]][(i+d[0]*N + d[1])%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
    else:
      priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014063271604938272}
#island_id: 2
#version_generated: 3
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)]) / N
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008396604938271614}
#island_id: 2
#version_generated: 3
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024470679012345677}
#island_id: 2
#version_generated: 3
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = 0
    for j in range(4):
      k = (j + i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        site_energy += h[k][i%N]
      else:
        site_energy -= h[k][i%N]

    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(4)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007729938271604939}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014378086419753093}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N != 0 and (i // N) % 2 == 1:
        priorities[i][0] += J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N != 0 and (i // N) % 2 == 1:
        priorities[i][0] -= J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013109567901234565}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i-1)%N, (i+1)%N, ((i+N-1)%N)] if i % N != 0 else [(i+1)%N, ((i+N-1)%N)]
    neighbor_values = [J[k,i//N,i%N]*h[neighbor][i%N] for k, neighbor in enumerate(neighbors)]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbor_values)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbor_values)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 2
#version_generated: 3
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -7.608024691357984e-05}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0102945987654321}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [h[site_nbr][i%N], -1]
    else:
      total_spin = [-h[site_nbr][i%N], 1]

    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin[0] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
        total_spin[1] -= 2*J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      else:
        total_spin[0] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
        total_spin[1] += 2*J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.00021311728395061703}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 1 and i % N != 0) or (k == 2 and i % N != N-1):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site += J[0,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.3981481481481236e-05}
#island_id: 1
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_bias + J[0,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -spin_bias - J[0,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 1
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0034581790123456805}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_h = 0
      for k in range(3):
        if i % N == (k-1)%N and (i//N == site_nbr // N or k == 2):
          continue
        elif i % N == (k+1)%N:
          sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
          if (k == 0 and i % N == site_nbr) or (k == 1 and (i % N + 1) % N == site_nbr):
            continue
          sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if j == 0:
        priorities[i][j] = h_site + sum_h
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001854783950617284}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),[0,1,2])]) > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021060185185185184}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-2)%2)*h[(k+N-1)%N][i%N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-2)%2)*h[(k+N-1)%N][i%N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 1
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = h[i//N][i%N]
    if h[i//N][i%N] > 0:
      total_h += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_h -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.81172839506168e-05}
#island_id: 0
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.count_nonzero(h==h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.count_nonzero(h==h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 0
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007708333333333332}
#island_id: 2
#version_generated: 3
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013016975308641978}
#island_id: 2
#version_generated: 3
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(N):
      if i // N == (d + ((i % N - 1) % N)) % N:
        J_sum = sum([J[k,i%N,d]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][0] += h_site + J_sum
        priorities[i][1] -= 2 * priorities[i][0]
    return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030495370370370355}
#island_id: 1
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = np.abs(h_site)
    else:
      priorities[i][0] = h_site
      priorities[i][1] = np.abs(-h_site)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.013293055555555554}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_val = 1
      site_h = h[site_nbr][i%N]
    else:
      spin_val = -1
      site_h = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = site_h + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004124228395061729}
#island_id: 3
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k, i%N, (i//N + k) % N] for k in range(3)]
    if all(J[i, j, k] > 0 for i in range(N) for j in range(N) for k in range(N)):
      priorities[i][0] = h_site + sum([n*h[(site_nbr + k)%N][i%N] for n,k in zip(neighbors, range(3))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n*h[(site_nbr + k)%N][i%N] for n,k in zip(neighbors, range(3))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0033075617283950622}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if (j == 0 and h[i//N][i%N] > 0) or (j == 1 and h[i//N][i%N] < 0):
        priorities[i][j] = -h_site
      else:
        priorities[i][j] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        if j == 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
      else:
        if j == 0:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for k in range(3):
      total_h += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.32345385802469045}
#island_id: 1
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0014408950617283947}
#island_id: 1
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin/2. for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(total_spin)/2. for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014583333333333337}
#island_id: 1
#version_generated: 2
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283954}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.01390077160493827}
#island_id: 3
#version_generated: 3
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h_site + h[site_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site - h[site_k][i%N]
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[total_spin[i*N+j][0], total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i-N) % N
    site_down = (i+N) % N
    if i // N < N//2:
      site_left = (i-1)%N
    else:
      site_left = (i+1)%N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 2
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.2191358024691456e-05}
#island_id: 1
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the effect of the magnetism at each site
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016776234567901236}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][k] for j in range(min(i//N,site_nbr//N)+1) for k in range(N)])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[j][k] for j in range(max(i//N,site_nbr//N)-1,N) for k in range(N)])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004893518518518517}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]
    if J[1,i%N,i//N] > 0 and i//N < N-1: site_energy += J[1,i%N,i//N]*h[(i//N+1)%N][i%N]
    if J[2,i%N,i//N] > 0 and i%N < N-1: site_energy += J[2,i%N,i//N]*h[i//N,(i%N+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00025077160493827244}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002461419753086417}
#island_id: 0
#version_generated: 2
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if (i//N+j)%2 == 0:
        if J[0,i%N,i//N] > 0:
          priorities[i][j] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if J[0,i%N,i//N] > 0:
          priorities[i][j] += -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] -= -h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.004891203703703704}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004353395061728396}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.035734722222222216}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site)*sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)]) + (h_site+1)*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site)*sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)]) + (-h_site+1)*sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010344135802469135}
#island_id: 3
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = ((k+1)%2)*((i+N-1)//N + (i%N)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021282407407407417}
#island_id: 3
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[site_nbr][j] for j in range(N)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([-h[site_nbr][j] for j in range(N)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k == 0:
        site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
        else:
          h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]
      elif k == 1:
        site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
        else:
          h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]
      elif k == 2:
        site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
        else:
          h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015921296296296302}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N]
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_h_site += h[(k+N-1)%N][i%N]
      else:
        total_h_site -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.32698780864197435}
#island_id: 1
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      dx, dy = [1, -1, 0, 0][d], [0, 0, 1, -1][d]
      x, y = (i % N + dx) % N, (i // N + dy) % N
      h_sum = sum([J[k,x,y]*h[(k+N-1)%N,y] for k in range(4)])
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_sum
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] -= h_site - h_sum

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 1
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008234104938271604}
#island_id: 2
#version_generated: 3
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      sitenbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[sitenbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[sitenbr_j][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.010425771604938273}
#island_id: 0
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + np.sum(h)
      priorities[i][0] = spin_bias
      priorities[i][1] = -spin_bias
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - np.sum(h)
      priorities[i][0] = -spin_bias
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.14700416666666688}
#island_id: 0
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N]) * (h_site if i % N == 0 else h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003520061728395061}
#island_id: 0
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k == 0 and i % N != 0: 
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1 and i % N != N-1:
        site_nbr = (i % N + ((i//N-1)%2 + 1) - 1) % N
      elif k == 2 and i // N != 0: 
        site_nbr = (i % N + ((i//N-1)%2 + 1) - 1) % N
      else:
        continue

      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 0
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    magnetism = h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priorities = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017041666666666663}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum(J[:,i//N,i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00024027777777777781}
#island_id: 0
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site *= -1
    total_spin = np.sum(h, axis=0)
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[k] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004648302469135803}
#island_id: 1
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      for k in range(4):
        site = (i % N + ((k-1)%2 - 1)) % N
        priorities[i][0] += J[k,i//N,i%N]*h[site][i%N]
    else:
      priorities[i][0] = -h_site
      for k in range(4):
        site = (i % N + ((k-1)%2 - 1)) % N
        priorities[i][0] -= J[k,i//N,i%N]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_total
      priorities[i][1] = -priorities[i][0]
    else:
      priority_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_total
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003683796296296296}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr_2d = (j + ((i-N*j-1)%N - 1)) % N
      if J[0,j,i//N] > 0:
        h_site_2d = h[site_nbr_2d][i%N]
      else:
        h_site_2d = -h[site_nbr_2d][i%N]

      priorities[i][0] += h_site + h_site_2d
      priorities[i][1] -= 2*h_site + 2*h_site_2d

  return(priorities)




#score: {'data2D.txt': -0.0013979938271604943}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum([J[k,i%N,j]*h[(k+N-1)%N][i%N] for k in range(3)]) for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.36728395061724e-05}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007018055555555556}
#island_id: 0
#version_generated: 2
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0 and i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] < 0 and i % N == N-1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0 and i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] < 0 and i % N == N-1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0015189814814814814}
#island_id: 0
#version_generated: 2
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + 1) % N
    site_nbr_2 = ((site_nbr+N-1)%N)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[1,i%N,i//N]*h[site_nbr_1][i%N], J[2,i%N,i//N]*h[site_nbr_2][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[1,i%N,i//N]*h[site_nbr_1][i%N], J[2,i%N,i//N]*h[site_nbr_2][i%N]])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + -h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_priority = h[site_nbr][i%N] * J[0,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_priority + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_priority - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009989197530864194}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h_site > 0:
      priorities[i][0] = np.abs(site_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.abs(site_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0013751543209876544}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    priorities[i][0] = sum([h_site + J[k,i%N,i//N]*h[site_nbr][i%N] for k, h_site, site_nbr in zip(range(3), h_sites, site_nbrs)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 0
#version_generated: 2
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009115740740740765}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009390432098765428}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if i == k*N + (k+1)%2:
        continue
      if J[k,i//N,k//N] > 0:
        h_site += J[k,i//N,k//N]*h[(i-k)%N][(i-k)//N]
      else:
        h_site -= J[k,i//N,k//N]*h[(i-k)%N][(i-k)//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022569444444444442}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0] + 2*J[1,i//N,i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0] - 2*J[1,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': -0.17770046296296324}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0708936728395062}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    J_values = [J[k][site_nbrs[0], i//N] if k == 0 else J[k-1][site_nbrs[k%3], i//N] for k in range(3)]
    h_site = sum([J[k][site_nbrs[k%3], i//N]*h[site_nbrs[k%3]][i%N] for k in range(3)])
    if J[0, i%N, i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017344135802469136}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.13809182098765435}
#island_id: 0
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_h += h[(k+N-1)%N][i%N]
      else:
        total_h -= h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + total_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001854783950617284}
#island_id: 0
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),[0,1,2])]) > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[3,k,i//N]) for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[3,k,i//N]) for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin[i][0] += h[i//N][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N**2):
    priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 2
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        if j == 0:
          priorities[i][j] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
      else:
        if j == 0:
          priorities[i][j] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019146604938271613}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023029320987654318}
#island_id: 1
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [(i//N-1)%N, (i//N+1)%N]:
      if J[0,i%N,j] > 0:
        h_site += sum([J[k,i%N,j]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,j]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 0
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate priority for each spin state (+1 and -1)
    spin_plus_priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    spin_minus_priority = -spin_plus_priority

    priorities[i][0] = spin_plus_priority
    priorities[i][1] = spin_minus_priority
  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003631172839506171}
#island_id: 3
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr2 = (j % N + ((i//N-1)%2 - 1)) % N
        if J[0,j,i//N] > 0:
          h_site2 = h[site_nbr2][i%N]
        else:
          h_site2 = -h[site_nbr2][i%N]
        priorities[i][0] += h_site2
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr2 = (j % N + ((i//N-1)%2 - 1)) % N
        if J[0,j,i//N] > 0:
          h_site2 = h[site_nbr2][i%N]
        else:
          h_site2 = -h[site_nbr2][i%N]
        priorities[i][0] -= h_site2

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007736111111111114}
#island_id: 3
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr1 = (i % N + ((i // N - 1) % 2 - 1)) % N
    site_nbr2 = (i % N + ((i // N - 1) % 2)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012063271604938286}
#island_id: 0
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [(k, (i+N-1)%N, i%N) for k in range(3) if ((k+((i//N-1)%2 - 1)) % N) == site_nbr]
    nn_sum = sum([J[k,i%N,j%N] for k, j, _ in nns])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 0
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for j in range(4):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin[0] += h_site + h_site_j
      total_spin[1] -= 2

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005658950617283949}
#island_id: 0
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][i%N] if k == site_nbr else J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][i%N] if k == site_nbr else J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00037854938271604885}
#island_id: 3
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = []
    for d in [(1,0), (-1,0), (0,1), (0,-1)]:
      neighbor_i, neighbor_j = i // N + d[0], i % N + d[1]
      if 0 <= neighbor_i < N and 0 <= neighbor_j < N:
        neighbors.append((neighbor_i*N + neighbor_j, J[d[0],i%N,i//N]*h[neighbor_i][neighbor_j]))

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([val for _, val in neighbors])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([val for _, val in neighbors])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011226851851851847}
#island_id: 3
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = ((i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N))
  h_sites = (h[i][j] if J[0,i%N,i//N] > 0 else -h[i][j] for i,j in zip(*np.unravel_index(np.arange(N*N), (N,N))))
  
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = next(site_nbrs)
    h_site = next(h_sites)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(J[1:,i%N,i//N]*h[(site_nbr+N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(J[1:,i%N,i//N]*h[(site_nbr+N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += J[0,i%N,j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': 0.15048811728395084}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N + i%N) % N)
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -(h_site1 + h_site2)
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -(h_site1 + h_site2)

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004902777777777783}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a penalty term to discourage spins from being the same as their neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Check the spins of the neighboring sites
    for j in range(3):
      if i % N == (j + i//N) % N:  # same row, different column
        priorities[i][0] -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
        priorities[i][1] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.004347685185185185}
#island_id: 3
#version_generated: 3
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_sign = 1
    else:
      spin_sign = -1
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site *= spin_sign
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.011981018518518518}
#island_id: 3
#version_generated: 3
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_neighbor = (j + ((i-1)%N - N//2)) % N
      if J[0,i%N,i//N] > 0:
        total_spin[0] += h[site_neighbor][i%N]
      else:
        total_spin[0] -= h[site_neighbor][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.01757854938271605}
#island_id: 1
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0: # top row
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1: # bottom row
        priorities[i][1] = -priorities[i][0]
      else:
        site_left = (i-1) % N + ((i//N-1)%2 - 1)
        site_right = (i+1) % N + ((i//N-1)%2 - 1)
        if J[1,i%N,i//N] > 0 and h[i//N][site_left] > 0:
          priorities[i][1] = max(-priorities[i][0], -sum([J[k,site_left,i//N]*h[(k+N-1)%N][site_left] for k in range(3)]))
        elif J[2,i%N,i//N] > 0 and h[i//N][site_right] > 0:
          priorities[i][1] = max(-priorities[i][0], -sum([J[k,site_right,i//N]*h[(k+N-1)%N][site_right] for k in range(3)]))
        else:
          priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0: # top row
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1: # bottom row
        priorities[i][1] = -priorities[i][0]
      else:
        site_left = (i-1) % N + ((i//N-1)%2 - 1)
        site_right = (i+1) % N + ((i//N-1)%2 - 1)
        if J[1,i%N,i//N] > 0 and h[i//N][site_left] < 0:
          priorities[i][1] = min(-priorities[i][0], sum([J[k,site_left,i//N]*h[(k+N-1)%N][site_left] for k in range(3)]))
        elif J[2,i%N,i//N] > 0 and h[i//N][site_right] < 0:
          priorities[i][1] = min(-priorities[i][0], sum([J[k,site_right,i//N]*h[(k+N-1)%N][site_right] for k in range(3)]))
        else:
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020020061728395063}
#island_id: 1
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23293348765432095}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum(h[site_nbr][i%N] for site_nbr in site_nbrs) > 0:
      h_site = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    else:
      h_site = -sum(h[site_nbr][i%N] for site_nbr in site_nbrs)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009434104938271605}
#island_id: 1
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([-h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005043672839506173}
#island_id: 1
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors = [k for k in range(4) if J[k,i//N,i%N]>0]
      total_spin = sum([h[site_nbr][i%N] for site_nbr in neighbors])
      priorities[i][1] = -total_spin
    else:
      neighbors = [k for k in range(4) if J[k,i//N,i%N]<0]
      total_spin = sum([-h[site_nbr][i%N] for site_nbr in neighbors])
      priorities[i][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016844135802469137}
#island_id: 1
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if i<N2//N-1 and (i+1)%N!=0:
      h_site+=J[0,i%N,i//N]*h[site_nbr1][i%N] + J[3,(i+1)%N,i//N]*h[site_nbr2][i%N]
    elif i>N//2-1 and (i-1)%N!=N-1:
      h_site+=J[0,(i-1)%N,i//N]*h[site_nbr1][i%N] + J[3,i%N,i//N]*h[site_nbr2][i%N]
    elif i>N//2-1 and (i+1)%N!=N-1:
      h_site+=J[0,(i-1)%N,i//N]*h[site_nbr1][i%N] + J[3,i%N,i//N]*h[site_nbr2][i%N]
    elif i<N//2 and (i-1)%N!=0:
      h_site+=J[0,i%N,i//N]*h[site_nbr1][i%N] + J[3,(i+1)%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001026388888888889}
#island_id: 3
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i%N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001854783950617284}
#island_id: 2
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010331790123456787}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0: # left neighbor
        if i % N != 0:
          priorities[i][0] += J[j,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]
      elif j == 1: # right neighbor
        if i % N != N-1:
          priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][(i+1)%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][(i+1)%N]
      elif j == 2: # top neighbor
        if i // N != 0:
          priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][i%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][i%N]
      elif j == 3: # bottom neighbor
        if i // N != N-1:
          priorities[i][0] += J[j,i%N,i//N]*h[(site_nbr+N-1)%N][(i+1)%N]
          priorities[i][1] -= J[j,i%N,i//N]*h[(site_nbr+N-1)%N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -0.0099375}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)//2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002418672839506173}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr][i%N]
      else:
        total_spin[0] -= h[site_nbr][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019819444444444446}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N if j % N != i % N else (i // N + ((j-1)%2 - 1)) % N for j in range(N)]
    h_site = sum([h[s][i%N] * J[0,i//N,s//N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -8.811728395061669e-05}
#island_id: 3
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[(site_nbr+j-N//2)%N][i%N] > 0:
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024507716049382722}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      if (k==0 and i%N!=0) or (k==1 and i//N!=0) or (k==2 and site_nbr!=i//N):
        total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= J[k,i%N,i//N]
        else:
          total_spin[1] += J[k,i%N,i//N]

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00019675925925925885}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = 1
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_bias
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038566358024691356}
#island_id: 0
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030137345679012344}
#island_id: 1
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - 2*h_site
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + 2*h_site

  return(priorities)




#score: {'data2D.txt': 0.0033563271604938275}
#island_id: 1
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i % N) if (i//N)%2 == 0 else ((i//N-1)%N)
           ]
    site_nbr_values = [h[n][i%N] for n in site_nbrs]
    if sum(site_nbr_values) > 0:
      priorities[i][0] = np.sum([J[k,i%N,n]*v for k,n,v in zip(range(3),site_nbrs,site_nbr_values)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([J[k,i%N,n]*v for k,n,v in zip(range(3),site_nbrs,site_nbr_values)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00012762345679012376}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N+1,i//N-1,i%N+N//N+1,i%N+N//N-1]]
    h_site = np.sum([h[s][i%N] if J[0,s,i//N] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018285493827160494}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_spin = h[i//N][i%N]
    for k in range(3):
      if ((k+1)%2 == (i//N)%2) and ((k+1)%2 == (i%N)%2):  # same row or column
        priority_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002150462962962964}
#island_id: 1
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3,k,i//N]*h[i//N,k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3,k,i//N]*h[i//N,k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033143518518518526}
#island_id: 1
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site_sum = sum([h[site_nbrs[j]][i%N] * J[j,i//N,i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N] * (h[site_nbr_right][i % N] - h[site_nbr_left][i % N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N] * (h[site_nbr_right][i % N] - h[site_nbr_left][i % N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08570200617283956}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = ((i // N + (k % 2) - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += h[site_nbr_k][i % N]
      else:
        h_site -= h[site_nbr_k][i % N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.15256682098765434}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = 2*h[i//N][i%N]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin += 2*h[(j+N-1)%N][i%N]
      else:
        total_spin -= 2*h[(j+N-1)%N][i%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002765895061728396}
#island_id: 1
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007439814814814809}
#island_id: 1
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = spin_bias
      priorities[i][1] = -spin_bias
    else:
      spin_bias = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = -spin_bias
      priorities[i][1] = spin_bias
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 3
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': -0.0009489197530864191}
#island_id: 3
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (i+N-1)%N, (j+1)%N, (j+N-1)%N]
      h_site = sum([h[site_nbr][j]*J[k,i,j] for k,site_nbr in zip(range(4),site_nbrs)])
      
      if h[i][j] > 0:
        priorities[i*N+j][0] = h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005341049382716041}
#island_id: 1
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0.5 * (J[0, i%N, i//N] * h[i//N][i%N] + J[1, i%N, i//N] * h[(i+N-1)%N][i%N]) * h_site
    for k in range(3):
      total_energy += 0.25 * (J[k, i%N, i//N] * (h[i//N][i%N] + h[(k+N-1)%N][i%N]) - J[k, i%N, i//N] * (h[i//N][i%N] - h[(k+N-1)%N][i%N])) * h_site
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0015658950617283955}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = sum([J[k,i%N,i//N]*abs(h[k%N][k%N] - h_site) for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0008084876543209874}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N-1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + spin_energy
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038674382716049386}
#island_id: 2
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 2
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -priorities[i][1]
    else:
      priorities[i][1] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -priorities[i][1]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013736111111111104}
#island_id: 0
#version_generated: 2
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (2*h[i//N][i%N]*(np.sum(J[:,i//N,i//N]) if i//N < N/2 else np.sum(J[:,i//N,N-1])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (2*h[i//N][i%N]*(np.sum(J[:,i//N,i//N]) if i//N < N/2 else np.sum(J[:,i//N,N-1])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011157407407407318}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if abs(i//N - j) == 0 or abs((i%N)-(j%N)) == 0:
        site_nbrs.append(site_nbr)
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010029320987654314}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i%N,i//N]
    else:
      h_site = -J[0,i%N,i//N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N+j)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[j,i%N,i//N]
        priorities[i][1] -= J[j,i%N,i//N]
      else:
        priorities[i][0] -= J[j,i%N,i//N]
        priorities[i][1] += J[j,i%N,i//N]

    priorities[i][0] += h_site
    priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': 0.0003702160493827161}
#island_id: 1
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i//N,i//N]*h[(i-1)%N][i%N] + J[2,i//N,i//N]*h[(i+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i//N,i//N]*h[(i-1)%N][i%N] + J[2,i//N,i//N]*h[(i+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016452160493827153}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N]*J[k,i%N,i//N] for k, s in enumerate(site_nbrs)])
    else:
      h_site = -sum([h[s][i%N]*J[k,i%N,i//N] for k, s in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00034212962962963}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if i // N + (j % 2) < N and i % N + (j-1)%2 >= 0:
        site_nbr = (i // N + (j % 2) * N + (i % N + (j-1)%2)) % N
        h_site += J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 2
#version_generated: 3
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    if magnetism > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.722222222222743e-06}
#island_id: 2
#version_generated: 3
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001871913580246912}
#island_id: 2
#version_generated: 3
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (1,0)]:
      site_nbr_d = ((i // N + d[0]) % N + ((i % N + d[1] - 1) % 2 - 1)) % N
      if J[d[1], i%N, i//N] > 0:
        h_site += J[d[1], i%N, i//N]*h[site_nbr_d][i%N]
      else:
        h_site -= J[d[1], i%N, i//N]*h[site_nbr_d][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001044598765432099}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005483024691358032}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+N-1)%N, (i+N+1)%N, ((i-N) % N)]
    if all(h[i//N][j] > 0 for j in neighbors):
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[j][i%N] for k,j in zip(range(3),neighbors)])
      priorities[i][1] = -priorities[i][0]
    elif all(h[i//N][j] < 0 for j in neighbors):
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[j][i%N] for k,j in zip(range(3),neighbors)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(2*h[j][i%N]) for k,j in zip(range(3),neighbors)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003784104938271605}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1)%N, ((i+N-1)%N)%N]
    neighbor_values = [J[k,i//N,i%N]*h[j][i%N] for k,j in zip([0,2,3],neighbors)]
    priority_site = h_site + sum(neighbor_values)
    
    priorities[i][0] = -priority_site
    priorities[i][1] = priority_site
  
  return(priorities)




#score: {'data2D.txt': -0.0011242283950617282}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbrs[j]][i%N] if J[0,i%N,i//N]>0 else -h[site_nbrs[j]][i%N] for j in range(4)]
    total_h = sum(h_sites)
    
    priorities[i][0] = total_h
    priorities[i][1] = -total_h

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021541666666666675}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    for j in site_nbrs:
      if J[0,j,i//N] > 0:
        h_site += sum([J[k,j,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      else:
        h_site -= sum([J[k,j,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005162191358024692}
#island_id: 1
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_sum = h[i//N][i%N]
    for k in range(4):
      if k == 0: neighbor = site_nbr1
      elif k == 1: neighbor = (i % N + ((i//N-2)%2 - 1)) % N
      elif k == 2: neighbor = i // N
      else: neighbor = site_nbr2
      site_sum += J[k,i%N,i//N]*h[neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010958333333333328}
#island_id: 1
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = -site_energy
    priorities[i][1] = site_energy

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 1
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] * J[k,i//N,i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00035509259259259207}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      if i % N == 0:  # left edge
        priorities[i][0] = h_site + sum([J[k,i//N,N-1]*h[(k+N-1)%N][0] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:  # right edge
        priorities[i][0] = h_site + sum([J[k,N-1,i//N]*h[(k+N-1)%N][N-1] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0:  # left edge
        priorities[i][0] = -h_site - sum([J[k,i//N,N-1]*h[(k+N-1)%N][0] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:  # right edge
        priorities[i][0] = -h_site - sum([J[k,N-1,i//N]*h[(k+N-1)%N][N-1] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283956}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[j][i%N] for j in range(N)) if h[i//N][i%N] > 0 else -sum(h[j][i%N] for j in range(N))
    priorities[i][0] = J[0,i%N,i//N]*total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002127932098765433}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.6512345679011386e-05}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (site_nbr + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site += sum([J[k, site_nbr2, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k, site_nbr2, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003260802469135808}
#island_id: 1
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sites = [h[s][i%N] if J[0,s,i//N] > 0 else -h[s][i%N] for s in site_nbrs]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005535493827160494}
#island_id: 1
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 2
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_term = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + spin_term
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013004629629629631}
#island_id: 0
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013564814814814795}
#island_id: 0
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i//N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008291666666666662}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum([J[2,k,i//N]*h[k,i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum([J[2,k,i//N]*h[k,i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = np.sum([J[k, (i+N-1)%N, i//N]*h[(k+N-1)%N][(i+N-1)%N] if k == 0 else J[k, i%N, (i//N+N-1)%N]*h[site_nbr][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001050154320987654}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += J[0, i%N, i//N]
        total_spin[i*N+j][1] -= J[1, i%N, i//N]
      else:
        total_spin[i*N+j][0] -= J[2, i%N, i//N]
        total_spin[i*N+j][1] += J[3, i%N, i//N]

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][1]
    else:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][1]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00046219135802469147}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006455246913580248}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(4) if (J[k, i % N, i // N]) != 0]
    total_h = sum([h[(i + ((j-1)%2 - 1)) % N][i%N] * J[m, i % N, i // N] for j,m in zip(range(N),neighbors)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005277623456790124}
#island_id: 0
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0 and i//N+k < N and (k+1)%2 == ((i//N)%2 + (i%N)%2) % 2:
        h_site += J[k,i%N,i//N]*h[(i//N+k)%N][i%N]
      elif J[k,i%N,i//N] > 0 and i//N+k >= N and (k+1)%2 == ((i//N-1)%2 + (i%N)%2) % 2:
        h_site -= J[k,i%N,i//N]*h[(i//N+k-2*N)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015387345679012347}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if i != j and abs(i-j) == N-1:
          priorities[i][0] += J[1,i//N,j//N]*h[j//N][j%N]
          priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if i != j and abs(i-j) == N-1:
          priorities[i][0] += J[1,i//N,j//N]*h[j//N][j%N]
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3369853395061719}
#island_id: 1
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07077700617283955}
#island_id: 1
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    
    h_site = h[i//N][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities by absolute value
  priorities = np.argsort(np.abs(priorities), axis=1)
  
  return(priorities)




#score: {'data2D.txt': -0.013042746913580245}
#island_id: 1
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1)%N) if i%N == 0 else (i//N+((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr1][i%N]
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,(i+k-2)%N]*h[i//N,(i+k-2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,(i+k-2)%N]*h[i//N,(i+k-2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013949074074074074}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up    = (i+N-1)%N*N + i%N
    site_down  = (i-N)%N*N + i%N
    site_left  = (i//N)*N + (i%N-1) % N
    site_right = (i//N)*N + (i%N+1) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

    if i % N > 0:
      site_left_val = priorities[i-1][0]
    else: 
      site_left_val = float('inf')

    if i % N < N-1:
      site_right_val = priorities[i+1][0]
    else: 
      site_right_val = float('-inf')

    if i >= N:
      site_up_val = priorities[i-N][0]
    else: 
      site_up_val = float('inf')

    if i < N*N - N:
      site_down_val = priorities[i+N][0]
    else: 
      site_down_val = float('-inf')

    priorities[i][1] -= (site_left_val + site_right_val + site_up_val + site_down_val) / 4

  return(priorities)




#score: {'data2D.txt': 0.001054166666666667}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr,k in zip(site_nbrs,range(4))]
    priorities[i][0] = sum([h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for h_site,k in zip(h_sites,range(4))])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    site_mag = h[i//N][i%N]
    neighbor_mags = [h[(k+N-1)%N][i%N] for k in range(3)]
    site_energy = h_site + sum([J[k,i%N,i//N]*neighbor_mags[k] for k in range(3)])
    
    priorities[i][0] = site_mag*site_energy
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.22958379629629633}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]) * (1 + J[1,(i+1)%N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]) * (1 - J[1,(i+1)%N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.04992299382716051}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr = (k + ((i%N-1)%2 - 1)) % N
      total_spin += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0]+=h[site_nbr][j]
      if h[i][j]>0:
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][1]+=1
  return(total_spin)




#score: {'data2D.txt': -0.1600875}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = (magnetism + h_site) + neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00017824074074074058}
#island_id: 2
#version_generated: 3
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, (i+N-1)%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.037919598765432126}
#island_id: 2
#version_generated: 3
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][i%N] for j in range(N)]) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([h[j][i%N] for j in range(N)]) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 1
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 1
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = (1-2*j)*(h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 3
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in range(4):
      x,y = ((i//N + (-1)**dir)%N, (i%N + (-1)**((dir+2)%4))%N)
      priorities[i][0] += J[dir,i//N,i%N]*h[x][y]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for spin in range(2):
      if h[i//N][i%N] > 0:
        if spin == 1:
          priorities[i][spin] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][spin] = -priorities[i][1-spin]
      else:
        if spin == 0:
          priorities[i][spin] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][spin] = -priorities[i][1-spin]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -0.0020476851851851854}
#island_id: 2
#version_generated: 3
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i//N,j]*h[(k+N-1)%N][j] for k in range(3)]) + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i//N,j]*h[(k+N-1)%N][j] for k in range(3)]) - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018050925925925938}
#island_id: 3
#version_generated: 3
#generate time06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum(h[site_nbr])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum(h[site_nbr])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008905864197530867}
#island_id: 3
#version_generated: 3
#generate time06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a trick to break symmetry
  for i in range(N**2):
    if i % 2 == 0:
      priorities[i, 0], priorities[i, 1] = priorities[i, 1], priorities[i, 0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012736111111111108}
#island_id: 3
#version_generated: 3
#generate time06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = (np.sum(J[:,i//N,i//N]) + np.sum(J[:,i%N,:(i+N)//N])) * ((-1)**(i//N % 2))
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.00017669753086419716}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1642010802469138}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h[site_nbr][i%N], h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h[site_nbr][i%N], -h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 3
#version_generated: 3
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007177469135802461}
#island_id: 2
#version_generated: 3
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N] * (h[(i // N + 1) % N][i % N] if i // N < N - 1 else h[0][i % N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N] * (h[(i // N + 1) % N][i % N] if i // N < N - 1 else h[0][i % N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007229938271604935}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    up_nbr = ((i//N-1)%N + i%N) % N
    down_nbr = ((i//N+1)%N + i%N) % N
    left_nbr = (i//N + (i%N-1)) % N
    right_nbr = (i//N + (i%N+1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if spin == 1:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*spin*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*spin*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.175029475308642}
#island_id: 1
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h_site = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h_site = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] < 0:
        priorities[i][0] = h_site = -h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h_site = -h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h_site = -h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] < 0:
        priorities[i][0] = h_site = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h_site = -h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008538580246913565}
#island_id: 0
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i//N,k//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -h[site_nbr][i%N]
      else:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = h[site_nbr][i%N]
      else:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.00102608024691358}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % N - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,site_nbr2,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,site_nbr2,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030646604938271605}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * (1 + (-1)**(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018276234567901237}
#island_id: 1
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + J[0,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - J[0,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 1
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      J_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015498456790123461}
#island_id: 2
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(h[k,N-1-k] for k in range(N)), sum(-1 if J[l,k,N-1-k]%2 == 0 else 1 for l,k in zip(range(4),range(N)))])
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[1] - total_spin[0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013101851851851908}
#island_id: 2
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply a symmetry property
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,(i+N)%N]*h[(k+N-1)//N][(i+N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i//N,(i+N)%N]*h[(k+N-1)//N][(i+N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0,0])
    if h[i//N][i%N] > 0:
      total_spin += [1,-1]
    else:
      total_spin -= [1,1]

    for j in range(3):
      site_nbr2 = (site_nbr + ((j-1)%N - N//2)) % N
      if J[0,i%N,i//N]*h[site_nbr][i%N] > 0:
        total_spin += [1,-1]
      else:
        total_spin -= [1,1]

    priorities[i][0] = np.dot(total_spin,[1,-1])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011853395061728396}
#island_id: 3
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(N):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        total_spin += h[site_nbr_k][i%N]
      else:
        total_spin -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_total = h[i//N][i%N]
    j_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h_total > 0:
      priorities[i][0] = h_site + j_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - j_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003768981481481482}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i//N]*h[site_nbr1][i%N] + J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i//N]*h[site_nbr1][i%N] - J[1,i//N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008254629629629628}
#island_id: 3
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0:
        j_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        j_nbr = (i % N + (1 + (i//N-1)%2 - 1)) % N
      elif k == 2:
        j_nbr = (i % N + ((i//N+1)%N + (i//N-1)%2 - 1)) % N
      else:
        j_nbr = (i % N + ((i//N-1)%N + (i//N-1)%2 - 1)) % N

      if h[i//N][j_nbr] > 0:
        priorities[i][0] += J[k,i%N,j_nbr]
        priorities[i][1] -= J[k,i%N,j_nbr]
      else:
        priorities[i][0] -= J[k,i%N,j_nbr]
        priorities[i][1] += J[k,i%N,j_nbr]

  return(priorities)




#score: {'data2D.txt': 0.0006717592592592588}
#island_id: 3
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001214660493827161}
#island_id: 3
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (J[2,i%N,i//N] - J[1,i%N,i//N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (J[2,i%N,i//N] - J[1,i%N,i//N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000524228395061729}
#island_id: 3
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([h[j][i%N] for j in range(N) if J[0,j,i//N] > 0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([h[j][i%N] for j in range(N) if J[0,j,i//N] > 0])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2855942901234563}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate the magnetism of the site
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.08906589506172848}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[1, i%N, i//N] > 0:
        h_site_nbr = h[site_nbr][i%N]
      else:
        h_site_nbr = -h[site_nbr][i%N]

      priorities[i][0] = -h_site + h_site_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.2662560185185183}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum([J[k,i,j]*h[site_nbr][k%N] for k in range(4)])
        total_spin[i*N+j][1] -= len([k for k in range(4) if J[k,i,j]>0])
      else:
        total_spin[i*N+j][0] -= sum([J[k,i,j]*h[site_nbr][k%N] for k in range(4)])
        total_spin[i*N+j][1] += len([k for k in range(4) if J[k,i,j]<0])
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*magnetism for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024881172839506184}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for j in range(4):
      if i % N + J[j, i % N, i // N] >= 0:
        total_priority += h_site + sum([J[k, i % N, i // N] * h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        total_priority -= h_site - sum([J[k, i % N, i // N] * h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority

  return(priorities)




#score: {'data2D.txt': 0.15236743827160515}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] * j > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007720679012345682}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009066358024691358}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1 if k%2==0 else 1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1 if k%2==0 else 1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005063271604938266}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(i//N-1)%N, (i//N+1)%N, ((i+N-1)%N)//N, ((i-N-1)//N)%N]
    for nb in nbs:
      if J[0,i%N,nb] > 0:
        h_site += sum([J[k,i%N,nb]*h[(k+N-1)%N][i%N] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,nb]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003229938271604934}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015044753086419758}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if J[j,i%N,i//N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3) if (k+1)%2 == j])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3) if (k+1)%2 == j])

  return(priorities)




#score: {'data2D.txt': 0.15030416666666688}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1)%N, (i+1)%N, (j-1)%N, (j+1)%N]
      if h[i][j] > 0:
        total_spin = sum([J[k,i,j]*h[site_nbrs[k],j] for k in range(4)])
        priorities[i*N+j][0] = total_spin
        priorities[i*N+j][1] = -total_spin
      else:
        total_spin = -sum([J[k,i,j]*h[site_nbrs[k],j] for k in range(4)])
        priorities[i*N+j][0] = -total_spin
        priorities[i*N+j][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.00036219135802469083}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%N + (i//N-1)//N)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16239058641975324}
#island_id: 1
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * (1 + (-1)**(i//N+i%N))
    for k in range(3):
      if i//N+k < N and J[k,i%N,i//N] > 0:
        total_energy += J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      elif i//N+k >= N and J[k,i%N,i//N] > 0:
        total_energy -= J[k,i%N,i//N] * h[(k+N-1)%N][i%N]

    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.13809182098765435}
#island_id: 1
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total += h[(k+N-1)%N][i%N]
      else:
        total -= h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018683641975308645}
#island_id: 3
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(4):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        total += J[k, i%N, i//N]*h[site_nbr2][i%N]
      else:
        total -= J[k, i%N, i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    total_neighbor_spin = np.sum(neighbors)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_neighbor_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_neighbor_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1623770061728395}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + spin_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -2.1450617283949256e-05}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[j][i%N] * J[0,i%N,j//N] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10781620370370376}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h[i//N][i%N] + h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013828703703703718}
#island_id: 2
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[site_nbr][j]*J[k,i%N,j//N] for k, j in [(0, j) for j in range(N)]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 2
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site_nbr = h[site_nbr][i%N]
      else:
        h_site_nbr = -h[site_nbr][i%N]

      total_spin += h[i//N][i%N]*J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 1
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008856481481481502}
#island_id: 1
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[i][site_nbr] > 0:
      total_spin[i*N+site_nbr][0] += 1
      total_spin[i*N+site_nbr][1] -= 1
    else:
      total_spin[i*N+site_nbr][0] -= 1
      total_spin[i*N+site_nbr][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = sum([J[k,i//N,k%N]*total_spin[(k+N-1)%N*N+k%N][0] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,k%N]*total_spin[(k+N-1)%N*N+k%N][0] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 1
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    h_site = h[site_nbr][i%N]
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00042762345679012284}
#island_id: 3
#version_generated: 3
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    h_site += sum([J[k,i%N,i//N]*total_spin[k] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00040879629629629523}
#island_id: 3
#version_generated: 3
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018149691358024694}
#island_id: 0
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+2)%N,i//N]*h[(k+N-1)%N][(i+2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+2)%N,i//N]*h[(k+N-1)%N][(i+2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 0
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.031213734567901233}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -J[0,i//N,i%N]*total_spin[i][0]
      priorities[i][1] = J[0,i//N,i%N]*total_spin[i][0]
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = J[0,i//N,i%N]*total_spin[i][1]
      priorities[i][1] = -J[0,i//N,i%N]*total_spin[i][1]
    else:
      if random.random() > 0.5:
        priorities[i][0] = -J[0,i//N,i%N]*total_spin[i][0]
        priorities[i][1] = J[0,i//N,i%N]*total_spin[i][0]
      else:
        priorities[i][0] = J[0,i//N,i%N]*total_spin[i][1]
        priorities[i][1] = -J[0,i//N,i%N]*total_spin[i][1]

  return priorities




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011712962962962991}
#island_id: 0
#version_generated: 2
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i-1) % (N*N)
    right_nbr = (i+1) % (N*N)
    up_nbr = i-N
    down_nbr = i+N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.013856018518518518}
#island_id: 2
#version_generated: 3
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      if k == 1:
        site_nbr = (i % N + ((i//N-1)%2)) % N
      elif k == 2:
        site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
      else:
        site_nbr = (site_nbr)
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006302932098765431}
#island_id: 0
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Improve the priority by considering the interaction with the four nearest neighbors
  for i in range(N**2):
    site_nbr1 = (i % N + 1) % N
    site_nbr2 = (i % N - 1) % N
    site_nbr3 = (i // N + 1) % N
    site_nbr4 = (i // N - 1) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr3][i%N]
      priorities[i][0] += J[1,i%N,i//N]*h[site_nbr4][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr3][i%N]
      priorities[i][0] -= J[1,i%N,i//N]*h[site_nbr4][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 0
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[i//N][i%N] == 0 else h[site_nbr][i%N]
    
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = J_sum if h[i//N][i%N] > 0 else -J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007810185185185196}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003459104938271605}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i//N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i//N]

    priorities[i][0] = h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012479938271604933}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]*h[(i//N+N-2)%N][(i%N+1)%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 1
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if sum(neighbors) > 0:
      priorities[i][0] = h_site + np.sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010689814814814822}
#island_id: 1
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i//N,(i+1)%N]*h[(k+N-1)//N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i//N,(i+1)%N]*h[(k+N-1)//N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_total
      priorities[i][1] = -priorities[i][0]
    else:
      spin_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_total
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004970679012345676}
#island_id: 3
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31103626543209806}
#island_id: 2
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17770046296296324}
#island_id: 3
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20064089506172855}
#island_id: 0
#version_generated: 2
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_h = h[i//N][i%N]
      for k in range(4):
        if (k==0 and i//N>0) or (k==1 and i%N>N-1) or (k==2 and i//N<N-1) or (k==3 and i%N<0):
          sum_h += J[k,i%N,i//N]*h[(i//N+k)%N][i%N]
      if j:
        priorities[i][j] = -sum_h
      else:
        priorities[i][j] = sum_h

  return(priorities)




#score: {'data2D.txt': -0.006046141975308642}
#island_id: 0
#version_generated: 2
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbrs[j%2]][i%N] if J[j,i//N,i%N] > 0 else -h[site_nbrs[j%2]][i%N] for j in range(4)]
    priorities[i][0] = sum([h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for h_site, _ in zip(h_sites, [1,-1,1,1])])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]

    if sum(h_sites) > 0:
      priorities[i][0] = np.sum(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 6.21913580246912e-05}
#island_id: 2
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k == 2: 
        site_nbr_up = (i % N + ((i//N-1)%2 - 2)) % N
        if J[k,i%N,i//N] > 0:
          h_site += h[site_nbr_up][i%N]
        else:
          h_site -= h[site_nbr_up][i%N]
      elif k == 1: 
        site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += h[site_nbr_left][i%N]
        else:
          h_site -= h[site_nbr_left][i%N]
      elif k == 0: 
        site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += h[site_nbr_down][i%N]
        else:
          h_site -= h[site_nbr_down][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.032676080246913576}
#island_id: 2
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009760802469135806}
#island_id: 3
#version_generated: 3
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-1)//N) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-1)//N) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007800925925925934}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(N):
      site_nbr_j = (j + ((i%N-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin += h[site_nbr_j][j]
      else:
        total_spin -= h[site_nbr_j][j]

    priorities[i][0] = (total_spin@np.array([-1,-1,0,1])) + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009667746913580248}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    priorities[i][0] = sum([J[k,i%N,i//N]*spin for k, spin in zip(range(3), total_spin)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_h > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.05331095679012347}
#island_id: 1
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (j + ((i-1)%N - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site_neighbor = h[site][i%N]
      else:
        h_site_neighbor = -h[site][i%N]

      total_spin += [h[i//N][j], h_site_neighbor]

    priorities[i][0] = sum([x*y for x, y in zip(total_spin, [1, -1])])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011875000000000002}
#island_id: 1
#version_generated: 2
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if all([J[k,i%N,i//N]*h[site_nbr][i%N] > 0 for k,site_nbr in zip(range(3),site_nbrs)]):
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    elif all([J[k,i%N,i//N]*h[site_nbr][i%N] < 0 for k,site_nbr in zip(range(3),site_nbrs)]):
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05996743827160496}
#island_id: 1
#version_generated: 2
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    magnetism = h[i//N][i%N] if J[0,i%N,i//N]>0 else -h[i//N][i%N]

    priorities[i][0] = 2*h_site + magnetism
    priorities[i][1] = 2*(-h_site - magnetism)
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017976851851851851}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for site_nbr in site_nbrs:
      if i//N != site_nbr // N and i % N != site_nbr % N:
        h_site += J[0,site_nbr//N,i//N]*h[site_nbr//N][site_nbr%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001185648148148148}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  # Compute total spin at each site
  total_spin = np.zeros((N,N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
        
  # Compute priority for each site based on interaction with neighbors and magnetism
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site][i//N]
    else:
      h_site = -h[site][i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015756172839506165}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      k = (j + i % N + ((i//N-1)%2) - 1) % N
      if J[j,i%N,i//N] > 0:
        h_sum = h[k][i%N]
      else:
        h_sum = -h[k][i%N]

      priorities[i][0] += h_site + h_sum
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 0
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002833796296296295}
#island_id: 0
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[0,i%N,(j+N-1)%N] for j in range(3)]
    sum_neighbors = np.sum(neighbors)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + sum_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      sum_h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - sum_h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j in site_nbrs:
      if J[0,j,i//N] > 0:
        h_neighbor = h[j][i%N]
      else:
        h_neighbor = -h[j][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= 2 * (1 + h_site * h_neighbor)
      else:
        priorities[i][0] -= h_site - h_neighbor
        priorities[i][1] += 2 * (-1 + h_site * h_neighbor)

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 1
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] * J[k,i%N,i//N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004030401234567901}
#island_id: 2
#version_generated: 3
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(N):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site2 = h[site_nbr2][i%N]
      else:
        h_site2 = -h[site_nbr2][i%N]

      total_spin[0] += h_site + sum([J[k,i%N,i//N]*h_site2 for k in range(3)])
      if J[0,i%N,i//N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005561265432098767}
#island_id: 1
#version_generated: 2
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N

    h_site = h[site_nbr1][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,site_nbr1]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 1
#version_generated: 2
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][k] for k in range(3)]) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr2][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16019212962962973}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    for k in range(3):
      site_k = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += total_h_site + J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= total_h_site - J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020535493827160503}
#island_id: 1
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + J[0,i%N,i//N]*h_site2) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + J[0,i%N,i//N]*h_site2)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08969830246913588}
#island_id: 1
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.log(1+np.exp(sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.log(1+np.exp(sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009084876543209877}
#island_id: 1
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(i//N-1)%N][i%N] if i % N != 0 else 0
    right_spin = h[(i//N+1)%N][i%N] if i % N != N-1 else 0
    up_spin = h[i//N][(i%N-1)%N] if i % N != 0 else 0
    down_spin = h[i//N][(i%N+1)%N] if i % N != N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*spin for k, spin in enumerate([left_spin, right_spin, up_spin, down_spin])])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*spin for k, spin in enumerate([left_spin, right_spin, up_spin, down_spin])])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.219135802469201e-05}
#island_id: 0
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N] * h[(2 + N - 1) % N][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N] * h[(2 + N - 1) % N][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if J[k,i%N,i//N]>0 else -h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025532407407407405}
#island_id: 2
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or J[1,i%N,i//N] > 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005955246913580248}
#island_id: 3
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N or i % N == (k + i // N) % N:
        h_site += J[k, i % N, i // N] * h[(k + N - 1) % N][i % N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006444907407407408}
#island_id: 3
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.017008796296296296}
#island_id: 3
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      neighbor = (k*N + i % N) % N
      if J[k, i%N, i//N] > 0:
        h_neigh = h[neighbor, i%N]
      else:
        h_neigh = -h[neighbor, i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neigh
        priorities[i][1] -= 2 * (h_site + h_neigh)
      else:
        priorities[i][0] -= h_site - h_neigh
        priorities[i][1] += 2 * (h_site - h_neigh)

  return(priorities)




#score: {'data2D.txt': -0.0023455246913580245}
#island_id: 0
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013692901234567895}
#island_id: 0
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N,
           (i % N + ((i // N + 1) % 2 - 1)) % N]
    h_site_sum = sum([h[site_nbr][i % N] for site_nbr in site_nbrs])
    J_site_sum = sum([J[k, i % N, i // N] * h[site_nbr][i % N] for k, site_nbr in enumerate(site_nbrs)])
    if h[i // N][i % N] > 0:
      priorities[i][0] = -h_site_sum + J_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site_sum - J_site_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007800925925925923}
#island_id: 0
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    if i % (N*N) < N:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001748456790123456}
#island_id: 1
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[2,site_nbr1,site_nbr2]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[2,site_nbr1,site_nbr2]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017683641975308648}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if (J[0,i%N,i//N] > 0 and h[i//N][i%N] > 0) or (J[0,i%N,i//N] < 0 and h[i//N][i%N] < 0):
      priorities[i][0] = sum([h[j][i%N]*J[k,j,i//N] for k, j in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    elif (J[1,i%N,i//N] > 0 and h[i//N][i%N] > 0) or (J[1,i%N,i//N] < 0 and h[i//N][i%N] < 0):
      priorities[i][0] = sum([h[j][i%N]*J[k,j,i//N] for k, j in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    elif (J[2,i%N,i//N] > 0 and h[i//N][i%N] > 0) or (J[2,i%N,i//N] < 0 and h[i//N][i%N] < 0):
      priorities[i][0] = sum([h[j][i%N]*J[k,j,i//N] for k, j in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = sum([h[j][i%N]*J[k,j,i//N] for k, j in enumerate(site_nbrs)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([h[j][i%N]*J[k,j,i//N] for k, j in enumerate(site_nbrs)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00021774691358024685}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N], axis=0)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N], axis=0)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2143149691358026}
#island_id: 1
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(2*h_site+1)
    else:
      priorities[i][0] = -(1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = 2*h_site+1

  return(priorities)




#score: {'data2D.txt': 0.0009174382716049379}
#island_id: 1
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001408796296296296}
#island_id: 0
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004499537037037036}
#island_id: 0
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i//N,i%N]
    else:
      h_site = -J[0,i//N,i%N]

    for k in range(3):
      site_nbr_nbr = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site_nbr_nbr][i%N] > 0:
        h_site += J[k+1,i//N,i%N]
      else:
        h_site -= J[k+1,i//N,i%N]

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contributions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_contributions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_contributions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03902947530864197}
#island_id: 0
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][1] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002390277777777779}
#island_id: 1
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N//2)%N)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1083285493827161}
#island_id: 1
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + priority
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = 0
    for k in range(3):
      sum_neighbors += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 3
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=(i+(j-1)%2-1)%N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
        total_spin[i*N+j][1]+=1
  for i in range(N):
    for j in range(N):
      site_nbr=(i+(j-1)%N-N//2)%N
      total_spin[i*N+j][0]+=h[site_nbr][j]
      if h[i][j]>0:
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][1]+=1
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priorities[i][0]=total_spin[i][0]
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-total_spin[i][0]
      priorities[i][1]=-priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 3
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias
      priorities[i][1] = -spin_bias
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_bias
      priorities[i][1] = spin_bias

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025523148148148146}
#island_id: 3
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contrib = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_contrib
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_contrib
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N])*(1 + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N])*(1 + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000697376543209876}
#island_id: 2
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N: 
        site_nbr = (site_nbr + 1) % N
      elif i % (2*N) >= N and i % (2*N) < 2*N:
        site_nbr = (site_nbr - 1) % N
      else:
        if h[i//N][i%N] > 0:
          site_nbr = (site_nbr + 1) % N
        else:
          site_nbr = (site_nbr - 1) % N

      priorities[i][0] = -h_site - sum([J[k,site_nbr,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004022067901234567}
#island_id: 2
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.21850324074074076}
#island_id: 1
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (1,0), (0,-1), (-1,0)]:
      neighbor = (i//N + direction[0], i%N + direction[1])
      if 0 <= neighbor[0] < N and 0 <= neighbor[1] < N:
        h_neighbor = h[neighbor[0]][neighbor[1]]
        if J[direction[0], i//N, i%N] > 0:
          priorities[i][0] += h_site + h_neighbor
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site - h_neighbor
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004797839506172843}
#island_id: 1
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 3
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = 0
    for j in range(3):
      spin_energy += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities=total_spin.copy()
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site=h[site_nbr][i%N]
    else:
      h_site=-h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0]=h_site+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-h_site-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 0
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0348307098765432}
#island_id: 0
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = J[1,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -J[1,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -J[1,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = J[1,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009066358024691358}
#island_id: 0
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2768124999999996}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1+h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = 1-h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0, i%N, i//N] > 0 else -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 1.3425925925925897e-05}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N:
        continue
      priorities[i][0] += J[k,i//N,k%N] * h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][1] += priorities[i][0]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.tanh(h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = np.tanh(-priorities[i][0])
    else:
      priorities[i][0] = -np.tanh(-h_site - np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = np.tanh(-priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -0.2621871913580244}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h[i//N][i%N] + h_site + sum_neighbors
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_knbr = (i % N + ((k+N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k, i%N, i//N]*h[site_knbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[k, i%N, i//N]*h[site_knbr][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004433641975308641}
#island_id: 2
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 or k == 1:
        neighbor_spin = J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      elif k == 2 and i//N != 0:
        neighbor_spin = J[3,i%N,(i//N-1)%N] * h[i%N,(i//N-1)%N]
      else:
        continue

      if h[i//N][i%N] > 0:
        priorities[i][0] += neighbor_spin
        priorities[i][1] -= neighbor_spin
      else:
        priorities[i][0] -= neighbor_spin
        priorities[i][1] += neighbor_spin

  return(priorities)




#score: {'data2D.txt': 0.0019146604938271613}
#island_id: 2
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    for j in range(2):
      if J[0,i//N,i%N] > 0:
        if h[i//N][i%N] > 0:
          if j == 0:
            priorities[i][j] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
          else:
            priorities[i][j] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          if j == 0:
            priorities[i][j] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
          else:
            priorities[i][j] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if h[i//N][i%N] > 0:
          if j == 0:
            priorities[i][j] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
          else:
            priorities[i][j] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          if j == 0:
            priorities[i][j] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
          else:
            priorities[i][j] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00035817901234567876}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr_k][i%N]
      else:
        total_spin -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(J[:,i//N,i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(J[:,i//N,i%N], total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007643518518518516}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[2,i%N,i//N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002985648148148149}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[0,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] += 1
      
      site_nbr3 = (i + ((j-2)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[1,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[1,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] += 1
      
      site_nbr4 = (i + ((j+2)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[3,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[3,i%N,j//N]*h[site_nbr1][j]
        total_spin[i*N+j][1] += 1
      
  return(total_spin)




#score: {'data2D.txt': -0.001831635802469136}
#island_id: 1
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0), (-1,0), (0,1), (0,-1)]:
      if J[d[0], i//N, i%N] > 0:
        h_site += J[d[0], i//N, i%N] * h[(i//N+d[0]) % N][i%N]
      else:
        h_site -= J[d[0], i//N, i%N] * h[(i//N+d[0]) % N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002896141975308642}
#island_id: 1
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 1
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_h = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbors_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.3981481481481236e-05}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J[0,i%N,i//N]*(-h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004518364197530865}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006298611111111112}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006374537037037037}
#island_id: 2
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]
    for k in range(3):
      if i//N == (k+N-1)//N and i%N == (k+N-1)%N:
        total_energy += J[k,i%N,i//N]*h[k%N][i%N]
      elif i//N == (k+N-1)//N:
        total_energy += J[k,i%N,i//N]*(h[k%N][i%N] - 2*h[i//N][i%N])
      else:
        total_energy += J[k,i%N,i//N]*(h[k//N][i%N] - h[i//N][i%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total = np.zeros((N,2))
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][0] += 1
        priority_total[site_nbr][1] -= 1
      else:
        priority_total[site_nbr][0] -= 1
        priority_total[site_nbr][1] += 1

      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] == 0 and total_spin[i][1] > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_spin[i][0] > 0 and total_spin[i][1] == 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
      else:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001543055555555557}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[3,i%N,site_nbr]*h[site_nbr][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[3,i%N,site_nbr]*h[site_nbr][i%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1591180555555558}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  # Calculate magnetism at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += 1
  
  # Calculate interactions with nearest neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] -= priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_h
    priorities[i][1] = -total_h

  return(priorities)




#score: {'data2D.txt': 0.07299459876543213}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    h_site = h[i//N][i%N] if J[0,i%N,i//N] > 0 else -h[i//N][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00014552469135802436}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) / 2
      priorities[i][1] = 1 - priorities[i][0]
    else:
      priorities[i][0] = (1 + np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))) / 2
      priorities[i][1] = 1 - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011712962962962991}
#island_id: 3
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i % N, i // N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i % N, i // N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008671296296296297}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0), (-1,0), (0,1), (0,-1)]:
      dx, dy = d
      site_nbr_x = ((i // N + dx) % N + ((i//N+dx-1)%2 - 1)) % N
      site_nbr_y = ((i % N + dy) % N)
      h_site += J[0,i%N,i//N]*h[site_nbr_x][site_nbr_y]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026033950617284}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site_nbr_k = (k + ((i+N-1)%N - N//2)) % N
      total_spin += J[k,i%N,i//N]*h[site_nbr_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006140432098765433}
#island_id: 1
#version_generated: 2
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006236111111111109}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = J[0,i//N,i%N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total = h_site
      for k in range(N**2):
        if (k % N == i % N and (k//N == i//N or (k//N + 1) % N == i//N)) or (k // N == site_nbr and k % N == i % N):
          total += J[(k//N)%4, k%N, i//N]*h[k//N][k%N]
      priorities[i][j] = total
  return(priorities)




#score: {'data2D.txt': 0.0014677469135802466}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i + ((i//N-1)%2)) % N
    site_down = (i + (((i//N)-1)%2+1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_up%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_down%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009328703703703738}
#island_id: 3
#version_generated: 3
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)]) for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008396604938271605}
#island_id: 3
#version_generated: 3
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += sum([J[m,k,i//N]*h[(m+N-1)%N][i%N] for m in range(4) if m != i])
      else:
        h_site -= sum([J[m,k,i//N]*h[(m+N-1)%N][i%N] for m in range(4) if m != i])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002918981481481482}
#island_id: 3
#version_generated: 3
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + 2*h_site) * spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 - 2*h_site) * spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_moment = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_moment = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = spin_moment + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007760802469135806}
#island_id: 2
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k][site_nbrs[0],i//N] for k in range(4)]) > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_h > 0:
      priorities[i][0] = total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total = [1, -1]
      else:
        priority_total = [-1, 1]

  return total_spin




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.1203703703703854e-05}
#island_id: 2
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / np.sqrt(sum(J[k,i%N,i//N]**2 for k in range(3)))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / np.sqrt(sum(J[k,i%N,i//N]**2 for k in range(3)))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0016001543209876545}
#island_id: 2
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023174382716049362}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0075328703703703695}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_k][i%N]
        if h_site > 0 and k % 2 == 1:
          priorities[i][0] -= J[k,i%N,i//N]
        elif h_site < 0 and k % 2 == 0:
          priorities[i][0] += J[k,i%N,i//N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_k][i%N]
        if h_site > 0 and k % 2 == 0:
          priorities[i][0] += J[k,i%N,i//N]
        elif h_site < 0 and k % 2 == 1:
          priorities[i][0] -= J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020884259259259267}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = (1.0 + (-1)**(j+1))*h_site
      else:
        priorities[i][j] = -(1.0 + (-1)**(j+1))*h_site

  return(priorities)




#score: {'data2D.txt': 5.354938271604859e-05}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N])*(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N])*(h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sign = 1
    else:
      sign = -1

    priorities[i][0] = sign * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004660956790123458}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = site_energy + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -site_energy - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28818132716049333}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h_site, -h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h_site, h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006492283950617283}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (J[1, i%N, i//N] + J[2, i%N, i//N])
    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007729938271604939}
#island_id: 2
#version_generated: 3
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 2
#version_generated: 3
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002471141975308642}
#island_id: 0
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_site = (i % N + ((i//N-1)%2)) % N
    right_site = (i % N + ((i//N+1)%2)) % N

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) - J[0,i%N,i//N]*h[left_site][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004140432098765432}
#island_id: 0
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N, 2), dtype=int)
  
  # Compute total spin at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  # Compute priority for each site based on total spin and interactions
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0005118827160493829}
#island_id: 0
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    for j in site_nbrs:
      h_site = J[0,i%N,i//N] * h[j][i%N]
      priorities[i][0] += h_site
    if h[i//N][i%N] > 0:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors = [k for k in range(3) if J[k,i%N,i//N] != 0]
      h_neighbors = sum([h[(k+N-1)%N][i%N]*J[k,i%N,i//N] for k in neighbors])
      priorities[i][0] = h_site + h_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors = [k for k in range(3) if J[k,i%N,i//N] != 0]
      h_neighbors = sum([h[(k+N-1)%N][i%N]*J[k,i%N,i//N] for k in neighbors])
      priorities[i][0] = -h_site - h_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009112654320987659}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = np.sign(h[i//N][i%N])

    priorities[i][0] = (1 + site_spin) * h_site + sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][1] = -(1 - site_spin) * h_site - sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    site_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = site_energy

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_product = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_product = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.009065277777777776}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      for j in range(4):
        priorities[i][0] += J[j,i//N,i%N]*h[site_nbrs[j]][i%N]
        priorities[i][1] -= priorities[i][0]
    else:
      for j in range(4):
        priorities[i][0] -= J[j,i//N,i%N]*h[site_nbrs[j]][i%N]
        priorities[i][1] += priorities[i][0]
  return([row[:2] for row in priorities])




#score: {'data2D.txt': -0.0012118827160493826}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(8):
      spin = np.random.choice([-1, 1])
      total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*spin for k in range(3)])
      total_magnetism = h_site*spin
      energy = total_energy + total_magnetism

      if energy < 0:
        priorities[i][0] += spin * (total_energy > 0)
        priorities[i][1] -= spin * (total_energy > 0)
        break
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011257716049382722}
#island_id: 0
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbrs[j]][i%N] * J[j,i//N,i%N] for j in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 0
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_spin_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + neighbors_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_spin_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - neighbors_spin_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.12336898148148148}
#island_id: 2
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017422839506172865}
#island_id: 0
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N]
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013171296296296297}
#island_id: 0
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00033132716049382685}
#island_id: 3
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        if h[i//N][i%N] > 0:
          priorities[i][j] = h_site + term1
        else:
          priorities[i][j] = -h_site - term1
      else:
        site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
        term2 = sum([J[k,i%N,i//N]*h[(k+N-3)%N][i%N] for k in range(3)])
        if h[i//N][i%N] > 0:
          priorities[i][j] = -h_site - term2
        else:
          priorities[i][j] = h_site + term2

  return(priorities)




#score: {'data2D.txt': -0.0026763888888888887}
#island_id: 3
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008044753086419751}
#island_id: 2
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = h[i//N][i%N] * (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = -spin_energy
    priorities[i][1] = spin_energy

  return(priorities)




#score: {'data2D.txt': -0.0003155864197530872}
#island_id: 1
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(np.abs(h))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(np.abs(h))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00018317901234567993}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      if i % N + dir[0] >= 0 and i % N + dir[0] < N and \
        i // N + dir[1] >= 0 and i // N + dir[1] < N:
        site = (i // N + dir[1]) * N + (i % N + dir[0])
        if J[0,site%N,site//N] > 0:
          h_site += h[site_nbr][site%N]
        else:
          h_site -= h[site_nbr][site%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    sum_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + sum_nbr
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0029921296296296306}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    J_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.10464737654320987}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + J[2,i//N,i%N]*h[(i//N+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[i//N][i%N] - J[2,i//N,i%N]*h[(i//N+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

    site_nbr = (i % N + ((i//N-1)%2 + 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site += J[3,i//N,i%N]*h[site_nbr][i%N]
    else:
      h_site -= J[3,i//N,i%N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[1,i//N,i%N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= J[1,i//N,i%N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007162037037037028}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_k = h[(k+N-1)%N][i%N]
      else:
        h_k = -h[(k+N-1)%N][i%N]
      h_site += h_k
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003602932098765432}
#island_id: 2
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N and J[1,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      elif i % (2*N) >= N and J[3,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.12336898148148148}
#island_id: 2
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[site][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[site][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.00023873456790123515}
#island_id: 2
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005415123456790116}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0 and J[0,i%N,i//N] > 0) or (h[i//N][i%N] < 0 and J[0,i%N,i//N] < 0):
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016665123456790143}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum(h[site_nbr][i%N] for site_nbr in site_nbrs) + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum(h[site_nbr][i%N] for site_nbr in site_nbrs) - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015637345679012354}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      if i % N + dir[0] < 0 or i % N + dir[0] >= N or i // N + dir[1] < 0 or i // N + dir[1] >= N:
        continue
      site_nbr_dir = (i % N + dir[0]) + ((i//N+dir[1])-1)%2 * N
      if J[dir[1], i%N, i//N] > 0:
        h_site += J[dir[1], i%N, i//N]*h[i//N][i%N]
      else:
        h_site -= J[dir[1], i%N, i//N]*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008214506172839509}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * (h[(k + N - 1) % N][i % N] if k == 0 else h[(k + N - 2) % N][i % N]) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * (h[(k + N - 1) % N][i % N] if k == 0 else h[(k + N - 2) % N][i % N]) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001621913580246911}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N]*h[site_nbr][i%N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = sum([J[k,i%N,i//N]*(h[site_nbr][k]%2-1) for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (i//N + ((k-1)%2 - 1)) % N == i//N:
        j_nn = k
        break

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[j_nn,i%N,i//N]*h[(j_nn+N-1)%N][i%N] for j_nn in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[j_nn,i%N,i//N]*h[(j_nn+N-1)%N][i%N] for j_nn in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001309104938271605}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if (i // N) % 2 == 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002122685185185184}
#island_id: 0
#version_generated: 2
#generate time08:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N+1)%N + ((i//N)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time08:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015540123456790077}
#island_id: 0
#version_generated: 2
#generate time08:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00048287037037037005}
#island_id: 1
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+1)%N][i%N] + J[2,i%N,i//N]*h[(i-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i+1)%N][i%N] + J[2,i%N,i//N]*h[(i-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j in range(2):
      priority = h_site
      for site_nbr in site_nbrs:
        if J[0,site_nbr,i//N] > 0:
          priority += J[0,site_nbr,i//N]*h[site_nbr//N][site_nbr%N]
        else:
          priority -= J[0,site_nbr,i//N]*h[site_nbr//N][site_nbr%N]
      priorities[i][j] = priority
  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 1
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_term = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -priority_term
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = prioritis[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][1] = prioritis[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004875}
#island_id: 1
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026442901234567896}
#island_id: 3
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin += [1,-1]
      else:
        total_spin -= [1,-1]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[1] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 3
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N])*h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N])*h_site
      priorities[i][1] = (1 - J[0,i%N,i//N])*h_site

  return(priorities)




#score: {'data2D.txt': 0.09859182098765433}
#island_id: 0
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + J[2,i//N,i%N]*h[(i//N+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[i//N][i%N] - J[2,i//N,i%N]*h[(i//N+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.620370370370466e-05}
#island_id: 0
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00242854938271605}
#island_id: 0
#version_generated: 2
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min(k+N-1,N-1)][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008766975308641983}
#island_id: 0
#version_generated: 2
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if J[0,i%N,i//N] > 0:
      h_sites = [h[j][i%N] for j in site_nbrs]
    else:
      h_sites = [-h[j][i%N] for j in site_nbrs]

    sum_h_sites = np.sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum_h_sites + sum([J[k,i%N,i//N]*h_sites[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h_sites - sum([J[k,i%N,i//N]*h_sites[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_interaction = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = site_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016563271604938259}
#island_id: 3
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.026772993827160505}
#island_id: 3
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    nn_h_site = (sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])+h_site)/2
    priorities[i][0] = nn_h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001112191358024691}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin += [h_site_j, (j==i%N)*h[i//N][i%N]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      sum_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + sum_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      sum_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - sum_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005856481481481486}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.032802314814814826}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004125462962962964}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,i%N,i//N]*h[site_nbr1][i%N]] + [J[1,i%N,i//N]*h[site_nbr2][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[0,i%N,i//N]*h[site_nbr1][i%N]] + [-J[1,i%N,i//N]*h[site_nbr2][i%N]])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20862793209876562}
#island_id: 3
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[i//N][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for k in range(4):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr_k][i%N]
      else:
        total_spin -= h[site_nbr_k][i%N]
    priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    J_sites = [J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(2),site_nbrs)]
    
    if sum(h_sites) > 0:
      priorities[i][0] = sum([hs + js for hs,js in zip(h_sites,J_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([hs + js for hs,js in zip(h_sites,J_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 1
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = np.sum([h[site][i%N] for site in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008587962962962961}
#island_id: 1
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(4):
      if ((k+1)%2) == ((i//N-1)%2):
        site_nbr = (i % N + ((i//N+k-1)%2 - 1)) % N
        sum_h += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        site_nbr = (i % N + ((i//N+k-2)%2 - 1)) % N
        sum_h -= J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for k in range(3):
      if ((k + (i % N) - 1) % N) != i % N and ((k + (i // N - 1)) % N) == i // N:
        sum_h += J[k, i % N, i // N] * h[(k + (i // N - 1)) % N][i % N]
      elif ((k + (i // N - 1)) % N) != i // N and ((k + (i % N) - 1) % N) == i % N:
        sum_h += J[k, i % N, i // N] * h[(k + (i // N - 1)) % N][i % N]
    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002578549382716049}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) + (i % N) % 2) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) - sum([J[k,site_nbr1,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) + sum([J[k,site_nbr1,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_neigh = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_neigh
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_neigh
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016297839506172844}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17200540123456792}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total += J[j,i//N,i%N]*h[(i+j-1)%N][i%N]
      else:
        total -= J[j,i//N,i%N]*h[(i+j-1)%N][i%N]

    priorities[i][0] = h_site + total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026214506172839505}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      x,y = (i // N + (d % 2)) % N, (i % N + (1 - (d % 2))) % N
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[x][y]
      else:
        h_site -= J[d,i//N,i%N]*h[x][y]

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000950154320987654}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N, N))
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007729938271604939}
#island_id: 3
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + priority_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002797685185185186}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = np.zeros(4)
      for k in range(N):
        site = (k + ((i//N-1)%2 - 1)) % N
        if h[k][i%N] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1

      if j == 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%4] for k in range(4)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%4] for k in range(4)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.12292608024691373}
#island_id: 0
#version_generated: 2
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0054631172839506165}
#island_id: 0
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h_site 
      for k in range(3):
        priorities[i][0] += sum([J[k,i%N,j]*h[(k+N-1)%N][j] for j in range(N)])
    else:
      priorities[i][0] -= h_site
      for k in range(3):
        priorities[i][0] -= sum([J[k,i%N,j]*h[(k+N-1)%N][j] for j in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005426388888888889}
#island_id: 0
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for j in range(3):
        total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -h[site_nbr][i%N]
      for j in range(3):
        total_spin -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[site_nbr][k]*J[k,i%N,i//N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014675925925925924}
#island_id: 0
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k+1)%2 == ((i//N-1) %2): 
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
  
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008217592592592592}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Improved version: Sort the priorities based on the site interactions
  priorities.sort(axis=1)

  return(priorities)




#score: {'data2D.txt': -0.0004643518518518518}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    total_energy = h[i // N][i % N] * h[i // N][i % N]
    for k in range(3):
      total_energy += 2 * J[k, i % N, i // N] * h[(k + N - 1) % N][i % N]

    if total_energy > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return (priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006617746913580246}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_neighbor = h[site_nbr2][i%N]
    else:
      h_neighbor = -h[site_nbr2][i%N]

    priorities[i][0] = h_site + J[0,i%N,i//N]*h_site + J[1,i%N,i//N]*h_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -5.848765432098768e-05}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(J[[0,1,2],i%N,i//N]*h[[site_nbr,N-1,N-1],[i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(J[[0,1,2],i%N,i//N]*h[[site_nbr,N-1,N-1],[i%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return total_spin




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001127932098765432}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i == (k+N-1)%N*N + (i%N):
        continue
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00043256172839506175}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(4):
        if k == 0:
          site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        elif k == 1:
          site_nbr = (i % N + ((i//N+1)%N - 1)) % N
        elif k == 2:
          site_nbr = (i % N + ((i//N)%N + 1)) % N
        else:
          site_nbr = (i % N + ((i//N-1)%N - 1)) % N

        if J[k,i%N,i//N] > 0:
          total_spin += h[site_nbr][i%N]
        else:
          total_spin -= h[site_nbr][i%N]

      priorities[i][j] = h_site + total_spin
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020162037037037028}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001943672839506173}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i // N - 1) % 2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023013888888888897}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N+k >= N or i%N+k >= N:
        site_nbr_k = (i//N+k)%N
        break
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00040478395061728403}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_left = (i - 1) % (N * N)
    site_right = (i + 1) % (N * N)
    site_up = i - N
    if site_up < 0: 
      site_up = i + (2*N)

    interactions = [J[0,i%N,i//N]*h[j][i%N] for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(interactions)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(interactions)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0026359567901234576}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          total_spin += h[(k+N-1)%N][i%N]
        else:
          total_spin -= h[(k+N-1)%N][i%N]
      if j == 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011575617283950618}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_neighbor = h[site_nbr2][i%N]
    else:
      h_neighbor = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016868827160493843}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_neighbors = [(i, j) for j in range(N) if abs((j-i)%N-1) == 1 or (j+i)%N == N-1]
    total_h_site = h_site
    for neighbor in site_neighbors:
      total_h_site += J[0, i%N, neighbor[0]%N] * h[neighbor[1]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008523148148148148}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (1,0), (-1,0), (0,-1)]:
      neighbor = ((i//N + dir[0]) % N, (i%N + dir[1]) % N)
      if neighbor != (i//N,i%N):
        h_neighbor = J[dir[0],neighbor[0],neighbor[1]]*h[neighbor[0]][neighbor[1]]
        if h[i//N][i%N] > 0:
          priorities[i][0] += h_site + h_neighbor
          priorities[i][1] -= h_site + h_neighbor
        else:
          priorities[i][0] -= h_site - h_neighbor
          priorities[i][1] += h_site - h_neighbor

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J_h = 0
    for k in range(3):
      sum_J_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008927932098765433}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr_j][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005381172839506159}
#island_id: 1
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Prioritize sites with stronger interactions
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,i//N]*h[j//N][j%N] for k in range(3) for j in [(k+N-1)%N,k+2]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i//N,i//N]*h[j//N][j%N] for k in range(3) for j in [(k+N-1)%N,k+2]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008785493827160522}
#island_id: 1
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[j][i%N] if J[0,i%N,j] > 0 else -h[j][i%N] for j in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0025260802469135803}
#island_id: 1
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[(k+1)%2][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[(k+1)%2][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014476851851851853}
#island_id: 1
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_neighbors = [(i+N-1)%N, (i+N+1)%N, (i-1)%N, (i+1)%N]
    total_spin = sum([J[k,i%N,i//N]*h[s][i%N] for k,s in enumerate(site_neighbors)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006242283950617283}
#island_id: 1
#version_generated: 2
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = J[0,i%N,i//N]*h[site_nbr1][i%N]
    h_site2 = J[0,i%N,i//N]*h[site_nbr2][i%N]
    
    if (h[i//N][i%N] > 0):
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005329783950617273}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0] - total_spin[0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0] + total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008973611111111111}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N/2) % N)
    total_spin = h[site_nbr1][i%N]
    if J[0,i%N,i//N] > 0:
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      for k in range(3):
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = 2*total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -5.046296296296271e-05}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1)%N + (i%N)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k, (i+k)%N, i//N]*h[(k+N-1)%N][(i+k)%N] for k in range(-1, 2) if ((k+1)%2 == (i%2)) and (0 <= k < N)])
  return priorities




#score: {'data2D.txt': -0.0014624999999999987}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_product = h[i//N][i%N]
    if J[1,i%N,i//N] > 0:
      spin_product *= -1
    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      spin_product *= h[(k+N-1)%N][i%N]

    if spin_product > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004983487654320988}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    spin = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    priorities[i][0] = h[site_nbr][i%N] + spin*total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013202160493827155}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i-1)%N if i % N != 0 else N-1,
           (i+1)%N if i % N != N-1 else 0,
           (i-N)%N if i < N else i,
           (i+N)%N if i >= N else i]
    for j in range(2):
      if J[0,site_nbrs[j],i//N] > 0:
        h_site = h[site_nbrs[j]][i%N]
      else:
        h_site = -h[site_nbrs[j]][i%N]

      priorities[i][j] = h[i//N][i%N]*h_site + sum([J[k,site_nbrs[j],i//N]*h[site_nbrs[k]%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0036609567901234614}
#island_id: 0
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][k]*J[0,i%N,k] for j in range(N) for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[j][k]*J[0,i%N,k] for j in range(N) for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.11036157407407413}
#island_id: 0
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*h[i//N][i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0010183641975308633}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00032299382716049395}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (0,-1), (-1,0), (1,0)]:
      site_dir = (i//N + dir[0]) % N * N + i % N + dir[1]
      if J[0,i%N,i//N] > 0:
        h_site += J[0,i%N,i//N]*h[dir[0],dir[1]]
      else:
        h_site -= J[0,i%N,i//N]*h[dir[0],dir[1]]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007245370370370368}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr2][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[site_nbr2][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.11469521604938271}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        priorities[i][0] += h_site + h[site][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h[site][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0005094135802469128}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004516975308641989}
#island_id: 0
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%N - 1)) % N]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004617129629629629}
#island_id: 0
#version_generated: 2
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_neighbors_h = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]) > 0:
      h_site = np.mean([h[i//N][i%N] for i in range(N)])
    else:
      h_site = -np.mean([h[i//N][i%N] for i in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*site_neighbors_h[k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*site_neighbors_h[k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009322530864197533}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N] + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N] + J[2,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if site_sum > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.15722422839506195}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + neighbor_h_sum)
      priorities[i][1] = -(h_site + neighbor_h_sum)
    else:
      priorities[i][0] = -(h_site + neighbor_h_sum)
      priorities[i][1] = -(h_site + neighbor_h_sum)

  return(priorities)




#score: {'data2D.txt': -0.002970833333333335}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for j in range(N):
      if J[1,i%N,j] > 0:
        total_h += h[j][i%N]
      else:
        total_h -= h[j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003057098765432097}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    for k in range(3):
      site_nbr_k = (i % N + ((k+N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if site_mag > 0:
      priorities[i][0] = h_site + site_mag
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_mag
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003074537037037038}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      priorities[i][0] += J[j, i%N, i//N]*h[(j+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] -= J[j, i%N, i//N]*h[i//N][i%N]
      else:
        priorities[i][0] += J[j, i%N, i//N]*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - h_site
    else:
      priorities[i][1] = -priorities[i][0] + h_site

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.018248919753086422}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (k + ((i-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]

    priorities[i][0] = total_spin[0] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01486712962962963}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for k in range(3):
        if J[k, i%N, i//N] > 0:
          total_spin += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
        else:
          total_spin -= J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for k in range(3):
        if J[k, i%N, i//N] > 0:
          total_spin -= J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
        else:
          total_spin += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004541666666666673}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]*2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*h[(k+N-2)%N][i%N] for k in range(4)])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018229938271604935}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0001733024691358027}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.30509614197530793}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

    priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019754629629629627}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, (i//N-1)%N+i%N]]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr,k in zip(site_nbrs,[0,2])])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_energy + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_energy + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or i % N == N - 1: # edge site
        priorities[i][1] = max(priorities[i][0], 0)
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or i % N == N - 1: # edge site
        priorities[i][1] = max(-priorities[i][0], 0)
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010313271604938268}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*np.where(J[1,k,i//N]>0,h[(k+N-1)%N][i%N],-(h[(k+N-1)%N][i%N])) for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018853395061728395}
#island_id: 0
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if d == 0:  # up
        site_nbr_up = (site_nbr + N - 1) % N
      elif d == 1:  # right
        site_nbr_right = (site_nbr + 1) % N
      elif d == 2:  # down
        site_nbr_down = (site_nbr - 1) % N
      else:  # left
        site_nbr_left = (site_nbr - N - 1) % N

      if J[d,i%N,i//N] > 0:
        h_site += sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k in range(2)])
      else:
        h_site -= sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014368827160493828}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_nbr = h[site_nbr][j]
      else:
        h_site_nbr = -h[site_nbr][j]

      total_spin[0] += h_site + sum([J[k,i%N,j]*h_site_nbr for k in range(3)])
      if J[0,i%N,j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - sum_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0724575617283951}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17103132716049382}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006665123456790117}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=1)
    site_spin = total_spin[i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*site_spin for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*site_spin for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total > 0:
      priorities[i][0] = total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009069444444444446}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
      for k in range(3):
        total_spin += J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      total_spin = -J[0,i%N,i//N]*h[site_nbr][i%N] - sum([J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021060185185185184}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036066358024691354}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014918209876543214}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]*2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_energy > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if sum(spin_neighbors) > 0:
      priorities[i][0] = h_site + sum(spin_neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(spin_neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.15742854938271628}
#island_id: 1
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_h = h[site_nbr][i%N]
      left_h = J[1,i//N,i%N]*h[(site_nbr+N-1)%N][i%N]
      right_h = J[2,i//N,i%N]*h[(site_nbr+1)%N][i%N]
      top_h = J[3,(i//N)%N+(i//N)//N,i%N]*h[site_nbr][0 if i%N==0 else (i%N-1)]
      bottom_h = J[0,(i//N)%N+(i//N)//N,i%N]*h[site_nbr][N-1]
      priorities[i][0] = site_h + left_h - right_h + top_h - bottom_h
    else:
      site_h = -h[site_nbr][i%N]
      left_h = J[1,i//N,i%N]*-h[(site_nbr+N-1)%N][i%N]
      right_h = J[2,i//N,i%N]*-h[(site_nbr+1)%N][i%N]
      top_h = J[3,(i//N)%N+(i//N)//N,i%N]*-h[site_nbr][0 if i%N==0 else (i%N-1)]
      bottom_h = J[0,(i//N)%N+(i//N)//N,i%N]*-h[site_nbr][N-1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 0
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_ = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = (h_site + sum_) if J[0,i%N,i//N] > 0 else -(h_site + sum_)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002403858024691358}
#island_id: 0
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + J[0,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - J[0,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002549537037037047}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    magnetism = np.sum(h[i//N], axis=None)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31227762345678933}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total = 1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_total = -1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = priority_total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00023873456790123515}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, (i+N-1)%N, i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] = total_spin[i*N+j][0]
        priorities[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priorities[i*N+j][0] = -total_spin[i*N+j][0]
        priorities[i*N+j][1] = -total_spin[i*N+j][1]

  return(priorities)




#score: {'data2D.txt': -0.00017638888888888915}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
      if i % N == 0: priorities[i][1] = -priorities[i][0]
      elif i % N == N - 1: priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + sum([J[k,i%N-1,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
      if i % N == 0: priorities[i][1] = -priorities[i][0]
      elif i % N == N - 1: priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] - sum([J[k,i%N-1,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0097125}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-k)%N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0012618827160493812}
#island_id: 0
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if h[i//N][i%N] > 0:
      for j in site_nbrs:
        priorities[i][0] += J[0,i%N,j//N]*h[j][i%N]
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      for j in site_nbrs:
        priorities[i][0] -= J[0,i%N,j//N]*h[j][i%N]
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006476851851851848}
#island_id: 0
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    for j in range(3):
      site_nbrs.append((site_nbrs[-1] + (j%2) - 1) % N)
    h_site = sum([h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 3
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_h > 0:
      priorities[i][0] = total_h + interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002228549382716049}
#island_id: 1
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,site_nbr2,i//N]*h[site_nbr2][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002489043209876544}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      j_nbr = (i+N*k)%N
      if J[k,i//N,j_nbr] > 0:
        h_nbr = h[i//N,j_nbr]
      else:
        h_nbr = -h[i//N,j_nbr]
      priorities[i][0] += h_site*h_nbr
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008022376543209876}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = h[i//N][i%N]
    for k in range(3):
        if ((k==0 and i//N==0) or (k==1 and i//N==N-1)) or ((k==2 and i%N==0) or (k==0 and i%N==N-1)):
            continue
        spin_energy += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006066358024691359}
#island_id: 0
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,(i+1)%N,i//N]>0 and J[0,i%N,(i//N+1)%N]>0:
        priorities[i][0] += sum([J[k,(i+1)%N,(i//N+1)%N]*h[(k+N-2)%N][(i+1)%N] for k in range(3)])
      if J[0,(i+1)%N,i//N]>0 and J[0,(i+1)%N,(i//N+1)%N]>0:
        priorities[i][0] += sum([J[k,(i+2)%N,(i//N+1)%N]*h[(k+N-3)%N][(i+2)%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,(i+1)%N,i//N]>0 and J[0,i%N,(i//N+1)%N]>0:
        priorities[i][0] -= sum([J[k,(i+1)%N,(i//N+1)%N]*h[(k+N-2)%N][(i+1)%N] for k in range(3)])
      if J[0,(i+1)%N,i//N]>0 and J[0,(i+1)%N,(i//N+1)%N]>0:
        priorities[i][0] -= sum([J[k,(i+2)%N,(i//N+1)%N]*h[(k+N-3)%N][(i+2)%N] for k in range(3)])

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00021898148148148127}
#island_id: 0
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i//N-1)%N,(i+1)%N] if i % N != 0 and i//N > 0 else 0
    right_h = h[(i//N+1)%N,(i-1)%N] if i % N != N-1 and i//N < N-1 else 0
    up_h = h[(i+N-1)%N,i%N] if i // N > 0 else 0
    down_h = h[(i-N+1)%N,i%N] if i // N < N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[3,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4) if k != 2])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[3,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4) if k != 2])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008245524691358025}
#island_id: 1
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]

    if sum(h_site > 0 for h_site in h_sites) > len(h_sites)/2:
      priorities[i][0] = sum([J[k,i%N,i//N]*h_site for k, h_site in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h_site for k, h_site in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 1
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004282407407407408}
#island_id: 1
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N]*h[(site_nbr+1)%N][i%N] + J[2,(i-1)%N,i//N]*h[(site_nbr-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N]*h[(site_nbr+1)%N][i%N] - J[2,(i-1)%N,i//N]*h[(site_nbr-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008794753086419765}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[2,i//N,i%N]*h[(2+N-1)%N][i%N]+J[3,i//N,i%N]*h[(3+N-1)%N][i%N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[2,i//N,i%N]*h[(2+N-1)%N][i%N]+J[3,i//N,i%N]*h[(3+N-1)%N][i%N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011990740740740713}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+N-1)%N,(i+N+1)%N,(i-1)%N,(i+1)%N]
    h_sum = sum([J[k,i%N,i//N]*h[j][i%N] for j,k in zip(site_nbrs,[0,2,3,1])])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00010416666666666751}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k==0 and i%N>0) or (k==1 and i%N<N-1) or (k==2 and i//N>0 and i//N<N-1):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%3][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%3][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003270061728395058}
#island_id: 3
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1) + k) % N
      if h[i//N][site_nbr_k] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, [1,-1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, [1,-1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005094135802469138}
#island_id: 3
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]
    for k in range(3):
      if i//N == k//N and abs(i%N-k%N) == 1:
        site_energy += J[k,i%N,k//N]*h[k//N][k%N]
      elif i//N == (k+N-1)%N and abs(i%N-k%N) == 1:
        site_energy -= J[k,i%N,(k+N-1)%N//N]*h[(k+N-1)%N//N][(k+N-1)%N%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_energy - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002350771604938272}
#island_id: 2
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min(k+N-1,N-1),i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min(k+N-1,N-1),i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001150771604938273}
#island_id: 2
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum([J[2,i%N,k]*h[k,N-1] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum([J[2,i%N,k]*h[k,N-1] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011441512345679012}
#island_id: 3
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_nbr = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 3
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0, i%N, i//N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_neighbor = (i % N + ((i//N-k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_neighbor][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2036800925925926}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  site_nbrs = (np.arange(N) + ((np.arange(N)-1)%2 - 1)) % N
  for i in range(N**2):
    h_site = h[site_nbrs[i%N],i%N] if J[0,i%N,i//N]>0 else -h[site_nbrs[i%N],i%N]
    priorities[i][0] = h[i//N,i%N] + np.sum(J[:,i%N,i//N]*h[site_nbrs[i%N],i%N])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005069444444444446}
#island_id: 1
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = h[i//N][i%N]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_h += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      else:
        total_h -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -total_h
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': -0.13586064814814827}
#island_id: 0
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_i = h[i//N][i%N] * (1 + 2*h[i//N][i%N])
    for k in range(3):
      if ((k+1)%2 == (i//N+1)%2) and J[k,i%N,i//N] > 0:
        priority_i += h[(k+N-1)%N][i%N]
      elif ((k+1)%2 != (i//N+1)%2) and J[k,i%N,i//N] < 0:
        priority_i -= h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + priority_i
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00016219135802469188}
#island_id: 0
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sum = sum([h[j][i%N] for j in site_nbrs])
    J_sum = sum([J[k,i%N,i//N]*h[site_nbrs[(k-1)%2]][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sum + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_energy = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = spin_energy + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.18545262345679037}
#island_id: 3
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0, i%N, (i//N-1)%N] > 0:
        priorities[i][0] += J[0, i%N, (i//N-1)%N]
      elif J[0, i%N, (i//N-1)%N] < 0:
        priorities[i][0] -= J[0, i%N, (i//N-1)%N]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0, i%N, (i//N-1)%N] > 0:
        priorities[i][0] -= J[0, i%N, (i//N-1)%N]
      elif J[0, i%N, (i//N-1)%N] < 0:
        priorities[i][0] += J[0, i%N, (i//N-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023325617283950603}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_interaction = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0032047839506172842}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004223765432098773}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*(priorities[(i+1)%N][0]+priorities[(i+1)%N][1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*(priorities[(i+1)%N][0]+priorities[(i+1)%N][1])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N * N
  priorities = np.zeros((N_squared,2))
  
  for i in range(N_squared):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0014742283950617283}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005466512345679012}
#island_id: 2
#version_generated: 3
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        priority_total[i][j][0] = total_spin[i*N+j][0]
        priority_total[i][j][1] = -(total_spin[i*N+j][0]+total_spin[i*N+j][1])
      else:
        total_spin[i*N+j][0] += -h[site_nbr][j]
        priority_total[i][j][0] = -(total_spin[i*N+j][0]+total_spin[i*N+j][1])
        priority_total[i][j][1] = total_spin[i*N+j][0]

  return priority_total.reshape(N*N,2)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - J[0, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0013612654320987658}
#island_id: 3
#version_generated: 3
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j+1,i%N,i//N] > 0:
        h_site += J[j+1,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[j+1,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - J_site
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0027128086419753103}
#island_id: 2
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr1 = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr1][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr1][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -4.4907407407406505e-05}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        sum_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 3
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j, i%N, i//N] > 0:
        h_site += J[j, i%N, i//N]*h[(j+N-1)%N][i%N]
      else:
        h_site -= J[j, i%N, i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004936882716049382}
#island_id: 3
#version_generated: 3
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N:
        interaction = J[k,i%N,i//N] * (2*h[(k+N-1)%N][i%N] - 1)
      else:
        interaction = J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + interaction
        priorities[i][1] -= -priorities[i][0]
      else:
        priorities[i][0] -= h_site - interaction
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002600154320987654}
#island_id: 1
#version_generated: 2
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), itertools.cycle(range(3)))])
      priorities[i][0] = h[i//N][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), itertools.cycle(range(3)))])
      priorities[i][0] = -h[i//N][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000528858024691358}
#island_id: 1
#version_generated: 2
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-1)//2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-1)//2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.651234567901176e-05}
#island_id: 1
#version_generated: 2
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N - 1) % N,
           (i // N) % N,
           (i % N + ((i//N-1)%2 + 1)) % N]
    h_sites = [h[site_nbrs[j]][i%N] for j in range(4)]
    if np.prod([j > 0 for j in h_sites]) > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), [1, 2, 3, 0])])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), [1, 2, 3, 0])])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0025674382716049386}
#island_id: 0
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_n = (i-N) % N
    site_e = i % N + 1
    site_w = (i-1) % N if i != 0 else N-1
    site_nw = (i-N-1) % (N*N)
    site_ne = (i+N+1) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[min(k,N*k)//N,min(k,N*k)%N] for k in range(3)]) + J[1,i//N,i%N]*h[site_n//N,site_n%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[min(k,N*k)//N,min(k,N*k)%N] for k in range(3)]) - J[1,i//N,i%N]*h[site_n//N,site_n%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016563271604938259}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k, i%N, (k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_h > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016844135802469137}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = 0.5*h[i//N][i%N]*J[0,i//N,i//N]*2
    for k in range(3):
      site_energy += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010060185185185192}
#island_id: 3
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h_site
    for k in range(3):
      total_h += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
    priorities[i][0] = total_h
    priorities[i][1] = -total_h
  return priorities




#score: {'data2D.txt': 0.0009041666666666672}
#island_id: 3
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N) % (N*N)
    site_down = (i-N) % (N*N)
    if i % N > 0:
      site_left = (i-1) % (N*N)
    else:
      site_left = (i+N-1) % (N*N)
    if i % N < N-1:
      site_right = (i+1) % (N*N)
    else:
      site_right = (i-N+1) % (N*N)

    up_h = h[site_up//N][site_up%N] if J[0,site_up%N,site_up//N]>0 else -h[site_up//N][site_up%N]
    down_h = h[site_down//N][site_down%N] if J[0,site_down%N,site_down//N]>0 else -h[site_down//N][site_down%N]
    left_h = h[site_left//N][site_left%N] if J[0,site_left%N,site_left//N]>0 else -h[site_left//N][site_left%N]
    right_h = h[site_right//N][site_right%N] if J[0,site_right%N,site_right//N]>0 else -h[site_right//N][site_right%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + up_h + down_h + left_h + right_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009112191358024692}
#island_id: 3
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N] + J[2,i%N,i//N]) * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N] + J[2,i%N,i//N]) * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 0
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 0
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N, (i + ((j+1)%N - N//2)) % N]
      for k in site_nbrs:
        total_spin[i*N+j][0] += h[k][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priorities = total_spin
  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002743055555555559}
#island_id: 2
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = np.sum([J[k, i%N, (k+N-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002142746913580247}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002896604938271603}
#island_id: 2
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, i % N, i // N] * h[i // N][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i % N, i // N] * h[i // N][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0049199074074074076}
#island_id: 2
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i//N,i%N]) * h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i//N,i%N]) * h_site + site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011445524691358018}
#island_id: 3
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      if J[1,i%N,j] > 0:
        h_site += J[1,i%N,j]*h[site_nbr_j][j]
      else:
        h_site -= J[1,i%N,j]*h[site_nbr_j][j]

    for k in range(N):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[2,i%N,k] > 0:
        h_site += J[2,i%N,k]*h[site_nbr_k][k]
      else:
        h_site -= J[2,i%N,k]*h[site_nbr_k][k]

    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += J[3,i%N,i//N]*h[site_nbr2][i%N]
    else:
      h_site -= J[3,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003501697530864198}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003106327160493829}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i + ((k-1)%N - N//2)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007918209876543211}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -abs(h_site)
      priorities[i][1] = abs(h_site)
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = -abs(h_site)
      priorities[i][1] = abs(h_site)

  return(priorities)




#score: {'data2D.txt': -0.004518364197530865}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.015135648148148148}
#island_id: 1
#version_generated: 2
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.31505632716049303}
#island_id: 1
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum([np.min(J[1:,i//N,k],axis=0)*h[k,N-1]%2 for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum([np.min(J[1:,i//N,k],axis=0)*h[k,N-1]%2 for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0051415123456790114}
#island_id: 1
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    site_nbr_h = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h_site for k, h_site in enumerate(site_nbr_h)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h_site for k, h_site in enumerate(site_nbr_h)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005399691358024694}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = 2*total_h*h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023566358024691356}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    for k in range(4):
      neighbor = (i+N*k)%N*N+i//N
      h_neighbor = h[neighbor//N][neighbor%N] if J[k,i%N,i//N]>0 else -h[neighbor//N][neighbor%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] -= 2*h_site + 2*h_neighbor

  return(priorities)




#score: {'data2D.txt': -0.0008584876543209878}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_j = (i % N + ((i//N+j)%2 - 1)) % N
      if J[j, i%N, i//N] > 0:
        h_site += h[site_j][i%N]
      else:
        h_site -= h[site_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0 and h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 0 and h[i//N][i%N] < 0:
        priorities[i][j] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 1:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site)
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.0003631172839506171}
#island_id: 3
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr_j = (j % N + ((i//N-1)%2 - 1)) % N
        if J[0,j,i//N] > 0:
          h_site_j = h[site_nbr_j][i%N]
        else:
          h_site_j = -h[site_nbr_j][i%N]
        priorities[i][0] += h_site_j
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr_j = (j % N + ((i//N-1)%2 - 1)) % N
        if J[0,j,i//N] > 0:
          h_site_j = h[site_nbr_j][i%N]
        else:
          h_site_j = -h[site_nbr_j][i%N]
        priorities[i][0] += -h_site_j
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016118827160493832}
#island_id: 2
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (-1,0), (1,0)]:
      neighbor_i = (i//N + direction[0]) % N
      neighbor_j = (i%N + direction[1]) % N
      h_neighbor = h[neighbor_i][neighbor_j]
      if J[0,neighbor_j,i//N] > 0:
        h_site += h_neighbor
      else:
        h_site -= h_neighbor

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012408796296296296}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      if h[i][j] > 0:
        priorities[i*N+j][0] = h_site + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h_site - sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 0
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.28118441358024643}
#island_id: 0
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(h[n,i%N]) for n in [(site_nbr+1)%N, (site_nbr-1)%N, (site_nbr+N)%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(h[n,i%N]) for n in [(site_nbr+1)%N, (site_nbr-1)%N, (site_nbr+N)%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000218364197530865}
#island_id: 0
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sites = [((i//N + k)%N, i%N) for k in [-1,0,1]] 
    nn_h_sites = [h[k][i%N] if J[(k+1)%4,i//N,i%N]>0 else -h[k][i%N] for k in [-1,0,1]]
    nn_J_sites = [J[(k+1)%4,i//N,i%N] for k in [-1,0,1]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([a*b for a,b in zip(nn_h_sites,nn_J_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([a*b for a,b in zip(nn_h_sites,nn_J_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16151959876543237}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00201095679012346}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for k in [(i-1)%N, (i+1)%N]:
        if k == i: continue
        J_val = J[d,k//N,k%N]
        if J_val > 0:
          h_site += J_val * h[k//N][k%N]
        else:
          h_site -= abs(J_val) * h[k//N][k%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01131219135802469}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors = [k for k in range(3) if J[k,i%N,i//N] > 0]
    priority_ones = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors]) + h_site
    priority_minus_one = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors]) - h_site
    
    priorities[i][0] = priority_ones
    priorities[i][1] = priority_minus_one

  return(priorities)




#score: {'data2D.txt': -0.0006124999999999995}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, :], axis=1)
    for j in range(2):
      if (J[j, i%N, i//N] > 0 and j == 0) or (J[j, i%N, i//N] < 0 and j == 1):
        total_spin[j] += h_site
    priorities[i][0] = np.sum([total_spin[j]*h[k][i%N] for k in range(N)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007462808641975309}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), sum([-1 if J[k,i%N,i//N]>0 else 1 for k in range(3)])]
    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -h_site - total_spin[1]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[0, i%N, i//N]*h[site_nbr][i%N]) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[0, i%N, i//N]*h[site_nbr][i%N]) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1568328703703706}
#island_id: 3
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        if h[i//N][i%N] > 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1-j] = -priorities[i][j]
        else:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1-j] = -priorities[i][j]
      else:
        if h[i//N][i%N] > 0:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1-j] = priorities[i][j]
        else:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1-j] = -priorities[i][j]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012973765432098766}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i%N+N-1)%N)
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,i%N,i//N]*h[site_nbr1][i%N], J[1,i%N,i//N]*h[site_nbr2][i%N]]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[0,i%N,i//N]*h[site_nbr1][i%N], J[1,i%N,i//N]*h[site_nbr2][i%N]]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.059343055555555566}
#island_id: 0
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]) > 0:
      h_site = sum([abs(h[site_nbr][i%N]) for site_nbr in site_nbrs])
    else:
      h_site = -sum([abs(h[site_nbr][i%N]) for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return total_spin + priority_total




#score: {'data2D.txt': -0.00031466049382716}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_left = h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
      h_left = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_left
      priorities[i][1] = -(h_site + h_left)
    else:
      priorities[i][0] = -(h_site + h_left)
      priorities[i][1] = h_site + h_left

  return(priorities)




#score: {'data2D.txt': 7.453703703703763e-05}
#island_id: 1
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*abs(h[site_nbr][i%N]) for k, site_nbr in zip(range(4), [i//N]+site_nbrs)]) + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*abs(h[site_nbr][i%N]) for k, site_nbr in zip(range(4), [i//N]+site_nbrs)]) - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 3
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004072993827160493}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003152777777777776}
#island_id: 1
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    priorities[i][0] = h_site + total_spin.sum()
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003288580246913584}
#island_id: 1
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14770817901234587}
#island_id: 2
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((k+i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin,[1,-1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin,[1,-1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009115740740740751}
#island_id: 3
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,i%N,k]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[2,i%N,k]*h[k][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbor_h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0025745370370370366}
#island_id: 3
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i, 0] = h_site + np.sum(J[[0, 3], i%N, i//N]*h[[site_nbr, (site_nbr+N-1)%N], i%N], axis=0)
    priorities[i, 1] = -priorities[i, 0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_priority
      priorities[i][1] = -total_priority
    else:
      priorities[i][0] = -total_priority
      priorities[i][1] = total_priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006439814814814817}
#island_id: 3
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for j in range(4):
      if (j == 0 or i % N == 0) and J[j,i//N,i%N] > 0:
        total_energy += h_site
      elif (j == 1 or i % N == N-1) and J[j,i//N,i%N] > 0:
        total_energy -= h_site
      else:
        if J[j,i//N,i%N] > 0:
          total_energy += h_site
        else:
          total_energy -= h_site

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003322530864197531}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0: site_nbr_up = (i % N + ((i//N-1)%2 - 1)) % N
      elif j == 1: site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
      elif j == 2: site_nbr_left = (i % N - 1 + ((i//N)%2 - 1)) % N if i%N else N-1
      elif j == 3: site_nbr_right = (i % N + 1 + ((i//N)%2 - 1)) % N

      total_spin = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0018998456790123442}
#island_id: 3
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_neighbor = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_neighbor][i%N]
      else:
        h_site -= h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003494907407407407}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    site_nbr3 = ((i+N-1)%N + (i//N)%N) % N
    if J[2,i%N,i//N] > 0:
      h_site3 = h[site_nbr3][i%N]
    else:
      h_site3 = -h[site_nbr3][i%N]

    site_nbr4 = ((i+N-1)%N + (i//N-1)%N) % N
    if J[3,i%N,i//N] > 0:
      h_site4 = h[site_nbr4][i%N]
    else:
      h_site4 = -h[site_nbr4][i%N]

    priorities[i][0] = h_site + h_site2 + h_site3 + h_site4
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00409645061728395}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,(i+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,(i+1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013776234567901232}
#island_id: 1
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (h_site if h[i//N][i%N] > 0 else -h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (h_site if h[i//N][i%N] < 0 else -h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + site_interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1109745370370371}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_energy = h[i//N][i%N] + 2*h_site
    neighbors_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = site_energy + neighbors_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_spin_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbor = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_h_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    neighbor_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020570987654320973}
#island_id: 3
#version_generated: 3
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3,i//N,k]*h[i%N,k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3,i//N,k]*h[i%N,k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005399691358024694}
#island_id: 3
#version_generated: 3
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin = np.sign(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N])
    priorities[i][0] = spin*h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005174382716049386}
#island_id: 3
#version_generated: 3
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      if J[0,i%N,j] > 0:
        priorities[i][0] += h[site_nbr_j][j]
      else:
        priorities[i][0] -= h[site_nbr_j][j]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00044922839506172826}
#island_id: 1
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if i % N == 0 or J[1,i//N,i//N]*h[(i//N+N-1)%N][i%N] < 0:
        priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if i % N == 0 or J[1,i//N,i//N]*h[(i//N+N-1)%N][i%N] > 0:
        priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014344135802469135}
#island_id: 0
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(4) if J[k,i//N,i%N] > 0]
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015004629629629634}
#island_id: 0
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    energy = h[site_nbr][i%N] * spin + sum([J[k,i%N,i//N]*spin*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i > 0:
      for j in range(N):
        if (i - N) % N == j:
          energy += J[3, i%N, j]
        else:
          energy -= J[1, i%N, j] * spin * h[(j+N-1)%N][i%N]

    priorities[i][0] = energy
    priorities[i][1] = -energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020509259259259287}
#island_id: 0
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08100879629629636}
#island_id: 1
#version_generated: 2
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[i//N][i%N] > 0 else -h[i//N][i%N]
    interaction_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + interaction_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015007716049382717}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or i % N == N - 1: 
        # edge sites
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif i // N == 0 or i // N == N - 1:
        # edge sites
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + magnetism + interaction_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00023873456790123515}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,(i-1)%N,i//N]*h[(k+N-1)%N][(i-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010331790123456796}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or i // N < N - 1: # check if it's on the border
        priorities[i][0] = h_site + J[0,i%N,i//N]*h[(i+N-1)%N][i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or i // N < N - 1: # check if it's on the border
        priorities[i][0] = -h_site - J[0,i%N,i//N]*h[(i+N-1)%N][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.031488425925925934}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%2 - 1)) % N, (i + ((j+1)%2 - 1)) % N]
      if h[i][j] > 0:
        for nbr in site_nbrs:
          priorities[i*N+j][0] += J[0, i, j] * h[nbr][j]
          priorities[i*N+j][1] -= J[0, i, j]
      else:
        for nbr in site_nbrs:
          priorities[i*N+j][0] -= J[0, i, j] * h[nbr][j]
          priorities[i*N+j][1] += J[0, i, j]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2, 2))
    for j in range(N):
      if J[0, i%N, i//N] > 0:
        total_spin[1, 0] += h[j][i%N]
        total_spin[0, 1] -= 1
      else:
        total_spin[1, 0] -= h[j][i%N]
        total_spin[0, 1] += 1

    if np.all(total_spin == 0):
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    elif np.any(total_spin[0] > 0):
      priorities[i][0] = h_site + total_spin[0, 1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0, 1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16367484567901255}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_product = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = max(h[site_nbr][i%N], spin_product)
      priorities[i][1] = -priorities[i][0]
    else:
      spin_product = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = min(-h[site_nbr][i%N], spin_product)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006937191358024692}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h_site + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004125462962962964}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += h[site_nbr_j][i%N]
      else:
        h_site -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011523148148148152}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018510802469135807}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(3):
      if i // N == (k + i % N) % N and i % N != (k + N-1)%N:
        total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31028719135802396}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_h = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = max(total_h, -total_h)
    else:
      total_h = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = min(total_h, -total_h)

  return(priorities)




#score: {'data2D.txt': 0.0033665123456790126}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total = 0
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total += h[site_nbr][i%N]
      else:
        total -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      priorities[i][0] = -total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 0
#version_generated: 2
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site2 = h[site_nbr2][i%N]
      else:
        h_site2 = -h[site_nbr2][i%N]
      total_spin += np.array([h_site + h_site2, -h_site - h_site2])
    priorities[i][0] = np.sum(np.sign(total_spin))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.112963425925926}
#island_id: 0
#version_generated: 2
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    priorities[i][0] = h[i//N][i%N] + h_site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.056820833333333355}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    
    h_site = h[site_nbr][i%N]
    for k in range(4):
      neighbor_i = (i // N + ((k % 2) * 2 - 1)) % N
      neighbor_j = (i % N + ((k // 2) * 2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        if h[neighbor_i][neighbor_j] > 0:
          h_site += J[k,i//N,i%N]
        else:
          h_site -= J[k,i//N,i%N]
      else:
        if h[neighbor_i][neighbor_j] > 0:
          h_site -= J[k,i//N,i%N]
        else:
          h_site += J[k,i//N,i%N]

    priorities[i][0] = spin * (h_site + sum([J[k,i//N,i%N]*spin*h[(k+N-1)%4][i%N] for k in range(4)]))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i % N + ((i//N-j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016677469135802478}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)]) * h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.025327006172839502}
#island_id: 0
#version_generated: 2
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_nn = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr_nn][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr_nn][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004660956790123458}
#island_id: 2
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_h = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_h = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = spin_h + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007162037037037028}
#island_id: 2
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if k == 0: site_k = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1: site_k = (i % N + ((i//N+1)%2 - 1)) % N
      else: site_k = (site_nbr + ((i//N+1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009106327160493827}
#island_id: 2
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018279320987654325}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h[i//N][i%N])**2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1+h[i//N][i%N])**2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nbrs = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nbrs
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nbrs
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002849537037037037}
#island_id: 2
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010550154320987656}
#island_id: 2
#version_generated: 3
#generate time11:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = h[i//N][i%N] + h[site_nbr][i%N]
    if sum_h > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004155864197530865}
#island_id: 1
#version_generated: 2
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      neighbors = [j for j in range(N) if (i+j)%2==((i+1)%N)//2]
      priorities[i][0] += sum([J[0,k,i//N]*(h[k%(k+N-1)%N][i%N]+h[(k+N-1)%N][i%N]) for k in neighbors])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      neighbors = [j for j in range(N) if (i+j)%2==((i+1)%N)//2]
      priorities[i][0] -= sum([J[0,k,i//N]*(h[k%(k+N-1)%N][i%N]+h[(k+N-1)%N][i%N]) for k in neighbors])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 1
#version_generated: 2
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 1
#version_generated: 2
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interactions = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]

    if magnetism > 0:
      priorities[i][0] = sum(interactions) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(interactions) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_pref = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      spin_pref = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = spin_pref
    priorities[i][1] = -spin_pref

  return(priorities)




#score: {'data2D.txt': -0.0015239197530864195}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(-h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.330246913580274e-05}
#island_id: 1
#version_generated: 2
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N for d in [0,1]]
    total_h = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006899691358024698}
#island_id: 1
#version_generated: 2
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005498611111111112}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    
    if sum(h[i//N]) > 0:
      priorities[i][0] = sum([hs + J[k,i%N,i//N]*hs for k, hs in zip(range(3), h_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([hs - J[k,i%N,i//N]*hs for k, hs in zip(range(3), h_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00048719135802469154}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    
    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy
    
  return(priorities)




#score: {'data2D.txt': 0.002965586419753086}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.00046558641975308704}
#island_id: 1
#version_generated: 2
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N] * h[site_nbr2][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N] * h[site_nbr2][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbor = 0
    for k in range(3):
      sum_h_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + sum_h_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002644290123456791}
#island_id: 1
#version_generated: 2
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_spin = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    total_spin = sum(neighbors_spin)
    if total_spin > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018266975308641993}
#island_id: 0
#version_generated: 2
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N*2+i%2-1, i//N*2+(i%2+1)%2]]
    total_h_site = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007075617283950612}
#island_id: 0
#version_generated: 2
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003652777777777779}
#island_id: 0
#version_generated: 2
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      bias = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = bias
      priorities[i][1] = -bias
    else:
      bias = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = -bias
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0001834876543209873}
#island_id: 1
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N, (k+1)%N),i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min((k+N-1)%N, (k+1)%N),i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 0
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.02884645061728395}
#island_id: 0
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007708333333333334}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (k + i % N) % N
      if J[k,i%N,i//N] > 0 and h[i//N][i%N] > 0:
        total_spin[1] -= 1
      elif J[k,i%N,i//N] < 0 and h[i//N][i%N] > 0:
        total_spin[1] += 1
      elif J[k,i%N,i//N] > 0 and h[i//N][i%N] < 0:
        total_spin[0] -= 1
      elif J[k,i%N,i//N] < 0 and h[i//N][i%N] < 0:
        total_spin[0] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004816358024691363}
#island_id: 2
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      if i // N == (k + ((k-1)%2 - 1)) % N or k == i % N:
        continue
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      h_site += J[0,k,i//N]*h[site_nbr_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0007146604938271593}
#island_id: 2
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        site_nbr_k = (k + i % N) % N
        priorities[i][0] += J[k, i % N, i // N] * h[(site_nbr + k - 1)%N][i%N]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        site_nbr_k = (k + i % N) % N
        priorities[i][0] -= J[k, i % N, i // N] * h[(site_nbr + k - 1)%N][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 2
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0055979938271604945}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total_spin = 0
    for k in range(4):
      site = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.016210648148148148}
#island_id: 3
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      sitenbr2 = (k + ((i//N-1)%2 - 1)) % N
      if J[0, i%N, k] > 0:
        total_spin[0] += h[sitenbr2][i%N]
      else:
        total_spin[0] -= h[sitenbr2][i%N]
      if h[i//N][k] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021125000000000007}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [(i-1)%N, i, (i+1)%N]:
      if j == i: continue
      priorities[i][0] += J[j//N,i%N,j%N]*h[j//N][j%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3405149691358014}
#island_id: 1
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      neighbor_i, neighbor_j = (i // N + direction[0]) % N, (i % N + direction[1]) % N
      if J[direction[0], i%N, i//N] > 0:
        h_neighbor = h[neighbor_i][neighbor_j]
      else:
        h_neighbor = -h[neighbor_i][neighbor_j]

      if h[i // N][i % N] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site + h_neighbor
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.03418163580246913}
#island_id: 1
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N:
        right_nbr = (i + 1) % N
      else:
        right_nbr = (i - N + 1)
      if i // N == 0:
        top_nbr = (N-1) + (i%N)
      elif i // N == N-1:
        top_nbr = (i-N) % N
      else:
        top_nbr = (i//N-1)*N+(i%N)

      left_nbr = (i - 1) % N
      bottom_nbr = (i+1)%N

      priorities[i][0] = h_site + J[2,left_nbr,i//N]*h[left_nbr,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 1
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009279320987654316}
#island_id: 0
#version_generated: 2
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i % N == (k + ((k-1)%2 - 1)) % N and i // N == (k+N-1)%N:
        J_site = J[k,i%N,i//N]
      else:
        J_site = 0

    priorities[i][0] = h_site + sum([J_site*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00028996913580246926}
#island_id: 0
#version_generated: 2
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i // N + ((i % N + j) % N - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00032731481481481685}
#island_id: 0
#version_generated: 2
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    site_nbrs.extend([(i % N + (j-1) % N) % N if j != i//N else (i//N+(j+1)%N-1)%N for j in range(N)])
    for site_nrb in site_nbrs:
      if J[0,i%N,site_nrb] > 0:
        h_site = h[site_nrb][i%N]
      else:
        h_site = -h[site_nrb][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
        priorities[i][1] -= h_site
      else:
        priorities[i][0] -= h_site
        priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.003603240740740742}
#island_id: 0
#version_generated: 2
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(h[site_nbr])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(h[site_nbr])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006604166666666668}
#island_id: 0
#version_generated: 2
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N//2) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_nbr3 = (i % N + ((i//N-1)%2 + 1)) % N
    site_nbr4 = ((i//N+N//2) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[site_nbr3][i%N] for k in range(1,3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[site_nbr3][i%N] for k in range(1,3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.012650462962962962}
#island_id: 0
#version_generated: 2
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply the priority rule
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037608024691358056}
#island_id: 0
#version_generated: 2
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N, (i//N-1)%N, (i//N+N-1)%N]]
    h_site_sum = sum([h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + sum([J[k,i%N,i//N]*h[site_nbrs[2-k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - sum([J[k,i%N,i//N]*h[site_nbrs[2-k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022723765432098764}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for k in range(3):
      total_spin[0] += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    h_site = sum(h[site_nbr])
    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0026109567901234573}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.052469135802464e-05}
#island_id: 1
#version_generated: 2
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i//N,(i+1)%N]*h[i//N,(i+1)%N] for k in [0, 2]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i//N,(i+1)%N]*h[i//N,(i+1)%N] for k in [0, 2]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005709104938271605}
#island_id: 1
#version_generated: 2
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J[0,i//N,i//N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005808796296296297}
#island_id: 1
#version_generated: 2
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    h_site = h[site_nbr][i % N]
    
    if J[0, i % N, i // N] > 0:
      h_site *= -1

    for j in [-1, 1]:
      total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] if k == site_nbr else (2 * J[k, i % N, i // N] * j) for k in range(4)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.003186882716049383}
#island_id: 1
#version_generated: 2
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N + ((i%N-1)%N - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + ((i%N+1)%N - 1)) % N]
    site_nbrs = [j for j in set(site_nbrs) if j != i]
    
    h_site = np.sum([h[j][i%N] * J[0,i//N,j//N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007695987654320988}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(N):
        site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
        if J[j,k,i//N] > 0:
          total_spin += h[site_nbr_k][i%N]
        else:
          total_spin -= h[site_nbr_k][i%N]

      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_h > 0:
      priorities[i][0] = total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3266563271604931}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*magnetism
      else:
        h_site -= J[k,i%N,i//N]*magnetism

    priorities[i][0] = h_site + magnetism
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012408796296296296}
#island_id: 2
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      if h[i][j] > 0:
        for k in range(3):
          priorities[i*N+j][0] += J[k,i,j]*h[(k+N-1)%N][j]
        priorities[i*N+j][0] += h_site
      else:
        for k in range(3):
          priorities[i*N+j][0] -= J[k,i,j]*h[(k+N-1)%N][j]
        priorities[i*N+j][0] -= h_site

      priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 2
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = 1
      priorities[i][1] = -1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
      else:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.20080015432098763}
#island_id: 2
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.16630972222222223}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]

    if total_spin > 0:
      priorities[i][0] = h_site + abs(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - abs(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021662037037037036}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site + J[1, i%N, i//N]*h_site2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 3
#version_generated: 3
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_total = 0
    for j in range(3):
      spin_total += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + site_sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07077700617283955}
#island_id: 0
#version_generated: 2
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N+1)//N)%N*(N-1) + (i%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i-N) % N if i < N*N else (i-1)%N
    site_down = ((i+N-1)%N+1) % N if i >= N*N-1 else i+1
    site_left = (i-1)%N if i%N > 0 else N-1
    site_right = (i+1)%N

    for spin in [-1,1]:
      total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*spin*h_site
      priorities[i][0] += 2**total_spin
      priorities[i][1] -= 2**total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1623770061728395}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002133487654320988}
#island_id: 2
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + (j-1) % 2 - 1) % N for j in range(4)]
    site_nbr_energies = [h[site_nbrs[j]][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbrs[j]][i%N] for j in range(4)]
    h_site = sum([J[k,i%N,i//N]*site_nbr_energies[k] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009538580246913577}
#island_id: 1
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1913844135802469}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      priorities[i][0] = 1
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.000401388888888889}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k, i%N, i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k, i%N, i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0027143518518518528}
#island_id: 0
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]*J[1,i%N,(i-1)%N] + J[2,i%N,(i+1)%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N]*J[1,i%N,(i-1)%N] + J[2,i%N,(i+1)%N]) * h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 0
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003501697530864198}
#island_id: 3
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term2 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 1
#version_generated: 2
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + spin_bias
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00017391975308642}
#island_id: 1
#version_generated: 2
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      if k == 1 and (i % N + i // N) % 2 == 1:
        continue
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010408950617283956}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] if k == 0 else h[(k+N-1)%N][j] for j, k in enumerate(range(3))])
    if J[0, i%N, i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        spin = -1
      else:
        spin = 1
      
      energy = h[i//N][i%N] * spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*spin for k in range(4)])
      
      if j == 0:
        priorities[i][j] = -energy
      else:
        priorities[i][j] = energy
        
  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022748456790123465}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k, i%N, i//N]*h[site_nbrs[k], i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -sum([J[k, i%N, i//N]*h[site_nbrs[k], i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029452160493827154}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[min((k+N-1)//N, i//N),min((k+N-1)%N, i%N)] for k in range(4)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[min((k+N-1)//N, i//N),min((k+N-1)%N, i%N)] for k in range(4)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007868827160493833}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N,(k+1)%N),i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min((k+N-1)%N,(k+1)%N),i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013655864197530867}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N,site_nbr2),i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.15518194444444464}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001044598765432099}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003133487654320988}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h_site + sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k, j in itertools.product(range(4), range(N)) if (k == 2 and i % N == 0) or (k == 3 and i % N == N - 1)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h_site - sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k, j in itertools.product(range(4), range(N)) if (k == 2 and i % N == 0) or (k == 3 and i % N == N - 1)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 2
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004674382716049381}
#island_id: 2
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(N):
      if (d == i%N or d == ((i+N-1)%N) // N):
        h_site += sum([J[k,d,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012989197530864202}
#island_id: 2
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + (((i//N+1)%2)-1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[site_up][i%N] for k in range(3)]) - sum([J[k, site_down, i//N]*h[i//N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[site_up][i%N] for k in range(3)]) + sum([J[k, site_down, i//N]*h[i//N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00044429012345679}
#island_id: 2
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 2.2376543209877586e-05}
#island_id: 2
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i//N,(i+k)%N] > 0:
        h_site += J[k,i//N,(i+k)%N]*h[(k+N-1)%N][(i+k)%N]
      else:
        h_site -= J[k,i//N,(i+k)%N]*h[(k+N-1)%N][(i+k)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.014297067901234566}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0.5*(h[site_nbr][i%N] + h[i//N][i%N])
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N] - 1) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N] - 1) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply a heuristic to reduce the number of spins that need to be calculated
  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = h[site_nbr][j]
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        total_spin = -h[site_nbr][j]
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.00023009259259259285}
#island_id: 0
#version_generated: 2
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if ((k+1)%2 == (i//N) % 2) and J[k,i%N,i//N] > 0:
        h_site += sum([J[j,k,i//N]*h[(j+N-1)%N][i%N] for j in range(3)])
      elif ((k+1)%2 != (i//N) % 2) and J[k,i%N,i//N] > 0:
        h_site -= sum([J[j,k,i//N]*h[(j+N-1)%N][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01486712962962963}
#island_id: 0
#version_generated: 2
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_h_site = h[site_nbr][i%N]
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          total_h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
          total_h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      total_h_site = -h[site_nbr][i%N]
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          total_h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
          total_h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 0
#version_generated: 2
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011594598765432099}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total > 0:
      priorities[i][0] = h_site + sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.018100154320987653}
#island_id: 0
#version_generated: 2
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.057522685185185184}
#island_id: 0
#version_generated: 2
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + sum([J[k,(k+N-1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[i//N][i%N] - sum([J[k,(k+N-1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.000738425925925926}
#island_id: 0
#version_generated: 2
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    site_nbr_values = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]
    spin_sum = sum([J[k,i%N,i//N]*v for k,v in zip(range(2), site_nbr_values)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum_h
      else:
        priorities[i][j] = -h_site - sum_h

  return(priorities)




#score: {'data2D.txt': 0.004660956790123458}
#island_id: 2
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00464891975308642}
#island_id: 2
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site += J[2,i//N,i%N]*h[site_nbr2][i%N]
    else:
      h_site -= J[2,i//N,i%N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0027918209876543216}
#island_id: 1
#version_generated: 2
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if (h[i//N][i%N] > 0).any():
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002644290123456791}
#island_id: 1
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J_sum > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002881172839506172}
#island_id: 1
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i%N,site_nbr]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i%N,site_nbr]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00040231481481481433}
#island_id: 1
#version_generated: 2
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0:
        # left boundary
        site_nbr = (i + ((N-1)%2 - 1)) % N
        h_site_left = -h[site_nbr][i%N]
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site_left
        priorities[i][1] = -priorities[i][0]

      elif i % N == N-1:
        # right boundary
        site_nbr = (i + ((0)%2 - 1)) % N
        h_site_right = -h[site_nbr][i%N]
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site_right
        priorities[i][1] = -priorities[i][0]

      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008538580246913581}
#island_id: 1
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3,k,i//N]*h[site_nbr][k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3,k,i//N]*h[site_nbr][k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006532407407407407}
#island_id: 1
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i-N) % N*N
    right_nbr = (i+1)%N*N
    top_nbr = (i//N)*N + (i%N-1) % N
    bottom_nbr = (i//N)*N + (i%N+1) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[top_nbr%N][i%N] + J[2,i%N,i//N]*h[bottom_nbr%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[top_nbr%N][i%N] - J[2,i%N,i//N]*h[bottom_nbr%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014552469135802436}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = 1 / priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = 1 / priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.13871126543209877}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    site_spin = (total_spin[i%N] + total_spin[(i+N-1)%N]) // 2
    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029128086419753095}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i-1)%N if i % N != 0 else (N-1), (i-N)%N if i % N != 0 else (i%N)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005179783950617284}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for k in range(4):
      site_k = (i % N + ((k-1)%2 - 1)) % N
      if k == 0 or k == 3:
        sign = -1 if h[i//N][i%N] > 0 else 1
      elif k == 1:
        sign = 1 if i % N < N//2 else -1
      elif k == 2:
        sign = -1 if (i // N) % 2 == 0 else 1

      total_priority += J[k, i%N, i//N] * h[site_k][i%N] * sign

    priorities[i][0] = h_site + total_priority
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(-1,2):
        if (k==0): continue
        site_nbr_k = (i % N + ((i//N+k)%N-1)%2 - 1) % N
        total_spin += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': 0.0002594135802469131}
#island_id: 2
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k==0 and i % N != 0) or (k==1 and i % N == 0) or (k==2 and i // N != 0) or (k==3 and i // N == 0):
        continue
      j_nbr = ((i//N)*4 + k)%N*N + (i%N)
      if J[0,k,i//N] > 0:
        h_site += J[k,i//N,i%N]*h[j_nbr % N][j_nbr // N]
      else:
        h_site -= J[k,i//N,i%N]*h[j_nbr % N][j_nbr // N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002796450617283951}
#island_id: 2
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    for k in range(3):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008149691358024689}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017979938271604939}
#island_id: 3
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]) > 0:
      h_site = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    else:
      h_site = -sum(h[site_nbr][i%N] for site_nbr in site_nbrs)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001671296296296295}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate the priority for +1 spin
    p_plus = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i > 0:
      p_plus += priorities[i-1][0]
    if i < N**2 - 1:
      p_plus += priorities[i+1][0]

    # Calculate the priority for -1 spin
    p_minus = -p_plus

    priorities[i][0] = p_plus
    priorities[i][1] = p_minus
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011807098765432102}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)], axis=0)
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.959876543209892e-05}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    h_site *= np.sign(h[i//N][i%N])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    total_energy = h[i//N][i%N]+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005355092592592593}
#island_id: 1
#version_generated: 2
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbrs[j]][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbrs[j]][i%N] for j in range(3)]
    priorities[i][0] = sum([J[k,i%N,i//N]*h_sites[j] for k,j in zip(range(3),range(3))])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.043879783950617285}
#island_id: 1
#version_generated: 2
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i%N]*2*h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10572916666666665}
#island_id: 1
#version_generated: 2
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([0, 0])
    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        total_spin[0] += h[site_nbr_j][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr_j][i%N]

    priorities[i][0] = total_spin[0] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00012114197530864213}
#island_id: 3
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):  # consider all four neighbors (including diagonals)
      if i//N+j < N and J[j, i%N, i//N] > 0:
        h_site += J[j, i%N, i//N]*h[(j+N-1)%N][i%N]
      elif i//N+j >= N:  # wrap around to the other side
        h_site -= J[2-j, (j+N-1)%N, (i//N+j)%N]*h[j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007045216049382717}
#island_id: 3
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 and i % N != 0:
        site_nbr2 = (i-1) % N
        h_site += J[k,i//N,site_nbr]*h[i//N][i%N]
      elif k == 1 and i % N == 0:
        site_nbr2 = N - 1
        h_site += J[k,i//N,i%N]*h[(i//N+N-1)%N][i%N]
      elif k == 2 and i // N != 0:
        site_nbr2 = (i-N) % N
        h_site += J[k,i//N,site_nbr]*h[i//N-1][i%N]
      else:
        continue

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0027776234567901234}
#island_id: 3
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr_k = (k + ((i%N-1)%2 - 1)) % N
      if h[i//N][k] > 0:
        total_spin[0] += h_site + sum([J[m,k,i//N]*h[j][k] for j,m in zip(range(N),range(4))])
        total_spin[1] -= 2
      else:
        total_spin[0] -= h_site - sum([J[m,k,i//N]*h[j][k] for j,m in zip(range(N),range(4))])
        total_spin[1] += 2

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0052881172839506175}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      if i % (N) == j:
        if N % 2 == 1:
          site_nbr = (i + ((j-1)%2 - 1)) % N
        else:
          site_nbr = (i + ((j-1)%2)) % N
        h_site += J[0,i%N,j]*h[site_nbr][j]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005140432098765427}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (i - 1) % (N*N)
    site_nbr_right = (i + 1) % (N*N)
    site_nbr_up = (i // N * N + (i % N - 1) % N) if i % N != 0 else -1
    site_nbr_down = (i // N * N + (i % N + 1) % N) if i % N != N-1 else -1

    total_spin = h[i//N][i%N] * 2.0 - 1.0
    priorities[i][0] = h_site + J[0,i%N,i//N]*total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002260956790123458}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003473765432098769}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if all([J[k,i%N,i//N]*h[site_nbr][i%N] >= 0 for k, site_nbr in zip(range(3), site_nbrs)]):
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01148287037037037}
#island_id: 0
#version_generated: 2
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013686728395061727}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i+N-1)%N
    site_nbr_down = (i-N+1)%N if i % N != 0 else (i//N-1)*N + N-1
    site_nbr_left = (i-1)%N if i % N != 0 else (i//N-1)*N
    site_nbr_right = (i+1)%N if i % N < N-1 else (i//N)*N + N-1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2853908950617279}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 3
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009874537037037036}
#island_id: 3
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priority_total[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] = priority_total[site_nbr][j][0]
        priorities[i*N+j][1] = -priority_total[site_nbr][j][1]
      else:
        priorities[i*N+j][0] = -priority_total[site_nbr][j][0]
        priorities[i*N+j][1] = -priority_total[site_nbr][j][1]
  return(priorities)




#score: {'data2D.txt': 0.0005733024691358027}
#island_id: 0
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i // N, (i + k) % N) for k in range(-1, 2) if abs(k) != 1]
    sum_interaction = sum([J[k,i//N,(i+k)%N]*h[site_nbrs[k][0]][(i+k)%N] for k in range(len(site_nbrs))])

    priorities[i][0] = h_site + sum_interaction
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0040266975308641964}
#island_id: 0
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      site_nbr_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr_nbr][i%N] for k in range(3)])
    else:
      site_nbr_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr_nbr][i%N] for k in range(3)])

    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017393518518518522}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      sitenbr = (i % N + ((i//N+k-1)%N - N//2)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, [1,-1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, [1,-1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004970679012345682}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (J[2,i%N,i//N]*(h[(site_nbr+N-1)%N][i%N]+h[(site_nbr+N-2)%N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (J[2,i%N,i//N]*(h[(site_nbr+N-1)%N][i%N]+h[(site_nbr+N-2)%N][i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009081790123456793}
#island_id: 3
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for d2 in range(d+1,4):
        if J[d,i//N,i%N] > 0 and J[d2,i//N,i%N] > 0:
          priorities[i][0] += h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
          priorities[i][1] = -priorities[i][0]
        elif J[d,i//N,i%N] < 0 and J[d2,i//N,i%N] > 0:
          priorities[i][0] += h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
          priorities[i][1] = -priorities[i][0]
        elif J[d,i//N,i%N] > 0 and J[d2,i//N,i%N] < 0:
          priorities[i][0] += h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
          priorities[i][1] = -priorities[i][0]
        elif J[d,i//N,i%N] < 0 and J[d2,i//N,i%N] < 0:
          priorities[i][0] += h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016399691358024695}
#island_id: 1
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum(J[j,i%N,i//N]*h[(j+N-1)%N][i%N] for j in range(3)) > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.026278549382716048}
#island_id: 1
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,(i % N + (i//N+1)%N)%N,(i % N + ((i//N-1)%2 + 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1754464506172842}
#island_id: 1
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a bias term to favor the majority spin configuration
  majority_spin = np.sign(np.sum(h, axis=0))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][1] += abs(majority_spin[i%N])
    else:
      priorities[i][0] += abs(majority_spin[i%N])

  return(priorities)




#score: {'data2D.txt': 0.3328618827160484}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.count_nonzero(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.count_nonzero(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00048101851851851794}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if i // N == (j % 2) * ((N-1)//2):
        if J[j,i//N,i%N] > 0:
          h_site += sum([J[k,i%N,j%N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          h_site -= sum([J[k,i%N,j%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013152777777777774}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = [J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(nn_h)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017597222222222222}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    for j in range(3):
      k = (j-1)%2
      h_site += J[j,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017655864197530864}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site_sum = sum([h[s][i%N] if J[0,i%N,s//N]>0 else -h[s][i%N] for s in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008207870370370372}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbrs = [(i+N-1)%N, (i+N+1)%N, (i-1)%N, (i+1)%N][(j-1)%2]
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbrs][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbrs][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.00013904320987654292}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] == 1 and (k+N-1)%2 != i%2:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif J[k,i%N,i//N] == -1 and (k+N-1)%2 == i%2:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.20782206790123475}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + 2*h_site) + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + 2*h_site) - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%N - 1)) % N
    
    left_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    right_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + left_sum - right_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - left_sum + right_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002797993827160494}
#island_id: 2
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k][i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) > 0:
      h_site = sum([h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([h[site_nbrs[k]][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k][i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k][i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          if k == 1:
            total_spin += h[(k+N-1)%N][i%N]
          else:
            total_spin -= h[(k+N-1)%N][i%N]
        else:
          if k == 1:
            total_spin -= h[(k+N-1)%N][i%N]
          else:
            total_spin += h[(k+N-1)%N][i%N]

      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004979938271604938}
#island_id: 3
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2,i%N,i//N]*h[(i+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003837962962962971}
#island_id: 0
#version_generated: 2
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for neighbor in site_nbrs:
      h_neighbor = h[neighbor // N][neighbor % N]
      if J[1, i % N, i // N] > 0:
        h_site += h_neighbor
      else:
        h_site -= h_neighbor

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.254888734567901}
#island_id: 0
#version_generated: 2
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_nbr = (k+N-1)%N
      if J[k,i%N,i//N]*h[site_nbr_nbr][i%N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005856481481481486}
#island_id: 0
#version_generated: 2
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006520061728395054}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16151959876543237}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.062133487654321015}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005501543209876545}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N]
    for k in range(4):
      if k == 0 and (i//N + i)%2 != 0: continue
      if k == 1 and ((i//N + i)%2 - 1) % N == site_nbr: continue
      if k == 2 and (i//N + i)%2 != 0: continue
      if k == 3 and ((i//N + i)%2 - 1) % N == site_nbr: continue
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.04081929012345679}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0, i, j]
        total_spin[i*N+j][1] -= J[1, i, j]
      else:
        total_spin[i*N+j][0] -= J[0, i, j]
        total_spin[i*N+j][1] += J[1, i, j]
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.552469135802494e-05}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply symmetry to reduce computation
  for i in range(N**2):
    if (i % N) % 2 == 1:
      priorities[i][0], priorities[i][1] = priorities[N*N-i-1][0], priorities[N*N-i-1][1]
  
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.31174429012345606}
#island_id: 0
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * (1 + np.sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': -0.009597993827160495}
#island_id: 0
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      total_spin = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2774757716049379}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site + site_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + h_site + site_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013520061728395062}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)]) + h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + max(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + min(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.089506172839547e-05}
#island_id: 1
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19359151234567928}
#island_id: 1
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -abs(h_site) + abs(sum([J[2,k,i//N]*h[k%(2*N),i%N] for k in range(N)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = abs(h_site) - abs(sum([J[2,k,i//N]*h[k%(2*N),i%N] for k in range(N)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*spin*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = spin*h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*site_sum_h
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -8.811728395061752e-05}
#island_id: 3
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,(k+i//N)%N]*h[(k+i//N)%N][(k+i%N)%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00010756172839506201}
#island_id: 3
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i%N)] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_north = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_site_north = h[site_nbr_north][i%N]
    else:
      h_site_north = -h[site_nbr_north][i%N]

    site_nbr_south = (i // N + ((i % N+1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      h_site_south = h[site_nbr_south][i%N]
    else:
      h_site_south = -h[site_nbr_south][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    if i % (N*N//4) == 0:
      print(f"Processed {100*(i/N**2)}%")
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priority_site1 = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_site2 = -priority_site1

    priorities[i][0] = max(priority_site1, priority_site2)
    priorities[i][1] = min(priority_site1, priority_site2)

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028168209876543223}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0035733024691358022}
#island_id: 0
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N + ((i%N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + ((i%N+1)%2 - 1)) % N]
    h_site = sum([h[site_nbrs[j]][i%N] * J[j,i%N,i//N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002679166666666667}
#island_id: 0
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(i-1)%N, (i+1)%N]:
      if d == i:
        continue
      site_nbr_dir = ((d-N)//2 + ((i//N+d%N-1)%2 - 1)) % N
      if J[0,d,i//N] > 0:
        h_site += J[1,d,i//N]*h[site_nbr_dir][i%N]
      else:
        h_site -= J[1,d,i//N]*h[site_nbr_dir][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003418209876543208}
#island_id: 0
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = J[0,i%N,i//N] * h[site_nbr1][i%N]
    h_site2 = J[0,i%N,(i//N+1)%N] * h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h_site1, h_site2]) + J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-h_site1, -h_site2]) - J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.24585169753086406}
#island_id: 0
#version_generated: 2
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += J[0,i%N,j]%N*h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.0020612654320987657}
#island_id: 0
#version_generated: 2
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    if J[0,i%N,i//N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site_left = h[i//N][site_nbr_left]
    else:
      h_site_left = -h[i//N][site_nbr_left]

    site_nbr_right = (i % N + ((i//N)%2)) % N
    if J[0,i%N,i//N] > 0:
      h_site_right = h[i//N][site_nbr_right]
    else:
      h_site_right = -h[i//N][site_nbr_right]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site_up + h_site_down + h_site_left + h_site_right
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site_up - h_site_down - h_site_left - h_site_right
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006634259259259256}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0,0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j]%N==0:
        h_site = h[site_nbr][j]
      elif J[0,i,j]%N==1:
        h_site = h[i][(j+1)%N]
      else:
        h_site = h[i][(j-1)%N]

      if h[i][j] > 0:
        priorities[i*N+j][0] += h_site + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] -= h_site - sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011949074074074084}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009294907407407411}
#island_id: 0
#version_generated: 2
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      if i % N == j:
        continue
      if J[0,j,i//N] > 0:
        h_site += sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3) if (i//N+k)%N != j])
      else:
        h_site -= sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3) if (i//N+k)%N != j])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010262345679012319}
#island_id: 0
#version_generated: 2
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]*(h[(i+1)%N][i%N]+h[(i-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]*(h[(i+1)%N][i%N]+h[(i-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 0
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001271141975308641}
#island_id: 0
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [h[i//N][i%N], h[i//N][i%N]]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i//N][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 0
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013356481481481477}
#island_id: 0
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007316358024691362}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%N - N//2)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
      else:
        total_spin[0] -= h[site_nbr][j]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001560030864197531}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(i+1)%N, (i-1+N)%N]:
      if J[0,d,i//N] > 0:
        h_site += sum([J[k,d,i//N]*h[(k+N-1)%N][d] for k in range(3)])
      else:
        h_site -= sum([J[k,d,i//N]*h[(k+N-1)%N][d] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000597993827160494}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(3):
      if k == 1:
        continue
      total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.062133487654321015}
#island_id: 0
#version_generated: 2
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0018918209876543205}
#island_id: 0
#version_generated: 2
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  site_nbrs = ((i % N + ((i//N-1)%2 - 1)) % N for i in range(N**2))
  sites = (i for i in range(N**2))
  
  for site_idx, site_nbr in zip(sites, site_nbrs):
    h_site = h[site_nbr][site_idx%N] if J[0,site_idx%N,site_idx//N] > 0 else -h[site_nbr][site_idx%N]
    
    priorities[site_idx,0] = h_site + np.sum(J[[0,1,2],site_idx%N,site_idx//N]*h[[site_nbr,(site_nbr+N-1)%N,(site_nbr+2*N-1)%N],[site_idx%N]], axis=0)
    priorities[site_idx,1] = -priorities[site_idx,0]
  
  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17770046296296324}
#island_id: 2
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05919799382716052}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_side = h[site][i%N]
    else:
      h_side = -h[site][i%N]

    site_top = (i // N + ((i % N-2) % 2 - 1)) % N
    if i < N**2-N:
      if J[3,i//N,i%N] > 0:
        h_above = h[site_top][i%N]
      else:
        h_above = -h[site_top][i%N]

      priorities[i][0] = h_site + h_side + h_above
      priorities[i][1] = -priorities[i][0]
    elif i == N**2-N:
      priorities[i][0] = h_site + h_side
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 0
      priorities[i][1] = 0

  return(priorities)




#score: {'data2D.txt': -0.0008044753086419751}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] * (j*2-1) > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009478240740740742}
#island_id: 0
#version_generated: 2
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if J[d,i%N,i//N]*h[(d+N-1)%2][i%N] > 0:
        h_site += J[d,i%N,i//N]
      else:
        h_site -= J[d,i%N,i//N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28663163580246864}
#island_id: 0
#version_generated: 2
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
        priorities[i][1] -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      else:
        priorities[i][0] -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
        priorities[i][1] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= (priorities[i][0]+2)
    else:
      priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += (priorities[i][0]+2)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 2
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029634259259259258}
#island_id: 1
#version_generated: 2
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, (i//N)*N+(i%N-1), (i//N)*N+i%N, (i//N)*N+(i%N+1)]]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(4))]
    priorities[i][0] = sum([h_site + J[k,i%N,i//N]*h_sites[k-1] for k, h_site in enumerate(h_sites)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023760802469135795}
#island_id: 1
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0) + sum([J[k,i%N,k//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin[1] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09919614197530874}
#island_id: 1
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] <= 0 else h[site_nbr][i%N]
    magnetism = 0 if h[i//N][i%N] <= 0 else 1
    
    priorities[i][0] = -2*h_site + sum([J[k,i%N,i//N]*magnetism*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017041666666666663}
#island_id: 1
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2266195987654319}
#island_id: 1
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    site_spin = h[i//N][i%N]
    neighbor_spins = [h[(k+N-1)%N][i%N] for k in range(3)]
    
    if sum([J[k,i%N,i//N]*neighbor_spins[k] for k in range(3)]) > 0:
      site_spin += h[site_nbr][i%N]
    else:
      site_spin -= h[site_nbr][i%N]
    
    # Calculate priorities
    priorities[i][0] = -site_spin
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0006217592592592596}
#island_id: 1
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([priorities[j][0] for j in [i-1, i+1, i-N, i+N] if 0 <= j < N**2])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([priorities[j][0] for j in [i-1, i+1, i-N, i+N] if 0 <= j < N**2])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00028503086419753057}
#island_id: 3
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k%2 == j else -J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N-1)%2 + (i%N-1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006376080246913581}
#island_id: 0
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0822390432098766}
#island_id: 0
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[i//N][i%N] > 0 else -h[i//N][i%N]
    
    # Calculate the interaction energy from each neighbor
    neighbors_energy = [J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    
    # Add the magnetism and neighbor energies
    priorities[i][0] = h_site + sum(neighbors_energy)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0012587962962962965}
#island_id: 0
#version_generated: 2
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2//4):
    site_nbr1 = (3*i)%N
    site_nbr2 = ((i+1)*3) % N
    site_nbr3 = ((i+1)*3 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
      h_site3 = -h[site_nbr3][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]
      h_site3 = h[site_nbr3][i%N]

    if h[i//N][i%N] > 0:
      priorities[(i*4)%N*N+i%N][0] = (h_site1 + h_site2 + h_site3) - sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)])
      priorities[(i*4)%N*N+i%N][1] = -priorities[(i*4)%N*N+i%N][0]
    else:
      priorities[(i*4)%N*N+i%N][0] = -(h_site1 + h_site2 + h_site3) + sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)])
      priorities[(i*4)%N*N+i%N][1] = -priorities[(i*4)%N*N+i%N][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009106327160493827}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002290277777777778}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - spin_bias
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28602824074074024}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for j in range(N**2):
      if i != j and abs(i-j) <= 2:
        site_nbr_j = (j % N + ((j//N-1)%2 - 1)) % N
        Jij = J[0,j%N,i//N]
        total_spin += Jij * h[site_nbr_j][j%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002837500000000003}
#island_id: 1
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in [1,3]]
    h_sites = [h[j][i%N] if J[0,i%N,j//N]>0 else -h[j][i%N] for j in site_nbrs]
    total_h = sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 1
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = [sum([J[k,i%N,i//N]*h[s][i%N] for k,s in zip(range(3),site_nbrs)]) for s in site_nbrs]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0010032407407407414}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site_nbr_j][i%N]
      else:
        h_site -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14359274691358048}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i%N, i//N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002118672839506173}
#island_id: 1
#version_generated: 2
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    for d in range(3):
      site_nbr_1 = (i % N + ((i//N-1)%2 - 1)) % N
      site_nbr_2 = (site_nbr + (d-1)%2) % N
      h_site += J[d,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017310185185185178}
#island_id: 1
#version_generated: 2
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+1)%N, (i-1+N)%N, (i % N + ((i//N-2)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015393518518518516}
#island_id: 0
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k == 1 and i % N != 0) or (k == 3 and i % N == N-1) or (k == 2 and i // N != 0) or (k == 0 and i // N == N-1):
        continue
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%4][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%4][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003322530864197531}
#island_id: 2
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(4):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N if k == 0 else (i % N + ((i//N+1)%2 - 1)) % N
      sum_h += J[k,i%N,i//N] * h[site_nbr_k][i%N]

    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00976466049382716}
#island_id: 1
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [h[site_nbr][i%N], -1]
      for k in range(4):
        spin_nbr = (i // N + ((i % N + k) % N - N//2)) % N
        if J[k,i%N,i//N] > 0:
          total_spin[0] += h[spin_nbr][i%N]
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += h[spin_nbr][i%N]
      priorities[i][0] = sum([J[k,i%N,i//N]*total_spin[0] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = [-h[site_nbr][i%N], 1]
      for k in range(4):
        spin_nbr = (i // N + ((i % N + k) % N - N//2)) % N
        if J[k,i%N,i//N] > 0:
          total_spin[0] -= h[spin_nbr][i%N]
          total_spin[1] += 1
        else:
          total_spin[0] += 1
          total_spin[1] -= h[spin_nbr][i%N]
      priorities[i][0] = -sum([J[k,i%N,i//N]*total_spin[0] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.33027608024691263}
#island_id: 1
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if j == 0:
        priorities[i][j] = h_site + spin_sum
      else:
        priorities[i][j] = -h_site - spin_sum

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.722222222222465e-06}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k, h_site in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_site - J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k, h_site in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022146604938271604}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(4):
      if J[0,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, i%N, (i//N+N-1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i%N, (i//N+N-1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013256172839506142}
#island_id: 1
#version_generated: 2
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[1, i % N, i // N] * h[site_nbr2][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[1, i % N, i // N] * h[site_nbr2][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 1
#version_generated: 2
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 1
#version_generated: 2
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_site = h[i//N][i%N] + h_site
    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if sum_h_site > 0:
      priorities[i][0] = sum_h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02662608024691358}
#island_id: 1
#version_generated: 2
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + ((i % N-1)%2 - 1)) % N,
           (i // N + ((i % N+1)%2 - 1)) % N]
    
    h_sites = [h[site_nbrs[j]][i%N] for j in range(4)]
    
    J_sites = [J[k,i%N,i//N]*h_sites[k] for k in range(4)]
    
    if sum(J_sites) > 0:
      priorities[i][0] = -sum(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum(h_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005766975308641975}
#island_id: 1
#version_generated: 2
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(3):
      site_j = (i % N + ((i//N+j-1)%N - N//2)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site_j][i%N]
      else:
        h_site -= h[site_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006030092592592594}
#island_id: 0
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    spin_sums = [sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)]) for j in site_nbrs]
    if sum(spin_sums) > 0:
      priorities[i][0] = h_site + max(spin_sums)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min(spin_sums)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006896604938271604}
#island_id: 0
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009955246913580247}
#island_id: 0
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_h = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h_site for k, h_site in zip(range(4), [h[i//N][i%N]]+site_nbr_h)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h_site for k, h_site in zip(range(4), [-h[i//N][i%N]]+site_nbr_h)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001304475308641975}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, (k+N-1)%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, (k+N-1)%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    # Add additional term to account for interactions with nearest neighbors
    site_nbr_2 = ((i//N + (site_nbr // N-1)) % N + (site_nbr % N) % N) % N
    if J[0, i%N, i//N] > 0:
      priorities[i][0] += h_site * h[site_nbr_2][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= h_site * h[site_nbr_2][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0013495370370370371}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for k in range(3):
      if i//N < N-1 and (k==0 or k==2): # top neighbor
        total_priority += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif i%N < N-1: # right neighbor
        total_priority += J[k,i%N,i//N]*h[k,N-1] if k==0 else -J[k,i%N,i//N]*h[k-1,N-1]
      else: # bottom neighbor
        total_priority -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + total_priority if h[i//N][i%N] > 0 else -h_site - total_priority
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.062133487654321015}
#island_id: 1
#version_generated: 2
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013921296296296292}
#island_id: 1
#version_generated: 2
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 1
#version_generated: 2
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + priority_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - priority_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 1
#version_generated: 2
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N - 1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04337638888888889}
#island_id: 1
#version_generated: 2
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = J[0,i//N,i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_up = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_up
      priorities[i][1] = -spin_up
    else:
      spin_down = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_down
      priorities[i][1] = -spin_down

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2762742283950613}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23611990740740743}
#island_id: 0
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(3):
      for offset in [(0,1), (1,0), (-1,0), (0,-1)]:
        neighbor_index = i + N*offset[0] + offset[1]
        if 0 <= neighbor_index < N**2:
          h_neighbor = J[d][neighbor_index//N,neighbor_index%N]*h[neighbor_index//N][neighbor_index%N]
          if J[d][i//N,i%N] > 0:
            priorities[i][0] += h_site + h_neighbor
            priorities[i][1] -= 1
          else:
            priorities[i][0] -= h_site - h_neighbor
            priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00019645061728395058}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if (i//N+k)%N < N and (i%N+((k-1)%2 - 1)) % N == site_nbr]
    neighbor_sum = sum([J[k,i%N,i//N]*h[neighbors[j]][i%N] for j,k in enumerate(neighbors)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004498456790123424}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[1]
      priorities[i][1] = -total_spin[1]
    else:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011952160493827163}
#island_id: 3
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[site_nbr][j]*J[k,i//N,j] for k,j in itertools.product(range(4),range(N)) if (k==0 and i//N!=j) or (k==1 and i%N+j<=N-1) or (k==2 and i//N+j>N-1)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 1
#version_generated: 2
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_sum
      priorities[i][1] = -spin_sum
    else:
      spin_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_sum
      priorities[i][1] = spin_sum

  return(priorities)




#score: {'data2D.txt': 0.0009066358024691358}
#island_id: 1
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0034649691358024687}
#island_id: 1
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]>0) for k in range(3)]))*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]>0) for k in range(3)]))*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010084876543209886}
#island_id: 0
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011115740740740747}
#island_id: 0
#version_generated: 2
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site = (j + ((i-1)%2 - 1)) % N
      if J[0,j,i//N] > 0:
        priorities[i][0] += h_site + sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.13271604938265e-05}
#island_id: 3
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 0 and i % N != 0) or (k == 1 and i % N == N-1) or (k == 2 and ((i//N)%2==0)):
        J_k = 0
      else:
        J_k = J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J_k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J_k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005634259259259286}
#island_id: 0
#version_generated: 2
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18968595679012343}
#island_id: 0
#version_generated: 2
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N] if J[0, i%N, i//N] > 0 else -h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0, i%N, i//N] > 0 else -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00033688271604938243}
#island_id: 0
#version_generated: 2
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k-1)%2 == i % N:
        J_site = J[k,i//N,i//N]
      elif (k+1)%2 == i % N:
        J_site = J[(k+1)%4,i//N,i//N]
      else:
        J_site = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 0
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  h_ = np.array([h[i] for i in range(N)])
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h_[site_nbr][i%N]
    else:
      h_site = -h_[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h_[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h_[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr_k][i%N]
      else:
        total_spin -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin,[1, -1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin,[1, -1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004979938271604938}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0012054012345679007}
#island_id: 0
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbrs = [(site_nbr + d1)%N for d1 in [-1,0,1]]
      site_nbrs += [(site_nbr + d2)%N for d2 in [N-1,N//2,N//2+N-1]]
      h_site += sum([J[j,i%N,i//N]*h[sn][i%N] for sn in set(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010455246913580246}
#island_id: 0
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006526234567901233}
#island_id: 2
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_h > 0:
      priorities[i][0] = total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008060185185185192}
#island_id: 2
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010933641975308642}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr = (k + ((i//N-1)%2 - 1)) % N
      if h[k][i%N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, -1]

    priorities[i][0] = h_site + sum([J[1,k,i//N]*v for k,v in enumerate(total_spin)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008387345679012344}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site_k = h[site_nbr_k][i%N]
      else:
        h_site_k = -h[site_nbr_k][i%N]

      total_spin += [1*h_site+h_site_k, 1*h_site-h_site_k, -1*h_site-h_site_k, -1*h_site+h_site_k][k]

    priorities[i][0] = np.sum([J[k,i%N,i//N]*x for k,x in enumerate(total_spin)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004096141975308643}
#island_id: 3
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      h_neighbor = h[(k+N-1)%N][i%N]
      if J[k,i%N,i//N] > 0:
        h_site += h_neighbor
      else:
        h_site -= h_neighbor

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        if j == 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
      else:
        if j == 0:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20970972222222212}
#island_id: 1
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]

    priorities[i][0] = 2*h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017983024691358024}
#island_id: 1
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[0,i%N,i//N]*2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[0,i%N,i//N]*2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021763888888888887}
#island_id: 3
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(-1,2):
      total_spin += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006106481481481487}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site_nbr_neighbor][i%N]
      else:
        h_site -= h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00501898148148148}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors = [(k, (i + ((k-1)%2 - 1)) % N) for k in range(3)]
      priority_up = sum([J[k][i%N,i//N]*h[neighbors[k][1]][i%N] for k in range(3)]) + h_site
      priority_down = sum([J[k][i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = min(priority_up, priority_down)
      priorities[i][1] = 1 if priorities[i][0] == priority_up else -1
    else:
      neighbors = [(k, (i + ((k-1)%2 - 1)) % N) for k in range(3)]
      priority_up = sum([J[k][i%N,i//N]*h[neighbors[k][1]][i%N] for k in range(3)]) - h_site
      priority_down = sum([J[k][i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = min(priority_up, priority_down)
      priorities[i][1] = 1 if priorities[i][0] == priority_up else -1

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (j == 0)
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (j == 1)

  return(priorities)




#score: {'data2D.txt': 0.00013070987654320953}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 + J[0,i%N,i//N]*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002788580246913584}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N), i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min((k+N-1)%N, i//N), i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07290725308641982}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = h[i//N][i%N]*2*h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += 2*h[(k+N-1)%N][i%N]
      else:
        total_spin -= 2*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001166512345679012}
#island_id: 0
#version_generated: 2
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site
      priorities[i][1] = -priorities[i][0]
    
    for k in range(1,4):
      site_nbr = (i % N + ((i//N+k-2)%N - 1)) % N
      h_site = J[k,i%N,i//N]*h[site_nbr][i%N]
      
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
        priorities[i][1] -= h_site
      else:
        priorities[i][0] -= h_site
        priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] += h_site
    else:
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0027680555555555566}
#island_id: 1
#version_generated: 2
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a trick to prioritize spins that are most likely to be aligned with the site's magnetism
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += 2 * np.sum(h[i//N])
      priorities[i][1] -= 2 * np.sum(h[i//N])
    else:
      priorities[i][0] -= 2 * np.sum(h[i//N])
      priorities[i][1] += 2 * np.sum(h[i//N])

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h[site_nbr][i%N], -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]
    else:
      total_spin = [-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]*h[site_nbr][i%N], sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum_J)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum_J)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00046003086419753027}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_site_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    else:
      h_site = -h[site_nbr1][i%N]
      h_site_neighbors = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010918209876543215}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*(2*h[k][i%N] if k==site_nbr else 1) for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*(-2*h[k][i%N] if k==site_nbr else 1) for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010140432098765429}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    sum_term = 0
    for j in range(3):
      site_nbr = (i % N + ((i//N+j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        sum_term += h_site*h[site_nbr][i%N]
      else:
        sum_term -= h_site*h[site_nbr][i%N]

    priorities[i][0] = h_site + sum_term
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.15789861111111117}
#island_id: 1
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
      
    for j in range(2):
      temp = h[i//N][i%N]
      if J[1,i%N,i//N] > 0:
        temp += J[1,i%N,i//N]*h[(i+N-1)%N][i%N]
      else:
        temp -= J[1,i%N,i//N]*h[(i+N-1)%N][i%N]
      
      if J[2,i%N,i//N] > 0:
        temp += J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N]
      else:
        temp -= J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N]
      
      if J[3,i%N,i//N] > 0:
        temp += J[3,i%N,i//N]*h[(i+N-1)%N][i%N]
      else:
        temp -= J[3,i%N,i//N]*h[(i+N-1)%N][i%N]
      
      if j == 0:
        priorities[i][0] = h_site + temp
      else:
        priorities[i][1] = -priorities[i][0]
        
  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for k in range(3):
      if h[site_nbr][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_h + total_J
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003649845679012346}
#island_id: 1
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i%N+N-1)%N+(i//N-1)%2) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[3,i%N,i//N] > 0:
      h_site_nbr2 = h[site_nbr2][i%N]
    else:
      h_site_nbr2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site + h_site_nbr2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.11481805555555566}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_J = h[i//N][i%N] * (1 + 2*J[0,i%N,i//N])
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*sum_h_J for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_j = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_j
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002118672839506173}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h = h[i//N][i%N]
    site_nbr_h = h[site_nbr][i%N]
    J_sum = sum([J[k,i%N,i//N]*site_nbr_h for k in range(3)])

    if site_h > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00306435185185185}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) + sum([J[k,i%N,site_nbr2]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) - sum([J[k,i%N,site_nbr2]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_energy = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighborhood_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00227608024691358}
#island_id: 0
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for k in site_nbrs:
      if i//N == k//N and abs(i%N-k)%2 == 1:
        h_site += J[0,i%N,k//N] * (h[k//N][k%N] if J[0,k%N,k//N]>0 else -h[k//N][k%N])
      elif i//N == k//N and abs(i%N-k)%2 == 0:
        h_site += J[1,i//N,k//N] * (h[k//N][k%N] if J[1,k%N,k//N]>0 else -h[k//N][k%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008293672839506173}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.1574074074071961e-05}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[s][i%N] for s in site_nbrs])
    if J[0,i%N,i//N] > 0:
      h_site_sum -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site_sum += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013564814814814825}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 9.4907407407408e-05}
#island_id: 0
#version_generated: 2
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i%N, i//N] * abs(h[site_nbr2][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N] * abs(h[site_nbr2][i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1639168209876546}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      site_nbr2 = (i % N + ((k+N-1)%N - N//2)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h_site*h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site*h[site_nbr2][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016344135802469134}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[i//N][j]
      else:
        total_spin[0] -= h[i//N][j]
      if J[1,i//N,j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + sum([J[k,i%N,j]*h[site_nbr][j] for k in range(2)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = total_spin / N
  return priorities




#score: {'data2D.txt': -0.0007800925925925923}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([h[k][j] for k in range(N) for j in range(3) if k==i or abs(k-i) == 1 and j==((k+i-1)%2)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][j] for k in range(N) for j in range(3) if k==i or abs(k-i) == 1 and j==((k+i-1)%2)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001049537037037037}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      if i % (k+1) < N and i // (k+1) == site_nbr:
        J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        break
    else: 
      J_sum = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004096759259259259}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.904320987654297e-05}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013564814814814795}
#island_id: 1
#version_generated: 2
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%N - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_value = 1
      h_site = h[site_nbr][i%N]
    else:
      spin_value = -1
      h_site = -h[site_nbr][i%N]

    priority = h_site + sum([J[k,i%N,i//N]*spin_value*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_magnetism = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      site_magnetism = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + site_magnetism
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2232223765432097}
#island_id: 2
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (N-2)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (N-2)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007776234567901228}
#island_id: 3
#version_generated: 2
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_priors = np.array([h[site_nbrs[j]][i%N] + sum([J[k,i%N,i//N]*h[site_nbrs[j],i%N] for k in range(4)]) for j in range(3)]).mean()
      priorities[i][0] = spin_priors
      priorities[i][1] = -spin_priors
    else:
      spin_priors = np.array([-h[site_nbrs[j]][i%N] - sum([J[k,i%N,i//N]*-h[site_nbrs[j],i%N] for k in range(4)]) for j in range(3)]).mean()
      priorities[i][0] = spin_priors
      priorities[i][1] = -spin_priors

  return(priorities)




#score: {'data2D.txt': -8.873456790123446e-05}
#island_id: 3
#version_generated: 2
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_NW = (max(0, i//N-1)*N + min(i%N+1,N-1))
    site_nbr_NE = (min(i//N,N-1)*N + min(i%N+1,N-1))
    site_nbr_SW = (max(0, i//N-1)*N + max(0,i%N-1)%N)
    site_nbr_SE = (min(i//N,N-1)*N + max(0,i%N-1)%N)

    priorities[i][0] = h_site + sum([J[0,i%N,i//N]*h[(i//N-1)%N][i%N] for k in range(N)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.07098765432097e-05}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*(-h[(k+N-1)%N][i%N]) for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009442901234567898}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        J_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        J_nbr = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][0] = -h_site + J_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N//2)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0027199074074074074}
#island_id: 1
#version_generated: 2
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)]) > 0:
      priorities[i][0] = sum([abs(J[k,i%N,i//N])*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([abs(J[k,i%N,i//N])*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000841820987654321}
#island_id: 1
#version_generated: 2
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-2)%N][(i+N-1)%N] for k in range(4)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 3
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.17770046296296324}
#island_id: 3
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 2
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[i//N][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006745370370370368}
#island_id: 2
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum(h_site+priors[site_nbr][0] for priors in J) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum(-h_site-priors[site_nbr][0] for priors in J) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00027391975308641974}
#island_id: 3
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_dir = (k-2)%4
      if site_dir == 0:
        site_nbr_dir = (site_nbr + N) % N
      elif site_dir == 1:
        site_nbr_dir = (site_nbr + 1) % N
      elif site_dir == 2:
        site_nbr_dir = (site_nbr - 1) % N
      else:
        site_nbr_dir = (site_nbr - N) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_dir][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_dir][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011621913580246914}
#island_id: 3
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(4):
        if k == 1 and (i//N + i)%2: continue
        site = (i + ((j-1) % 2 - 1)) % N
        total_spin += J[k][i//N,i%N]*h[site][k%2]
      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010601851851851828}
#island_id: 1
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, site_nbr2, i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, site_nbr2, i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.842592592592642e-05}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,(i+1)%N]) if i % N != 0 else 0
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,(i+1)%N]) if i % N != 0 else 0
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for k in range(3):
      total_priority += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005643518518518518}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1),(-1,0),(1,0)]:
      if J[d[0],i%N,i//N] > 0:
        h_site += J[d[0],i%N,i//N]*h[(i+d[1])%N][i%N]
      else:
        h_site -= J[d[0],i%N,i//N]*h[(i+d[1])%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003245370370370372}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k, site_nbr, i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k, site_nbr, i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06510972222222225}
#island_id: 1
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00016589506172839502}
#island_id: 1
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    site_h = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    h_site = sum(site_h)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14647546296296315}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors = [k for k in range(3) if J[k,i%N,i//N]*h[(k+N-1)%N][i%N] >= 0]
    else:
      neighbors = [k for k in range(3) if J[k,i%N,i//N]*h[(k+N-1)%N][i%N] <= 0]

    site_h = h[site_nbr][i%N]
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors]) + (1 if h[i//N][i%N] > 0 else -1)*site_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016924382716049383}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N*N,2))
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site_k = h[site_nbr_k][i%N]
      else:
        h_site_k = -h[site_nbr_k][i%N]

      total_spin[i][0] += h_site_k
      if h[i//N][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1

    priorities[i][0] = total_spin[i][0]
    priorities[i][1] = -total_spin[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004678240740740741}
#island_id: 1
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr1][i%N] + J[3,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr1][i%N] - J[3,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007013888888888889}
#island_id: 1
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighboring_sites = [(k, (i+N-1)%N) for k in range(3)]
    neighboring_sites.append((i//N, i%N))
    for site in neighboring_sites:
      if J[0,site[1],site[0]] > 0:
        h_site += h[site[0]][site[1]]
      else:
        h_site -= h[site[0]][site[1]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nearest_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nearest_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nearest_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008717592592592591}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_neighbor = (j + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3243445987654312}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-k,i//N,k]%N for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-k,i//N,k]%N for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016563271604938259}
#island_id: 2
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = (h_site + total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003850308641975313}
#island_id: 0
#version_generated: 2
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, 
           (i % N + ((i//N+1)%2 - 1)) % N,
           ((i//N-1)*N + (i%N)) % N,
           ((i//N+1)*N + (i%N)) % N]
    if J[0,i%N,i//N] > 0:
      h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    else:
      h_sites = [-h[site_nbr][i%N] for site_nbr in site_nbrs]

    total_h = sum(h_sites)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009442901234567897}
#island_id: 0
#version_generated: 2
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * sum([J[k,i%N,i//N] for k in range(3)]) / len([J[k,i%N,i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + h_site) * sum([J[k,i%N,i//N] for k in range(3)]) / len([J[k,i%N,i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07652700617283954}
#island_id: 0
#version_generated: 2
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.916666666666706e-05}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    for j in [0, 2]:
      if h[site_nbrs[j]][i%N] > 0:
        priorities[i][0] += J[(j+1)%2,i//N,i%N]*h[site_nbrs[j]][i%N]
        priorities[i][1] -= J[(j+1)%2,i//N,i%N]*h[site_nbrs[j]][i%N]
      else:
        priorities[i][0] -= J[(j+1)%2,i//N,i%N]*-h[site_nbrs[j]][i%N]
        priorities[i][1] += J[(j+1)%2,i//N,i%N]*-h[site_nbrs[j]][i%N]
  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1697155864197531}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03592793209876545}
#island_id: 0
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.24240015432098755}
#island_id: 1
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = np.exp(-2*h_site)
    else:
      priorities[i][0] = h_site
      priorities[i][1] = 1 - np.exp(-2*h_site)

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Prioritize spins based on priority values
  for i in range(N**2):
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [1, 0]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, 0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 2
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      if i%N == 0 or J[k,i%N,i//N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        total_spin[1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        total_spin[1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00012453703703703723}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018063271604938287}
#island_id: 1
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i%N+N//2) % N)
    h_site = h[site_nbr1][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=((i+j)%2-1)
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
        total_spin[i*N+j][1]+=1
  for i in range(N):
    for j in range(N):
      site_nbr=((i+j)%2-1)
      if h[i][j]>0:
        total_spin[i*N+j][0]+=h[site_nbr][j]
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
        total_spin[i*N+j][1]+=1
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=((i % N + ((i//N-1)%2 - 1)) % N)
    if J[0,i%N,i//N]>0:
      h_site=h[site_nbr][i%N]
    else:
      h_site=-h[site_nbr][i%N]

    if h[i//N][i%N]>0:
      priorities[i][0]=h_site+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-h_site-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009563271604938271}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)]) if J[0,i%N,i//N] > 0 else -sum([h[site_nbr][j] for j in range(N)])
    priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 6.774691358024742e-05}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site += 2*h[i//N][i%N]
    priorities[i][0] = h_site if h[i//N][i%N]>0 else -h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': -0.21847422839506175}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h_site + J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00034305555555555543}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / (abs(h[i//N][i%N]) + abs(h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / (abs(h[i//N][i%N]) + abs(h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008868827160493828}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2, i%N, i//N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2, i%N, i//N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002207253086419753}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if all([J[k,i%N,i//N]*h[site_nbr][i%N] > 0 for k, site_nbr in zip(range(3), site_nbrs)]):
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    elif all([J[k,i%N,i//N]*h[site_nbr][i%N] < 0 for k, site_nbr in zip(range(3), site_nbrs)]):
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*(1 if h[site_nbr][i%N]>0 else -1) for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors_h)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_spin_up = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_spin_down = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = max(priority_spin_up, priority_spin_down)
      priorities[i][1] = min(-priority_spin_up, -priority_spin_down)
    else:
      priorities[i][0] = max(-priority_spin_up, -priority_spin_down)
      priorities[i][1] = min(priority_spin_up, priority_spin_down)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neigh = 0
    for k in range(3):
      sum_h_neigh += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_neigh
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_neigh
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 2
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-k)%N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022606481481481483}
#island_id: 1
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00394891975308642}
#island_id: 1
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010007716049382721}
#island_id: 3
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1), (1,0)]:
      if i+d[0]*N+d[1] >= N**2 or J[d[0],i%N,i//N] <= 0: continue
      h_site += J[d[0],i%N,i//N]*h[(d[0]+(d[1]%2 - 1)) % N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013871913580246918}
#island_id: 3
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + site_sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012057098765432099}
#island_id: 3
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(3):
      if i//N == (k+N-1)//N and ((k+N-1)%N==i%N or k==2):
        continue
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      total_spin[0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004705092592592592}
#island_id: 3
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i + ((k+N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009510802469135805}
#island_id: 3
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[(j+N-1)%N][i%N]
      else:
        total_spin[1] -= h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[j,i%N,i//N]*s for j,s in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[j,i%N,i//N]*s for j,s in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007665123456790121}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 2
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10700077160493832}
#island_id: 1
#version_generated: 2
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_magnetism = [h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs]
    magnetism = sum(neighbors_magnetism)
    
    priorities[i][0] = h[i//N][i%N] + magnetism
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,:,i//N],axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.11761095679012354}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=i%N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr=i%N
    if J[0,i//N,i%N]>0:
      h_site=h[site_nbr][i%N]
    else:
      h_site=-h[site_nbr][i%N]

    total_spin[i][0] += h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N][1] for k in range(3)])
    if total_spin[i][0]>0:
      total_spin[i][1]=-(total_spin[i][0])
    else:
      total_spin[i][1]=-total_spin[i][0]
  return(total_spin)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011342592592592527}
#island_id: 0
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]

    if np.sum(h[i//N]) > 0:
      priorities[i][0] = np.sum([h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) for h_site in h_sites])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum([-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) for h_site in h_sites])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014091049382716047}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006871913580246904}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = sum_h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      sum_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -sum_h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0034665123456790125}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    energy = 0
    magnetism = 0
    for j in range(3):
      if (i // N == site_nbr // N and i % N == site_nbr % N) or \
        ((i // N + 1) % N == site_nbr // N and i % N == site_nbr % N and i % N != 0) or \
        ((i // N - 1) % N == site_nbr // N and i % N == site_nbr % N and i % N != N-1):
        energy += J[j,i//N,i%N]*h[site_nbr][i%N]
      else:
        magnetism += J[j,i//N,i%N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = energy + magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -energy - magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16401959876543235}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    spin_product = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
        spin_product -= 1
      else:
        total_spin -= h[site_nbr][i%N]
        spin_product += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - spin_product
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.028548302469135804}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = 0
    for k in range(4):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total += h_site + J[k,i//N,i%N]*h[site_nbr2][i%N]
      else:
        total -= h_site - J[k,i//N,i%N]*h[site_nbr2][i%N]

    priorities[i][0] = total
    priorities[i][1] = -total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.002672067901234568}
#island_id: 0
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = []
    for j in [-1, 0, 1]:
      if (i % N + j) >= 0 and (i % N + j) < N:
        site_nbrs.append(i + j)
    total_spin = 0
    for j in site_nbrs:
      total_spin += h[j % N][j // N]
    priorities[i][0] = total_spin - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.10393595679012357}
#island_id: 0
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]) > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.00040570987654321006}
#island_id: 0
#version_generated: 2
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_north = (i // N - 1) * N + i % N
    if site_nbr_north >= 0 and J[1,i//N,i%N] > 0:
      h_site += h[site_nbr][i%N]
    elif site_nbr_north >= 0 and J[1,i//N,i%N] < 0:
      h_site -= h[site_nbr][i%N]

    site_nbr_south = (i // N + 1) % N * N + i % N
    if site_nbr_south < N**2 and J[3,i//N,i%N] > 0:
      h_site += h[site_nbr][i%N]
    elif site_nbr_south < N**2 and J[3,i//N,i%N] < 0:
      h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = np.sign(np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10798657407407412}
#island_id: 1
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sum = sum([h[site_nbr][i%N] if J[0,i%N,j//N]>0 else -h[site_nbr][i%N] for site_nbr, j in zip(site_nbrs,range(3))])
    priorities[i][0] = h[i//N][i%N] + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.20658595679012365}
#island_id: 1
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + 2*np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(1 + 2*np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(1 - 2*np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = 1 - 2*np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0014291666666666671}
#island_id: 1
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(site_nbr-1)%N][i%N] if i % N != 0 else h[site_nbr][i%N]
    right_h = h[(site_nbr+1)%N][i%N] if (i+1) % N != 0 else h[site_nbr][i%N]
    top_h = h[i//N][(site_nbr-1)%N] if i // N != 0 else h[i//N][site_nbr]
    bottom_h = h[i//N][(site_nbr+1)%N] if (i+N) % (N*N) != 0 else h[i//N][site_nbr]

    priorities[i][0] = h_site + sum([J[0,i%N,i//N]*h_site for _ in range(4)]) + J[1,i%N,i//N]*left_h + J[2,i%N,i//N]*right_h + J[3,i%N,i//N]*top_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007893518518518521}
#island_id: 1
#version_generated: 2
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 1
#version_generated: 2
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001875}
#island_id: 1
#version_generated: 2
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      total_spin += h[j,site_nbr_j]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[0] + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0] - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026591049382716056}
#island_id: 3
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      sitenbr_nbr = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        if k==0 or k==2:
          h_site += h[sitenbr_nbr][i%N]
        else:
          h_site -= h[sitenbr_nbr][i%N]
      else:
        if k==1 or k==3:
          h_site -= h[sitenbr_nbr][i%N]
        else:
          h_site += h[sitenbr_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00010848765432098739}
#island_id: 3
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i//N][site] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[1] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038529320987654323}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (1,0), (-1,0), (0,-1)]:
      neighbor_i = (i//N + direction[0]) % N
      neighbor_j = (i%N + direction[1]) % N
      if J[direction[1], i//N, i%N] > 0:
        h_site += J[direction[1], i//N, i%N]*h[neighbor_i][neighbor_j]
      else:
        h_site -= J[direction[1], i//N, i%N]*h[neighbor_i][neighbor_j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 2
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+N)%N,i//N]*h[(k+N-1)%N][(i+N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+N)%N,i//N]*h[(k+N-1)%N][(i+N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [i+N, i+N+1, i-N%N, i-1%N*N]
    nn_values = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(nn_values)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(nn_values)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005841049382716044}
#island_id: 0
#version_generated: 2
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0, i%N, i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0, i%N, i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017026234567901234}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    for k in range(4):
      if k == 0 and i % N != 0: # left neighbor
        total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif k == 1 and i % N == 0: # right neighbor
        total_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif k == 2 and i//N != 0: # top neighbor
        total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else: # bottom neighbor
        total_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00035756172839506204}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_left = sum([J[k, (i-1)%N, i//N]*h[(k+N-1)%N][(i-1)%N] for k in range(3) if (k-1)%2 == 0])
    sum_right = sum([J[k, (i+1)%N, i//N]*h[(k+N-1)%N][(i+1)%N] for k in range(3) if (k-1)%2 == 0])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_left - sum_right
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_left + sum_right
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0037242283950617273}
#island_id: 3
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin[0] += h_site + h_site_j
      total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004133487654320987}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        h_k = h[(k+N-1)%N][i%N]
      else:
        h_k = -h[(k+N-1)%N][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h_k
        priorities[i][1] -= J[k,i%N,i//N]*h_k
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h_k
        priorities[i][1] += J[k,i%N,i//N]*h_k

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005278858024691358}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1,i//N]]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003964506172839506}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    sum_neighbor = 0
    for j in range(3):
      if (j == 0 and i % N != 0) or (j == 2 and i % N == N-1):
        continue
      sum_neighbor += J[j,i//N,i//N]*h[(i+N*j)%N][i%N]

    priorities[i][0] = h_site + sum_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    spin_sum = np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000886265432098766}
#island_id: 3
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i - N) % N if i // N != 0 else N-1
    site_down = (i + N) % N if i // N != N-1 else 0
    site_left = (i % N - 1) % N if i % N != 0 else N-1
    site_right = (i % N + 1) % N if i % N != N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,site_nbr,i//N]*h[site_nbr][i%N] for site_nbr in (site_up, site_down, site_left, site_right)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[0,site_nbr,i//N]*-h[site_nbr][i%N] for site_nbr in (site_up, site_down, site_left, site_right)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006797839506172839}
#island_id: 3
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3399094135802459}
#island_id: 3
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_nbr = h[(j+N-1)%2][i%N]
      else:
        h_nbr = -h[(j+N-1)%2][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_nbr
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site + h_nbr
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.00022978395061728325}
#island_id: 3
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    for j in [(i % N + (k-1)%2 - 1) % N for k in [1,3]][::-1]:
      site_nbr = (j + ((i//N-1)%2 - 1)) % N
      if J[0,j,i//N] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      if h[i//N][j] > 0:
        priorities[i][0] = h_site + sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.20590231481481505}
#island_id: 0
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([1 if J[k,i%N,i//N]*h[(k+N-1)%N][i%N]>0 else -1 for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([1 if J[k,i%N,i//N]*h[(k+N-1)%N][i%N]<0 else -1 for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026359567901234576}
#island_id: 0
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          total_spin += h[(k+N-1)%N][i%N]
        else:
          total_spin -= h[(k+N-1)%N][i%N]
      if j == 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 0
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for _ in range(2)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003138117283950617}
#island_id: 0
#version_generated: 2
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 0
#version_generated: 2
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate the priority based on the number of -1 and 1 spins
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  # Calculate the priority based on the number of -1 and 1 spins
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = 10
      priorities[i][1] = -10
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = -10
      priorities[i][1] = 10
    else:
      if np.random.rand() > 0.5:
        priorities[i][0] = 10
        priorities[i][1] = -10
      else:
        priorities[i][0] = -10
        priorities[i][1] = 10

  return(priorities)




#score: {'data2D.txt': 8.040123456790132e-05}
#island_id: 0
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.858024691358125e-06}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + np.sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019800925925925923}
#island_id: 1
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    temp_h_site = h[i//N][i%N]
    temp_neighbors = [(i+N-1)%N,(i-N)%N,(i+1)%N,(i-1)%N][(i//N)%2]
    for neighbor in [temp_neighbors]:
      if J[0,i%N,neighbor] > 0:
        h_site += h[i//N][i%N]*J[0,i%N,neighbor]
      else:
        h_site -= h[i//N][i%N]*J[0,i%N,neighbor]

    if temp_h_site > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0016692901234567903}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*sum([h[j,k] for j in range(N) for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*sum([h[j,k] for j in range(N) for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + neighbor_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + neighbor_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -2.1141975308641757e-05}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[site_nbr][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001877006172839504}
#island_id: 2
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sum_j = [J[0,i%N,j//N]*h[s][i%N] for s, j in zip(site_nbrs, range(3))]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum_j[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_j[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002728549382716049}
#island_id: 2
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N) % (N*N)
    site_down = (i-N) % (N*N)
    site_left = (i-1)%N if i%N != 0 else (i-N+1)%N
    site_right = (i+1)%N if i%N != N-1 else (i+N+1)%N

    total_spin_up = sum([J[0,k,i//N]*h[k][i%N] for k in range(3)])
    total_spin_down = sum([J[1,k,i//N]*h[k][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin_up - total_spin_down
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.4907407407406505e-05}
#island_id: 2
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = h[i//N][i%N]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        sum_h += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      else:
        sum_h -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = 1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31028719135802396}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    priority_up = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_down = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(priority_up, priority_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(priority_up, priority_down)
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010385802469135822}
#island_id: 1
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += h[site_nbr][j]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 1
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    site_nbr3 = (i // N + (i % N + 1) % N)

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009486111111111113}
#island_id: 0
#version_generated: 2
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011186728395061732}
#island_id: 0
#version_generated: 2
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == k or (k+1)%2 == i//N % 2:
        J_nbr = J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      else:
        J_nbr = -J[k,N-1-i%N,k] * h[N-1-(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J_nbr for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J_nbr for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.027302006172839503}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j,i//N,i%N] > 0:
        h_nbr = h[(j+N-1)%N][i%N]
      else:
        h_nbr = -h[(j+N-1)%N][i%N]

      h_site += h_nbr
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018464506172839506}
#island_id: 0
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      spin = 1
    else:
      spin = -1
    for k in range(3):
      if i//N == (k+N-1)%N or i%N == (k+N-1)%N:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    priorities[i][0] = spin*h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.77469135802471e-05}
#island_id: 0
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [j for j in range(N**2) if abs(j-i) == N or ((i//N)%2 != (j//N)%2)]
    neighbor_sum = sum([J[k,i%N,i//N]*h[j//N][j%N] for k,j in zip(range(4),neighbors)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005415123456790115}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    for j in range(3):
      site_nbr = (i % N + ((i//N-1+j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities in descending order
  for i in range(N**2):
    sorted_priorities = np.sort(priorities[i])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sorted_priorities[-1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sorted_priorities[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006819444444444449}
#island_id: 0
#version_generated: 2
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0: 
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1: 
        site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
      elif k == 2: 
        site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
      else: 
        site_nbr2 = ((i+N-1)%N + ((i//N+1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001365277777777778}
#island_id: 0
#version_generated: 2
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1, i%N, i//N] * h[(i+N-1)%N][i%N]) + (J[2, i%N, i//N] * h[(i+2*N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1, i%N, i//N] * h[(i+N-1)%N][i%N]) - (J[2, i%N, i//N] * h[(i+2*N-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004415123456790122}
#island_id: 2
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014168209876543208}
#island_id: 2
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or i % N == N - 1 or (i // N) % N == 0 or (i // N) % N == N - 1:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000537191358024691}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_bias + sum([J[0,i%N,i//N]*h[j][i%N] for j in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -spin_bias - sum([J[0,i%N,i//N]*h[j][i%N] for j in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025523148148148146}
#island_id: 2
#version_generated: 3
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016591049382716054}
#island_id: 2
#version_generated: 3
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site_k = (k + i % N) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_k][i//N]
      else:
        total_spin -= h[site_k][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 3
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006075617283950612}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i % N + ((i//N-1)%2)) % N
    right_nbr = (i % N + ((i//N+1)%2)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,left_nbr]*h[left_nbr][i%N] - J[0,i%N,right_nbr]*h[right_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,left_nbr]*h[left_nbr][i%N] + J[0,i%N,right_nbr]*h[right_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 4.398148148148137e-05}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    h_site = sum([h[i//N][i%N]*J[k,i%N,i//N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sites[1] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sites[1] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00028348765432098744}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])*2*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001177932098765432}
#island_id: 1
#version_generated: 2
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(k+N-1)%N for k in range(3)]
    site_h = sum([J[k,i%N,i//N]*h[j][i%N] for j,k in zip(nbs,[0,1,-1])])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05113626543209877}
#island_id: 1
#version_generated: 2
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J[1,i//N,i%N]*-h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007436728395061713}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (k + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,k] > 0:
        total_spin[0] += h[site][i%N]
      else:
        total_spin[0] -= h[site][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003689351851851853}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] = h[site_nbr1][j] + h[site_nbr2][j]
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h[site_nbr1][j] - h[site_nbr2][j]
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': -0.3386729938271595}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(4):
        if J[k,i%N,i//N] > 0:
          priorities[i][0] += J[k,i%N,i//N]
          priorities[i][1] -= J[k,i%N,i//N]
        else:
          priorities[i][0] -= J[k,i%N,i//N]
          priorities[i][1] += J[k,i%N,i//N]
      if J[3,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    else:
      for k in range(4):
        if J[k,i%N,i//N] > 0:
          priorities[i][0] -= J[k,i%N,i//N]
          priorities[i][1] += J[k,i%N,i//N]
        else:
          priorities[i][0] += J[k,i%N,i//N]
          priorities[i][1] -= J[k,i%N,i//N]
      if J[3,i%N,i//N] > 0:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
      else:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0005109567901234566}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i//N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009378086419753089}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1+N*N)%N, ((i//N-1)*N+(i%N+1))%N, ((i//N-1)*N+(i%N-1))%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in enumerate(neighbors)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00016496913580246907}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+N-1)%N, (i+N+1)%N, ((i-N-1)%N + N)%N]
    for neighbor in neighbors:
      if J[0,i%N,neighbor//N] > 0:
        h_site += sum([J[k,i%N,neighbor//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,neighbor//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013720679012345677}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+N-1)%N, (i+N+1)%N, ((i-N-1)%N + N)%N, ((i-N+1)%N)%N]
    neighbor_contributions = [2*h[n//N][n%N] if J[0,n%N,n//N]>0 else -2*h[n//N][n%N] for n in neighbors]

    priorities[i][0] = h_site + sum(neighbor_contributions)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum_J
      else:
        priorities[i][j] = -h_site - sum_J

  return(priorities)




#score: {'data2D.txt': 0.006440586419753086}
#island_id: 3
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if (j % N == i % N and abs((j//N) - (i//N)) <= 1):
          priorities[i][0] += J[0,j//N,i%N]*h[(j//N)%N][j%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if (j % N == i % N and abs((j//N) - (i//N)) <= 1):
          priorities[i][0] -= J[0,j//N,i%N]*h[(j//N)%N][j%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 3
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    total_spin = 0
    for j in range(4):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004887345679012354}
#island_id: 3
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)]) * J[0,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000556944444444445}
#island_id: 3
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005426388888888889}
#island_id: 2
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for k in range(3):
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 2
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + magnetism + interaction
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00034552469135802415}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_k][i%N]
      else:
        h_site -= h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N*N,2))
    for k in range(3):
      site_nbr_k = (i % N + ((k+i//N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[i][0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[i][1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        total_spin[i][0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[i][1] += J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin[i])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin[i])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007121913580246911}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N] * h[(site_nbr+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N] * h[(site_nbr+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0072788580246913575}
#island_id: 2
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)//N or ((k+N-1)%N + ((i//N-1)%2 - 1)) % N == site_nbr:
        J_val = 0
      else:
        J_val = J[k,i%N,i//N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J_val*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J_val*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004837962962962965}
#island_id: 1
#version_generated: 2
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N) % (N*N)
    site_down = (i-N) % (N*N)
    if i//N < N-1:
      site_right = (i+N)% (N*N)
    else:
      site_right = i
    if i%N > 0:
      site_left = (i-N) % (N*N)
    else:
      site_left = i

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[2,k,i//N]*h[k%N][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[2,k,i//N]*h[k%N][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005162037037037037}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*site_h + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -2*site_h - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 3
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[site_k][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        if j == 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]
      else:
        if j == 0:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.09522608024691365}
#island_id: 0
#version_generated: 2
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j, site_nbr in enumerate(site_nbrs):
      if J[j+1,i%N,i//N] > 0:
        h_neigh = h[site_nbr][i%N]
      else:
        h_neigh = -h[site_nbr][i%N]

      priorities[i][0] += h_site + h_neigh
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014875000000000008}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([h[k][i%N] for k in range(N)]) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([h[k][i%N] for k in range(N)]) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([h[k][i%N] for k in range(N)]) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([h[k][i%N] for k in range(N)]) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.00020509259259259287}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbrs[j]][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbrs[j]][i%N] for j in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetism at each site
    total_magnetism = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003082870370370371}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+N-1)%N][i%N]+J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])*2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i+N-1)%N][i%N]+J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])*2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for k in range(3):
      site_k = (i+N*k) % N
      if i//N == site_k//N and abs(i%N-site_k%N) > 1:
        total_priority += J[k,i%N,i//N]*h[site_nbr][i%N]
      elif i//N == site_k//N and abs(i%N-site_k%N) == 1:
        total_priority += J[k,i%N,i//N]*h[site_k//N][site_k%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002052314814814815}
#island_id: 3
#version_generated: 3
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_mag = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr_mag][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr_mag][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N) % (N*N)
    site_down = (i-N) % (N*N)
    site_left = (i-1) % N * N
    site_right = (i+1) % N * N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 3
#version_generated: 3
#generate time15:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_product = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      spin_product = sum([-J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_product
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * J[0,i%N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.014397993827160492}
#island_id: 0
#version_generated: 2
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_energy = h[site_nbr][i%N]
      for j in range(4):
        if i//N == 0 or i//N == N-1:
          site_energy += J[j,i//N,i%N]*h[(i//N + (i%N+j)%2 - 1)%N][i%N]
        elif i%N == 0 or i%N == N-1:
          if j < 2:
            site_energy += J[j,i//N,i%N]*h[(i//N + (i%N+j+1)%2 - 1)%N][i%N]
          else:
            site_energy -= J[j,i//N,i%N]*h[(i//N + (i%N+j-1)%2 - 1)%N][i%N]
        else:
          if j < 2:
            site_energy += J[j,i//N,i%N]*(h[(i//N + (i%N+j+1)%2 - 1)%N][i%N] + h[(i//N + (i%N+j-1)%2 - 1)%N][i%N])
          else:
            site_energy -= J[j,i//N,i%N]*(h[(i//N + (i%N+j+1)%2 - 1)%N][i%N] + h[(i//N + (i%N+j-1)%2 - 1)%N][i%N])
      priorities[i][0] = site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      site_energy = -h[site_nbr][i%N]
      for j in range(4):
        if i//N == 0 or i//N == N-1:
          site_energy -= J[j,i//N,i%N]*h[(i//N + (i%N+j)%2 - 1)%N][i%N]
        elif i%N == 0 or i%N == N-1:
          if j < 2:
            site_energy -= J[j,i//N,i%N]*h[(i//N + (i%N+j+1)%2 - 1)%N][i%N]
          else:
            site_energy += J[j,i//N,i%N]*h[(i//N + (i%N+j-1)%2 - 1)%N][i%N]
        else:
          if j < 2:
            site_energy -= J[j,i//N,i%N]*(h[(i//N + (i%N+j+1)%2 - 1)%N][i%N] + h[(i//N + (i%N+j-1)%2 - 1)%N][i%N])
          else:
            site_energy += J[j,i//N,i%N]*(h[(i//N + (i%N+j+1)%2 - 1)%N][i%N] + h[(i//N + (i%N+j-1)%2 - 1)%N][i%N])
      priorities[i][0] = site_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07217577160493831}
#island_id: 0
#version_generated: 2
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + total_h + total_J
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.008378858024691358}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h[i//N][i%N])*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    site_nbr3 = (site_nbr1 + N - 1) % (N*N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003873302469135803}
#island_id: 1
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    
    priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0006038580246913581}
#island_id: 1
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]*(2*h[i//N][i%N]-1)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]*(2*h[i//N][i%N]-1)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0038195987654321}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28399922839506125}
#island_id: 2
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + 1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - 1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 2
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (i % N + ((i//N-k)%N - N//2)) % N
      if h[i//N][site_k] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002908179012345679}
#island_id: 2
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[i][1] = -total_spin[i][0]
    else:
      total_spin[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[i][1] = -total_spin[i][0]

  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1623770061728395}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site
    priorities[i][1] = -2*total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09289521604938278}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,(i//N+N-1)%N] > 0:
        priorities[i][0] += J[0,i%N,(i//N+N-1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,(i//N+N-1)%N] > 0:
        priorities[i][0] -= J[0,i%N,(i//N+N-1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 2
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005645524691358014}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    site_energy = 2*h[i//N][i%N]*total_spin[1] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.595679012345691e-05}
#island_id: 0
#version_generated: 2
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i//N, (i+N-1)%N), (i//N, (i+N+1)%N), ((i-N-1)//N, i % N)]
    for neighbor in neighbors:
      if J[0,neighbor[1],neighbor[0]] > 0:
        h_site += J[0,neighbor[1],neighbor[0]]*h[neighbor[0]][neighbor[1]]
      else:
        h_site -= J[0,neighbor[1],neighbor[0]]*h[neighbor[0]][neighbor[1]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -5.6018518518518024e-05}
#island_id: 0
#version_generated: 2
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]*(h[(site_nbr+i//N)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i%N]*(h[(site_nbr+i//N)%N][i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002010339506172839}
#island_id: 0
#version_generated: 2
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for di, dj in [(1,0), (-1,0), (0,1), (0,-1)]:
        site_nbr2 = ((i//N + dj)%N * N + (i%N + di)) % N
        if J[0,i%N,i//N] == J[d,site_nbr2,i//N]:
          if h[site_nbr][i%N] > 0:
            priorities[i][0] += h_site + J[d,site_nbr2,i//N]*h[site_nbr2][i%N]
            priorities[i][1] -= priorities[i][0]
          else:
            priorities[i][0] -= h_site - J[d,site_nbr2,i//N]*h[site_nbr2][i%N]
            priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([j for j in range(N) if J[0,j,i//N]>0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([j for j in range(N) if J[0,j,i//N]>0])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.00023317901234567916}
#island_id: 3
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    nn_sum = sum(nns)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026280864197530994}
#island_id: 2
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 2
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    j_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + j_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*-h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    if total_h_site > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.024016203703703706}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1)
      if total_spin[i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1)
      if total_spin[i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017464506172839508}
#island_id: 2
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1)%N, (i+N-1)%N, (i-N)%N]
    for j in range(2):
      if J[j,i//N,i%N] > 0:
        h_site += sum([h[k][i%N]*J[j,k,i%N] for k in neighbors])
      else:
        h_site -= sum([h[k][i%N]*J[j,k,i%N] for k in neighbors])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015390432098765436}
#island_id: 2
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    magnetism = sum([h[i//N][site_nbr] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = magnetism + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -magnetism - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00071466049382716}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if J[0,(i % N),i//N] > 0:
      h_site = h[(i // N) % N][i % N]
    else:
      h_site = -h[(i // N) % N][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031311728395061786}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) - total_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00011743827160493847}
#island_id: 2
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N if site_nbr1 < N // 2 else (0 if site_nbr1 == N // 2 else N - 1)
    if J[0, i % N, i // N] > 0:
      h_site1 = h[site_nbr1][i % N]
      h_site2 = h[site_nbr2][i % N]
    else:
      h_site1 = -h[site_nbr1][i % N]
      h_site2 = -h[site_nbr2][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k, i % N, i // N]*h[(k+N-1)%N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k, i % N, i // N]*h[(k+N-1)%N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001122993827160494}
#island_id: 0
#version_generated: 2
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005686728395061729}
#island_id: 0
#version_generated: 2
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[0,k,i//N]*h[k][i%N] for k in range(N)])
      priorities[i][0] = h_site + J[1,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[0,k,i//N]*-h[k][i%N] for k in range(N)])
      priorities[i][0] = -h_site - J[1,i//N,i%N]*-h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020509259259259287}
#island_id: 0
#version_generated: 2
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[n][i%N] if J[0,i%N,i//N] > 0 else -h[n][i%N] for n in site_nbrs]
    h_total = sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005226851851851852}
#island_id: 0
#version_generated: 2
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[(j+N-1)%N][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[(j+N-1)%N][i%N]
        total_spin[1] += 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006958333333333337}
#island_id: 1
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[2,i%N,i//N]*h[(2+N-1)%N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[2,i%N,i//N]*h[(2+N-1)%N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00196033950617284}
#island_id: 0
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a bias term to favor the direction of the local magnetization
  magnetization_direction = np.sign(np.sum(h, axis=0))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][1] += magnetization_direction[i%N]
    else:
      priorities[i][0] += magnetization_direction[i%N]

  return(priorities)




#score: {'data2D.txt': 0.002634722222222222}
#island_id: 0
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-k,i%N,i//N]*h[k][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-k,i%N,i//N]*h[k][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + sum_J
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006615740740740747}
#island_id: 1
#version_generated: 2
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]>0) for k in range(3)]))*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]<0) for k in range(3)]))*(-h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007515586419753087}
#island_id: 1
#version_generated: 2
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_site += h[(site_nbr + j)%N][i%N]
      elif J[j,i%N,i//N] < 0:
        h_site -= h[(site_nbr + j)%N][i%N]

    priorities[i][1] = -h_site
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
    else:
      priorities[i][0] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.0013300925925925926}
#island_id: 3
#version_generated: 2
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[k-1] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[k-1] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022748456790123465}
#island_id: 3
#version_generated: 2
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 2
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 0
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0056084876543209886}
#island_id: 0
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site_left = h[site_nbr_left][i%N]
    else:
      h_site_left = -h[site_nbr_left][i%N]

    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site_right = h[site_nbr_right][i%N]
    else:
      h_site_right = -h[site_nbr_right][i%N]

    site_nbr_up = (i % N + ((i//N-2)%N - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_up = h[i//N,site_nbr_up]
    else:
      h_site_up = -h[i//N,site_nbr_up]

    site_nbr_down = (i % N + ((i//N+1)%N - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_down = h[i//N,site_nbr_down]
    else:
      h_site_down = -h[i//N,site_nbr_down]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)]) + J[2,i//N,i%N]*(h_site_up+h_site_down) + 0.5*J[1,i%N,i%N]*(h_site_left+h_site_right)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015817901234567883}
#island_id: 1
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if ((k+1)%2==i%2 and (k+N-1)//N==(i//N))]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in zip(neighbors, neighbors)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in zip(neighbors, neighbors)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022026234567901234}
#island_id: 1
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(k+N-1)%N for k in range(3)]
    for j in range(N):
      if i // N == j or (j == 0 and i % N == N-1) or (j == N-1 and i % N == 0):
        continue
      h_neighbor = sum([J[k,i%N,j]*h[neighbor][i%N] for k, neighbor in zip(range(3), neighbors)])
      if J[0,i%N,j] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= 2*h_site + 2*h_neighbor
      else:
        priorities[i][0] -= h_site - h_neighbor
        priorities[i][1] -= 2*h_site - 2*h_neighbor

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005084722222222222}
#island_id: 0
#version_generated: 2
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N:  # left column
        site_nbr = ((i // N)**2 + i % N) % (N**2)
        h_site = h[site_nbr//N][site_nbr%N]
        priorities[i][0] = -h_site - sum([J[k,site_nbr%N,site_nbr//N]*h[(k+N-1)//N][(site_nbr+N-1)%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      elif i % (2*N) < 2*N: # right column
        site_nbr = ((i // N)**2 + (N-1-i % N)) % (N**2)
        h_site = h[site_nbr//N][site_nbr%N]
        priorities[i][0] = h_site + sum([J[k,site_nbr%N,site_nbr//N]*h[(k+N-1)//N][(site_nbr+N-1)%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else: # bottom row
        site_nbr = ((i // N)**2 + i % N) % (N**2)
        h_site = h[site_nbr//N][site_nbr%N]
        priorities[i][0] = -h_site - sum([J[k,site_nbr%N,site_nbr//N]*h[(k+N-1)//N][(site_nbr+N-1)%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 0
#version_generated: 2
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    if h[i//N][i%N] > 0:
      h_site += sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    h_site += h[site_nbr][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014552469135802436}
#island_id: 3
#version_generated: 3
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))/2
      priorities[i][1] = 1-priorities[i][0]
    else:
      priorities[i][0] = (1+np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))/2
      priorities[i][1] = 1-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002520061728395064}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      # Add the interaction with the site above
      if i < N**2 - N:
        priorities[i][0] += J[1, i%N, (i//N) % N + 1]*h[(i//N)%N + 1][i%N]
      
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      # Add the interaction with the site above
      if i < N**2 - N:
        priorities[i][0] -= J[1, i%N, (i//N) % N + 1]*h[(i//N)%N + 1][i%N]
      
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007300462962962963}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    site_nbrs += [(i // N + j) % N for j in [-1, 0, 1] if abs(j) < N and (i // N + j) >= 0]
    total_spin = np.zeros(4)
    for site_nbr in site_nbrs:
      if h[site_nbr][i % N] > 0:
        total_spin += [1, -1, J[0, i % N, i // N], J[2, i % N, i // N]]
      else:
        total_spin -= [1, -1, J[0, i % N, i // N], J[2, i % N, i // N]]
    if h[i // N][i % N] > 0:
      priorities[i][0] = sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006424382716049377}
#island_id: 0
#version_generated: 2
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_up = 0
    for j in range(-1,2):
      site_nbr_2 = (i % N + ((i//N+j)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        sum_up += h[site_nbr_2][i%N]
      else:
        sum_up -= h[site_nbr_2][i%N]

    priorities[i][0] = h_site + sum_up
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000574845679012345}
#island_id: 0
#version_generated: 2
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[j,site_nbr,site_nbr]*priorities[site_nbr][j-1] for j in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[j,site_nbr,site_nbr]*priorities[site_nbr][j-1] for j in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin if total_spin > 0 else -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0003726851851851855}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = 2*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -2*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = -2*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = 2*h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005257716049382677}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,:,i//N].flatten(), axis=None)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002118672839506173}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.112963425925926}
#island_id: 1
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0022748456790123465}
#island_id: 1
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      interaction_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + interaction_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014146604938271611}
#island_id: 1
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[0,k,i//N] for k in range(N)]
    neighbor_sum = sum(neighbors)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.015143055555555554}
#island_id: 1
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(3):
      site_nbr2 = (i % N + ((i//N+d)%2 - 1)) % N
      if J[d,i//N,i%N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006310185185185184}
#island_id: 1
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_total = np.zeros((N, N, 2))
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priority_total[i//N][i%N][0] += h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if J[k,i%N,i//N] > 0:
        priority_total[i//N][i%N][1] -= 1
      else:
        priority_total[i//N][i%N][1] += 1

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.3424489197530854}
#island_id: 1
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum([np.log(1+np.exp(J[j,i//N,k])) for j,k in itertools.product(range(N),range(4)) if (j==0 and k!=i) or (j==1 and k==(i+N-1)%N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum([np.log(1+np.exp(J[j,i//N,k])) for j,k in itertools.product(range(N),range(4)) if (j==0 and k!=i) or (j==1 and k==(i+N-1)%N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_up = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      spin_down = -spin_up
    else:
      spin_up = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      spin_down = -spin_up
    
    priorities[i][0] = spin_up
    priorities[i][1] = spin_down
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 2
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      interactions = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + interactions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005949074074074068}
#island_id: 2
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1) + j) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr_j][i%N]
      else:
        total_spin -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001407253086419753}
#island_id: 2
#version_generated: 2
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbr][i%N] * J[k,i//N,i%N] for k,site_nbr in zip(range(4),site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002797839506172837}
#island_id: 3
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k, site_nbr, (site_nbr+N-1)%N]*h[site_nbr][((site_nbr+N-1)%N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k, site_nbr, (site_nbr+N-1)%N]*h[site_nbr][((site_nbr+N-1)%N)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010054012345679009}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_j = h[site_nbr_j][j]
      else:
        h_site_j = -h[site_nbr_j][j]
      total_spin[0] += h_site + sum([J[k,i%N,j]*h_site_j for k in range(3)])
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.00037608024691358045}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][0]
    else:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000877314814814814}
#island_id: 1
#version_generated: 2
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  def get_priority(site_nbr, site, i, j):
    if J[0,i,j] > 0:
      h_site = h[site_nbr][j]
    else:
      h_site = -h[site_nbr][j]

    return h[i][j] + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = get_priority(site_nbr, i//N, i%N, i%N)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -get_priority(site_nbr, i//N, i%N, i%N)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.361111111111251e-05}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006141820987654321}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.00031311728395061786}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0406375}
#island_id: 0
#version_generated: 2
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(N))]) > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(N))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(N))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2855942901234563}
#island_id: 0
#version_generated: 2
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the magnetism of each site
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.002319598765432099}
#island_id: 1
#version_generated: 2
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J[1,i%N,i//N]*(-h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014245370370370367}
#island_id: 1
#version_generated: 2
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002197685185185185}
#island_id: 1
#version_generated: 2
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002049537037037037}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N if j%2 == 0 else (i % N + (1-(i//N)%2) - 1) % N 
           for j in range(3)]
    site_hamiltonian = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(3))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_hamiltonian
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_hamiltonian
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005949074074074068}
#island_id: 2
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = 0
    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_priority += h[site_nbr_k][i%N]
      else:
        total_priority -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010371913580246913}
#island_id: 2
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005742283950617284}
#island_id: 2
#version_generated: 3
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    priorities[i][0] = h_site + np.sum([J[k,site_nbr,j]*h[(k+N-1)%N][j] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 1
#version_generated: 2
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbor_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001180555555555558}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      if i//N == (j-1)%N or j == N//2:
        site_nbr_up = (site_nbr + 1) % N
        site_nbr_down = (site_nbr + N-1) % N
      elif i%N == (j-1)%N:
        site_nbr_left = (site_nbr + N-1) % N
        site_nbr_right = (site_nbr + 1) % N
      else:
        continue

      if h[i//N][i%N] > 0:
        priorities[i][0] += J[0,i%N,i//N]*h[site_nbr_down][i%N]
        priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr_up][i%N]
      else:
        priorities[i][1] -= J[0,i%N,i//N]*h[site_nbr_down][i%N]
        priorities[i][1] += J[0,i%N,i//N]*h[site_nbr_up][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28399922839506125}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + 1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - 1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012263888888888895}
#island_id: 1
#version_generated: 2
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if d == 0 and i % N > 0: 
        site_nbr_d0 = (i-1)%N
      elif d == 0 and i % N < N-1:
        site_nbr_d0 = (i+1)%N
      else:
        site_nbr_d0 = site_nbr

      if d == 1 and i//N > 0: 
        site_nbr_d1 = (i-N)%N*N + N-1
      elif d == 1 and i//N < N-1:
        site_nbr_d1 = (i+N)%N*N
      else:
        site_nbr_d1 = site_nbr

      if J[d,i%N,i//N] > 0:
        h_site += J[d,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[d,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004330401234567901}
#island_id: 1
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        site_nbrs.append((site_nbrs[0] + j) % N)
      else:
        site_nbrs.append((site_nbrs[0] + j - 2) % N)
    h_site = sum([h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007202160493827152}
#island_id: 1
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007063271604938271}
#island_id: 0
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[i//N][i%N] if J[0,i%N,i//N]>0 else -J[0,i%N,i//N]*h[i//N][i%N]
    for j in range(1,4):
      h_site += J[j,i%N,i//N]*h[(j+N-1)%N][i%N] if J[j,i%N,i//N]>0 else -J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0003134259259259262}
#island_id: 0
#version_generated: 2
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_product = np.prod([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_product
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002536265432098765}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016847222222222224}
#island_id: 1
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, (i//N+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, (i//N+1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002695524691358024}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      sum_j = sum([J[j,i%N,k]*h[(j+N-1)%N][i%N] for j in range(3)])
      if h[i//N][k] > 0:
        priorities[i][0] += h_site + sum_j
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum_j
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007202160493827166}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        site_mag += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
      else:
        site_mag -= J[k, i%N, i//N] * h[(k+N-1)%N][i%N]

    if site_mag > 0:
      priorities[i][0] = h_site + site_mag
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_mag
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004455246913580244}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]) * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]) * h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009205092592592593}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(4):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j, i%N, i//N] > 0:
        total_spin += [h[site_nbr_j][i%N], 1]
      else:
        total_spin -= [h[site_nbr_j][i%N], 1]

    priorities[i][0] = h_site + sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_up = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    spin_down = -spin_up

    priorities[i][0] = spin_up
    priorities[i][1] = spin_down

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 1
#version_generated: 2
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    
    if total_h_site > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate priority based on the total spin at each site
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  # Assign higher priority to the spin that agrees with the local magnetism
  for i in range(N**2):
    if sum(total_spin[i]) > 0:
      priorities[i][0] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][1]

  return(priorities)




#score: {'data2D.txt': 4.922839506172849e-05}
#island_id: 1
#version_generated: 2
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [((i+1)%N, i//N), ((i+N-1)%N, (i//N+1)%N if i//N < N//2 else (i//N-1)), ((i+N-1)%N, i//N)]
    neighbor_spin_contributions = []
    for neighbor in neighbors:
      if J[0,neighbor[1],neighbor[0]] > 0:
        contribution = h[neighbor[1]][neighbor[0]]
      else:
        contribution = -h[neighbor[1]][neighbor[0]]
      neighbor_spin_contributions.append(contribution)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbor_spin_contributions)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbor_spin_contributions)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09472762345679019}
#island_id: 1
#version_generated: 2
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    for j in range(3):
      site_nbrs.append((site_nbrs[-1] + (j%N - 1)) % N)
    h_sum = sum([h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs])
    priorities[i][0] = h[i//N][i%N] + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017007716049382718}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k == 0 and i % N != 0) or (k == 1 and i % N == 0) or (k == 2 and i // N != 0) or (k == 3 and i // N == 0):
        continue
      site_nbr = (i + k % 2 - 1) % N
      if J[0,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001045833333333334}
#island_id: 3
#version_generated: 3
#generate time16:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[(k+N-1)%N][i%N]
      else:
        total_spin[0] -= h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[k][i%N] for k in range(4)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[k][i%N] for k in range(4)]) - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.062133487654321015}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009251543209876532}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (1,0), (-1,0)]:
      if i % N + direction[0] >= 0 and i % N + direction[0] < N and i // N + direction[1] >= 0 and i // N + direction[1] < N:
        site_nbr_dir = (i % N + direction[0], i // N + direction[1])
        if J[direction[0],site_nbr_dir[0],site_nbr_dir[1]] > 0:
          h_site += J[direction[0],site_nbr_dir[0],site_nbr_dir[1]]*h[site_nbr][site_nbr_dir[0]]
        else:
          h_site -= J[direction[0],site_nbr_dir[0],site_nbr_dir[1]]*h[site_nbr][site_nbr_dir[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 3
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 3
#version_generated: 3
#generate time16:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for k in range(N):
        site = (k + ((d-1)%2 - 1)) % N
        if J[d,i%N,k] > 0:
          h_site += J[d,i%N,k]*h[site_nbr][i%N]
        else:
          h_site -= J[d,i%N,k]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 2
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i%N, i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.0013001543209876538}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_site += sum([J[k,i//N,(k+N-1)%N]*h[k][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i//N,(k+N-1)%N]*h[k][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[2,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[2,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0035418209876543214}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(h_sites) + max(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - min(h_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009893518518518509}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016205246913580241}
#island_id: 2
#version_generated: 3
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] < 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif J[0,i%N,i//N] < 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0 and J[1,(i+1)%N,i//N] > 0 and J[2,(i+N-1)%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




