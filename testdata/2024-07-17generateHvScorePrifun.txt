#score: {'data2D.txt': 0.06711589506172842}
#island_id: 1
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[site_nbr_left][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    if h[site_nbr_right][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    site_nbr_up = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[site_nbr_up][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    if h[site_nbr_down][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.006079166666666667}
#island_id: 1
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin - np.sum(np.where(J[:,i//N,i//N] > 0, 1, -1))
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0013794753086419757}
#island_id: 1
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.001845216049382715}
#island_id: 3
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    total_spin = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + 1
      priorities[i][1] -= 1 - (total_spin + 1) % 2
    else:
      priorities[i][0] -= total_spin - 1
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.1659029320987657}
#island_id: 1
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((2)%2 - 1)) % N
    priorities[i][0] += h[site_nbr][i%N]
    priorities[i][1] -= h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.020596141975308645}
#island_id: 1
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.02384212962962956}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= 2 * (total_spin + np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += 2 * (total_spin - np.sum(J[:,i//N,i%N]))

  # Add additional term to account for magnetism at each site
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin += sum(h[site][i%N] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] -= total_spin
      priorities[i][1] += 2 * (total_spin - np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] += total_spin
      priorities[i][1] -= 2 * (total_spin + np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': 0.046673919753086414}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin + np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = total_spin - np.sum(J[:,i//N,i%N])
  return(priorities)




#score: {'data2D.txt': 0.03994583333333333}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += abs(total_spin) + np.sum(J[:,i//N,i%N])
      priorities[i][1] -= 2 * (total_spin + np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] -= abs(total_spin) - np.sum(J[:,i//N,i%N])
      priorities[i][1] += 2 * (total_spin - np.sum(J[:,i//N,i%N]))
  return(priorities)




#score: {'data2D.txt': 0.1161837962962963}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin + sum(J[site_nbrs.index(s), i//N, i%N] for s in site_nbrs)
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin - sum(J[site_nbrs.index(s), i//N, i%N] for s in site_nbrs)
  return(priorities)




#score: {'data2D.txt': -0.0020020061728395063}
#island_id: 3
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i//N]) + np.sum(J[:,i//N,(i+N-1)%N])
      priorities[i][1] = neighbor_sum + np.sum(J[:,i//N,i//N]) - np.sum(J[:,i//N,(i+N-1)%N])
    else:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i//N]) - np.sum(J[:,i//N,(i+N-1)%N])
      priorities[i][1] = -neighbor_sum - np.sum(J[:,i//N,i//N]) + np.sum(J[:,i//N,(i+N-1)%N])
  
  return(priorities)




#score: {'data2D.txt': -9.120370370370368e-05}
#island_id: 3
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i//N])
      priorities[i][1] = neighbor_sum + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -neighbor_sum - np.sum(J[:,i//N,i//N])
    
  return(priorities)




#score: {'data2D.txt': -9.120370370370368e-05}
#island_id: 3
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i//N])
      priorities[i][1] = neighbor_sum + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -neighbor_sum - np.sum(J[:,i//N,i//N])
  
  return(priorities)




#score: {'data2D.txt': -9.120370370370368e-05}
#island_id: 3
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i//N])
      priorities[i][1] = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i//N])
  
  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 3
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008435956790123458}
#island_id: 3
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if i % N < N // 2:
      priorities[i][0] = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.004338425925925927}
#island_id: 3
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = -neighbor_sum + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = neighbor_sum - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0024853395061728394}
#island_id: 3
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.013365895061728394}
#island_id: 0
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    nn_energy_sum = 0
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nn_energy_sum += J[j,i//N,nn_site] * h[nn_site][i%N]

    total_energy = total_spin + nn_energy_sum

    priorities[i][0] = np.exp(total_energy / abs(h[i//N][i%N]))
    priorities[i][1] = 1 - priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    nn_energy_sum = 0
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nn_energy_sum += J[j,i//N,nn_site] * h[nn_site][i%N]

    total_energy = total_spin + nn_energy_sum

    priorities[i][0] = np.exp(total_energy)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0030578703703703597}
#island_id: 2
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site magnetism
  site_magnetisms = h.flatten()
  
  # Calculate interactions with nearest neighbors
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  # Calculate total priority for each spin assignment
  priorities[:, 0] = -site_magnetisms + np.sum(nn_interactions * (2*h.reshape(N*N, 1)-1), axis=1)
  priorities[:, 1] = -priorities[:, 0]
  
  return priorities




#score: {'data2D.txt': 0.25446219135802467}
#island_id: 2
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site magnetism
  site_magnetisms = h.flatten()
  
  # Calculate interactions with nearest neighbors
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  # Calculate total priority for each spin assignment
  priorities[:, 0] = -site_magnetisms + np.sum(nn_interactions * (-h.reshape(N*N, 1)), axis=1) + np.sum(nn_interactions * (h.reshape(N*N, 1)), axis=1)
  priorities[:, 1] = -priorities[:, 0]
  
  # Add a term to favor the spin with the same sign as site magnetism
  priorities[:, 0] += np.where(site_magnetisms > 0, 1, -1) * site_magnetisms
  
  # Improve the priority function by considering the interactions between neighboring sites
  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i, 0] += 2 * np.sum(J.reshape(4, N*N)[:, i], axis=0)
      priorities[i, 1] -= priorities[i, 0]
    else:
      priorities[i, 0] -= 2 * np.sum(J.reshape(4, N*N)[:, i], axis=0)
      priorities[i, 1] += priorities[i, 0]
  
  return priorities




#score: {'data2D.txt': 0.08089243827160493}
#island_id: 0
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Check the majority spin of neighboring sites
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        if np.random.rand() < 0.5:  # assign random spin
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  # flip the previous spin
          site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
          if i > 0:
            prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
          else:  
            prev_spin = 0
          if prev_spin == -1 and np.random.rand() < 0.5:
            priorities[i][0] = 1
            priorities[i][1] = -1
          elif prev_spin == 1 and np.random.rand() < 0.5:
            priorities[i][0] = -1
            priorities[i][1] = 1
          else:
            priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
            priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
  return(priorities)




#score: {'data2D.txt': 0.00019398148148148099}
#island_id: 0
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = 0
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      total_energy += J[k,i//N,i%N] * h[site_nbr][i%N]
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = np.random.choice([-1, 1])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.08023750000000002}
#island_id: 0
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if i > 0 and (i-1)%N != N-1: 
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
          priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
      else: 
        if np.random.rand() < 0.5:  
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
  return(priorities)




#score: {'data2D.txt': 0.07851527777777778}
#island_id: 0
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N]*h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]*(-1) + priorities[(i-1)//N*N + (i-1)%N][1]
      else:  
        prev_spin = 0
      if prev_spin == -1 and total_energy > 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
      elif prev_spin == 1 and total_energy < 0:
        priorities[i][0] = -1
        priorities[i][1] = 1
      else:
        if np.random.rand() < 0.5:  # assign random spin
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  # flip the previous spin
          priorities[i][0] = -prev_spin
          priorities[i][1] = -prev_spin
  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1705569444444447}
#island_id: 2
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  site_magnetisms = h.flatten()
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  for i in range(N*N):
    total_spin = -site_magnetisms[i] + np.sum(nn_interactions[(i % N + ((i//N-1)%2 - 1)) % N * N:(i % N + ((i//N-1)%2 - 1)) % N + (i % N):(4*(i%N)+1)].flatten())
    priorities[i, 0] = total_spin
    priorities[i, 1] = -total_spin if np.random.rand() < 0.5 else total_spin
  
  return priorities




#score: {'data2D.txt': -0.3403016975308632}
#island_id: 2
#version_generated: 2
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  site_magnetisms = h.flatten()
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  for i in range(N*N):
    total_spin = -site_magnetisms[i] + np.sum(nn_interactions[(i % N + ((i//N-1)%2 - 1)) % N * N:(i % N + ((i//N-1)%2 - 1)) % N + (i % N):(4*(i%N)+1)].flatten()) 
    priorities[i, 0] = total_spin
    priorities[i, 1] = -total_spin
    
  # Prioritize spins based on the site interactions and magnetism
  for i in range(N*N):
    if h[i//N][i%N] > 0:
      priorities[i, 0] += 1
      priorities[i, 1] -= 1
    else:
      priorities[i, 0] -= 1
      priorities[i, 1] += 1
  
  return priorities




#score: {'data2D.txt': 0.16152361111111083}
#island_id: 2
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  site_magnetisms = h.flatten()
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  for i in range(N*N):
    total_spin = -site_magnetisms[i]
    for j in range(4):
      if (i % N + ((i//N-1)%2 - 1)) % N * N + (i % N) == j:
        total_spin += nn_interactions[j] * site_magnetisms[(i // N + ((j-1)%2 - 1)) % N * N + (i % N)]
      elif (i % N + ((i//N-1)%2 - 1)) % N * N + (i % N) == j+1:
        total_spin += nn_interactions[j] * site_magnetisms[(i // N + ((j-1)%2 - 1)) % N * N + (i % N)]
      elif (i % N + ((i//N-1)%2 - 1)) % N * N + (i % N) == j+2:
        total_spin += nn_interactions[j] * site_magnetisms[(i // N + ((j-1)%2 - 1)) % N * N + (i % N)]
      else:
        total_spin -= nn_interactions[j] * site_magnetisms[(i // N + ((j-1)%2 - 1)) % N * N + (i % N)]
    
    priorities[i, 0] = total_spin
    priorities[i, 1] = -total_spin
  
  return priorities




#score: {'data2D.txt': -0.0006908950617283964}
#island_id: 2
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site magnetism
  site_magnetisms = h.flatten()
  
  # Calculate interactions with nearest neighbors
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  # Initialize sums of interactions
  sum_pos = np.sum(nn_interactions * (h.reshape(N*N, 1) + 1), axis=1)
  sum_neg = np.sum(nn_interactions * (-h.reshape(N*N, 1) - 1), axis=1)
  
  # Calculate total priority for each spin assignment
  priorities[:, 0] = -site_magnetisms + sum_pos
  priorities[:, 1] = -site_magnetisms + sum_neg
  
  return priorities




#score: {'data2D.txt': 0.1620038580246914}
#island_id: 2
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  # Calculate site magnetism
  site_magnetisms = h.flatten()
  
  # Calculate interactions with nearest neighbors
  nn_interactions = J.reshape(4, N*N).T.flatten()
  
  # Calculate total priority for each spin assignment
  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i,0] = -site_magnetisms[i] + np.sum(nn_interactions[4*i:4*i+4]) - np.sum(nn_interactions[4*i+1:4*i+5])
    priorities[i,1] = -priorities[i,0]
    
    # Add a term to favor the spin with the same sign as site magnetism
    if site_magnetisms[i] > 0:
      priorities[i,0] += 2 * np.sum(nn_interactions[4*i:4*i+4])
      priorities[i,1] -= priorities[i,0]
    else:
      priorities[i,0] -= 2 * np.sum(nn_interactions[4*i:4*i+4])
      priorities[i,1] += priorities[i,0]
  
  return priorities




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 3
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004051697530864199}
#island_id: 3
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]
    
    # Add the contribution from the rest of the neighbors
    for k in range(4):
      if k % 2 == 0: 
        if i//N < N-1:
          priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%4][i%N]
          priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%4][i%N]
        else: 
          priorities[i][0] += J[k,N-1,i//N]*h[(k+2)%4][i%N]
          priorities[i][1] -= J[k,N-1,i//N]*h[(k+2)%4][i%N]
      else:
        if i % N < N-1:
          priorities[i][0] += J[k,i%N,N-1]*h[k][i%N]
          priorities[i][1] -= J[k,i%N,N-1]*h[k][i%N]
        else: 
          priorities[i][0] += J[k,0,i//N]*h[k][N-1]
          priorities[i][1] -= J[k,0,i//N]*h[k][N-1]
        
  return(priorities)




#score: {'data2D.txt': -0.006210339506172839}
#island_id: 3
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': 0.004962808641975309}
#island_id: 3
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.005180401234567902}
#island_id: 0
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + nn_energy
    if np.random.rand() < 1 - np.exp(-energy_diff):
      priorities[i][0] = energy_diff * N - 2*N
    else:
      priorities[i][0] = -(energy_diff) * N + 2*N
  return(priorities)




#score: {'data2D.txt': -0.0034625}
#island_id: 0
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    priority_flip = np.where(energy_diff > 0, -energy_diff * N + 2*N, 
                 -(total_energy - nn_energy) * N + 2*N if np.random.rand() < 0.5 else (total_energy + nn_energy) * N - 2*N)
    priorities[i][0] = priority_flip
  return(priorities)




#score: {'data2D.txt': 0.040386265432098764}
#island_id: 0
#version_generated: 2
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_flip = np.where(total_energy + 2*nn_energy > 0, 1, -1)
    priorities[i][0] = (total_energy + nn_energy) * N - 2*N if priority_flip == 1 else -(total_energy - nn_energy) * N + 2*N
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    priorities[i][0] = np.where(energy_diff > 0, energy_diff * N - 2*N, 
                                 np.where(energy_diff < 0, -energy_diff * N + 2*N, 0))
    spin_bias = 1 if np.random.rand() < 0.5 else -1
    priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0034442901234567904}
#island_id: 3
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    # Calculate the priority based on the total magnetism at each site
    if h_site > 0:
      priorities[i][0] = -sum_neighbors
      priorities[i][1] = sum_neighbors + 2 * abs(h_site)
    else:
      priorities[i][0] = sum_neighbors
      priorities[i][1] = -sum_neighbors - 2 * abs(h_site)

  return(priorities)




#score: {'data2D.txt': 0.0003566358024691363}
#island_id: 3
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014964506172839508}
#island_id: 3
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N * N) < N // 2:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0013044753086419755}
#island_id: 1
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin + sum(h[j][i%N] * (J[3,i%N,j] > 0) - (J[3,i%N,j] < 0) for j in range(N))
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.16672762345679035}
#island_id: 1
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[i//N][i%N]
      else:
        total_spin -= h[i//N][i%N]
    
    priorities[i][1] = -total_spin
    priorities[i][0] = total_spin
  return priorities




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Compute interaction terms
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Compute magnetism term
    total_spin += h[i//N][i%N]
    
    # Assign priorities based on total spin
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11222762345679024}
#island_id: 1
#version_generated: 2
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr_row][i%N] + h[site_nbr_col][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr_row = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_row][i%N]
        priorities[i][1] -= h[site_nbr_row][i%N]
      else:
        priorities[i][0] -= h[site_nbr_row][i%N]
        priorities[i][1] += h[site_nbr_row][i%N]
    
    for j in range(N):
      site_nbr_col = (j + ((i-1)%2 - 1)) % N
      if J[3,i//N,j] > 0:
        priorities[i][0] += h[site_nbr_col][j]
        priorities[i][1] -= h[site_nbr_col][j]
      else:
        priorities[i][0] -= h[site_nbr_col][j]
        priorities[i][1] += h[site_nbr_col][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11404089506172853}
#island_id: 1
#version_generated: 2
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i % N + (j-1)%2 - 1) % N for j in range(3)]
    for k in range(4):
      for site_nbr in site_nbrs:
        if J[k,i%N,i//N] > 0:
          priorities[i][0] += h[site_nbr][i%N]
          priorities[i][1] -= h[site_nbr][i%N]
        else:
          priorities[i][0] -= h[site_nbr][i%N]
          priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.0012739197530864197}
#island_id: 1
#version_generated: 2
#generate time00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0018600308641975325}
#island_id: 1
#version_generated: 2
#generate time00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin1 = h[site_nbr1][i%N]
    total_spin2 = h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin1 += 1
        total_spin2 -= 1
      else:
        total_spin1 -= 1
        total_spin2 += 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin1 + total_spin2, -total_spin1 - total_spin2]
    else:
      priorities[i] = [-total_spin1 - total_spin2, total_spin1 + total_spin2]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h=0
    for j in range(3):
      sum_h+=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0]=h_site+sum_h
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-h_site-sum_h
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 3
#version_generated: 2
#generate time00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0. for _ in range(2)] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004113734567901234}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] -= 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))
    else:
      priorities[i][0] -= (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] += 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))

  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * h[i][j]
        priorities[i*N+j][1] -= 3.5 * (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * h[i][j]
      else:
        priorities[i*N+j][0] -= (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * h[i][j]
        priorities[i*N+j][1] += 2.5 * (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * h[i][j]

  # Add the interactions with all neighbors
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += np.sum(J[:,site_nbr,j]) * h[i][j]
        priorities[i*N+j][1] -= 3.5 * np.sum(J[:,site_nbr,j]) * h[i][j]
      else:
        priorities[i*N+j][0] -= np.sum(J[:,site_nbr,j]) * h[i][j]
        priorities[i*N+j][1] += 2.5 * np.sum(J[:,site_nbr,j]) * h[i][j]

  return(priorities)




#score: {'data2D.txt': -0.0019350308641975316}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] -= 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))
    else:
      priorities[i][0] -= (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] += 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))

    for k in range(4):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 3.5 * np.sum(J[:,site,i%N])
        priorities[i][1] -= 2.5 * np.sum(J[:,site,i%N])
      else:
        priorities[i][0] -= 3.5 * np.sum(J[:,site,i%N])
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])

  return(priorities)




#score: {'data2D.txt': -0.002840895061728397}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] -= 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))
    else:
      priorities[i][0] -= (total_spin + np.sum(J[:,site_nbr,i%N])) * 3.5
      priorities[i][1] += 2.5 * (total_spin + np.sum(J[:,site_nbr,i%N]))

  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * 3.5
        priorities[i*N+j][1] -= 2.5 * (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j]))
      else:
        priorities[i*N+j][0] -= (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j])) * 3.5
        priorities[i*N+j][1] += 2.5 * (np.sum(J[:,site_nbr,j]) + np.sum(J[:,i,j]))

  return(priorities)




#score: {'data2D.txt': 0.0031797839506172844}
#island_id: 0
#version_generated: 2
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total energy and magnetism
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    
    # Determine the priority based on the total energy and magnetism
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Determine the priority based on the magnetism and site interaction
      if h[site_nbr][i%N] > 0:
        if sum(J[k,i//N,i%N] for k in range(3)) > 0:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:
        if sum(J[k,i//N,i%N] for k in range(3)) < 0:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': -0.006247993827160495}
#island_id: 0
#version_generated: 2
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    
    if h[site_nbr][i%N] > 0:
      priority_spin = 1
    else:
      priority_spin = -1
    
    # Calculate the priority based on the total energy and magnetism at the site
    if total_energy > 0:
      priorities[i][0] = priority_spin
      priorities[i][1] = 1 if priority_spin == -1 else -1
    elif total_energy < 0:
      priorities[i][0] = priority_spin
      priorities[i][1] = -1 if priority_spin == -1 else 1
    else:
      # If the site is not affected by any neighboring spins, assign it the same spin as the magnetism at this site
      priorities[i][0] = priority_spin
      priorities[i][1] = 1 if priority_spin == -1 else -1
  
  return(priorities)




#score: {'data2D.txt': 0.0013742283950617285}
#island_id: 0
#version_generated: 2
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,-1] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += -sum(J[k,i//N,i%N] for k in range(3))
      priorities[i][1] -= sum(J[k,i//N,i%N] for k in range(3))
    else:
      priorities[i][0] -= sum(J[k,i//N,i%N] for k in range(3))
      priorities[i][1] += sum(J[k,i//N,i%N] for k in range(3))
    
    if total_spin > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_spin < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = np.sign(sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0003026234567901231}
#island_id: 0
#version_generated: 2
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total energy and magnetism
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_magnetism = np.sum(h[i//N])
    
    # Determine the priority based on the total energy, magnetism and interaction
    if total_energy > 0:
      priorities[i][0] = -1 if total_magnetism > 0 else 1
      priorities[i][1] = -1 if total_magnetism < 0 else 1
    elif total_energy < 0:
      priorities[i][0] = 1 if total_magnetism > 0 else -1
      priorities[i][1] = 1 if total_magnetism < 0 else -1
    else:
      # Determine the priority based on the magnetism and interaction
      site_nbr_mag = h[site_nbr][i%N]
      if site_nbr_mag > 0:
        priorities[i][0] = 1 if np.sum(h[i//N]) > 0 else -1
        priorities[i][1] = -1 if np.sum(h[i//N]) < 0 else 1
      else:
        priorities[i][0] = -1 if np.sum(h[i//N]) > 0 else 1
        priorities[i][1] = 1 if np.sum(h[i//N]) < 0 else -1
  
  return(priorities)




#score: {'data2D.txt': -0.0015649691358024694}
#island_id: 0
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_spin * 3.5 + np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] -= 2.5 * total_spin - 1
    else:
      priorities[i][0] -= total_spin * 3.5 + np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] += 2.5 * total_spin + 1

  return(priorities)




#score: {'data2D.txt': -0.0015942901234567903}
#island_id: 0
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -2 * total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = 2 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.1438705246913582}
#island_id: 0
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin

  return(priorities)




#score: {'data2D.txt': -0.00035015432098765435}
#island_id: 0
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]

    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

  return(priorities)




#score: {'data2D.txt': -0.14141095679012364}
#island_id: 3
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    if h[site_nbr][i % N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j, i % N, i // N] * h[(j + N - 1) % N][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0002615740740740743}
#island_id: 3
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum(J[j, i%N, i//N] * h[(j+N-1)%N][i%N] for j in range(3))
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h=0
    for j in range(3):
      sum_h+=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0]=2*h_site+sum_h
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=2*(-h_site)-sum_h
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001102623456790125}
#island_id: 3
#version_generated: 2
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or \
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if h[i // N][i % N] > 0:
      priorities[i][0] = -effective_field
      priorities[i][1] = effective_field
    else:
      priorities[i][0] = effective_field
      priorities[i][1] = -effective_field
  
  return priorities




#score: {'data2D.txt': -0.00024027777777777738}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    sum_h = 0
    for j in range(3):
      if J[j, i % N, i // N] > 0:
        sum_h += h[(j + N - 1) % N][i % N]
      else:
        sum_h -= h[(j + N - 1) % N][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j, i % N, i // N] * h[(j + N - 1) % N][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = (h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])

  return priorities




#score: {'data2D.txt': -0.00024027777777777738}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site=h[site_nbr][i%N]
    sum_h=0
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        sum_h+=h[(j+N-1)%N][i%N]
      else:
        sum_h-=h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0]=sum_h
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-sum_h
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum(J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3))
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = h[site_nbr][i % N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i % N] - total_spin
      priorities[i][1] = -priorities[i][0]
  
  return priorities




#score: {'data2D.txt': -0.0008625000000000006}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if np.sum(h[i // N]) > 0:
      priorities[i][0] = -effective_field
      priorities[i][1] = effective_field
    else:
      priorities[i][0] = effective_field
      priorities[i][1] = -effective_field
  
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if h[i // N][i % N] > 0:
      spin_priority = np.sign(effective_field)
      priorities[i][spin_priority == 1] += np.abs(effective_field)
    else:
      spin_priority = np.sign(-effective_field)
      priorities[i][spin_priority == 1] += np.abs(-effective_field)
  
  return priorities




#score: {'data2D.txt': -0.0009489197530864195}
#island_id: 3
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if h[i // N][i % N] > 0:
      priorities[i][0] = -effective_field - np.sum(J[:, i % N, i // N])
      priorities[i][1] = effective_field + np.sum(J[:, i % N, i // N])
    else:
      priorities[i][0] = effective_field + np.sum(J[:, i % N, i // N])
      priorities[i][1] = -effective_field - np.sum(J[:, i % N, i // N])
  
  return priorities




#score: {'data2D.txt': -0.0008625000000000006}
#island_id: 3
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if np.sum(h[i // N]) > 0:
      priorities[i][0] = -effective_field
      priorities[i][1] = effective_field
    else:
      priorities[i][0] = effective_field
      priorities[i][1] = -effective_field
    
  return priorities




#score: {'data2D.txt': -0.0008625000000000006}
#island_id: 3
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priorities for assigning spins to -1 and 1 based on the effective field
    if np.sum(h[i // N]) > 0:
      priorities[i][0] = -effective_field
      priorities[i][1] = effective_field
    else:
      priorities[i][0] = effective_field
      priorities[i][1] = -effective_field
    
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the effective field at each site
    effective_field = h[site_nbr][i % N]
    
    # Iterate over the neighboring sites and calculate the contribution to the effective field
    for j in range(4):
      if (j == 0 and i % N != 0) or (j == 1 and i % N == N - 1) or\
        (j == 2 and i // N != 0) or (j == 3 and i // N == N - 1):
        continue
      effective_field += J[j, i % N, i // N] * h[(j + 2) % 4][i % N]
    
    # Calculate the priority for assigning spins to -1 based on the absolute value of the effective field
    priorities[i][0] = np.abs(effective_field)
    
    # Calculate the priority for assigning spins to 1 based on the negative of the absolute value of the effective field
    priorities[i][1] = -np.abs(effective_field)
  
  return priorities




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin
    total_spin = h[site_nbr][i%N]
    
    # Add interactions from neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the priority based on magnetism and spin
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.03725138888888888}
#island_id: 1
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
        
  return(priorities)




#score: {'data2D.txt': -0.005066512345679012}
#island_id: 1
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = -1
    else:
      total_spin = 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0033773148148148148}
#island_id: 2
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4): # consider all four directions: up, down, left, right
      n_i = (i // N) % N
      n_j = i % N
      if d == 0 and n_j > 0: 
        n_i, n_j = n_i, N - 1
      elif d == 1 and n_i < N-1:
        n_i, n_j = N-1, n_j
      elif d == 2 and n_j < N-1:
        n_i, n_j = i // N, N-1
      elif d == 3 and n_i > 0: 
        n_i, n_j = 0, i % N
      
      if J[d,i//N,i%N] > 0:
        spin_bias += h[n_i][n_j]
      else:
        spin_bias -= h[n_i][n_j]
    
    priorities[i][0] = spin_bias
    priorities[i][1] = -spin_bias
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.033701388888888885}
#island_id: 1
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add contributions from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # Add priority for magnetism at the current site
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.14575447530864216}
#island_id: 1
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + sum(J[j,i//N,i//N] for j in range(4))
      priorities[i][1] = total_spin - sum(J[j,i//N,i//N] for j in range(4))
    else:
      priorities[i][0] = total_spin - sum(J[j,i//N,i//N] for j in range(4))
      priorities[i][1] = -total_spin + sum(J[j,i//N,i//N] for j in range(4))
    
  return(priorities)




#score: {'data2D.txt': -0.028011882716049385}
#island_id: 2
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4): # consider all four directions: up, down, left, right
      n_i = (i // N) % N
      n_j = i % N
      if d == 0 and n_j > 0: 
        n_i, n_j = n_i, N - 1
      elif d == 1 and n_i < N-1:
        n_i, n_j = N-1, n_j
      elif d == 2 and n_j < N-1:
        n_i, n_j = i // N, N-1
      elif d == 3 and n_i > 0: 
        n_i, n_j = 0, i % N
      
      if J[d,i//N,i%N] > 0:
        spin_bias += h[n_i][n_j]
      else:
        spin_bias -= h[n_i][n_j]
    
    # Calculate the priority based on the total energy
    priorities[i][0] = spin_bias * np.sum(J[:,i//N,i%N])
    priorities[i][1] = -spin_bias * np.sum(J[:,i//N,i%N])
  
  return(priorities)




#score: {'data2D.txt': -0.0033773148148148148}
#island_id: 2
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4): # consider all four directions: up, down, left, right
      n_i = (i // N) % N
      n_j = i % N
      if d == 0 and n_j > 0: 
        n_i, n_j = n_i, N - 1
      elif d == 1 and n_i < N-1:
        n_i, n_j = N-1, n_j
      elif d == 2 and n_j < N-1:
        n_i, n_j = i // N, N-1
      elif d == 3 and n_i > 0: 
        n_i, n_j = 0, i % N
      
      if J[d,i//N,i%N] > 0:
        spin_bias += h[n_i][n_j]
      else:
        spin_bias -= h[n_i][n_j]
    
    priorities[i][0] = spin_bias
    priorities[i][1] = -spin_bias
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4): # consider all four directions: up, down, left, right
      n_i = (i // N) % N
      n_j = i % N
      if d == 0 and n_j > 0: 
        n_i, n_j = n_i, N - 1
      elif d == 1 and n_i < N-1:
        n_i, n_j = N-1, n_j
      elif d == 2 and n_j < N-1:
        n_i, n_j = i // N, N-1
      elif d == 3 and n_i > 0: 
        n_i, n_j = 0, i % N
      
      if J[d,i//N,i%N] > 0:
        spin_bias += h[n_i][n_j]
      else:
        spin_bias -= h[n_i][n_j]
    
    priorities[i][0] = spin_bias
    priorities[i][1] = -spin_bias

  # Perform a simple sorting and grouping based on the biases
  sorted_indices = np.argsort(priorities[:, 0])
  groups = [[], []]
  for i in sorted_indices:
    if priorities[i][0] > 0:
      groups[1].append(i)
    else:
      groups[0].append(i)

  # Reorder the priorities based on the grouping
  for group in groups:
    for idx in group:
      priorities[idx, 0], priorities[idx, 1] = priorities[idx, 1], -priorities[idx, 0]

  return(priorities)




#score: {'data2D.txt': -0.0033773148148148148}
#island_id: 2
#version_generated: 2
#generate time00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4): # consider all four directions: up, down, left, right
      n_i = (i // N) % N
      n_j = i % N
      if d == 0 and n_j > 0: 
        n_i, n_j = n_i, N - 1
      elif d == 1 and n_i < N-1:
        n_i, n_j = N-1, n_j
      elif d == 2 and n_j < N-1:
        n_i, n_j = i // N, N-1
      elif d == 3 and n_i > 0: 
        n_i, n_j = 0, i % N
      
      if J[d,i//N,i%N] > 0:
        spin_bias += h[n_i][n_j]
      else:
        spin_bias -= h[n_i][n_j]
    
    priorities[i][0] = spin_bias
    priorities[i][1] = -spin_bias
  
  return(priorities)




#score: {'data2D.txt': 0.04317052469135804}
#island_id: 0
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]

    for j in range(N):
      if J[2,i//N,j] > 0:
        neighbor_energy = h[j][i%N]
      else:
        neighbor_energy = -h[j][i%N]

      total_energy += neighbor_energy

    priorities[i][1] -= (h_site + total_energy) / abs(h[i//N][i%N])

    for j in range(N):
      if J[3,i//N,j] > 0:
        neighbor_energy = h[j][i%N]
      else:
        neighbor_energy = -h[j][i%N]

      total_energy += neighbor_energy

    priorities[i][1] -= (h_site + total_energy) / abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': -0.015041203703703702}
#island_id: 0
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    neighbor_energy = 0
    for j in range(N):
      for k in range(2):
        if J[k,i//N,j] > 0:
          neighbor_energy += h[j][i%N]
        else:
          neighbor_energy -= h[j][i%N]
          
    total_energy = -total_spin * neighbor_energy
    
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_spin = np.sign(total_spin)
    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': -0.0013794753086419757}
#island_id: 1
#version_generated: 2
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.16209521604938287}
#island_id: 0
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    
    site_energy = 0
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      site_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    
    priorities[i][0] = total_energy + site_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.16541064814814838}
#island_id: 1
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum(h[j][(i-j)%N] for j in range(max(0, i-N), min(N, i+1)))
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum(h[j][(i-j)%N] for j in range(max(0, i-N), min(N, i+1)))
  
  return(priorities)




#score: {'data2D.txt': 0.16222145061728419}
#island_id: 1
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N//N] > 0:
      priorities[i][0] += h[site_nbr][N//N]
      priorities[i][1] -= h[site_nbr][N//N]
    else:
      priorities[i][0] -= h[site_nbr][N//N]
      priorities[i][1] += h[site_nbr][N//N]
  
  return(priorities)




#score: {'data2D.txt': -0.006468364197530864}
#island_id: 1
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_magnetism = h[i//N][i%N]
    priorities[i][0] = -total_spin + total_magnetism
    priorities[i][1] = total_spin + total_magnetism
  
  return(priorities)




#score: {'data2D.txt': 0.03326805555555556}
#island_id: 1
#version_generated: 2
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = np.sum(J[:,i//N,i//N]) + h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.005777006172839506}
#island_id: 0
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_sum = sum([J[j,i//N,site_nbr] * h[(site_nbr + j)%N][i%N] for j in range(4)])
    
    if J[0,i//N,site_nbr] > 0:
      priorities[i][0] = -h[site_nbr][i%N]
    else:
      priorities[i][0] = h[site_nbr][i%N]

    # Add a term to the priority that is proportional to the magnetism at the site
    priorities[i][1] = -priorities[i][0] + nn_energy_sum
  return(priorities)




#score: {'data2D.txt': -0.005777006172839506}
#island_id: 0
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_sum = sum([J[j,i//N,site_nbr] * h[(site_nbr + j)%N][i%N] for j in range(4)])
    
    if J[0,i//N,site_nbr] > 0:
      priorities[i][0] = -h[site_nbr][i%N]
    else:
      priorities[i][0] = h[site_nbr][i%N]

    # Add a term to the priority that is proportional to the magnetism at the site
    priorities[i][1] = -priorities[i][0] + nn_energy_sum
    
  return(priorities)




#score: {'data2D.txt': -0.04804089506172839}
#island_id: 0
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    if h_site * total_energy > 0:
      priorities[i][0] = (2*h_site + total_energy) * np.exp(total_energy)
      priorities[i][1] = -(2*h_site + total_energy) * np.exp(-total_energy)
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -total_energy
  
  return(priorities)




#score: {'data2D.txt': 0.0015853395061728396}
#island_id: 0
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5 + np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]*3.5
      priorities[i][1] -= 2.5 * total_spin - 1.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] -= total_spin * 3.5 + np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]*3.5
      priorities[i][1] += 2.5 * total_spin + 1.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.01538966049382716}
#island_id: 0
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] -= 3.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]
      else:
        priorities[i*N+j][0] -= np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] += 2.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priorities[i*N+j][0] += 1.5 * np.sum(J[:,site,j])*h[site][j]
      priorities[i*N+j][1] -= 1.5 * np.sum(J[:,site,j])*h[site][j]
    else:
      priorities[i*N+j][0] -= 1.5 * np.sum(J[:,site,j])*h[site][j]
      priorities[i*N+j][1] += 1.5 * np.sum(J[:,site,j])*h[site][j]

  # New improved logic starts here
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i*N+j][0] += np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] -= 3.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]
      else:
        priorities[i*N+j][0] -= np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] += 2.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.022923919753086424}
#island_id: 0
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += (total_spin + 0.5) * 3.5
      priorities[i][1] -= (total_spin - 0.5) * 2.5
    else:
      priorities[i][0] -= (total_spin - 0.5) * 3.5
      priorities[i][1] += (total_spin + 0.5) * 2.5

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] -= 3.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]
      else:
        priorities[i*N+j][0] -= np.sum(J[:,site_nbr,j])*h[site_nbr][j]
        priorities[i*N+j][1] += 2.5 * np.sum(J[:,site_nbr,j])*h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.0832449074074074}
#island_id: 0
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5 + 2.5 * np.sum(J[:,i//N,i%N])
      priorities[i][1] -= 2.5 * (total_spin + np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] -= total_spin * 3.5 - 2.5 * np.sum(J[:,i//N,i%N])
      priorities[i][1] += 2.5 * (-total_spin + np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': -0.0022233024691358035}
#island_id: 3
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    h_site = h[site_nbr][i % N]
    sum_h = 0
    for j in range(4):  # added the right neighbor
      if J[j, i % N, i // N] > 0:
        sum_h += h[(j + N - 1) % N][i % N]
      else:
        sum_h -= h[(j + N - 1) % N][i % N]
    for k in range(4):  # added the left neighbor
      if J[k, i % N, (i // N + (k - 2)) % N] > 0:
        sum_h += h[k, i % N]
      else:
        sum_h -= h[k, i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]

  return (priorities)




#score: {'data2D.txt': -0.00015540123456790113}
#island_id: 3
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    h_site = h[site_nbr][i % N]
    sum_h = 0
    for j in range(4):
      if J[j, i % N, i // N] > 0:
        sum_h += h[(j + N - 1) % N][i % N]
      else:
        sum_h -= h[(j + N - 1) % N][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = (sum_h + J[0, i % N, i // N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(sum_h + J[0, i % N, i // N])
      priorities[i][1] = -priorities[i][0]

  return (priorities)




#score: {'data2D.txt': -0.00020231481481481505}
#island_id: 3
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site=h[site_nbr][i%N]
    total_spin=0
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin+=h[(j+N-1)%N][i%N]
      else:
        total_spin-=h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0]=total_spin
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-total_spin
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010473765432098764}
#island_id: 3
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[(j+N-1)%N][i%N]
      else:
        sum_h -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16640416666666694}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add magnetic term
    total_spin += h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.012409722222222223}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.015665895061728396}
#island_id: 0
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([J[k][i//N,i%N] if h[site_nbr][i%N] > 0 else -J[k][i//N,i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    magnetism = h[i//N][i%N]
    interaction = sum([1 if h[site_nbr][i%N] > 0 else -1 for site_nbr in site_nbrs])
    if magnetism > 0:
      priorities[i][0] = total_spin + 2*interaction
      priorities[i][1] = -total_spin - 2*interaction
    else:
      priorities[i][0] = -total_spin - 2*interaction
      priorities[i][1] = total_spin + 2*interaction
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([J[k][i//N,i%N] if h[site_nbr][i%N] > 0 else -J[k][i//N,i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    magnetism = h[i//N][i%N]
    interaction = sum([1 if h[site_nbr][i%N] > 0 else -1 for site_nbr in site_nbrs])
    total_magnetism = magnetism + total_spin
    if total_magnetism > 0:
      priorities[i][0] = 4.5*(total_magnetism)
      priorities[i][1] = -3.5*(total_magnetism)
    else:
      priorities[i][0] = -4.5*(total_magnetism)
      priorities[i][1] = 3.5*(total_magnetism)
  return(priorities)




#score: {'data2D.txt': 0.015665895061728396}
#island_id: 0
#version_generated: 2
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([J[k][i//N,i%N] if h[site_nbr][i%N] > 0 else -J[k][i//N,i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    magnetism = h[i//N][i%N]
    interaction = sum([1 if h[site_nbr][i%N] > 0 else -1 for site_nbr in site_nbrs])
    if magnetism > 0:
      priorities[i][0] = (total_spin + interaction) / 2
      priorities[i][1] = -(total_spin + interaction)
    else:
      priorities[i][0] = -(total_spin + interaction)
      priorities[i][1] = (total_spin + interaction) / 2
  return(priorities)




#score: {'data2D.txt': 0.0008871913580246911}
#island_id: 3
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h=0
    for j in range(3):
      sum_h+=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0]=2*h_site+sum_h+h[i//N][i%N]
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=2*(-h_site)-sum_h-h[i//N][i%N]
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10005663580246921}
#island_id: 3
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h=0
    for j in range(3):
     sum_h+=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
     priorities[i][0]=2*h_site+sum_h+h[i//N][i%N]
     priorities[i][1]=-priorities[i][0]-2*h[i//N][i%N]
    else:
     priorities[i][0]=2*(-h_site)-sum_h-h[i//N][i%N]
     priorities[i][1]=-priorities[i][0]-2*h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.013211574074074073}
#island_id: 3
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    # Calculate the total magnetism at this site
    h_site = h[site_nbr][i % N]
    
    # Calculate the sum of nearest neighbor interactions
    sum_h = 0
    for j in range(3):
      site = (i + ((j - 1) % 2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]
    
    # Calculate the priority for each spin
    if h[i // N][i % N] > 0:
      priorities[i][0] = -2 * h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (-h_site) - sum_h
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0008424382716049381}
#island_id: 3
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      site = (j + ((i // N - 1) % 2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = 2 * h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (-h_site) - sum_h
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.16545972222222247}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_top = (i % N + ((N-1)%2 - 1)) % N
    site_nbr_bottom = (i % N + ((0)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_top][i%N]
      priorities[i][1] -= h[site_nbr_top][i%N]
    else:
      priorities[i][0] -= h[site_nbr_top][i%N]
      priorities[i][1] += h[site_nbr_top][i%N]
    
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[i//N,site_nbr_bottom]
      priorities[i][1] -= h[i//N,site_nbr_bottom]
    else:
      priorities[i][0] -= h[i//N,site_nbr_bottom]
      priorities[i][1] += h[i//N,site_nbr_bottom]
  
  return(priorities)




#score: {'data2D.txt': 0.16480293209876568}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0, 1, 3]:
     if J[k,i%N,i//N] > 0:
       total_spin += 1
     else:
       total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1639865740740743}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,(i+1)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,(i+N-1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.00017762345679012332}
#island_id: 1
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
  
  for i in range(N**2):
    total_spin = 0
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    priorities[i][0] += total_spin
    priorities[i][1] -= total_spin
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j, i % N, i // N] * h[(j + N - 1) % N][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = (h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])

  return priorities




#score: {'data2D.txt': 0.0011316358024691358}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      site = (i + ((j-1)%2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = (h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j, i % N, i // N] * h[(j + N - 1) % N][i % N]
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = (h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site + sum_h) / 2
      priorities[i][1] = -(priorities[i][0])
  
  return priorities




#score: {'data2D.txt': 0.004281635802469135}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = 0
    
    for j in range(4):
      if J[(j+3)%4, i%N, i//N] > 0:
        sum_h += h[site_nbr][i%N]
      else:
        sum_h -= h[site_nbr][i%N]
    
    priorities[i][1] = -sum_h
    
  return(priorities)




#score: {'data2D.txt': 0.0006856481481481478}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[(j+N-1)%N][i%N]
      else:
        sum_h -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0] + J[0, i%N, i//N]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0] - J[0, i%N, i//N]

  return(priorities)




#score: {'data2D.txt': 0.00046064814814814834}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[site_nbr][j]
      else:
        sum_h -= h[site_nbr][j]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010473765432098764}
#island_id: 3
#version_generated: 2
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        total_spin += h[(j+N-1)%N][i%N]
      else:
        total_spin -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00046064814814814834}
#island_id: 3
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[site_nbr][j]
      else:
        sum_h -= h[site_nbr][j]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.854938271604939e-05}
#island_id: 3
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = np.sum([J[0, i%N, i//N]*h[site_nbr][0], 
            J[1, i%N, i//N]*h[site_nbr][1], 
            J[2, i%N, i//N]*h[site_nbr][2]])
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010819444444444448}
#island_id: 3
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = 0
    for j in range(4):
      if J[j, i%N, i//N] > 0:
        sum_h += h[site_nbr][j]
      else:
        sum_h -= h[site_nbr][j]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010819444444444448}
#island_id: 3
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = 0
    for j in range(4):
      if J[j, i%N, i//N] > 0:
        sum_h += h[site_nbr][j]
      else:
        sum_h -= h[site_nbr][j]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006821141975308643}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * (1 + 2*h[i//N][i%N])
    priorities[i][0] = np.exp((h_site + total_energy)) / (np.exp((h_site + total_energy)) + np.exp(-(h_site + total_energy)))
    priorities[i][1] = 1 - priorities[i][0]
 
  return(priorities)




#score: {'data2D.txt': 0.06562731481481483}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
     nn_site = (site_nbr + ((j-1)%2 - 1)) % N
     if J[j,i//N,nn_site] > 0:
      nn_energy = h[nn_site][i%N]
     else:
      nn_energy = -h[nn_site][i%N]

     nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
     total_energy += h[i//N][i%N]
    else:
     total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.06976620370370373}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.06976620370370373}
#island_id: 0
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total magnetism at each site
    total_spin = h[site_nbr][i%N]
    
    # Iterate over the neighboring sites
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    # Calculate the priority for each spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.exp(-total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002027932098765432}
#island_id: 3
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = total_spin[i][1]
    for j in range(3):
      site = (j + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        sum_h += h[site][i%N]
      else:
        sum_h -= h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2 * h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (-h_site) - sum_h
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0007393518518518517}
#island_id: 3
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    sum_h = h[site_nbr][i % N]
    
    for j in range(3):
      site = (j + ((i // N - 1) % 2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]
    
    if sum_h > 0:
      priorities[i][0] = 2 * (1 - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (-1 + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
  
  return priorities




#score: {'data2D.txt': -0.2568121913580246}
#island_id: 3
#version_generated: 2
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += J[0,i,j]*h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(N2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return total_spin + priority_total




#score: {'data2D.txt': 0.006100771604938272}
#island_id: 0
#version_generated: 2
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + 2 * np.sum(J[:,i//N,i//N] > 0) - 2 * abs(nn_sum)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004844907407407407}
#island_id: 0
#version_generated: 2
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + 4 * np.sum(J[:,i//N,i//N] > 0)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004604475308641976}
#island_id: 0
#version_generated: 2
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i//N]*n for k,n in zip(range(3),nns)])

    priority_sum = h_site + 2 * np.sum(J[:,i//N,i//N] > 0) - nn_sum
    priorities[i][0] = priority_sum
    priorities[i][1] = -priority_sum

  return(priorities)




#score: {'data2D.txt': 0.005269907407407407}
#island_id: 0
#version_generated: 2
#generate time00:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + 2 * np.sum(J[:,i//N,i//N] > 0) - abs(nn_sum)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007059722222222222}
#island_id: 2
#version_generated: 2
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_energy = np.zeros((N*N,))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin_bias = np.sum(J[:,i//N,i%N])
    
    if h[site_nbr][i%N] > 0:
      spin_bias += np.sum(J[:,i//N,i%N])
    else:
      spin_bias -= np.sum(J[:,i//N,i%N])
      
    total_energy[i] = -spin_bias * spin_bias
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_energy[i]
      priorities[i][1] = -total_energy[i]
    else:
      priorities[i][0] = -total_energy[i]
      priorities[i][1] = total_energy[i]
      
  return(priorities)




#score: {'data2D.txt': -0.3390458333333323}
#island_id: 1
#version_generated: 2
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Compute the total spin
    total_spin = sum(J[k,i//N,i%N] if J[k,i//N,i%N] > 0 else -J[k,i//N,i%N] for k in range(4))
    
    # Adjust the priorities based on the magnetism at each site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0024044753086419754}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[j, i%N, i//N] if j == 0 else J[(j+1)%2, i//N, (site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009214506172839502}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = np.sum([np.sign(h[site_nbr][k]) * J[0,k,site_nbr] for k in range(N)])  # added this line
  return(priorities)




#score: {'data2D.txt': 0.14584799382716052}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    neighbors_spin = sum([np.sign(J[j//2,i//N,(site_nbr + ((j-1)%2 - 1)) % N]) for j in range(4)])
    priorities[i][1] = -priorities[i][0] if np.sum(neighbors_spin) < 0 else priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.04003070987654321}
#island_id: 0
#version_generated: 2
#generate time00:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.016002314814814813}
#island_id: 2
#version_generated: 2
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += np.sum(J[:,i//N,i%N])
      priorities[i][1] -= np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= np.sum(J[:,i//N,i%N])
      priorities[i][1] += np.sum(J[:,i//N,i%N])
  return(priorities)




#score: {'data2D.txt': -0.10618657407407407}
#island_id: 2
#version_generated: 2
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin_bias = np.sum(J[:,i//N,i%N])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += spin_bias * len(np.where(J[:,i//N,i%N] > 0)[0]) + len(np.where(h == h[site_nbr])[0])
      priorities[i][1] -= spin_bias * len(np.where(J[:,i//N,i%N] > 0)[0]) - len(np.where(h == h[site_nbr])[0])
    else:
      priorities[i][0] -= spin_bias * len(np.where(J[:,i//N,i%N] > 0)[0]) + len(np.where(h == h[site_nbr])[0])
      priorities[i][1] += spin_bias * len(np.where(J[:,i//N,i%N] > 0)[0]) - len(np.where(h == h[site_nbr])[0])
      
  return(priorities)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_energy = np.zeros((N*N,))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin_bias = np.sum(J[:,i//N,i%N])
    
    if h[site_nbr][i%N] > 0:
      spin_bias += np.sum(J[:,i//N,i%N])
    else:
      spin_bias -= np.sum(J[:,i//N,i%N])
      
    total_energy[i] = -spin_bias * spin_bias
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_energy[i]
      priorities[i][1] = -total_energy[i]
    else:
      priorities[i][0] = -total_energy[i]
      priorities[i][1] = total_energy[i]
      
  # Add a small term to the priority to break ties in favor of the correct spin
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][1] += 1e-9
    else:
      priorities[i][0] += 1e-9
      
  return(priorities)




#score: {'data2D.txt': 0.007059722222222222}
#island_id: 2
#version_generated: 2
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_energy = np.zeros((N*N,))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin_bias = np.sum(J[:,i//N,i%N])
    
    if h[site_nbr][i%N] > 0:
      spin_bias += np.sum(J[:,i//N,i%N])
    else:
      spin_bias -= np.sum(J[:,i//N,i%N])
      
    total_energy[i] = -spin_bias * spin_bias
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_energy[i]
      priorities[i][1] = -total_energy[i]
    else:
      priorities[i][0] = -total_energy[i]
      priorities[i][1] = total_energy[i]
      
  return(priorities)




#score: {'data2D.txt': -0.004742129629629631}
#island_id: 0
#version_generated: 2
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if total_energy > 0:
      priorities[i][0] += (total_energy + np.sum(h)) / 2
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= (total_energy - np.sum(h)) / 2
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.060367746913580246}
#island_id: 0
#version_generated: 2
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if total_energy > 0:
      priorities[i][0] += np.sum(h)
      priorities[i][1] -= (total_energy - np.sum(h)) / 2
    else:
      priorities[i][0] -= np.sum(h)
      priorities[i][1] += (np.abs(total_energy) - np.sum(h)) / 2
  return(priorities)




#score: {'data2D.txt': 0.005686265432098766}
#island_id: 0
#version_generated: 2
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N] for k in range(4))
    total_energy = J[0,i//N,i%N] * (h[site_nbr][i%N] + h[i//N,i%N]) / 2
    if total_energy > 0:
      priorities[i][0] += np.sum(h) / 2 - nn_energy
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= np.sum(h) / 2 + nn_energy
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.00027145061728395134}
#island_id: 0
#version_generated: 2
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if total_energy > 0:
      priorities[i][0] += (total_energy + np.sum(h)) / 2
      priorities[i][1] -= 1 - sum((h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    else:
      priorities[i][0] -= (total_energy - np.sum(h)) / 2
      priorities[i][1] += 1 + sum((h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
  return(priorities)




#score: {'data2D.txt': 0.004975771604938272}
#island_id: 3
#version_generated: 2
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N

    sum_h = 0
    for j in range(3):
      site = (j + ((i // N - 1) % 2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]

    if sum_h > 0:
      priorities[i][0] = 2 * (1 - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0] / (1 + np.abs(sum_h))
    else:
      priorities[i][0] = 2 * (-1 + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0] / (1 + np.abs(sum_h))

  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    
    sum_h = h[site_nbr][i % N]
    
    for j in range(3):
      site = (j + ((i // N - 1) % 2 - 1)) % N
      if J[j, i % N, i // N] > 0:
        sum_h += h[site][i % N]
      else:
        sum_h -= h[site][i % N]
    
    if sum_h > 0:
      priorities[i][0] = (1 + np.sum(h == h[site_nbr][i % N])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + np.sum(h == -h[site_nbr][i % N])) / 2
      priorities[i][1] = -priorities[i][0]
  
  return priorities




#score: {'data2D.txt': 0.00870848765432099}
#island_id: 0
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.00035046296296296247}
#island_id: 0
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if i % N < N // 2:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(3) if k != i//N and k != i%N)
    priorities[i][0] += h[site_nbr][i%N] + nn_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2
    else:
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.014681635802469136}
#island_id: 0
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    magnetism = h[site_nbr][i%N]
    if magnetism > 0:
      priorities[i][0] += total_energy + magnetism
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= total_energy - magnetism
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.00018533950617283994}
#island_id: 3
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[(j+N-1)%N][i%N]
      else:
        sum_h -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]
      
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if magnetism > 0:
      priorities[i][0] -= sum_h
      priorities[i][1] += sum_h
    else:
      priorities[i][0] += sum_h
      priorities[i][1] -= sum_h
      
  return(priorities)




#score: {'data2D.txt': 0.005873919753086419}
#island_id: 3
#version_generated: 2
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[(j+N-1)%N][i%N]
      else:
        sum_h -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0] - J[0, i%N, i//N]
    else:
      priorities[i][0] = sum_h + J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.013547376543209878}
#island_id: 3
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum(J[:, i//N, i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010473765432098764}
#island_id: 3
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_h = 0
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        sum_h += h[(j+N-1)%N][i%N]
      else:
        sum_h -= h[(j+N-1)%N][i%N]
    
    magnetism = np.sign(np.sum([h[i//N][i%N]]))
    
    if magnetism > 0:
      priorities[i][0] = -sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin contribution from nearest neighbors
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the priority based on magnetism and site interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # horizontal interaction
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # vertical interaction
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.016002314814814813}
#island_id: 1
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += sum(J[:,i//N,i%N])
      priorities[i][1] -= sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= sum(J[:,i//N,i%N])
      priorities[i][1] += sum(J[:,i//N,i%N])
    
    if h[site_nbr2][i%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.1156964506172841}
#island_id: 1
#version_generated: 2
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions from the four nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priorities based on magnetism and spin interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 1
#version_generated: 2
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin1 = h[site_nbr1][i%N]
    total_spin2 = h[site_nbr2][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin1 += 1
        total_spin2 -= 1
      else:
        total_spin1 -= 1
        total_spin2 += 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin1, -total_spin2]
    else:
      priorities[i] = [-total_spin1, total_spin2]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16613132716049403}
#island_id: 1
#version_generated: 2
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,(i+1)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,(i+N-1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i//N,(i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0033313271604938272}
#island_id: 2
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h[site_nbr][i%N]*J[k,i//N,i//N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h[site_nbr][i%N]*J[k,i//N,i//N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008615740740740748}
#island_id: 2
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003058179012345679}
#island_id: 2
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add magnetism term
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.34271342592592485}
#island_id: 1
#version_generated: 2
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N) % N

    total_spin = h[site_nbr_row][site_nbr_col]
    
    # Row interactions
    for k in range(N):
      if J[0,i%N,k] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Col interactions
    for k in range(N):
      if J[1,i//N,k] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Diagonal interactions
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(N):
      if J[2,i%N,k] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Antidiagonal interactions
    site_nbr = (i // N) % N
    for k in range(N):
      if J[3,i//N,k] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11153750000000012}
#island_id: 1
#version_generated: 2
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16163163580246936}
#island_id: 1
#version_generated: 2
#generate time00:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i//N,N-1] > 0:
      priorities[i][0] += h[site_nbr][0]
      priorities[i][1] -= h[site_nbr][0]
    else:
      priorities[i][0] -= h[site_nbr][0]
      priorities[i][1] += h[site_nbr][0]
    
  return(priorities)




#score: {'data2D.txt': 0.1590115740740743}
#island_id: 1
#version_generated: 2
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i//N]
      priorities[i][1] -= h[site_nbr1][i//N]
      priorities[i][0] += h[site_nbr2][i//N]
      priorities[i][1] -= h[site_nbr2][i//N]
    else:
      priorities[i][0] -= h[site_nbr1][i//N]
      priorities[i][1] += h[site_nbr1][i//N]
      priorities[i][0] -= h[site_nbr2][i//N]
      priorities[i][1] += h[site_nbr2][i//N]
    
    site_nbr = (i % N + ((i-1)%N - 1)) % N
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i+1)%N - 1)) % N
    if J[2,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.05159212962962965}
#island_id: 0
#version_generated: 2
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][1] = np.sum(h[i//N])
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        priorities[i][0] += J[abs(k),i//N,x%N] * h[x%N][y]
  return(priorities)




#score: {'data2D.txt': 0.003293981481481482}
#island_id: 0
#version_generated: 2
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if np.sum(h[i//N]) < 0:
      priority_total = -total_energy
    else:
      priority_total = total_energy
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        priority_total += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = priority_total
    priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.000659413580246914}
#island_id: 0
#version_generated: 2
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_opp = (i % N + ((i//N-1)%2)) % N
    total_spin_opposite = 0
    for j in range(4):
      total_spin_opposite += J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] * h[site_nbr_opp][i%N]
    if total_spin_opposite > 0:
      priorities[i][0] = -total_spin_opposite
      priorities[i][1] = total_spin_opposite
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      total_spin = 0
      for j in range(4):
        total_spin += J[j,i//N,(site_nbr+(j-1)%2-N)%N] * h[site_nbr][i%N]
      if total_spin > 0:
        priorities[i][0] = total_spin
        priorities[i][1] = -priorities[i][0]
      else:
        site_nbr_opp = (i % N + ((i//N-1)%2)) % N
        for j in range(4):
          total_spin_opposite += J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] * h[site_nbr_opp][i%N]
        priorities[i][0] = -total_spin_opposite
        priorities[i][1] = total_spin_opposite
  return(priorities)




#score: {'data2D.txt': -0.0011643518518518526}
#island_id: 0
#version_generated: 2
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = J[0,i//N,(site_nbr+0)%N] * h[site_nbr][i%N]
    for j in range(1,4):
      total_spin += J[j,i//N,(site_nbr+(j-1)%2-N)%N] * h[site_nbr][i%N]
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr_opp = (i % N + ((i//N-1)%2)) % N
      total_spin_opposite = J[0,i//N,(site_nbr_opp+0)%N] * h[site_nbr_opp][i%N]
      for j in range(1,4):
        total_spin_opposite += J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] * h[site_nbr_opp][i%N]
      priorities[i][0] = total_spin_opposite
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    interaction_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        interaction_sum += 1
      else:
        interaction_sum -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + interaction_sum, -total_spin - interaction_sum]
    else:
      priorities[i] = [-total_spin - interaction_sum, total_spin + interaction_sum]
  return(priorities)




#score: {'data2D.txt': 0.16662608024691383}
#island_id: 1
#version_generated: 2
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in [0,1,2]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    for k in [3]:
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority based on total spin
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11631959876543223}
#island_id: 1
#version_generated: 2
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if J[3,i%N,j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.016310030864197533}
#island_id: 1
#version_generated: 2
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[i//N][i%N]
    else:
      total_spin = -h[i//N][i%N]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time00:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003498456790123453}
#island_id: 3
#version_generated: 2
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0017989197530864196}
#island_id: 1
#version_generated: 2
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # Calculate priority based on magnetism and interaction
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    elif total_spin < 0:
      priorities[i] = [-total_spin, total_spin]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': -0.011772685185185185}
#island_id: 1
#version_generated: 2
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priority_total = [total_spin, -total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priority_total[0] += h[site_nbr][i%N]
      priority_total[1] -= h[site_nbr][i%N]
    else:
      priority_total[0] -= h[site_nbr][i%N]
      priority_total[1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((2-1)%2 - 1)) % N
    if J[2,i%N,i//N] > 0:
      priority_total[0] += h[site_nbr][i%N]
      priority_total[1] -= h[site_nbr][i%N]
    else:
      priority_total[0] -= h[site_nbr][i%N]
      priority_total[1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((1-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      priority_total[0] += h[site_nbr][i%N]
      priority_total[1] -= h[site_nbr][i%N]
    else:
      priority_total[0] -= h[site_nbr][i%N]
      priority_total[1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((0-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priority_total[0] += h[site_nbr][i%N]
      priority_total[1] -= h[site_nbr][i%N]
    else:
      priority_total[0] -= h[site_nbr][i%N]
      priority_total[1] += h[site_nbr][i%N]
    
    priorities[i] = priority_total
  
  return(priorities)




#score: {'data2D.txt': -0.054238734567901244}
#island_id: 0
#version_generated: 2
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy -= J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = np.sum(h[i//N]) > 0
    priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09136466049382716}
#island_id: 0
#version_generated: 2
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    spin_energy = np.sum(h[i//N])
    priorities[i][0] = (spin_energy > 0) if total_energy > 0 else (spin_energy < 0)
    priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.02753811728395062}
#island_id: 0
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][1] = -np.sum(total_energy) # Prioritize spin alignment with magnetism
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        priorities[i][1] -= np.sum(J[abs(k),i//N,x%N]) # Prioritize spin alignment with interactions
  return(priorities)




#score: {'data2D.txt': 0.0011344135802469138}
#island_id: 2
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    
    if i < N*N // 4 and i % N != 0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i > N*N * 3/4-1 and i % N != N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if (h[i//N][i%N] > 0) ^ ((i % N) == N-1):
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008615740740740748}
#island_id: 2
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.025008487654320986}
#island_id: 2
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_left = (i % N + ((i//N)%2)) % N
      site_right = (i % N + ((i//N+1)%2)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_left][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site + J[0,i%N,i//N]*h[site_right][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008615740740740748}
#island_id: 2
#version_generated: 2
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008615740740740748}
#island_id: 2
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002546759259259258}
#island_id: 2
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    
    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015779320987654327}
#island_id: 2
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

  return(priorities)




#score: {'data2D.txt': 0.0008615740740740748}
#island_id: 2
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1660538580246916}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_row = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N-3)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    site_nbr = (i % N + ((site_nbr_row-1)%2 - 1)) % N
    if J[3,i%N,site_nbr_row] > 0:
      priorities[i][0] += h[site_nbr][site_nbr_row]
      priorities[i][1] -= h[site_nbr][site_nbr_row]
    else:
      priorities[i][0] -= h[site_nbr][site_nbr_row]
      priorities[i][1] += h[site_nbr][site_nbr_row]

    site_nbr = (i % N + ((site_nbr_col-1)%2 - 1)) % N
    if J[3,i%N,site_nbr_col] > 0:
      priorities[i][0] += h[site_nbr][site_nbr_col]
      priorities[i][1] -= h[site_nbr][site_nbr_col]
    else:
      priorities[i][0] -= h[site_nbr][site_nbr_col]
      priorities[i][1] += h[site_nbr][site_nbr_col]

  return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # calculate the total magnetism at this site
    total_spin = h[site_nbr][i%N]
    
    # calculate the interaction energy with neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # determine the priority based on the magnetism and interaction energy
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return(priorities)




#score: {'data2D.txt': 0.056394290123456814}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
    
    if J[2,(i+1)%N,i//N] > 0:
      priorities[i][0] += h[(i+1)%N][i//N]
      priorities[i][1] -= h[(i+1)%N][i//N]
    else:
      priorities[i][0] -= h[(i+1)%N][i//N]
      priorities[i][1] += h[(i+1)%N][i//N]
    
    if J[3,i%N,(i+N-1)%N] > 0:
      priorities[i][0] += h[(i+N-1)%N][i%N]
      priorities[i][1] -= h[(i+N-1)%N][i%N]
    else:
      priorities[i][0] -= h[(i+N-1)%N][i%N]
      priorities[i][1] += h[(i+N-1)%N][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16159861111111137}
#island_id: 1
#version_generated: 2
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i // N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_row][i%N]
      priorities[i][1] -= h[site_nbr_row][i%N]
    else:
      priorities[i][0] -= h[site_nbr_row][i%N]
      priorities[i][1] += h[site_nbr_row][i%N]
    
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_col][i//N]
      priorities[i][1] -= h[site_nbr_col][i//N]
    else:
      priorities[i][0] -= h[site_nbr_col][i//N]
      priorities[i][1] += h[site_nbr_col][i//N]
    
    if J[2,i%N,i//N] > 0:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] += h[site_nbr][i//N]
      priorities[i][1] -= h[site_nbr][i//N]
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] -= h[site_nbr][i//N]
      priorities[i][1] += h[site_nbr][i//N]
    
    if J[3,i%N,i//N] > 0:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.00017422839506172922}
#island_id: 3
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]

    # Improved part: Add the magnetism at each of the four nearest neighbors
    if i % N > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[(i-1)//N][(i-1)%N]
      priorities[i][1] -= J[0,i//N,i%N]*h[(i-1)//N][(i-1)%N]
    if i % N < N - 1:
      priorities[i][0] += J[2,i//N,i%N]*h[(i+1)//N][(i+1)%N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i+1)//N][(i+1)%N]
    if i // N > 0:
      priorities[i][0] += J[3,i//N,i%N]*h[i//N-1,i%N]
      priorities[i][1] -= J[3,i//N,i%N]*h[i//N-1,i%N]
    if i // N < N - 1:
      priorities[i][0] += J[1,i//N,i%N]*h[i//N+1,i%N]
      priorities[i][1] -= J[1,i//N,i%N]*h[i//N+1,i%N]

  return(priorities)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 3
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin[i//N][i%N][0] -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.000235648148148148}
#island_id: 3
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00605324074074074}
#island_id: 3
#version_generated: 2
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] += h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])

  return(priorities)




#score: {'data2D.txt': -0.0001955246913580248}
#island_id: 3
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    
    # Add a small random perturbation to the priority values
    priorities[i][0] += np.random.uniform(-0.01, 0.01)
    priorities[i][1] += np.random.uniform(-0.01, 0.01)
  
  return(priorities)




#score: {'data2D.txt': -0.0009180555555555556}
#island_id: 3
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -0.0005297839506172846}
#island_id: 3
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  # Compute the total magnetization and prioritize spins to minimize it
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) / (np.abs(h[i//N][i%N]))
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0005174382716049384}
#island_id: 3
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + spin_sum) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - spin_sum) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.16640416666666694}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin + magnetism, -total_spin - magnetism]
    else:
      priorities[i] = [-total_spin - magnetism, total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': -3.0401234567901113e-05}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    if total_spin > 0:
      priorities[i][0] += 2*total_spin
      priorities[i][1] -= 2*total_spin
    elif total_spin < 0:
      priorities[i][0] -= 2*total_spin
      priorities[i][1] += 2*total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.00027268518518518473}
#island_id: 3
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.000235648148148148}
#island_id: 3
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / np.abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])) / np.abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0197516975308642}
#island_id: 3
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N] * (2*h[i//N][i%N] - 1) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h_site > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0015949074074074075}
#island_id: 1
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + (i//N)%2) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i//N,i%N] * h[site_nbr2][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(1,3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin * (N**2 - i) / N
      priorities[i][1] = -total_spin * (N**2 - i) / N
    else:
      priorities[i][0] = -total_spin * (N**2 - i) / N
      priorities[i][1] = total_spin * (N**2 - i) / N
    
  return(priorities)




#score: {'data2D.txt': 0.16392268518518543}
#island_id: 1
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i%N]
      priorities[i][1] -= h[site_nbr_left][i%N]
    else:
      priorities[i][0] -= h[site_nbr_left][i%N]
      priorities[i][1] += h[site_nbr_left][i%N]
    
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_right][i%N]
      priorities[i][1] -= h[site_nbr_right][i%N]
    else:
      priorities[i][0] -= h[site_nbr_right][i%N]
      priorities[i][1] += h[site_nbr_right][i%N]
    
    site_nbr_up = (i % N + ((i//N-2)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr_up][i%N]
      priorities[i][1] -= h[site_nbr_up][i%N]
    else:
      priorities[i][0] -= h[site_nbr_up][i%N]
      priorities[i][1] += h[site_nbr_up][i%N]
    
    site_nbr_down = (i % N + ((i//N+2)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr_down][i%N]
      priorities[i][1] -= h[site_nbr_down][i%N]
    else:
      priorities[i][0] -= h[site_nbr_down][i%N]
      priorities[i][1] += h[site_nbr_down][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0005899691358024682}
#island_id: 2
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    
    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = sum([J[k,i//N,(i%N+k)%N]*h[(k+N-1)%N][(i%N+k)%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i//N,(i%N+k)%N]*h[(k+N-1)%N][(i%N+k)%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013260802469135804}
#island_id: 2
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin_up = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin_down = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      
      if i < N*N//4:
        priorities[i][0] = total_spin_up
        priorities[i][1] = -total_spin_up
      elif i > N*N*3/4-1 and i % N != N - 1:
        priorities[i][0] = -total_spin_down
        priorities[i][1] = -priorities[i][0]
      else:
        if total_spin_up > total_spin_down:
          priorities[i][0] = total_spin_up
          priorities[i][1] = -total_spin_up
        elif total_spin_down > total_spin_up:
          priorities[i][0] = -total_spin_down
          priorities[i][1] = -priorities[i][0]
    else:
      total_spin_up = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin_down = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      
      if i < N*N//4:
        priorities[i][0] = -total_spin_up
        priorities[i][1] = total_spin_up
      elif i > N*N*3/4-1 and i % N != N - 1:
        priorities[i][0] = total_spin_down
        priorities[i][1] = -priorities[i][0]
      else:
        if total_spin_up > total_spin_down:
          priorities[i][0] = total_spin_up
          priorities[i][1] = -total_spin_up
        elif total_spin_down > total_spin_up:
          priorities[i][0] = total_spin_down
          priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0014393518518518525}
#island_id: 2
#version_generated: 2
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,site_nbr]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,site_nbr]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018174382716049384}
#island_id: 2
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i < N*N//4:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i > N*N*3/4-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

    # additional term for the next neighbor
    if i % N != N-1:
      priorities[i][0] += J[3,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[3,i//N,i%N]*h[(i%N+1)%N][i//N]

  return(priorities)




#score: {'data2D.txt': -0.00257638888888889}
#island_id: 2
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i < N*N//4:
      priorities[i][0] = h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif i > N*N*3/4-1:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    
    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

  return(priorities)




#score: {'data2D.txt': 0.001568055555555556}
#island_id: 2
#version_generated: 2
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

    # improved term
    if i % N > 0 and h[i//N][i%N] > 0:
      priorities[i][0] += J[3,i//N,i%N]
      priorities[i][1] -= J[3,i//N,i%N]
    elif i % N < N-1 and h[i//N][i%N] < 0:
      priorities[i][0] += J[3,i//N,i%N]
      priorities[i][1] -= J[3,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.006834413580246914}
#island_id: 2
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    
    site_left = (i % N) - 1 if i % N > 0 else N-1
    site_right = (i % N) + 1 if i % N < N-1 else 0

    priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
    priorities[i][1] = -priorities[i][0]

    for k in range(3):
      site_neighbor = (i % N + ((k-1)%2)) % N
      if h[site_nbr][site_neighbor] > 0:
        priorities[i][0] += J[k,i//N,site_neighbor]*h[site_nbr][site_neighbor]
        priorities[i][1] -= J[k,i//N,site_neighbor]*h[site_nbr][site_neighbor]

  return(priorities)




#score: {'data2D.txt': 0.0018174382716049384}
#island_id: 2
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i < N*N//4:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i > N*N*3/4-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

    # additional term for the next neighbor
    if i % N != N-1:
      priorities[i][0] += J[3,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[3,i//N,i%N]*h[(i%N+1)%N][i//N]

  return(priorities)




#score: {'data2D.txt': 0.001197993827160494}
#island_id: 2
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i < N*N//4:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i > N*N*3/4-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

    # additional term to make the priority function more effective
    if i % N > 0:
      priorities[i][0] += J[2,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[2,i//N,i%N]*h[(i%N+1)%N][i//N]

    # additional term for the next neighbor
    if i % N != N-1:
      priorities[i][0] += J[3,i//N,i%N]*h[(i%N+1)%N][i//N]
      priorities[i][1] -= J[3,i//N,i%N]*h[(i%N+1)%N][i//N]

    # additional term for the previous neighbor
    if i % N != 0:
      priorities[i][0] += J[1,i//N,i%N]*h[(i%N-1)%N][i//N]
      priorities[i][1] -= J[1,i//N,i%N]*h[(i%N-1)%N][i//N]

  return(priorities)




#score: {'data2D.txt': -0.0076581790123456785}
#island_id: 2
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    # calculate the priority based on the magnetism and interactions
    priorities[i][0] = h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]*h[site_up][i%N] + J[3,i//N,i%N]*h[site_down][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19843811728395083}
#island_id: 3
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    total_spin = np.sum(J[:,i%N,i//N]) * (2*h[i//N][i%N] if J[1:,i%N,i//N].sum() > 0 else -2*h[i//N][i%N])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -7.237654320987686e-05}
#island_id: 3
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + neighbors_sum - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - neighbors_sum + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    
    # Add a small random perturbation to the priority values
    priorities[i][0] += np.random.uniform(-0.01, 0.01)
    priorities[i][1] += np.random.uniform(-0.01, 0.01)
  
  return(priorities)




#score: {'data2D.txt': -0.0002936728395061736}
#island_id: 3
#version_generated: 2
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    
    # Add a small random perturbation to the priority values
    priorities[i][0] += np.random.uniform(-0.01, 0.01)
    priorities[i][1] += np.random.uniform(-0.01, 0.01)
  
  return(priorities)




#score: {'data2D.txt': 0.0006637345679012339}
#island_id: 3
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-total_spin + np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009331944444444441}
#island_id: 0
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      neighbor = (site_nbr + ((k-1)%2 - 1)) % N
      if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
        neighbor = (neighbor + ((k-1)%2 - 1)) % N
      total_spin += J[k,i//N,neighbor]
    priority_total = [total_spin, h[site_nbr][i%N]]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -priority_total[0]
      priorities[i][1] = priority_total[0]
    else:
      priorities[i][0] = priority_total[0]
      priorities[i][1] = -priority_total[0]
  return(priorities)




#score: {'data2D.txt': 0.0008371913580246923}
#island_id: 0
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][np.arange(N)])
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -1]
    else:
      priority_total = [-total_spin, 1]

    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        continue
      priority_total[0] += np.sum(J[j,i//N,nn_site])
      if j==3:
        continue
      neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
        continue
      priority_total[1] -= np.sum(J[j,i//N,nn_site])
    priorities[i][0] = priority_total[0]
    priorities[i][1] = -priority_total[0]
  return(priorities)




#score: {'data2D.txt': -0.0010717592592592617}
#island_id: 3
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
    
    total_spin = 0
    for j in range(N):
      site_nbr3 = (i % N + ((j-1)%2 - 1)) % N
      
      if h[i//N][j] > 0:
        total_spin += h[site_nbr3][i%N]
      else:
        total_spin -= h[site_nbr3][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0010757716049382715}
#island_id: 3
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
    
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) / (np.abs(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])) / (np.abs(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.00027268518518518473}
#island_id: 3
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
    
    for k in range(4):
      site_nbr3 = (i % N + ((i//N+k)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr3][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr3][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr3][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr3][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + 2*np.sum(J[1:,i%N,i//N])) / (np.abs(h[i//N][i%N]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.008472067901234568}
#island_id: 3
#version_generated: 2
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = np.zeros(2)
    
    for k in range(4):
      site = (i % N + ((k-1)%2 - 1)) % N
      
      if h[site][i%N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, -1]
    
    priorities[i][0] = np.sum([J[k,i//N,i%N]*h[site_nbr1][i%N] for k in range(4)]) + total_spin[0]
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0, 1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11584243827160508}
#island_id: 1
#version_generated: 2
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_left = (i - 1) % N
    site_nbr_right = ((i+1)%N)
    
    for j in range(N):
      if J[3, i%N, j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.003928240740740741}
#island_id: 0
#version_generated: 2
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_sum = sum([J[j,i//N,site_nbr] * h[(site_nbr + j)%N][i%N] for j in range(4)])
    
    if J[0,i//N,site_nbr] > 0:
      priorities[i][0] = -2*h[site_nbr][i%N] + nn_energy_sum
    else:
      priorities[i][0] = 2*h[site_nbr][i%N] - nn_energy_sum
    
    # Add a term to the priority that is proportional to the magnetism at the site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.005777006172839506}
#island_id: 0
#version_generated: 2
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_sum = sum([J[j,i//N,site_nbr] * h[(site_nbr + j)%N][i%N] for j in range(4)])
    
    if J[0,i//N,site_nbr] > 0:
      priorities[i][0] = -h[site_nbr][i%N]
    else:
      priorities[i][0] = h[site_nbr][i%N]

    # Add a term to the priority that is proportional to the magnetism at the site
    priorities[i][1] = -priorities[i][0] + nn_energy_sum
    
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.009398611111111113}
#island_id: 1
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:,i//N,i//N]) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(np.sum(J[:,i//N,i//N]) + total_spin)
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    # Adjust priorities based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return priorities




#score: {'data2D.txt': 0.16517237654321013}
#island_id: 1
#version_generated: 2
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i-1)%N - 1)) % N
    site_nbr_right = (i % N + ((i+1)%N - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i%N]
      priorities[i][1] -= h[site_nbr_left][i%N]
      priorities[i][0] += h[site_nbr_right][i%N]
      priorities[i][1] -= h[site_nbr_right][i%N]
    else:
      priorities[i][0] -= h[site_nbr_left][i%N]
      priorities[i][1] += h[site_nbr_left][i%N]
      priorities[i][0] -= h[site_nbr_right][i%N]
      priorities[i][1] += h[site_nbr_right][i%N]
    
    site_nbr_top = (i % N + ((i//N-1)%N - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr_top][i%N]
      priorities[i][1] -= h[site_nbr_top][i%N]
    else:
      priorities[i][0] -= h[site_nbr_top][i%N]
      priorities[i][1] += h[site_nbr_top][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.011644290123456792}
#island_id: 0
#version_generated: 2
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += J[3,i//N,i%N]
    else:
      total_spin -= J[3,i//N,i%N]
    for j in range(4):
      site_nbr = ((i//N)%N + ((j-1)%2 - 1)) % N
      total_spin += J[j,i//N,i%N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 4*total_spin
      priorities[i][1] -= 3*total_spin
    else:
      priorities[i][0] -= 4*total_spin
      priorities[i][1] += 3*total_spin
  return(priorities)




#score: {'data2D.txt': 0.0014294753086419754}
#island_id: 0
#version_generated: 2
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [0, 1, 3]]
    total_spin = sum(J[j,i//N,i%N]*h[site_nbr][i%N] for j, site_nbr in zip([0, 1, 3], site_nbrs))
    if h[i//N][i%N] > 0:
      priorities[i][0] += 2*total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= 2*total_spin
      priorities[i][1] += total_spin
  return(priorities)




#score: {'data2D.txt': 0.050189969135802474}
#island_id: 0
#version_generated: 2
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(4):
      site_nbr = ((i//N)%N + ((j-1)%2 - 1)) % N
      site_nbrs.append(site_nbr)
    
    total_spin = np.sum([J[j, i//N, i%N] * h[site_nbr][i%N] for j, site_nbr in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += 4*total_spin
      priorities[i][1] -= 3*total_spin
    else:
      priorities[i][0] -= 4*total_spin
      priorities[i][1] += 3*total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Update based on nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Update based on vertical and horizontal neighbors
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': 0.1648186728395064}
#island_id: 1
#version_generated: 2
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_row][k]
        priorities[i][1] -= h[site_nbr_col][k]
      else:
        priorities[i][0] -= h[site_nbr_row][k]
        priorities[i][1] += h[site_nbr_col][k]
    
  return(priorities)




#score: {'data2D.txt': -0.004640586419753087}
#island_id: 0
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if_total_energy = 0
    else_total_energy = 0
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N)%N] * (h[site_nbr][(i%N+N)%N] + h[site_nbr][i%N])
      elif k == 1:
        nn_energy = J[1,i//N,(i%N+N-1)%N] * (h[site_nbr][(i%N+N-1)%N] - h[site_nbr][i%N])
      elif k == 2:
        nn_energy = J[2,i//N,(i%N)] * (h[site_nbr][i%N])
      else:
        nn_energy = J[3,i//N,(i%N+1)%N] * (-h[site_nbr][(i%N+1)%N] + h[site_nbr][i%N])
      if_total_energy += nn_energy
      else_total_energy -= nn_energy
    priorities[i][0] = total_spin + if_total_energy
    priorities[i][1] = -total_spin + else_total_energy
  return(priorities)




#score: {'data2D.txt': -0.012345524691358026}
#island_id: 0
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N]
      elif k == 1:
        nn_energy = J[1,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N]
      elif k == 2:
        nn_energy = J[2,i//N,(i%N)] * h[site_nbr][i%N]
      else:
        nn_energy = J[3,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N]
      total_energy += nn_energy
    priorities[i][0] += total_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(4))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': -0.009363425925925926}
#island_id: 0
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N]
      elif k == 1:
        nn_energy = J[1,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N]
      elif k == 2:
        nn_energy = J[2,i//N,(i%N)] * h[site_nbr][i%N]
      else:
        nn_energy = J[3,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N]
      total_energy += nn_energy
    priorities[i][0] += total_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(4))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(4))
    # add a trick to speed up the process
    if i % N < N // 2:
      nn_energy = J[0,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N]
      total_energy += nn_energy
      priorities[i][0] += total_energy + h[site_nbr][i%N]
      if h[site_nbr][i%N] > 0:
        priorities[i][1] -= 2 - J[0,i//N,(i%N+N)%N]
      else:
        priorities[i][1] += 2 + J[0,i//N,(i%N+N)%N]
  return(priorities)




#score: {'data2D.txt': -0.003388425925925925}
#island_id: 0
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N]
      elif k == 1:
        nn_energy = J[1,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N]
      elif k == 2:
        nn_energy = J[2,i//N,(i%N)] * h[site_nbr][i%N]
      else:
        nn_energy = J[3,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N]
      total_energy += nn_energy
    priorities[i][0] += total_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= sum(J[k,i//N,(i%N+N)%N] for k in range(4))
    else:
      priorities[i][1] += sum(J[k,i//N,(i%N+N)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': -0.01114151234567901}
#island_id: 1
#version_generated: 2
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_row = i % N
    site_nbr_col = i // N
    priority_sum = 0
    for k in range(4):
      if J[k,i%N,site_nbr_col] > 0:
        priority_sum += h[(k+2)%4][i%N]
      else:
        priority_sum -= h[(k+2)%4][i%N]
    
    priorities[i] = [total_spin + priority_sum, -total_spin - priority_sum]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total magnetism at this site
    total_spin = h[site_nbr][i%N]
    
    # Add up the interactions with nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust the priorities based on the magnetism at this site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.0004945987654320988}
#island_id: 3
#version_generated: 2
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
    if h[i//N][i%N] > 0:
      total_spin += J[0,i%N,i//N]
      spin_sum -= np.sum(J[1:,i%N,i//N])
    else:
      total_spin -= J[0,i%N,i//N]
      spin_sum += np.sum(J[1:,i%N,i//N])

    priorities[i][0] = total_spin + spin_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002310185185185179}
#island_id: 3
#version_generated: 2
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k == 1 and i % N > 0) or (k == 3 and i // N > 0) or (k == 2 and i % N < N-1) or (k == 0 and i // N < N-1):
        priorities[i][0] += J[k,i//N,i%N]*h[(i+(k-1)%2-N-1)%N][(i+(k-1)%2)%N]
        priorities[i][1] -= J[k,i//N,i%N]*h[(i+(k-1)%2-N-1)%N][(i+(k-1)%2)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032436728395061733}
#island_id: 3
#version_generated: 2
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr1 = (i % N + ((i//N-2)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]

    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -(h_site + h_site1 + h_site2)
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -(h_site + h_site1 + h_site2)

  return(priorities)




#score: {'data2D.txt': -0.0010766975308641978}
#island_id: 3
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum(J[1:,i%N,i//N])
      priorities[i][1] = -priorities[i][0]
  
  # Add more logic to make the function better
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr].sum() > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': -0.34292515432098664}
#island_id: 3
#version_generated: 2
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      k = (j + i // N) % 2
      if J[j, i % N, i // N] > 0:
        h_neighbors = sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_neighbors = -sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neighbors
        priorities[i][1] -= 2
      else:
        priorities[i][0] -= h_site + h_neighbors
        priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': -0.025008487654320986}
#island_id: 2
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_left = (i % N + ((i//N)%2)) % N
      site_right = (i % N + ((i//N+1)%2)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_left][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site + J[0,i%N,i//N]*h[site_right][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010927469135802472}
#island_id: 2
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N
    site_left = (i % N + ((i//N)%2)) % N
    site_right = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr_up_left = (i % N + ((i//N-1)%2)) % N
      site_nbr_up_right = (i % N + ((i//N+1)%2)) % N
      site_nbr_down_left = (i % N + ((i//N)%2)) % N
      site_nbr_down_right = (i % N + ((i//N+1)%2)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up][i%N] + \
                  J[0,i%N,site_nbr_up_left]*h[site_nbr_up_left][i%N] + \
                  J[0,i%N,site_nbr_up_right]*h[site_nbr_up_right][i%N] - \
                  J[0,i%N,site_nbr_down_left]*h[site_nbr_down_left][i%N] - \
                  J[0,i%N,site_nbr_down_right]*h[site_nbr_down_right][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site + J[0,i%N,i//N]*h[site_down][i%N] + \
                  J[0,i%N,site_nbr_up_left]*h[site_nbr_up_left][i%N] + \
                  J[0,i%N,site_nbr_up_right]*h[site_nbr_up_right][i%N] - \
                  J[0,i%N,site_nbr_down_left]*h[site_nbr_down_left][i%N] - \
                  J[0,i%N,site_nbr_down_right]*h[site_nbr_down_right][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.01954768518518519}
#island_id: 2
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
      
    sites_up = (i % N + ((i//N-1)%2)) % N
    sites_down = (i % N + ((i//N+1)%2)) % N
    
    if i < N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[sites_up][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[sites_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      sites_left = (i % N + ((i//N)%2)) % N
      sites_right = (i % N + ((i//N+1)%2)) % N
      
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - J[0,i%N,i//N]*h[sites_left][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site + J[0,i%N,i//N]*h[sites_right][i%N]
        priorities[i][1] = -priorities[i][0]
        
  return(priorities)




#score: {'data2D.txt': 0.0017288580246913575}
#island_id: 2
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i % N + ((i//N-1)%2)) % N
    site_down = (i % N + ((i//N+1)%2)) % N

    if i<N*N//4 and i%N!=0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*(h[site_up][i%N] + h[site_down][i%N])
      priorities[i][1] = -priorities[i][0]
    elif i>N*N*3/4-1 and i%N!=N-1:
      priorities[i][0] = h_site + J[0,i%N,i//N]*(h[site_up][i%N] + h[site_down][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      site_left = (i % N + ((i//N)%2)) % N
      site_right = (i % N + ((i//N+1)%2)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - J[0,i%N,i//N]*(h[site_left][i%N] + h[site_right][i%N])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site + J[0,i%N,i//N]*(h[site_left][i%N] + h[site_right][i%N])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16602731481481495}
#island_id: 1
#version_generated: 2
#generate time01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i % N
    
    total_spin = h[site_nbr_row][site_nbr_col]
    
    for k in range(4):
      if J[k,site_nbr_col,site_nbr_row] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0024066358024691353}
#island_id: 1
#version_generated: 2
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) % 2)
    
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr2][i%N]
        priorities[i][1] -= h[site_nbr2][i%N]
      else:
        priorities[i][0] -= h[site_nbr2][i%N]
        priorities[i][1] += h[site_nbr2][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': -0.11526250000000013}
#island_id: 1
#version_generated: 2
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.004335956790123457}
#island_id: 1
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
        
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
        
  return(priorities)




#score: {'data2D.txt': 0.003263425925925926}
#island_id: 3
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004864043209876543}
#island_id: 2
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= abs(h_site) + J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013742283950617285}
#island_id: 0
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.0013742283950617285}
#island_id: 0
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in range(3):
      if i+k-N*N < 0 or i+k-N*N >= N*N:
        break
      total_energy += J[k,i//N,i%N] * h[(i+k-1)%N][i%N]
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.09301496913580247}
#island_id: 0
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -1
        priorities[i][1] = 1
      elif h[site_nbr][i%N] < 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': -0.0024859567901234568}
#island_id: 2
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002665586419753086}
#island_id: 3
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = max(h_site, sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h_site, -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 3
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -2.9166666666667117e-05}
#island_id: 3
#version_generated: 2
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin = 1
    else:
      spin = -1
    
    priorities[i][0] = J[0,i%N,i//N]*spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*spin for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.15615077160493848}
#island_id: 1
#version_generated: 2
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i//N,N-1] > 0:
      priorities[i][0] -= total_spin/2
      priorities[i][1] += total_spin/2
    else:
      priorities[i][0] += total_spin/2
      priorities[i][1] -= total_spin/2
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        priorities[i][0] += J[3,i%N,j]
        priorities[i][1] -= J[3,i%N,j]
      else:
        priorities[i][0] -= J[3,i%N,j]
        priorities[i][1] += J[3,i%N,j]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': 0.16413873456790148}
#island_id: 1
#version_generated: 2
#generate time01:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin -= h[i//N][i%N]
    else:
      total_spin += h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 3
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03878163580246916}
#island_id: 1
#version_generated: 2
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0027239197530864196}
#island_id: 1
#version_generated: 2
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [-total_spin, total_spin]
    elif total_spin < 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [1,-1]
  
  return(priorities)




#score: {'data2D.txt': 0.164915277777778}
#island_id: 1
#version_generated: 2
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    site_nbrs.append((site_nbr + ((i//N-1)%2 - 1)) % N)
    site_nbrs = list(set([x for x in site_nbrs if x != i%N]))
    
    for site_nbr in site_nbrs:
      if J[3,i%N,site_nbr] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16572947530864224}
#island_id: 1
#version_generated: 2
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i-1)%N-1)%N) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i%N]
      priorities[i][1] -= h[site_nbr_left][i%N]
    else:
      priorities[i][0] -= h[site_nbr_left][i%N]
      priorities[i][1] += h[site_nbr_left][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0009939814814814818}
#island_id: 1
#version_generated: 2
#generate time01:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = h[i%N][i//N]
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.0027584876543209876}
#island_id: 1
#version_generated: 2
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = -1
    else:
      total_spin = 1
      
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-2*h_site) * (np.cosh(total_spin))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * (np.cosh(total_spin))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = np.log(np.exp(-priorities[i][0]) + np.exp(priorities[i][0]))
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005066512345679012}
#island_id: 1
#version_generated: 2
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -4.58333333333335e-05}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.052185648148148175}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + 1) % N
      elif j == 1:
        nn_site = (site_nbr - 1) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((i%N-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]
      
      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]
    
    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.052185648148148175}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + 1) % N
      elif j == 1:
        nn_site = (site_nbr - 1) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((i%N-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]
      
      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]
    
    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.052185648148148175}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + 1) % N
      elif j == 1:
        nn_site = (site_nbr - 1) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((i%N-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]
      
      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]
    
    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.052185648148148175}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + 1) % N
      elif j == 1:
        nn_site = (site_nbr - 1) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((i%N-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]
      
      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]
    
    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14416466049382734}
#island_id: 2
#version_generated: 2
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(total_spin) / (np.exp(total_spin) + 1)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 1/(1+np.exp(total_spin))
      priorities[i][1] = 1-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.20505817901234583}
#island_id: 0
#version_generated: 2
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]))
  return(priorities)




#score: {'data2D.txt': 0.19477453703703726}
#island_id: 0
#version_generated: 2
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[0,i//N,i%N])) - (total_spin)
    else:
      priorities[i][0] -= np.sum(np.abs(J[0,i//N,i%N])) + (total_spin)

  return(priorities)




#score: {'data2D.txt': 0.17185879629629652}
#island_id: 0
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + (total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += np.sum(np.abs(h[site_nbr][i%N] * J[k, i // N, i % N])) + (total_spin)
      else:
        priorities[i][0] -= np.sum(np.abs(h[site_nbr][i%N] * J[k, i // N, i % N])) - (total_spin)

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5*(h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 3
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.006812500000000002}
#island_id: 3
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = total_spin + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -total_spin + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.006812500000000002}
#island_id: 3
#version_generated: 2
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0005285493827160496}
#island_id: 3
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
    if total_spin > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5*(h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5*(h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5*(h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0007958333333333325}
#island_id: 3
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    priorities[i][0] = total_spin[i][0] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0072788580246913575}
#island_id: 3
#version_generated: 2
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = total_spin[i][0] + sum([J[k,i//N,i%N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0018418209876543215}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N-1)%N*N+i%N
    site_down = (i-N+1)%N*N+i%N
    site_left = (i%N-1)%N*N+(i//N)
    site_right = (i%N+1)%N*N+(i//N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*total_spin[site_up][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][0] + sum([-J[k,i%N,i//N]*total_spin[site_down][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003263425925925926}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.25976867283950594}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007958333333333325}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    priorities[i][0] = total_spin[i][0] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007958333333333325}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    priorities[i][0] = total_spin[i][0] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007421296296296294}
#island_id: 3
#version_generated: 2
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sum(J[:, i%N, i//N]*h[site_nbr][i%N])
    priorities[i][0] = total_spin[i][0] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.12086651234567916}
#island_id: 1
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum(J[3,i//N,j] for j in range(N))
      priorities[i][1] = -total_spin + sum(J[3,i//N,j] for j in range(N))
    else:
      priorities[i][0] = -total_spin - sum(J[3,i//N,j] for j in range(N))
      priorities[i][1] = total_spin - sum(J[3,i//N,j] for j in range(N))
  
  return(priorities)




#score: {'data2D.txt': 0.012017746913580247}
#island_id: 1
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the total interaction from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Update the priority based on the magnetism at each site
    for j in range(N):
      if h[i//N][j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    # Calculate the priority for each spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008486111111111111}
#island_id: 3
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]

  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 3
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 3
#version_generated: 2
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.001206327160493827}
#island_id: 1
#version_generated: 2
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    for k in range(2):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interaction sum
    interaction_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        interaction_sum += 1
      else:
        interaction_sum -= 1
    
    # Add magnetism and interaction sum to priorities
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + interaction_sum, -total_spin - interaction_sum]
    else:
      priorities[i] = [-total_spin - interaction_sum, total_spin + interaction_sum]
  
  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.22450540123456794}
#island_id: 1
#version_generated: 2
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interaction with neighboring sites
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priority based on magnetism and interaction
    priorities[i][0] = total_spin * (h[i//N][i%N] > 0) - 2 * (total_spin > 0)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.007168364197530863}
#island_id: 1
#version_generated: 2
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr1 = (i % N + ((3)%2 - 1)) % N
    site_nbr2 = (i // N + ((2)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      total_spin += h[site_nbr1][i%N]
      total_spin -= h[site_nbr2][i%N]
    else:
      total_spin -= h[site_nbr1][i%N]
      total_spin += h[site_nbr2][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-2*h_site) * (1 + np.tanh(total_spin))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * (1 + np.tanh(total_spin))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.exp(-2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -np.exp(2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.013532561728395063}
#island_id: 0
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.004913734567901234}
#island_id: 0
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy
  return(priorities)




#score: {'data2D.txt': 0.013532561728395063}
#island_id: 0
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.004913734567901234}
#island_id: 0
#version_generated: 2
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy
  return(priorities)




#score: {'data2D.txt': 0.28922947530864157}
#island_id: 3
#version_generated: 2
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sum(J[0:N, i//N, i%N] * h[(site_nbr)%N, (i%N)])
    
    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.28922947530864157}
#island_id: 3
#version_generated: 2
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sum(h[site_nbr][i%N]*J[:,i//N,i%N])
    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.003105401234567902}
#island_id: 1
#version_generated: 2
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[3,i%N,i//N]
      priorities[i][1] -= J[3,i%N,i//N]
    else:
      priorities[i][0] -= J[3,i%N,i//N]
      priorities[i][1] += J[3,i%N,i//N]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    nn_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        nn_sum += 1
      else:
        nn_sum -= 1
    
    total_spin += nn_sum
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.008934104938271606}
#island_id: 1
#version_generated: 2
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = h[i%N][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16612237654321013}
#island_id: 1
#version_generated: 2
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.06249305555555558}
#island_id: 3
#version_generated: 2
#generate time01:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    max_val_idx = np.argmax(priorities[i])
    if max_val_idx == 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.25976867283950594}
#island_id: 3
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.25976867283950594}
#island_id: 3
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    total_spin_sum = np.sum(total_spin[i])
    priorities[i][0] = total_spin_sum + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.025530401234567904}
#island_id: 1
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5 * (h[site_nbr][i%N] - h[i//N][i%N])

    for k in [0, 1]:
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]

    priorities[i][0] = -total_spin
    priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.16370200617283973}
#island_id: 1
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in [0,1]:
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if k == 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.11533317901234581}
#island_id: 1
#version_generated: 2
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i][0] += J[3,i%N,j]
        priorities[i][1] -= J[3,i%N,j]
      else:
        priorities[i][0] -= J[3,i%N,j]
        priorities[i][1] += J[3,i%N,j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16525632716049407}
#island_id: 1
#version_generated: 2
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.008902006172839505}
#island_id: 0
#version_generated: 2
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site = (i % N + (k)%2 - 1) % N
      total_spin += J[k,i//N,i%N] * h[site_nbr][i%N]
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Add priority based on local magnetism at the site
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 0
#version_generated: 2
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.0005248456790123459}
#island_id: 0
#version_generated: 2
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      site = (i % N + (k)%2 - 1) % N
      total_spin += J[k, i//N, i%N] * h[site][i%N]
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] += 2*total_spin
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] -= 2*total_spin
      priorities[i][1] += 2*total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.020135648148148146}
#island_id: 0
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

  return(priorities)




#score: {'data2D.txt': -1.0339506172841962e-05}
#island_id: 0
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = np.sum([J[:,site,i%N]*h[site][i%N] for site in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

  return(priorities)




#score: {'data2D.txt': -0.1695532407407409}
#island_id: 0
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -3.5 * abs(total_spin) + np.sum([2*abs(np.sum(J[:,site,i%N])) for site in site_nbrs])
      priorities[i][1] = -2.5 * total_spin
    else:
      priorities[i][0] = 3.5 * abs(total_spin) - np.sum([2*abs(np.sum(J[:,site,i%N])) for site in site_nbrs])
      priorities[i][1] = 2.5 * total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    spin_diff = abs(h[site_nbr][i%N])
    priorities[i][0] = np.exp(-2*spin_diff) * np.exp(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.exp(-2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -np.exp(2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = np.exp(-2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.exp(2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -2.669753086419724e-05}
#island_id: 3
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]
  return(priorities)




#score: {'data2D.txt': -0.0008486111111111111}
#island_id: 3
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]

  return(priorities)




#score: {'data2D.txt': -0.0008486111111111111}
#island_id: 3
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]

  return(priorities)




#score: {'data2D.txt': -0.0011223765432098764}
#island_id: 3
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):  # Consider all nearest neighbors (up, down, left, right)
      site_nbr = (i % N + ((i//N-1)%2 - (j%2)) // N) % N
      if h[site_nbr][i%N] > 0:
        total_spin += J[j,i//N,i%N]
      else:
        total_spin -= J[j,i//N,i%N]

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-2*h_site) * (np.exp(total_spin))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * (np.exp(total_spin))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h[site_nbr][i%N]) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.exp(-2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(2*h_site) * np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007015277777777777}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_left = sum(J[k,i//N,(i%N-1+N)%N] * h[site_nbr][(i%N-1+N)%N] for k in range(4))
    nn_energy_right = sum(J[k,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N] for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy_left + nn_energy_right
    priorities[i][0] += total_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+1)%N] for k in range(4)) + sum(J[k,i//N,(i%N-1+N)%N] for k in range(4))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+1)%N] for k in range(4)) - sum(J[k,i//N,(i%N-1+N)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': 0.0002930555555555557}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,(i%N+k)%N] * h[site_nbr][(i%N+k)%N] for k in range(4))
    priorities[i][0] += total_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+k)%N] for k in range(4))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+k)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': -0.0036865740740740743}
#island_id: 0
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2 - sum(J[k, i//N, (i%N+N)%N] for k in range(4))
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 2 + sum(J[k, i//N, (i%N+N)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.29003132716049346}
#island_id: 3
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_sum = np.sum(total_spin[i])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0028449074074074067}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  nns = [i for i in range(4)]
  priorities = [[0,0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]
    J_down = -np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]

    priorities[k][0] = (J_up - J_down)*h_site
    priorities[k][1] = -priorities[k][0]
    if k % N == 0:
      site_nbr2 = (k + ((k+1)%N-1)) % N
      if h[site_nbr2][k%N] > 0:
        J_up += np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]
        J_down -= np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]
      else:
        J_up -= np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]
        J_down += np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]

    priorities[k][0] = (J_up - J_down)*h_site
    priorities[k][1] = -priorities[k][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[i,k%N,k//N]*h_site for i in range(4)])
    J_down = np.sum([-J[i,k%N,k//N]*(-h_site) for i in range(4)])

    priorities[k][0] = (J_up - J_down)*h_site
    priorities[k][1] = -priorities[k][0]

  return(priorities)




#score: {'data2D.txt': -0.0028449074074074067}
#island_id: 0
#version_generated: 2
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  nns = [i for i in range(4)]
  priorities = [[0,0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]
    J_down = -np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]

    priorities[k][0] = (J_up - J_down)*h_site
    priorities[k][1] = -priorities[k][0]

  return(priorities)




#score: {'data2D.txt': -0.0010041666666666667}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])

  # Sort the priorities based on the total spin in descending order and then by the second priority
  priorities = priorities[np.lexsort((priorities[:,0], -priorities[:,1]))]
  return(priorities)




#score: {'data2D.txt': -0.00041898148148148057}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate the priority based on the total spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin * abs(J[0,i//N,i//N]) + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
      priorities[i][1] = total_spin * abs(J[0,i//N,i//N]) + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin * abs(J[0,i//N,i//N]) + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
      priorities[i][1] = -total_spin * abs(J[0,i//N,i//N]) + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]
  return(priorities)




#score: {'data2D.txt': -2.669753086419724e-05}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])

  # Sort the priorities based on the total spin in descending order
  priorities = priorities[np.argsort(-priorities[:,0])]
  return(priorities)




#score: {'data2D.txt': -0.003813425925925926}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][0] + sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0] - sum([abs(J[k,i//N,(k+N-1)%N]) for k in range(3)])

  return priorities




#score: {'data2D.txt': 0.2921748456790118}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = np.random.choice([-1, 1])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.000962191358024691}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -np.sum(total_spin[i])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum(total_spin[i])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2483785493827159}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      if N % 2 == 0 and i // N % 2 == 1:
        priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.055232561728395066}
#island_id: 3
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - 2
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.23467638888888892}
#island_id: 3
#version_generated: 2
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  # Improved version of priority
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(J[:,i//N,i%N]) * total_spin[i][0]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= np.sum(J[:,i//N,i%N]) * total_spin[i][0]
      priorities[i][1] += priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16050015432098788}
#island_id: 1
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr2][i//N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr2][i//N]
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.011608796296296298}
#island_id: 1
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if J[3,i%N,i//N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2733038580246909}
#island_id: 3
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0013794753086419757}
#island_id: 1
#version_generated: 2
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.07528626543209882}
#island_id: 1
#version_generated: 2
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        if k % 2 == 0:
          priorities[i][0] += h[site_nbr1][i%N]
          priorities[i][1] -= h[site_nbr1][i%N]
        else:
          priorities[i][0] -= h[site_nbr2][i%N]
          priorities[i][1] += h[site_nbr2][i%N]
      else:
        if k % 2 == 0:
          priorities[i][0] -= h[site_nbr1][i%N]
          priorities[i][1] += h[site_nbr1][i%N]
        else:
          priorities[i][0] += h[site_nbr2][i%N]
          priorities[i][1] -= h[site_nbr2][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.002361882716049383}
#island_id: 1
#version_generated: 2
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    
    total_spin = h[site_nbr1][i%N]
    total_spin += np.sum(J[:, i//N, i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16510632716049406}
#island_id: 1
#version_generated: 2
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + np.sum(np.roll(J[3,:,:], -1)[i//N,i%N])
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + np.sum(np.roll(J[3,:,:], -1)[i//N,i%N])
    
  return(priorities)




#score: {'data2D.txt': 0.161649228395062}
#island_id: 1
#version_generated: 2
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
        
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
      
  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00170354938271605}
#island_id: 2
#version_generated: 2
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if sum(h[i//N]) > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11623101851851865}
#island_id: 1
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
    
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.29003132716049346}
#island_id: 3
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.16675385802469153}
#island_id: 3
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  site_nbr = N//2
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      else:
        total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.23634459876543223}
#island_id: 3
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.08561311728395068}
#island_id: 1
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        if h[site_nbr][j] > 0:
          priorities[i][0] += 1
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= 1
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.00062145061728395}
#island_id: 2
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = (1 - h[i//N].mean()) * total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + h[i//N].mean()) * total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012582870370370373}
#island_id: 2
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = (1 - np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]))
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -0.004492438271604939}
#island_id: 0
#version_generated: 2
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

    # Sort the priorities to encourage the assignment of spins that reduce energy
    priorities[i] = np.sort(priorities[i])

  return(priorities)




#score: {'data2D.txt': -0.005017746913580247}
#island_id: 0
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for j in [(i//N,N-1), (i//N,0), (0,i%N), (N-1,i%N)]:
      if J[3,j[0],j[1]] > 0:
        nn_energy += h[j[0]][j[1]]
      else:
        nn_energy -= h[j[0]][j[1]]

    priorities[i][0] = h[site_nbr][i%N] + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.028387191358024685}
#island_id: 0
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

    # Add the energy of the site's opposite neighbor
    opp_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if J[3,i//N,opp_nbr] > 0:
      opp_energy = h[i//N][opp_nbr]
    else:
      opp_energy = -h[i//N][opp_nbr]

    priorities[i][0] += opp_energy
    if J[3,i//N,opp_nbr] > 0:
      priorities[i][1] -= opp_energy
    else:
      priorities[i][1] += opp_energy

  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0014717592592592595}
#island_id: 3
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][1] + 2 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][1] - 2 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.21783780864197547}
#island_id: 3
#version_generated: 2
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.12168657407407422}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N] + np.sum(J[:,i//N,i%N])/4)
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N] + np.sum(J[:,i//N,i%N])/4)
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.20743595679012364}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  # add a term that accounts for the magnetism at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return priorities




#score: {'data2D.txt': 0.21464830246913597}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N]-np.sum(J[:,i//N,i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * (h[site_nbr][i%N]+np.sum(J[:,i//N,i%N]))
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2922452160493823}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.27895478395061685}
#island_id: 3
#version_generated: 2
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2922452160493823}
#island_id: 3
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2922452160493823}
#island_id: 3
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.29003132716049346}
#island_id: 3
#version_generated: 2
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.1697279320987657}
#island_id: 3
#version_generated: 2
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  # Add some more advanced logic here
  for i in range(N**2):
    for j in range(3):
      site = (i % N + ((j-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += np.sum(J[:,site,i%N]) * h[site][i%N]
        priorities[i][1] -= np.sum(J[:,site,i%N]) * h[site][i%N]
      else:
        priorities[i][0] -= np.sum(J[:,site,i%N]) * h[site][i%N]
        priorities[i][1] += np.sum(J[:,site,i%N]) * h[site][i%N]

  return priorities




#score: {'data2D.txt': 0.25454768518518506}
#island_id: 3
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2926245370370366}
#island_id: 3
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - (np.sum(h[:N,i%N]))/N)
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - (np.sum(h[:N,i%N]))/N)
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.25454768518518506}
#island_id: 3
#version_generated: 2
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.010372993827160492}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)])
    J_down = -J_up

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.011370833333333333}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == 0 or i//N+1 >= N: # top edge
        nn_site = site_nbr
      elif i%N == 0 or i%N+1 >= N: # left edge
        nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    if h[i//N][i%N] > 0:
      J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nns)]) + J[1,i//N,i//N]
      J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nns)]) - J[1,i//N,i//N]
    else:
      J_up = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nns)]) + J[1,i//N,i//N]
      J_down = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nns)]) - J[1,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    if h[i//N][i%N] > 0:
      J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)]) + J[1,i//N,i//N]
      J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)]) - J[1,i//N,i//N]
    else:
      J_up = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)]) + J[1,i//N,i//N]
      J_down = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)]) - J[1,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = J_up
      priorities[i][1] = -J_down
    else:
      priorities[i][0] = -J_up
      priorities[i][1] = J_down

  return(priorities)




#score: {'data2D.txt': 0.007031327160493828}
#island_id: 0
#version_generated: 2
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006668209876543211}
#island_id: 2
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([priorities[site_nbr*N+j][1] - priorities[site_nbr*N+j][0] for j in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([priorities[site_nbr*N+j][1] - priorities[site_nbr*N+j][0] for j in range(N)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) * total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site) * total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0027847222222222214}
#island_id: 2
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*-h[site_nbr][i%N]
        priorities[i][1] += J[k,i%N,i//N]*-h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0037131172839506175}
#island_id: 1
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in [0,1]:
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.0024078703703703697}
#island_id: 1
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0015029320987654318}
#island_id: 2
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = (1 - h[i//N].mean()) * total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + h[i//N].mean()) * total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09119151234567911}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]

    magnetism = h[i//N][i%N]
    if magnetism > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5 + 1
      priorities[i][1] = -4 * total_spin - 2
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5 - 1
      priorities[i][1] = 4 * total_spin + 2

  return(priorities)




#score: {'data2D.txt': 0.1438705246913582}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.15443966049382735}
#island_id: 0
#version_generated: 2
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,site,i%N].sum() for site in site_nbrs)
    total_spin += h[i//N][i%N] * J[:,i//N,i%N].sum()

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.1667831790123459}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.0036449074074074066}
#island_id: 3
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][1] + 4 * total_spin[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][1] - 4 * total_spin[i][0]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0014717592592592595}
#island_id: 3
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][1] + 2 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][1] - 2 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0036449074074074066}
#island_id: 3
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][1] + 4 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][1] - 4 * np.sum(total_spin[i][0])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.028948302469135805}
#island_id: 3
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= np.sum(J[:,i//N,i%N]) * h[site_nbr][i%N]
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][1] + 2 * np.sum(total_spin[i][0]) - sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][1] - 2 * np.sum(total_spin[i][0]) + sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0018689814814814819}
#island_id: 0
#version_generated: 2
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i//N,(k+i)%N]*h[(k+N-1)%N][(k+i)%N] for k in range(4)]) - J[1, i//N, (i+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i//N,(k+i)%N]*h[(k+N-1)%N][(k+i)%N] for k in range(4)]) + J[1, i//N, (i+1)%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007859567901234579}
#island_id: 0
#version_generated: 2
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr].sum()
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + np.sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i//N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - np.sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i//N, i//N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010674382716049408}
#island_id: 0
#version_generated: 2
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = np.sum(h[i//N])
    if h[i//N][i%N] > 0:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] = total_spin + sum([J[k,i//N,i//N]*h[site_nbr][k] for k in range(4)]) - J[1, i//N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] = -total_spin - sum([J[k,i//N,i//N]*h[site_nbr][k] for k in range(4)]) + J[1, i//N, i//N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11445694444444458}
#island_id: 1
#version_generated: 2
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # add the interactions with nearest neighbors
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
    
    if J[2,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11266250000000014}
#island_id: 1
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i//N]
        priorities[i][1] -= h[site_nbr][i//N]
      else:
        priorities[i][0] -= h[site_nbr][i//N]
        priorities[i][1] += h[site_nbr][i//N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.024733179012345678}
#island_id: 1
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    if any(J[3,i%N,j] > 0 for j in range(N)):
      priorities[i][0] += sum(h[s][i%N] for s in site_nbrs)
      priorities[i][1] -= sum(h[s][i%N] for s in site_nbrs)
    else:
      priorities[i][0] -= sum(h[s][i%N] for s in site_nbrs)
      priorities[i][1] += sum(h[s][i%N] for s in site_nbrs)
  
  return(priorities)




#score: {'data2D.txt': 0.03816836419753086}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin

    # Calculate the priority for each of the four neighbors
    neighbor_spin = np.zeros(4)
    for k in range(4):
      site_nbr = (i // N + ((k-1) % 2 - 1)) % N*N
      neighbor_spin[k] = J[k,i//N,i%N] * h[site_nbr//N][site_nbr%N]
      
      if h[i//N][i%N] > 0:
        priorities[i][0] += neighbor_spin[k]
        priorities[i][1] -= 2*neighbor_spin[k]
      else:
        priorities[i][0] -= neighbor_spin[k]
        priorities[i][1] += 2*neighbor_spin[k]

    # Apply a simple heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]

  return(priorities)




#score: {'data2D.txt': -0.0029442901234567895}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += 2*total_spin
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] -= 2*total_spin
      priorities[i][1] += 2*total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
     site = ((i//N + (k-1)%2 - 1)) % N*N
     if h[site//N][site%N] > 0:
      priorities[i][0] += J[k,i//N,i%N]
      priorities[i][1] -= 2*J[k,i//N,i%N]
     else:
      priorities[i][0] -= J[k,i//N,i%N]
      priorities[i][1] += 2*J[k,i//N,i%N]
    
    # Apply a simple heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
     priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
     priorities[i] = [-1, priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.005827314814814814}
#island_id: 0
#version_generated: 2
#generate time02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site = ((i//N + (k-1)%2 - 1)) % N*N
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
    
    # Apply a simple heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]
    
  return(priorities)




#score: {'data2D.txt': -0.005827314814814814}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin

    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site = ((i//N + (k-1)%2 - 1)) % N*N
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]

    # Apply a simple heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]

  return(priorities)




#score: {'data2D.txt': 0.31468070987654245}
#island_id: 3
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[k, i//N, i%N] for k in range(3) if (k+2)%2 == ((i//N-1)%2 - 1)) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[k, i//N, i%N] for k in range(3) if (k+2)%2 == ((i//N-1)%2 - 1)) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.23065694444444437}
#island_id: 3
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.06443009259259258}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) + J[0,i//N,site_nbr]
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) - J[0,i//N,site_nbr]
  return(priorities)




#score: {'data2D.txt': 0.1006195987654321}
#island_id: 0
#version_generated: 2
#generate time02:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': -0.03974737654320988}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] - sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': 0.1006195987654321}
#island_id: 0
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.012957561728395062}
#island_id: 1
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site_nbr][i%N] if J[k,i//N,i%N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0012384259259259256}
#island_id: 1
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.08930756172839512}
#island_id: 1
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

    if J[1,i//N,i%N] > 0:
      priorities[i][0] += 2*h[i//N][i%N]
      priorities[i][1] -= 2*h[i//N][i%N]
    else:
      priorities[i][0] -= 2*h[i//N][i%N]
      priorities[i][1] += 2*h[i//N][i%N]

    if J[2,i%(N-1),i//N] > 0:
      priorities[i][0] += h[(i+1)%N][i%N]
      priorities[i][1] -= h[(i+1)%N][i%N]
    else:
      priorities[i][0] -= h[(i+1)%N][i%N]
      priorities[i][1] += h[(i+1)%N][i%N]

    if J[3,i%(N-1),i//N] > 0:
      priorities[i][0] += h[(i+N-1)%N][i%N]
      priorities[i][1] -= h[(i+N-1)%N][i%N]
    else:
      priorities[i][0] -= h[(i+N-1)%N][i%N]
      priorities[i][1] += h[(i+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.004113425925925927}
#island_id: 2
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': 0.004113425925925927}
#island_id: 2
#version_generated: 2
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -0.012582870370370373}
#island_id: 2
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = (1 - np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])) + (np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]) > 0)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])) - (np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]) > 0)
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': 0.004113425925925927}
#island_id: 2
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]))
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # calculate interactions with nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # calculate priority based on magnetism and interaction
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11353842592592606}
#island_id: 1
#version_generated: 2
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin based on nearest neighbors
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.11623101851851865}
#island_id: 1
#version_generated: 2
#generate time02:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Magnetism contribution
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
    
  return(priorities)




#score: {'data2D.txt': 0.09284645061728404}
#island_id: 1
#version_generated: 2
#generate time02:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - 2*np.sum(J[:,i//N,i//N])
      priorities[i][1] = -total_spin + 2*np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -total_spin - 2*np.sum(J[:,i//N,i//N])
      priorities[i][1] = total_spin + 2*np.sum(J[:,i//N,i//N])
    
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time02:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.2733038580246909}
#island_id: 3
#version_generated: 2
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.2733038580246909}
#island_id: 3
#version_generated: 2
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - J[0,N*i%N+i%N,i//N]%N*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.012409722222222223}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    priorities[i] = [total_spin, -total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Compute total spin due to site magnetism and nearest neighbors
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    # Compute priority for each spin assignment
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0012714506172839504}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # New part
    for k in range(N):
      if J[0,i%N,k] > 0 and J[1,(i+N)%N,k] > 0:
        priorities[i][0] -= 2*h[k,k]
        priorities[i][1] += 2*h[k,k]
      elif J[0,i%N,k] < 0 and J[1,(i+N)%N,k] > 0:
        priorities[i][0] += 2*h[k,k]
        priorities[i][1] -= 2*h[k,k]
      elif J[0,i%N,k] > 0 and J[1,(i+N)%N,k] < 0:
        priorities[i][0] -= 2*h[k,k]
        priorities[i][1] += 2*h[k,k]
    
    return(priorities)




#score: {'data2D.txt': -0.0034631172839506156}
#island_id: 1
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for k in [0,1]:
        priorities[i][0] += J[k,i%N,i//N]
        priorities[i][1] -= J[k,i%N,i//N]
    else:
      for k in [0,1]:
        priorities[i][0] -= J[k,i%N,i//N]
        priorities[i][1] += J[k,i%N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum(J[:,i//N,i//N])
      priorities[i][1] -= sum(J[:,i//N,i//N])
    else:
      priorities[i][0] -= sum(J[:,i//N,i//N])
      priorities[i][1] += sum(J[:,i//N,i//N])
    
  return(priorities)




#score: {'data2D.txt': -6.959876543209898e-05}
#island_id: 2
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum(h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    total_spin_down = sum(-h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    if total_spin_up > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    elif total_spin_down > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  return priorities




#score: {'data2D.txt': 0.004113425925925927}
#island_id: 2
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]))
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -0.0010427469135802473}
#island_id: 2
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs)]
    spin_sum = sum(total_spin)
    priorities[i][0] = np.mean([1 if x > 0 else -1 for x in total_spin]) + (spin_sum > 0)
    priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -0.012582870370370373}
#island_id: 2
#version_generated: 2
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(total_spin) > 0:
      priorities[i][0] = (1 - np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])) + (np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]) > 0)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.mean([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])) - (np.sum([J[k, i%N, i//N] * h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)]) > 0)
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -6.959876543209898e-05}
#island_id: 2
#version_generated: 2
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum(h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    total_spin_down = sum(-h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    if total_spin_up > 0:
      priorities[i][1] -= 1
    elif total_spin_down > 0:
      priorities[i][1] += 1
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum(h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    total_spin_down = sum(-h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    if total_spin_up > 0:
      priorities[i][0] += np.sum(np.sign(h[site_nbr][i%N] * (h[site_nbr][i%N]>0) - J[k, i%N, i//N]) for k, site_nbr in zip(range(4), site_nbrs))
      priorities[i][1] -= np.sum(-np.sign(h[site_nbr][i%N] * (h[site_nbr][i%N]>0) - J[k, i%N, i//N]) for k, site_nbr in zip(range(4), site_nbrs))
    elif total_spin_down > 0:
      priorities[i][0] -= np.sum(np.sign(h[site_nbr][i%N] * (h[site_nbr][i%N]>0) - J[k, i%N, i//N]) for k, site_nbr in zip(range(4), site_nbrs))
      priorities[i][1] += np.sum(-np.sign(h[site_nbr][i%N] * (h[site_nbr][i%N]>0) - J[k, i%N, i//N]) for k, site_nbr in zip(range(4), site_nbrs))
  return priorities




#score: {'data2D.txt': 0.00010169753086419742}
#island_id: 2
#version_generated: 2
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum(h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    total_spin_down = sum(-h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    if total_spin_up > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    elif total_spin_down > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      if sum(h[site_nbr][i%N] for site_nbr in site_nbrs) > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
  return priorities




#score: {'data2D.txt': -6.959876543209898e-05}
#island_id: 2
#version_generated: 2
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum(h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    total_spin_down = sum(-h[site_nbr][i%N] * J[k, i%N, i//N] for k, site_nbr in zip(range(4), site_nbrs))
    if abs(total_spin_up) > abs(total_spin_down):
      priorities[i][0] += 1
      priorities[i][1] -= 1
    elif total_spin_down > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  return priorities




#score: {'data2D.txt': 0.23065694444444437}
#island_id: 3
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.23065694444444437}
#island_id: 3
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[i])
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.00217175925925926}
#island_id: 3
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_sum = np.sum(total_spin[:i+1].sum(axis=1))
      priorities[i][0] = total_spin_sum - sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] + h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_sum = np.sum(total_spin[:i+1].sum(axis=1))
      priorities[i][0] = total_spin_sum + sum(J[:(i//N+1),i//N,i%N]) * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 2
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_neighbour = (i-1) % (N*N)
    right_neighbour = (i+1) % (N*N)
    up_neighbour = i-N
    down_neighbour = i+N

    if up_neighbour < 0:
      up_up_neighbour = (up_neighbour + N) % (N*N)
    else:
      up_up_neighbour = up_neighbour - N
    if down_neighbour >= N*N:
      down_down_neighbour = (down_neighbour - N) % (N*N)
    else:
      down_down_neighbour = down_neighbour + N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(3):
      sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005970679012345679}
#island_id: 2
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1636711419753089}
#island_id: 1
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    site_nbr = (i % N + ((2)%2 - 1)) % N
    if J[3,i//N,N-1-i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.13528873456790144}
#island_id: 1
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,(i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.23626126543209863}
#island_id: 1
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Consider nearest neighbors on the same row
    for j in range(i%N):
      if J[0,i%N,j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N, i%N+1):
      if J[3,i%N,j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Consider nearest neighbors on the same column
    for k in range(i//N*N, (i//N+1)*N):
      site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
      if J[3,i%N,k%N] > 0:
        total_spin += h[site_nbr][k%N]
      else:
        total_spin -= h[site_nbr][k%N]
    
    # Calculate priority based on magnetism and spin interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11631959876543223}
#island_id: 1
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.00046929012345678936}
#island_id: 3
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N

      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': 0.0016445987654320998}
#island_id: 3
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) \
          + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
          + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
          + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0004492283950617284}
#island_id: 2
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(3):
      sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0] - J[3,i%N,i//N]*h[i//N][i%N]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0] + J[3,i%N,i//N]*h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0006097222222222218}
#island_id: 2
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(4):
     if k==2:
       continue
     sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006122376543209878}
#island_id: 2
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    total_spin_product = 0
    for k in range(4):
      total_spin_product += J[k,i%N,i//N]*spin_product*h[(k+N-1)%2][i%N]
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(3):
      sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.22955046296296294}
#island_id: 0
#version_generated: 2
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) - (total_spin))
    else:
      priorities[i][0] -= np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) + (total_spin))

  return(priorities)




#score: {'data2D.txt': 0.21054675925925936}
#island_id: 0
#version_generated: 2
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin>0))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin<0))

  return(priorities)




#score: {'data2D.txt': 0.30563070987654256}
#island_id: 0
#version_generated: 2
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    
    if h[i//N][i%N] > 0:
      spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    else:
      spin_neighbors = [-h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] -= np.sum(np.abs(spin_neighbors) + total_spin)
    
  return(priorities)




#score: {'data2D.txt': 0.11368595679012358}
#island_id: 1
#version_generated: 2
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site][i%N]
        priorities[i][1] -= h[site][i%N]
      else:
        priorities[i][0] -= h[site][i%N]
        priorities[i][1] += h[site][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Determine priority based on total spin and magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       priorities[i][0] += h[site_nbr][i%N]
       priorities[i][1] -= h[site_nbr][i%N]
     else:
       priorities[i][0] -= h[site_nbr][i%N]
       priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.11532947530864211}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][k]
        priorities[i][1] -= h[site_nbr][k]
      else:
        priorities[i][0] -= h[site_nbr][k]

  return(priorities)




#score: {'data2D.txt': -0.00534182098765432}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.0011856481481481483}
#island_id: 2
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(4):
      if k==2 or k==3: continue
      sum_neighbor += J[k,i%N,i//N]*h[(k)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015643518518518508}
#island_id: 2
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014248456790123465}
#island_id: 2
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(4):
      if k==2:
        continue
      if J[k,i%N,i//N] > 0:
        sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        sum_neighbor -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008356481481481491}
#island_id: 2
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in range(4):
      if k==2:
        continue
      sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009001543209876544}
#island_id: 3
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
  return(priorities)




#score: {'data2D.txt': -0.0071044753086419755}
#island_id: 3
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      row = i // N
      col = i % N
      if j == 0:
        row = (row+1)%N
      elif j == 1:
        row = (row-1)%N
      elif j == 2:
        col = (col+1)%N
      else:
        col = (col-1)%N
      h_neighbor = h[row][col]
      if J[j,i//N,row%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 2*h_site*h_neighbor
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 2*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': -0.00031188271604938193}
#island_id: 3
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      row = (i // N + ((j-1)%2 - 1)) % N
      col = (i % N) + (j-2)%2 - 1
      if row < 0:
        row += N
      if col < 0:
        col += N
      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    # Calculate the sum of interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16186126543209897}
#island_id: 1
#version_generated: 2
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,(i+N)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,(i+N)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0016445987654320998}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
       + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
       + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
       + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -8.626543209876524e-05}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
       + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
       + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
       + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h_site > 0 else total_spin

  return(priorities)




#score: {'data2D.txt': 0.0016445987654320998}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
     + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
     + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
     + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0016445987654320998}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
       + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
       + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
       + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0032841049382716044}
#island_id: 2
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006122376543209878}
#island_id: 2
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1

    total_spin_product = 0
    for k in range(4):
      total_spin_product += J[k,i%N,i//N]*spin_product*h[(k+N-1)%2][i%N]

    priority_up = h[site_nbr][i%N] + total_spin_product
    priority_down = -h[site_nbr][i%N] - total_spin_product

    priorities[i][0] = priority_up
    priorities[i][1] = priority_down
  return(priorities)




#score: {'data2D.txt': 0.0006807098765432102}
#island_id: 2
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    total_spin_product = 0
    for k in range(4):
      total_spin_product += J[k,i%N,i//N]*spin_product*h[(k+N-1)%2][i%N]
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + total_spin_product)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008195987654320993}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] -= 2 * total_spin
  return(priorities)




#score: {'data2D.txt': -0.000617438271604938}
#island_id: 3
#version_generated: 2
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      priorities[i][0] += J[j,i//N,row%N]*h_site*(2*h_neighbor - 1)
      priorities[i][1] += J[j,i//N,row%N]*(1 - (2*h_site)*h_neighbor)
  return(priorities)




#score: {'data2D.txt': 0.0006334876543209878}
#island_id: 3
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += J[j,i//N,row%N]*h_site*h_neighbor
      
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] += total_spin
    if h_site > 0:
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][1] += 2*total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0027470679012345676}
#island_id: 2
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002416203703703704}
#island_id: 2
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product + J[0,i%N,i//N]*spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0032841049382716044}
#island_id: 2
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = -1
    else:
      spin_product = 1
    
    priorities[i][0] = total_spin_product + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00676033950617284}
#island_id: 2
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k, i%N, i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product * spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010866820987654322}
#island_id: 0
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N] for k in range(4))
    total_energy = J[0,i//N,i%N] * (h[site_nbr][i%N] + h[i//N,i%N]) / 2
    if np.exp(-total_energy) > 0.5:
      priorities[i][0] += np.sum(h) / 2 - nn_energy
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= np.sum(h) / 2 + nn_energy
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.007961882716049383}
#island_id: 0
#version_generated: 2
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = J[0,i//N,i%N] * (h[site_nbr][i%N] + h[i//N,i%N]) / 2
    if total_energy > 0:
      priorities[i][0] += np.sum(h) / 2 - nn_energy - sum(J[k,i//N,i%N] for k in range(4))
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= np.sum(h) / 2 + nn_energy + sum(J[k,i//N,i%N] for k in range(4))
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -2.3148148148148804e-06}
#island_id: 0
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N] for k in range(4))
    total_spin = np.sum(h[site_nbr]) / 2 - nn_energy
    magnetism = np.sum(h) / 2
    if total_spin > magnetism:
      priorities[i][0] += magnetism - total_spin
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= magnetism + total_spin
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.004542438271604938}
#island_id: 0
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = J[0,i//N,i%N] * (h[site_nbr][i%N] + h[i//N,i%N]) / 2
    if total_energy > 0:
      priorities[i][0] += np.sum(h) / 2 - nn_energy
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= np.sum(h) / 2 + nn_energy
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.017827932098765435}
#island_id: 0
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(3):
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][0] += h[(i%N)%N][i//N]
      else:
        priorities[i][0] -= h[(i%N)%N][i//N]

    if i % N == 0 or (i+1) % N == 0:
      priorities[i][1] = priorities[i][1]/2
    elif i < N:
      priorities[i][1] = priorities[i][1]-priorities[(i+1)%N][1]
    else:
      priorities[i][1] = priorities[i][1]-priorities[(i-1)%N][1]

  return(priorities)




#score: {'data2D.txt': 0.012590277777777777}
#island_id: 0
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        priorities[i][0] += h[nn_site][i%N]
        priorities[i][1] -= h[nn_site][i%N]
      else:
        priorities[i][0] -= h[nn_site][i%N]
        priorities[i][1] += h[nn_site][i%N]

  return(priorities)




#score: {'data2D.txt': 0.004080092592592593}
#island_id: 0
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    # Prioritize spin based on the site's interaction with its neighbors.
    if J[0,i//N,(i%N)%N] > 0:
      priorities[i][0] += h[(i%N)%N][i//N]
    else:
      priorities[i][0] -= h[(i%N)%N][i//N]

    # Adjust the priority based on the site's magnetism.
    if h_site > 0:
      priorities[i][1] = 2*h_site + total_energy
    else:
      priorities[i][1] = -2*h_site + total_energy

  return(priorities)




#score: {'data2D.txt': -0.0027470679012345676}
#island_id: 2
#version_generated: 2
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0027470679012345676}
#island_id: 2
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = total_spin_product + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006296450617283951}
#island_id: 0
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.2719041666666663}
#island_id: 0
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      total_spin += J[j, i%N, i//N]*h[nn_site][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin**2
      priorities[i][1] = -total_spin**2
    else:
      priorities[i][0] = -(total_spin)**2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0018220679012345676}
#island_id: 0
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):  # Changed to 4 as there are 4 nearest neighbors
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i//N] > 0:  # Added the condition to consider ferromagnetic interaction
        total_spin += J[j,i//N,i//N]*h[nn_site][i%N]
      else:
        total_spin -= J[j,i//N,i//N]*h[nn_site][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010628086419753086}
#island_id: 0
#version_generated: 2
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4): # consider all nearest neighbors
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[nn_site][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002266820987654321}
#island_id: 2
#version_generated: 2
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    total_spin_sum = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
      if k==2:
        total_spin_sum+=J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = total_spin_sum + total_spin_product + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002810030864197531}
#island_id: 2
#version_generated: 2
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 3 and i//N > 0) or (k == 2 and i//N < N-1):
        total_spin_product += J[k,i%N,(i+N-1)%N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = total_spin_product + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0031699074074074077}
#island_id: 2
#version_generated: 2
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = sum(J[k,i%N,i//N] * h[(k+N-1)%2][i%N] if k == 0 and i%N > 0 or k == 1 and i%N < N-1 or k == 2 and i//N > 0 or k == 3 and i//N < N-1 else 0 for k in range(4)) + sum(J[k,i%N,(i+N-1)%N] * h[(k+N-1)%2][i%N] if k == 0 and i%N > 0 or k == 1 and i%N < N-1 or k == 2 and i//N > 0 or k == 3 and i//N < N-1 else 0 for k in range(4))
    priorities[i][0] = total_spin_product + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008195987654320993}
#island_id: 3
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
        h_neighbor = h[row][col]
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
        h_neighbor = h[row][col]
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
        h_neighbor = h[row][col]
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
        h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] -= 2 * total_spin
  return(priorities)




#score: {'data2D.txt': -0.006897376543209877}
#island_id: 3
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    spin_sum = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      spin_sum += (h_site+h_neighbor)
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] -= 2 * total_spin
    priorities[i][1] -= spin_sum
    
  return(priorities)




#score: {'data2D.txt': 0.0010535493827160496}
#island_id: 3
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    priority_diff = 0
    
    # Calculate the total spin and priority difference for this site
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      priority_diff += J[j,i//N,row%N]*(h_site*h_neighbor)
    
    priorities[i][0] += priority_diff
    priorities[i][1] -= 2 * total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.005212499999999999}
#island_id: 0
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i//N,i//N]*h[(site_nbr + j) % N][i%N] for k,j in zip(range(3),range(-1,2)) if (site_nbr + j) % N != site_nbr])
    priorities[i][0] = h_site - 2 * abs(nn_sum)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0081516975308642}
#island_id: 0
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + 2 * np.sum(J[:,i//N,i//N] > 0) - 2 * abs(nn_sum)
    priorities[i][1] = -priorities[i][0]
    nn_sum += J[0,i//N,i//N]*h_site
    if nn_sum < 0:
      priorities[i][0] -= 2*h_site
      priorities[i][1] += 2*h_site

  return(priorities)




#score: {'data2D.txt': -0.0024942901234567905}
#island_id: 2
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product + J[0,i%N,i//N]*spin_product
    if i % (N*N) < N:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0032841049382716044}
#island_id: 2
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011961419753086415}
#island_id: 2
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    priorities[i][0] = h[site_nbr][i%N] + total_spin_product + J[0,i%N,i//N]*spin_product
    priorities[i][1] = -priorities[i][0]
    if i % N > 0 and i < (N-1)*N:
      priorities[i][0] += J[3,i%N,(i-1)//N] * spin_product
  return(priorities)




#score: {'data2D.txt': -0.0005353395061728399}
#island_id: 2
#version_generated: 2
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_product = 0
    for k in range(4):
      if (k == 0 and i%N > 0) or (k == 1 and i%N < N-1) or (k == 2 and i//N > 0) or (k == 3 and i//N < N-1):
        total_spin_product += J[k,i%N,i//N]*h[(k+N-1)%2][i%N]
    if h[site_nbr][i%N] > 0:
      spin_product = -1
    else:
      spin_product = 1
    
    priorities[i][0] = total_spin_product + J[0,i%N,i//N]*spin_product
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] -= np.abs(J[j,i//N,row%N])*np.abs(h_site)
  return(priorities)




#score: {'data2D.txt': 0.0011739197530864194}
#island_id: 3
#version_generated: 2
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      row = None
      col = None
      if j == 0:
        row, col = i // N, (i % N) - 1
        if col < 0: col += N
      elif j == 1:
        row, col = i // N, (i % N) + 1
        if col >= N: col -= N
      elif j == 2:
        row, col = (i // N) - 1, i % N
        if row < 0: row += N
      else:
        row, col = (i // N) + 1, i % N
        if row >= N: row -= N

      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16527083333333356}
#island_id: 1
#version_generated: 2
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add next-nearest neighbor interactions (if applicable)
    site_nbr = (i % N + ((i//N-2)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0030353395061728395}
#island_id: 1
#version_generated: 2
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  for j in range(N):
    site_nbr = (i % N + ((j-1)%2 - 1)) % N
    if J[3,i%N,j] > 0:
      priorities[i][0] += h[site_nbr][j]
      priorities[i][1] -= h[site_nbr][j]
    else:
      priorities[i][0] -= h[site_nbr][j]
      priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': 0.11598194444444458}
#island_id: 1
#version_generated: 2
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i//N-2)%2 - 1)) % N
    if i % N != 0 and J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i//N]
      priorities[i][1] -= h[site_nbr_left][i//N]
    elif i % N != 0 and J[0,i%N,i//N] < 0:
      priorities[i][0] -= h[site_nbr_left][i//N]
      priorities[i][1] += h[site_nbr_left][i//N]
    
    site_nbr_right = (i % N + ((i//N)%2 - 1)) % N
    if i % N != N-1 and J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_right][i//N]
      priorities[i][1] -= h[site_nbr_right][i//N]
    elif i % N != N-1 and J[1,i%N,i//N] < 0:
      priorities[i][0] -= h[site_nbr_right][i//N]
      priorities[i][1] += h[site_nbr_right][i//N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.00040231481481481536}
#island_id: 3
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    spin_sum = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      spin_sum += (h_site+h_neighbor)
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    if h_site > 0:
      priorities[i][1] -= spin_sum - 2 * total_spin
    else:
      priorities[i][1] += spin_sum + 2 * total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.00512145061728395}
#island_id: 3
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    spin_sum = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      spin_sum += (h_site+h_neighbor)
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] -= 2 * total_spin
    priorities[i][1] -= spin_sum
    
    # Add the magnetism to the priority
    priorities[i][0] -= h_site
    priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': -0.006881944444444445}
#island_id: 3
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    spin_sum = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
        
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      spin_sum += (h_site+h_neighbor)
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
    priorities[i][0] -= 2 * total_spin
    priorities[i][1] -= spin_sum
    
    # Additional improvement: Sort sites based on their interaction with neighbors
    site_interactions = np.sum(J[:,i//N], axis=1)
    sorted_indices = np.argsort(site_interactions)
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
        
      h_neighbor = h[row][col]
      
      priorities[sorted_indices[j]][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[sorted_indices[j]][1] += J[j,i//N,row%N]*(h_site+h_neighbor)
    
  return(priorities)




#score: {'data2D.txt': -0.0069208333333333335}
#island_id: 3
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    spin_sum = 0
    for j in range(4):
      if j == 0:
        row = i // N
        col = (i % N) - 1
        if col < 0:
          col += N
      elif j == 1:
        row = i // N
        col = (i % N) + 1
        if col >= N:
          col -= N
      elif j == 2:
        row = (i // N) - 1
        col = i % N
        if row < 0:
          row += N
      else:
        row = (i // N) + 1
        col = i % N
        if row >= N:
          row -= N
      
      h_neighbor = h[row][col]
      
      total_spin += h_site*h_neighbor
      spin_sum += (h_site+h_neighbor)
      
      priorities[i][0] += J[j,i//N,row%N]*((h_site+h_neighbor)**2) - 2 * J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] += J[j,i//N,row%N]*(h_site**2 + h_neighbor**2)
    
    priorities[i][0] -= 2 * total_spin
    priorities[i][1] -= spin_sum
    
  return(priorities)




#score: {'data2D.txt': 0.0005356481481481484}
#island_id: 0
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      for k in range(4):
        if k==3:
          continue
        neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
          neighbor = (neighbor + ((k-1)%2 - 1)) % N
        total_spin += J[k,i//N,nn_site] * h[neighbor][i%N]
    if total_spin > 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = -1
      priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': -0.0019424382716049383}
#island_id: 0
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      total_spin += np.sum(J[j, i//N, :])
    if total_spin > 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = -1
      priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr])
    if h[site_nbr].mean() > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.0015921296296296293}
#island_id: 2
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_product = 1
    else:
      spin_product = -1
    
    total_spin_product = 0
    for k in range(4):
      site_nbr_neighbor = (k+N-1)%2 + i%N*N
      total_spin_product += J[k,i//N,i//N]*spin_product*h[site_nbr][i%N]
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + total_spin_product)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005880092592592593}
#island_id: 2
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_product = sum(J[k,i%N,i//N]*h[k][i%N] for k in range(4))
      priorities[i][0] = np.sum(h[:, i%N]) + total_spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin_product = sum(J[k,i%N,i//N]*h[(k+2)%4][i%N] for k in range(4))
      priorities[i][0] = -(np.sum(h[:, i%N]) + total_spin_product)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.04729614197530866}
#island_id: 1
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr1][k]
        priorities[i][1] -= h[site_nbr1][k]
      else:
        priorities[i][0] -= h[site_nbr1][k]
        priorities[i][1] += h[site_nbr1][k]

    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': 0.1156964506172841}
#island_id: 1
#version_generated: 2
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
  
  return(priorities)




#score: {'data2D.txt': 0.11953348765432115}
#island_id: 1
#version_generated: 2
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr_row = (i // N) % N
    site_nbr_col = i % N
    if h[site_nbr_row][site_nbr_col] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr_row = (i // N) % N
      site_nbr_col = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,site_nbr_col] > 0:
        priorities[i][0] += h[site_nbr_row][site_nbr_col]
        priorities[i][1] -= h[site_nbr_row][site_nbr_col]
      else:
        priorities[i][0] -= h[site_nbr_row][site_nbr_col]
        priorities[i][1] += h[site_nbr_row][site_nbr_col]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i//N,j] > 0:
        priorities[i][0] += h[site_nbr,j]
        priorities[i][1] -= h[site_nbr,j]
      else:
        priorities[i][0] -= h[site_nbr,j]
        priorities[i][1] += h[site_nbr,j]
  return(priorities)




#score: {'data2D.txt': -0.0002192901234567904}
#island_id: 2
#version_generated: 2
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if np.sum(h) > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002192901234567904}
#island_id: 2
#version_generated: 2
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if np.sum(h) > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001069444444444444}
#island_id: 2
#version_generated: 2
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001069444444444444}
#island_id: 2
#version_generated: 2
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01092391975308642}
#island_id: 0
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = min(h_site + nn_energy, -h_site - nn_energy)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': -0.04964799382716051}
#island_id: 0
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = -nn_energy - max(-h_site, h_site) if J[3,i//N,site_nbr] > 0 else -nn_energy + min(h_site, -h_site)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0040455246913580255}
#island_id: 0
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = (J[0,i%N,i//N] * h[i//N][i%N]) * 2
    if J[3,i//N,site_nbr] > 0:
      nn_energy += J[3,i//N,site_nbr]
    else:
      nn_energy -= J[3,i//N,site_nbr]

    priorities[i][0] = h[site_nbr][i%N] + nn_energy
    priorities[i][1] = -h[site_nbr][i%N] - nn_energy

  return(priorities)




#score: {'data2D.txt': 0.000543981481481482}
#island_id: 2
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] + max(0, sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -total_spin + J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] + max(0, sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 2
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012893518518518516}
#island_id: 2
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighborhood = [k for k in range(3) if abs(k-i%N) <= 1 and k // N == i // N]
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighborhood])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum([abs(J[k,i%N,i//N])*h[site_nbr][i%N] for k in neighborhood])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + sum([abs(J[k,i%N,i//N])*h[site_nbr][i%N] for k in neighborhood])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006420524691358024}
#island_id: 2
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -total_spin + J[0, i % N, i // N] * h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.00031188271604938193}
#island_id: 3
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      row = (i // N + ((j-1)%2 - 1)) % N
      col = (i % N) + (j-2)%2 - 1
      if row < 0:
        row += N
      if col < 0:
        col += N
      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      row = (i // N + ((j-1)%2 - 1)) % N
      col = (i % N) + (j-2)%2 - 1
      if row < 0:
        row += N
      if col < 0:
        col += N
      h_neighbor = h[row][col]
      priorities[i][1] -= J[j,i//N,row%N]*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': -0.009060339506172839}
#island_id: 3
#version_generated: 2
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      row = (i // N + ((j-1)%2 - 1)) % N
      col = (i % N) + (j-2)%2 - 1
      if row < 0:
        row += N
      if col < 0:
        col += N
      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.0001992283950617289}
#island_id: 3
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      row = (i // N + ((j-1)%2 - 1)) % N
      col = (i % N) + (j-2)%2 - 1
      if row < 0:
        row += N
      if col < 0:
        col += N
      h_neighbor = h[row][col]
      priorities[i][0] += J[j,i//N,row%N]*h_site*h_neighbor
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017606481481481486}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] += -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004463117283950618}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin

  return(priorities)




#score: {'data2D.txt': -0.3115257716049375}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + 1
      priorities[i][1] = -total_spin - 2
    else:
      priorities[i][0] = -total_spin - 1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004918209876543212}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin + np.sum(J[:,i//N,i//N])

  return(priorities)




#score: {'data2D.txt': 0.0025717592592592593}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = sum([J[k,(i//N)%N,i//N]*h[(i%N + ((i//N-1)%2 - 1)) % N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.004463117283950618}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 2 - 1
      priorities[i][1] -= total_spin * 2 + 1
    else:
      priorities[i][0] -= total_spin * 2 - 1
      priorities[i][1] += total_spin * 2 + 1

  return(priorities)




#score: {'data2D.txt': 0.004463117283950618}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin

  return(priorities)




#score: {'data2D.txt': 0.0005949074074074072}
#island_id: 2
#version_generated: 2
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = sum([J[k,(i//N)%N,i//N]*h[(i%N + ((i//N-1)%2 - 1)) % N][i%N] for k in range(4)])
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities[i][0] = total_spin + sum([J[k, i//N, i//N]*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = -total_spin - sum([J[k, i//N, i//N]*h[site_nbr][k] for k in range(4)])
    else:
      priorities[i][0] = -total_spin + sum([J[k, i//N, i//N]*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = total_spin - sum([J[k, i//N, i//N]*h[site_nbr][k] for k in range(4)])
  return(priorities)




#score: {'data2D.txt': 0.0025717592592592593}
#island_id: 2
#version_generated: 2
#generate time02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = sum([J[k,(i//N)%N,i//N]*h[(i%N + ((i//N-1)%2 - 1)) % N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.15102762345679033}
#island_id: 2
#version_generated: 2
#generate time02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,(i//N)%N,i//N]*h[site_nbr][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([1 if J[k,site_nbr,i//N] > 0 else -1 for k in range(4)])
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum([1 if J[k,site_nbr,i//N] < 0 else -1 for k in range(4)])
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.07865077160493832}
#island_id: 1
#version_generated: 2
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    else:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.0001069444444444444}
#island_id: 2
#version_generated: 2
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004293981481481482}
#island_id: 2
#version_generated: 2
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  # Add interaction with itself
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    priorities[i][0] += J[2,i%N,i//N]*h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2112455246913582}
#island_id: 2
#version_generated: 2
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = np.exp(-2 * sum_neighbor)
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001069444444444444}
#island_id: 2
#version_generated: 2
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in [(k+N-1)%4 for k in [1,3]]:
      sum_neighbor += J[k,i%N,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07958626543209878}
#island_id: 0
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if i > 0 and (i-1)%N != N-1: 
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          if np.random.rand() < 0.5:  
            priorities[i][0] = np.random.choice([-1, 1])
            priorities[i][1] = -priorities[i][0]
          else:  
            priorities[i][0] = -np.random.choice([-1, 1])
            priorities[i][1] = np.random.choice([-1, 1]) * -1
      else: 
        if np.random.rand() < 0.5:  
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
  return(priorities)




#score: {'data2D.txt': 0.07957268518518518}
#island_id: 0
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
      prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
      if i > 0 and prev_spin == -1:
        priorities[i][0] = 1
        priorities[i][1] = -1
      elif i > 0 and prev_spin == 1:
        priorities[i][0] = -1
        priorities[i][1] = 1
      else:
        if np.random.rand() < 0.5:  
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
  return(priorities)




#score: {'data2D.txt': 0.08006558641975309}
#island_id: 0
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if i > 0 and (i-1)%N != N-1: 
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        
        if np.abs(prev_spin) > 0.5:
          priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
          priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
        elif np.random.rand() < 0.5:  
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
      else: 
        if np.random.rand() < 0.5:  
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
  return(priorities)




#score: {'data2D.txt': 0.08005663580246915}
#island_id: 0
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if i > 0 and (i-1)%N != N-1: 
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        if prev_spin == -1 and total_energy < 0:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and total_energy > 0:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
          priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
      else: 
        if total_energy < 0:
          priorities[i][0] = np.random.choice([-1, 1])
          priorities[i][1] = -priorities[i][0]
        else:  
          priorities[i][0] = -np.random.choice([-1, 1])
          priorities[i][1] = np.random.choice([-1, 1]) * -1
  return(priorities)




#score: {'data2D.txt': 0.0024671296296296325}
#island_id: 2
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    sum_neighbor = 0
    for k in range(4):
      if k==2:
        continue
      if J[k,i%N,i//N] > 0:
        sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        sum_neighbor -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012807098765432103}
#island_id: 2
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sign = 1
    else:
      sign = -1
    
    sum_neighbor = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4) if k!=2])
    
    priorities[i][0] = sign*h[site_nbr][i%N] + sum_neighbor
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0013695987654321004}
#island_id: 2
#version_generated: 2
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = 0
    for k in range(4):
      if k==2:
        continue
      if J[k,i%N,i//N] > 0:
        sum_neighbor += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        sum_neighbor -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.626543209876524e-05}
#island_id: 3
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
      + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
      + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
      + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h_site > 0 else total_spin

  return(priorities)




#score: {'data2D.txt': 0.005612191358024692}
#island_id: 3
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])\
      + J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0\
      + J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0\
      + J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[site_nbr][i%N] > 0 else total_spin

  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_sum = np.sum(J[:,i//N,i//N])
    
    priorities[i][0] = total_spin + site_sum
    priorities[i][1] = -total_spin + site_sum
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the interaction with horizontal neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the interaction with vertical neighbors
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

    # If the site has a positive magnetism, assign spins to -1
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.00896033950617284}
#island_id: 3
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    site_sum = h_site * 2
    neighbor_sum = 0
    for j in range(4):
      row = i // N
      col = i % N
      if j == 0:
        row = (row+1)%N
      elif j == 1:
        row = (row-1)%N
      elif j == 2:
        col = (col+1)%N
      else:
        col = (col-1)%N
      h_neighbor = h[row][col]
      if J[j,i//N,row%N] > 0:
        site_sum += h_site * 2*h_neighbor
        neighbor_sum -= h_neighbor
      else:
        site_sum -= h_site * 2*h_neighbor
        neighbor_sum += h_neighbor
    priorities[i][0] = site_sum
    priorities[i][1] = -neighbor_sum
  return(priorities)




#score: {'data2D.txt': -0.007133487654320987}
#island_id: 3
#version_generated: 2
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      row = i // N
      col = i % N
      if j == 0:
        row = (row+1)%N
      elif j == 1:
        row = (row-1)%N
      elif j == 2:
        col = (col+1)%N
      else:
        col = (col-1)%N
      h_neighbor = h[row][col]
      if J[j,i//N,row%N] > 0:
        priorities[i][0] += 1
        if h_site*h_neighbor > 0:
          priorities[i][1] -= 2*h_site*h_neighbor
        else:
          priorities[i][1] += 2*h_site*h_neighbor
      else:
        priorities[i][0] -= 1
        if h_site*h_neighbor > 0:
          priorities[i][1] += 2*h_site*h_neighbor
        else:
          priorities[i][1] -= 2*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': -0.0097554012345679}
#island_id: 3
#version_generated: 2
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_sites = []
    for j in range(4):
      row = i // N
      col = i % N
      if j == 0:
        row = (row+1)%N
      elif j == 1:
        row = (row-1)%N
      elif j == 2:
        col = (col+1)%N
      else:
        col = (col-1)%N
      neighbor_sites.append((row, col))
    for site in neighbor_sites:
      h_neighbor = h[site[0]][site[1]]
      if J[0,i//N,site[0]%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 2*h_site*h_neighbor
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 2*h_site*h_neighbor
  return(priorities)




#score: {'data2D.txt': -0.002000771604938272}
#island_id: 3
#version_generated: 2
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      row = i // N
      col = i % N
      if j == 0:
        row = (row+1)%N
      elif j == 1:
        row = (row-1)%N
      elif j == 2:
        col = (col+1)%N
      else:
        col = (col-1)%N
      h_neighbor = h[row][col]
      J_term = 2*h_site*h_neighbor if J[j,i//N,row%N] > 0 else -2*h_site*h_neighbor
      priorities[i][0] += 1 if J_term > 0 else -1
      priorities[i][1] -= J_term
  return(priorities)




#score: {'data2D.txt': 0.14077515432098783}
#island_id: 1
#version_generated: 2
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,(i+1)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.004335956790123457}
#island_id: 1
#version_generated: 2
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': -0.0027239197530864196}
#island_id: 1
#version_generated: 2
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [-total_spin, total_spin]
    else:
      priorities[i] = [total_spin, -total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0043220679012345685}
#island_id: 3
#version_generated: 2
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    up_left = J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0
    up = J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0
    left = J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    priority_total = total_spin + up_left + up + left
    priorities[i][0] = priority_total if h[site_nbr][i%N] > 0 else -priority_total
  return(priorities)




#score: {'data2D.txt': 0.00376712962962963}
#island_id: 3
#version_generated: 2
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row = i // N
    col = i % N

    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i % N, i // N] * (row > 0) > 0:
      total_spin += sum([J[2, j, i // N] * h[j, col] for j in range(N)])
    elif J[0, i % N, i // N] * (row > 0) < 0:
      total_spin -= sum([J[2, j, i // N] * h[j, col] for j in range(N)])

    if J[1, i % N, i // N] * (col > 0) > 0:
      total_spin += sum([J[0, i % N, k] * h[row, k] for k in range(N)])
    elif J[1, i % N, i // N] * (col > 0) < 0:
      total_spin -= sum([J[0, i % N, k] * h[row, k] for k in range(N)])

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[site_nbr][i%N] > 0 else total_spin

  return(priorities)




#score: {'data2D.txt': 0.005553858024691358}
#island_id: 3
#version_generated: 2
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row = i // N
    col = i % N

    up_left_spin = (row-1)%N*N + (col-1)%N if row > 0 and col > 0 else None
    up_spin = row*N + col if row > 0 else None
    left_spin = (row)%N*N + col-1 if col > 0 else None

    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    up_left_interaction = J[0, i % N, i // N] * (up_left_spin != None)*h[site_nbr][i%N] if up_left_spin is not None else 0
    up_interaction = J[1, i % N, i // N] * (up_spin != None)*h[(row+1)%N][i%N] if up_spin is not None else 0
    left_interaction = J[2, i % N, i // N] * (left_spin != None)*h[row][(col+1)%N] if left_spin is not None else 0

    total_spin += up_left_interaction + up_interaction + left_interaction

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[site_nbr][i%N] > 0 else total_spin

  return(priorities)




#score: {'data2D.txt': 0.007031327160493828}
#island_id: 0
#version_generated: 2
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007031327160493828}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0066578703703703696}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N==nn_site//N and abs(nn_site%N-i%N) == 1:
        nns.append(h_site)
      else:
        nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007031327160493828}
#island_id: 0
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.23835231481481475}
#island_id: 1
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin - magnetism, -total_spin + magnetism]
    else:
      priorities[i] = [-total_spin - magnetism, total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': 0.1137254629629631}
#island_id: 1
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,i//N] > 0:
      total_spin += N
    else:
      total_spin -= N
    
    if J[3,i%N,(i//N)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.16621311728395086}
#island_id: 1
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 3
#version_generated: 2
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 3
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_spin > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.3178427469135794}
#island_id: 3
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000938117283950618}
#island_id: 2
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_knbr][i%N]
      else:
        h_site -= h[site_knbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 2
#version_generated: 2
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.28822515432098716}
#island_id: 3
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate the total spin
  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      h_site = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][0] += h_site
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= h_site
        total_spin[i][1] += 1

  # Calculate the priority based on the total spin and site interaction
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if total_spin[i%N][0] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013194444444444424}
#island_id: 3
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[(j+N-1)%N][i%N] > 0:
        total_spin += J[j,site_nbr,(i//N+N-1)%N]
      else:
        total_spin -= J[j,site_nbr,(i//N+N-1)%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_spin - sum([J[k,site_nbr,(i//N+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018081790123456788}
#island_id: 2
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_knbr][i%N]
      else:
        h_site -= h[site_knbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

    total_spin = 0
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if J[3,i%N,j] > 0:
        total_spin -= 1
      else:
        total_spin += 1

    priorities[i][0] += total_spin * .5
    priorities[i][1] -= total_spin * .5

  return(priorities)




#score: {'data2D.txt': -0.016516203703703707}
#island_id: 2
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr2][i%N]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.014335956790123458}
#island_id: 2
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += h[site_knbr][i%N]
      else:
        total_spin -= h[site_knbr][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.00019089506172839465}
#island_id: 2
#version_generated: 2
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site_knbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.001185648148148148}
#island_id: 2
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site2 = h[site_nbr2][i%N]
      priorities[i][0] += J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] -= J[1,i%N,i//N]*h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]
      priorities[i][0] -= J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] += J[1,i%N,i//N]*h[site_nbr2][i%N]
    site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site3 = h[site_nbr3][i%N]
      priorities[i][0] += J[2,i%N,i//N]*h[site_nbr3][i%N]
      priorities[i][1] -= J[2,i%N,i//N]*h[site_nbr3][i%N]
    else:
      h_site3 = -h[site_nbr3][i%N]
      priorities[i][0] -= J[2,i%N,i//N]*h[site_nbr3][i%N]
      priorities[i][1] += J[2,i%N,i//N]*h[site_nbr3][i%N]
    return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 2
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 2
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 2
#version_generated: 2
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if N % 2 == 1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0], priorities[i][1] = priorities[i][1], -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if N % 2 == 1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0], priorities[i][1] = priorities[i][1], -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.019583796296296297}
#island_id: 3
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,site_nbr,(i//N+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013353395061728396}
#island_id: 3
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2859223765432094}
#island_id: 3
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    # Calculate the priority based on the site interaction and magnetism
    if h_site > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': -0.008968055555555557}
#island_id: 2
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[1,i//N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[1,i//N,i%N]
      priorities[i][1] += 1
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[2,(i+N-1)%N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[2,(i+N-1)%N,i%N]
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.0005220679012345677}
#island_id: 2
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    priorities[i][0] = J[0,i%N,i//N]*h[i//N][i%N] + J[1,i%N,i//N]*(h[site_nbr1][i%N] - h[site_nbr2][i%N])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001350771604938272}
#island_id: 2
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    return(priorities)




#score: {'data2D.txt': 0.011754783950617284}
#island_id: 2
#version_generated: 2
#generate time02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += J[1,i%N,i//N]*h[site_nbr2][i%N]
    else:
      total_spin -= J[1,i%N,i//N]*h[site_nbr2][i%N]
    site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += J[2,i%N,i//N]*h[site_nbr3][i%N]
    else:
      total_spin -= J[2,i%N,i//N]*h[site_nbr3][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.03488657407407408}
#island_id: 0
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    # Improved version: consider both neighbor sites
    for j in range(4): 
      if J[j//2,i//N,site_nbr] > 0:
        total_energy += h[i//N][i%N]
      else:
        total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / 2
    priorities[i][1] = -(h_site + total_energy) if J[3,i//N,site_nbr] > 0 else h_site + total_energy
    
  return(priorities)




#score: {'data2D.txt': 0.04080138888888889}
#island_id: 0
#version_generated: 2
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    # Consider both neighbor sites and the site itself
    for j in range(4): 
      if J[j//2,i//N,site_nbr] > 0:
        total_energy += h[i//N][i%N]
      else:
        total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy)
    priorities[i][1] = -priorities[i][0] if J[3,i//N,site_nbr] > 0 else priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16079891975308666}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0,i//N,i%N]
      priorities[i][1] = -total_spin - J[3,i//N,N-1-(i%N)]
    else:
      priorities[i][0] = -total_spin - J[0,i//N,i%N]
      priorities[i][1] = total_spin + J[3,i//N,N-1-(i%N)]
    
    if i % N > 0 and i < N**2 - N:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      priorities[i][0] += J[1,i//N,N-1-(i%N)] * h[site_nbr][i%N]
      priorities[i][1] -= J[1,i//N,N-1-(i%N)] * h[site_nbr][i%N]
    
    if i % N < N - 1 and i > 0:
      site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
      priorities[i][0] += J[2,i//N,N-1-(i%N)] * h[site_nbr][i%N]
      priorities[i][1] -= J[2,i//N,N-1-(i%N)] * h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if i // N < N - 1:
      priorities[i][0] += J[3,i//N,N-1-(i%N)] * h[site_nbr][i%N]
      priorities[i][1] -= J[3,i//N,N-1-(i%N)] * h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.06838996913580253}
#island_id: 1
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_spin += np.sum(J[:,i//N,i//N]) - np.sum(J[3,:,i//N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.3275378086419744}
#island_id: 2
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    for k in range(4):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin * .5
      priorities[i][1] = -total_spin * .5
    else:
      priorities[i][0] = -total_spin * .5
      priorities[i][1] = total_spin * .5
  return(priorities)




#score: {'data2D.txt': -0.32914891975308547}
#island_id: 2
#version_generated: 2
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    h_site = 0
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if J[3,i%N,j] > 0:
        h_site -= 1
      else:
        h_site += 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin * .5
      priorities[i][1] = -h_site + total_spin * .5
    else:
      priorities[i][0] = -h_site + total_spin * .5
      priorities[i][1] = h_site + total_spin * .5
  
  return(priorities)




#score: {'data2D.txt': 0.000938117283950618}
#island_id: 2
#version_generated: 2
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_knbr = (k + ((i-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       h_site += h[site_knbr][i%N]
     else:
       h_site -= h[site_knbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0017927469135802466}
#island_id: 2
#version_generated: 2
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    priority_total = np.zeros(2)
    for k in range(3):
      neighbor_site = (i + ((k-1)%2 - 1)) % N
      if h[neighbor_site][i%N] > 0:
        priority_total += [1,-1]
      else:
        priority_total -= [1,1]
    
    priorities[i][0] = J[0,i//N,i%N]*h_site + sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[1,i//N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[1,i//N,i%N]
      priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': -0.08969861111111112}
#island_id: 2
#version_generated: 2
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nearest_neighbors = [k for k in range(4) if abs((k-1)%2 - (i//N+((i%N)-1)%2)) <= 1 and k != i//N*(N*N)+i%N]
    for neighbor in nearest_neighbors:
      h_neighbor = h[neighbor // N][neighbor % N]
      if h_neighbor > 0:
        priorities[i][0] += J[0,neighbor//N,neighbor%N]*h_neighbor
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= J[0,neighbor//N,neighbor%N]*h_neighbor
        priorities[i][1] += 1

    if h_site > 0:
      priorities[i][0] += J[1,i//N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[1,i//N,i%N]
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.002933179012345678}
#island_id: 2
#version_generated: 2
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    site_energy = J[0, i//N, i%N]*h_site
    
    for k in range(3):
      neighbor_site = (i + ((k-1)%2 - 1)) % N
      if h[neighbor_site][i%N] > 0:
        site_energy += J[k+1, (i+N-1)%N, i%N]
      else:
        site_energy -= J[k+1, (i+N-1)%N, i%N]
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = site_energy + sum([J[k+1, (i+N-1)%N, i%N] for k in range(3)])
      priorities[i][1] -= 1
    else:
      priorities[i][0] = site_energy - sum([J[k+1, (i+N-1)%N, i%N] for k in range(3)])
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': -0.00857175925925926}
#island_id: 2
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    priority_total = np.zeros(2)
    for k in range(3):
     neighbor_site = (i + ((k-1)%2 - 1)) % N
     if h[neighbor_site][i%N] > 0:
      priority_total += [1,-1]
     else:
      priority_total -= [1,1]
    
    site_spin_sum = sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*h_site + site_spin_sum
      priorities[i][1] -= 1
    else:
      priorities[i][0] = -J[0,i//N,i%N]*h_site - site_spin_sum
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.0017927469135802466}
#island_id: 2
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_total = np.zeros(2)
    for k in range(3):
      neighbor_site = (i + ((k-1)%2 - 1)) % N
      if h[neighbor_site][i%N] > 0:
        priority_total += [1,-1]
      else:
        priority_total -= [1,1]

    J_sum = sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = J[0,i//N,i%N]*h_site + J_sum
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[1,i//N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[1,i//N,i%N]
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.005029166666666667}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
     nn_site = (site_nbr + ((j-1)%2 - 1)) % N
     nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005029166666666667}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sites = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nn_sites.append(J[j, i//N, nn_site])

    total_energy = sum(nn_sites) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005581327160493826}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == site_nbr // N and i%N != nn_site:
        nns.append(J[0, i//N, nn_site])
      elif i//N != site_nbr // N or i%N == nn_site:
        nns.append(J[2-(j+1)%2, i//N, nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.053496141975308636}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum(J[j,i//N,site_nbr] for j in range(3))

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03570293209876543}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    left_up_nbr = ((i+N-1)%N+(i//N-1))
    right_down_nbr = ((i+1)%N+(i//N)%N)
    if i % N > 0: 
      total_energy += J[0,i//N,i%N] * (h[i%N][i%N] - h[site_nbr][i%N])
    if i % N < N-1:
      total_energy += J[1,i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N])
    if i // N > 0: 
      total_energy += J[2,i//N,i%N] * (h[i%N,0] - h[site_nbr][i%N])
    if i // N < N-1:
      total_energy += J[3,i//N,i%N] * (h[i%N,N-1] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008671296296296298}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,1]:
      total_energy += J[k,i//N,i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
      priorities[i][0] = total_energy
      priorities[i][1] = 2*np.random.randint(0,2) - 1 if np.random.rand() < np.exp(total_energy) else -1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,1]:
      total_energy += J[k,i//N,i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
  for i in range(N2):
    if priorities[i][1] > priorities[i][0]:
      priorities[i][0], priorities[i][1] = priorities[i][1], -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11447731481481495}
#island_id: 1
#version_generated: 2
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i//N]
      priorities[i][1] -= h[site_nbr][i//N]
    else:
      priorities[i][0] -= h[site_nbr][i//N]
      priorities[i][1] += h[site_nbr][i//N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11223904320987667}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0005399691358024686}
#island_id: 2
#version_generated: 2
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
     site_knbr = (k + ((i-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       h_site += h[site_knbr][i%N]
     else:
       h_site -= h[site_knbr][i%N]

    site_nbr = (i + ((i-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
     priorities[i][0] = h_site
     priorities[i][1] = -h_site
    else:
     priorities[i][0] = -h_site
     priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -0.0011699074074074081}
#island_id: 2
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      total_spin = 0
      site_knbr = (j + ((i-1)%2 - 1)) % N
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          total_spin += h[site_knbr][i%N]
        else:
          total_spin -= h[site_knbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] = total_spin
        priorities[i][1] = -total_spin
      else:
        priorities[i][0] = -total_spin
        priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.0004038580246913572}
#island_id: 2
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    for k in range(1,3):
      site_knbr = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_knbr][i%N]
      else:
        total_spin -= h[site_knbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.1667831790123459}
#island_id: 0
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.16695416666666685}
#island_id: 0
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.0697760802469136}
#island_id: 0
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin_up = sum([J[j,i//N,i%N] * h[(i % N + ((j-1)%2 - 1)) % N][i%N] for j in range(4)])
    total_spin_down = abs(total_spin_up)

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 5 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -8 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 8 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -8 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 8 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.01748287037037037}
#island_id: 0
#version_generated: 2
#generate time02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.0832449074074074}
#island_id: 0
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 4 + 3.5 * np.sum(J[:,i//N,i%N])
      priorities[i][1] -= 3.5 * (total_spin + np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] -= total_spin * 4 - 3.5 * np.sum(J[:,i//N,i%N])
      priorities[i][1] += 3.5 * (-total_spin + np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': -0.0005220679012345677}
#island_id: 2
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    
    if i < N_half*N:
      # Lower left quadrant
      priorities[i][0] = J[0,i%N,i//N]*h[i//N][i%N] + J[1,i%N,i//N]*(h[site_nbr1][i%N] - h[site_nbr2][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      # Upper right quadrant
      site_nbr3 = (i % N + ((i//N-1)%2)) % N
      site_nbr4 = (i % N + ((i//N+1)%2)) % N
      h_site3 = h[site_nbr3][i%N]
      h_site4 = h[site_nbr4][i%N]
      
      priorities[i][0] = J[0,i%N,i//N]*h[i//N][i%N] + J[1,i%N,i//N]*(h[site_nbr1][i%N] - h[site_nbr2][i%N])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0005220679012345677}
#island_id: 2
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -total_spin]
    else:
      priority_total = [-total_spin, total_spin]
    priorities[i][0] = J[1,i%N,i//N]*(h_site1-h_site2)+J[0,i%N,i//N]*h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11907916666666679}
#island_id: 2
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    priorities[i][0] = J[0,i%N,i//N]*h[i//N][i%N] + J[1,i%N,i//N]*(h[site_nbr1][i%N] - h[site_nbr2][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.0008097222222222219}
#island_id: 3
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if abs(J[k,i%N,i//N]) > 0.5:
        total_spin += J[k,site_nbr,(i//N+N-1)%N] * h[(k+N-1)%N][i%N]
      else:
        total_spin += J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
    if sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.3238751543209868}
#island_id: 3
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if h_site > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr2,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr2,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3244387345679004}
#island_id: 3
#version_generated: 2
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.18346558641975333}
#island_id: 3
#version_generated: 2
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)] ) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.000444598765432099}
#island_id: 2
#version_generated: 2
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,(i+N-1)%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if np.sum(J[i//N-1:i//N+2, i%N-1:i%N+2].flatten()) > 0:
      priorities[i][0] = J_sum + h_site
      priorities[i][1] -= 1
    else:
      priorities[i][0] = J_sum - h_site
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.3244387345679004}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.33581589506172743}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(np.abs(J[:,i//N,i//N])) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(np.abs(J[:,site_nbr,i//N])) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.15127422839506194}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr][j] for j in range(N)) if h[site_nbr][0]>0 else -sum(h[site_nbr][j] for j in range(N))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    if total_spin > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.000460956790123457}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] if j == i%N else h[j][i//N] for j in range(N)])
    
    priorities[i][0] = -total_spin + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) if total_spin > 0 else -(-total_spin) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.001416820987654321}
#island_id: 3
#version_generated: 2
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate the total spin
  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      h_site = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][0] += h_site
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= h_site
        total_spin[i][1] += 1
  
  # Calculate the priority based on the site interaction and magnetism
  for i in range(N**2):
    if total_spin[(i//N)%N][0] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,(i//N+N-1)%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,(i//N+N-1)%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return priorities




#score: {'data2D.txt': 0.013137808641975309}
#island_id: 1
#version_generated: 2
#generate time02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j in range(N):
      if J[3,i%N,j] > 0:
        for k in range(4):
          site_nbrs[k] = (i % N + ((j-1)%2 - 1)) % N
        total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
        if J[3,i%N,j] > 0:
          priorities[i][0] += total_spin
          priorities[i][1] -= total_spin
        else:
          priorities[i][0] -= total_spin
          priorities[i][1] += total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.16314830246913603}
#island_id: 1
#version_generated: 2
#generate time02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0009183641975308638}
#island_id: 3
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate the total spin for each site
  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      h_site = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][0] += h_site
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= h_site
        total_spin[i][1] += 1
  
  # Calculate the priority based on the total spin and site interaction
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if total_spin[i%N][0] > 0:
      priorities[i][0] += sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
    else:
      priorities[i][0] -= sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00041126543209876504}
#island_id: 3
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.01125756172839506}
#island_id: 3
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (h_site if J[0,i//N,i//N]>0 else -h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum([-J[k,site_nbr,(i//N+N-1)%N] for k in range(3)]) - (h_site if J[0,site_nbr,(i//N+N-1)%N]>0 else -h_site)
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -5.540123456790092e-05}
#island_id: 3
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros((N, 2))

  # Calculate the site interaction and total spin
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i//N][0] += h_site
      total_spin[i//N][1] -= 1
    else:
      total_spin[i//N][0] -= h_site
      total_spin[i//N][1] += 1

  # Calculate the priority based on the site interaction and total spin
  for i in range(N**2):
    if total_spin[i//N][0] > 0:
      priorities[i][0] = sum([J[k,site_nbr,(i//N+N-1)%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,site_nbr,(i//N+N-1)%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1648791666666669}
#island_id: 1
#version_generated: 2
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr_sum = 0
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
        site_nbr_sum -= h[(i+k-3)%N][i%N]
      else:
        total_spin -= 1
        site_nbr_sum += h[(i+k-3)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + site_nbr_sum, -total_spin - site_nbr_sum]
    else:
      priorities[i] = [-total_spin - site_nbr_sum, total_spin + site_nbr_sum]
  
  return(priorities)




#score: {'data2D.txt': 0.1156964506172841}
#island_id: 1
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
  
  return(priorities)




#score: {'data2D.txt': -0.0010442901234567906}
#island_id: 3
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        if J[k][i*N+j][0] > 0:
          total_spin[i*N+j][0] -= J[k][i*N+j][0]*h[site_nbr][j]
        else:
          total_spin[i*N+j][0] += J[k][i*N+j][0]*h[site_nbr][j]
      priorities = np.zeros((N*N,2))
      for i in range(N**2):
        if total_spin[i][0] > 0:
          priorities[i][1] -= 1
          priorities[i][0] = -priorities[i][1]
        else:
          priorities[i][1] += 1
          priorities[i][0] = -priorities[i][1]
      return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 3
#version_generated: 2
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_nbr2 = (i + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
     else:
       h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009531944444444445}
#island_id: 3
#version_generated: 2
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 3
#version_generated: 2
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.04938503086419754}
#island_id: 1
#version_generated: 2
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin + np.sum(h[i//N])
    priorities[i][1] = -total_spin + np.sum(-h[i//N])
  
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Consider nearest neighbors and magnetism
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add interaction with opposite sites
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    # Calculate priority based on total spin
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.11174706790123468}
#island_id: 1
#version_generated: 2
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
      
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return priorities




#score: {'data2D.txt': 0.1156964506172841}
#island_id: 1
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # Calculate the magnetism term
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': 0.0006970679012345683}
#island_id: 3
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:,site_nbr,(i//N+N-1)%N]) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(J[:,site_nbr,(i//N+N-1)%N]) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3244387345679004}
#island_id: 3
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3244387345679004}
#island_id: 3
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0017032407407407404}
#island_id: 3
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(np.abs(J[:,site_nbr,(i//N+N-1)%N])) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum(np.abs(J[:,site_nbr,(i//N+N-1)%N])) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.059580709876543236}
#island_id: 2
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    if J[1,i%N,i//N] > 0:
      total_spin += h[(site_nbr + ((i-1)%2 - 1)) % N][i%N]
    else:
      total_spin -= h[(site_nbr + ((i-1)%2 - 1)) % N][i%N]

    if J[2,i%N,i//N] > 0:
      total_spin += h[(site_nbr + 1) % N][i%N]
    else:
      total_spin -= h[(site_nbr + 1) % N][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0018680555555555566}
#island_id: 2
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = 0
    total_spin_down = 0

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin_up += h[i//N][i%N]
        else:
          total_spin_down += -h[i//N][i%N]
      else:
        if h[i//N][i%N] > 0:
          total_spin_up -= h[site_nbr][i%N]
        else:
          total_spin_down -= -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin_up
      priorities[i][1] = -total_spin_down
    else:
      priorities[i][0] = -total_spin_up
      priorities[i][1] = total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.0031304012345679012}
#island_id: 2
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    for j in range(3):
      site_knbr = (j + ((i-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_knbr][i%N]
      else:
        total_spin -= h[site_knbr][i%N]
    priorities[i][0] += total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3335788580246904}
#island_id: 3
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = 1 + (np.abs(h_site) > 0)
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = 0 if np.abs(h_site) > 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.19051774691357973}
#island_id: 3
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][k] for j,k in zip(range(N),range(N))])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[j][k] for j,k in zip(range(N),range(N))])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.3244387345679004}
#island_id: 3
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) + sum([1 if ((k-1) % 2) == (i // N) % 2 else -1 for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)]) - sum([1 if ((k-1) % 2) == (i // N) % 2 else -1 for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00017731481481481827}
#island_id: 3
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][k] for j,k in zip(range(N),range(N))])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[j][k] for j,k in zip(range(N),range(N))])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.19051774691357973}
#island_id: 3
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[j][k] for j,k in zip(range(N),range(N))])
    interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + interactions - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - interactions + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.13087546296296312}
#island_id: 3
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,site_nbr] if k==0 else J[k,site_nbr,i//N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(2)]) + sum([J[k,i//N,site_nbr] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(2)]) - sum([J[k,i//N,site_nbr] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009442746913580248}
#island_id: 0
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    if np.abs(energy_diff) > 1:
      priorities[i][0] += (np.sign(energy_diff) * (abs(energy_diff) - 1)) / (np.abs(energy_diff) + 1)
      priorities[i][1] -= abs(energy_diff) - 1
    else:
      priorities[i][0] = np.tanh(total_energy / (np.abs(total_energy) + 1))
      priorities[i][1] = -2 * np.tanh(total_energy / (np.abs(total_energy) + 1))
  return(priorities)




#score: {'data2D.txt': -0.0036637345679012344}
#island_id: 0
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = 4*nn_energy
    if nn_energy > 0:
      priorities[i][0] += energy_diff / (abs(energy_diff) + 1)
      priorities[i][1] -= abs(energy_diff) - 1
    else:
      priorities[i][0] += np.tanh(2*h[site_nbr][i%N]) / (abs(np.tanh(2*h[site_nbr][i%N])) + 1)
      priorities[i][1] -= 4 * np.tanh(2*h[site_nbr][i%N])
  return(priorities)




#score: {'data2D.txt': 0.03631126543209876}
#island_id: 0
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    priorities[i][0] += np.tanh(energy_diff / (abs(energy_diff) + 1e-10)) # added a small value to avoid division by zero
    priorities[i][1] -= 2 * np.tanh(energy_diff / (abs(energy_diff) + 1e-10))
  return(priorities)




#score: {'data2D.txt': 0.0035266975308641977}
#island_id: 0
#version_generated: 2
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    if energy_diff > 0:
      priorities[i][0] += energy_diff / (abs(energy_diff) + 1)
      priorities[i][1] -= abs(energy_diff) - 1
    else:
      if J[0,i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += 2
      elif J[0,i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= 2
      if J[1,i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += 2
      elif J[1,i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= 2
      if J[2,i//N,i%N] * h[(i+N)%N][i%N] > 0:
        priorities[i][0] += 2
      elif J[2,i//N,i%N] * h[(i+N)%N][i%N] < 0:
        priorities[i][0] -= 2
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2091026234567903}
#island_id: 3
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    # Calculate the priority based on the site interaction and magnetism
    if h_site > 0:
      priorities[i][0] += 2
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 2

  return(priorities)




#score: {'data2D.txt': 0.27498904320987616}
#island_id: 3
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    # Calculate the priority based on the site interaction and magnetism
    if h_site > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
    else:
      priorities[i][0] += sum([abs(J[k,site_nbr,(i//N+N-1)%N]) for k in range(3)])
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.010288117283950616}
#island_id: 3
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,site//N] > 0:
        total_spin += J[k,i//N,site//N]
      else:
        total_spin -= J[k,i//N,site//N]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.008279783950617285}
#island_id: 2
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nearest_neighbors = [k for k in range(4) if abs((k-1)%2 - (i//N+((i%N)-1)%2)) <= 1 and k != i//N*(N*N)+i%N]
    for neighbor in nearest_neighbors:
      h_neighbor = J[0,neighbor//N,neighbor%N] * h[neighbor // N][neighbor % N]
      if h_neighbor > 0:
        priorities[i][0] += h_neighbor
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_neighbor
        priorities[i][1] += 1

    site_interaction = J[1,i//N,i%N] * h_site
    if site_interaction > 0:
      priorities[i][0] += site_interaction
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= site_interaction
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.011432253086419838}
#island_id: 2
#version_generated: 2
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[3,i//N,i%N]
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= J[3,i//N,i%N]
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy)
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy)
    else:
      total_spin = sum(h[j][i%N] for j in range(N))
      if total_spin > 0:
        priorities[i][0] = -1
        priorities[i][1] = 1 + np.sum([J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = 1
        priorities[i][1] = 1 - np.sum([J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)])

  # Calculate the priority based on total spin and magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return priorities




#score: {'data2D.txt': 0.006590277777777777}
#island_id: 0
#version_generated: 2
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[j][i%N] for j in range(N))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += np.sum([J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] += 1
      priorities[i][1] -= np.sum([J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)])
  return priorities




#score: {'data2D.txt': 0.0006970679012345683}
#island_id: 3
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:,site_nbr,(i//N+N-1)%N]) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(J[:,site_nbr,(i//N+N-1)%N]) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006970679012345683}
#island_id: 3
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:,site_nbr,(i//N+N-1)%N]) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(J[:,site_nbr,(i//N+N-1)%N]) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -3.0401234567901448e-05}
#island_id: 3
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(J[:,site_nbr,(i//N+N-1)%N]) - total_spin
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= np.sum(J[:,site_nbr,(i//N+N-1)%N]) + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = np.sum(J[:,site_nbr1,(i//N)%N]) + np.sum(J[:,site_nbr2,(i//N)%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - 2*np.sum(J[:,site_nbr1,(i//N)%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + 2*np.sum(J[:,site_nbr2,(i//N)%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum(J[j,i//N,(i%N + ((j+1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j+1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j+1)%2 - 1)) % N] for j in range(4))
    total_spin_right = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    
    priorities[i][0] = total_spin_left - total_spin_right
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0027952160493827163}
#island_id: 0
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.020115586419753088}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = -2 * (total_spin_up - 2.5) ** 2
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) ** 2
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) ** 2
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) ** 2
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.1710476851851854}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.05248256172839511}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin_up = sum([J[k,i//N,j%N] * h[site][j%N] for k, site in enumerate(site_nbrs)])
      total_spin_down = sum([abs(J[k,i//N,j%N]) * h[site][j%N] for k, site in enumerate(site_nbrs)])

      if total_spin_up > 0 and total_spin_down == 0:
        priorities[i*N+j][0] += 2 * (total_spin_up - 2.5) * 3.5
        priorities[i*N+j][1] -= 4 * total_spin_up
      elif total_spin_down > 0:
        priorities[i*N+j][0] -= (total_spin_down - 2.5) * 3.5
        priorities[i*N+j][1] += 4 * total_spin_down
      else:
        if h[i][j] > 0:
          priorities[i*N+j][0] += (total_spin_up - 2.5) * 3.5
          priorities[i*N+j][1] -= 4 * total_spin_up
        else:
          priorities[i*N+j][0] -= -(total_spin_down - 2.5) * 3.5
          priorities[i*N+j][1] += 4 * total_spin_down

  return priorities




#score: {'data2D.txt': -0.03993935185185185}
#island_id: 0
#version_generated: 2
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -4 * total_spin_up
      priorities[i][1] = 2 * (total_spin_down + total_spin_up)
    else:
      priorities[i][0] = 4 * total_spin_down
      priorities[i][1] = -2 * (total_spin_down + total_spin_up)

  return(priorities)




#score: {'data2D.txt': 0.23635663580246905}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  return(priorities)




#score: {'data2D.txt': 0.19750169753086433}
#island_id: 0
#version_generated: 2
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs[0]][i%N])

  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the interaction with the four nearest neighbors
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.005940277777777778}
#island_id: 2
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = J[i*N:(i+1)*N,j] + h[site_nbr][j]
      if np.sum(total_spin) > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.0007424382716049381}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]

    priorities[i][0] = np.sum(np.abs(J[:,i//N,i//N])) + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.008656944444444443}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    magnetism = (h[site_nbr][i%N] + h[i//N][i%N]) / 2.0
    priorities[i][1] = -priorities[i][0]
    priority_sum = np.sum(np.abs(J[:,i//N,i//N]))
    if J[3,i//N,site_nbr] > 0:
      priority_sum += h[i//N][i%N]
    else:
      priority_sum -= h[i//N][i%N]

    priorities[i][0] = magnetism + nn_energy + (J[3,i//N,site_nbr] - J[1,i//N,site_nbr]) * np.tanh((priority_sum)/2.0)
  return(priorities)




#score: {'data2D.txt': -0.09062824074074077}
#island_id: 0
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_energy = 0
    for k in [(1,i//N,site_nbr),(2,i//N,site_nbr)]:
      if J[k[0],k[1],k[2]] > 0:
        nn_energy += J[k[0],k[1],k[2]] * h[k[1]][k[2]]
      else:
        nn_energy -= J[k[0],k[1],k[2]] * h[k[1]][k[2]]
    
    priorities[i][1] = -priorities[i][0]
    priority_sum = np.sum(np.abs(J[:,i//N,i//N]))
    if J[3,i//N,site_nbr] > 0:
      priority_sum += h[i//N][i%N]
    else:
      priority_sum -= h[i//N][i%N]

    priorities[i][0] = h_site + nn_energy + (J[3,i//N,site_nbr] - J[1,i//N,site_nbr]) * np.tanh((priority_sum)/2.0)
  return(priorities)




#score: {'data2D.txt': 0.1504016975308644}
#island_id: 0
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[k,i%N,i//N]*h[nn_site][j] for k,(nn_site,j) in enumerate(zip(range(4),[(site_nbr + ((i//N-1)%2 - 1)) % N, (site_nbr + ((i//N)%2 - 1)) % N, (site_nbr + ((i//N+1)%N)) % N, (site_nbr + (((i//N)-1)%2 - 1)) % N]))])
    J_down = -J_up

    if h[i//N][i%N] > 0:
      priorities[i][0] = J_up
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J_up
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005026234567901235}
#island_id: 0
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = []
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      elif j == 1:
        nn_site = (site_nbr + ((i//N)%2 - 1)) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N+1)%N)) % N
      else:
        nn_site = (site_nbr + (((i//N)-1)%2 - 1)) % N

      nn_sites.append(h[nn_site][i%N])

    if h_site > 0:
      J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) + J[1,i//N,i//N]
      J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) - J[1,i//N,i//N]
    else:
      J_up = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) + J[1,i//N,i//N]
      J_down = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) - J[1,i//N,i//N]

    priorities[i][0] = (J_up - J_down)
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.012395524691358023}
#island_id: 0
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sites = []
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      elif j == 1:
        nn_site = (site_nbr + ((i//N)%2 - 1)) % N
      elif j == 2:
        nn_site = (site_nbr + ((i//N+1)%N)) % N
      else:
        nn_site = (site_nbr + (((i//N)-1)%2 - 1)) % N

      nn_sites.append(h[nn_site][i%N])

    if h[i//N][i%N] > 0:
      J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) + J[1,i//N,i//N]
      J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) - J[1,i//N,i//N]
    else:
      J_up = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) + J[1,i//N,i//N]
      J_down = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nn_sites)]) - J[1,i//N,i//N]

    if h_site > 0:
      priorities[i][0] = (J_up - J_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J_up - J_down)
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00125570987654321}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # Calculate the priority based on the total spin
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # Calculate the priority based on the site interactions
    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site][j]
        priorities[i][1] -= h[site][j]
      else:
        priorities[i][0] -= h[site][j]
        priorities[i][1] += h[site][j]
    
    return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N)%2 - 1)) % N
    
    total_spin_row = h[site_nbr_row][i%N]
    total_spin_col = h[i//N][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin_row += 1
        total_spin_col -= 1
      else:
        total_spin_row -= 1
        total_spin_col += 1
    
    priorities[i][0] = total_spin_row + total_spin_col
    priorities[i][1] = -total_spin_row + total_spin_col
    
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i] = [total_spin + magnetism, -total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': 0.15419861111111133}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[3,i%N,site_nbr]
      priorities[i][1] -= J[3,i%N,site_nbr]
    else:
      priorities[i][0] -= J[3,i%N,site_nbr]
      priorities[i][1] += J[3,i%N,site_nbr]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[1,i%N,site_nbr]
      priorities[i][1] -= J[1,i%N,site_nbr]
    else:
      priorities[i][0] -= J[1,i%N,site_nbr]
      priorities[i][1] += J[1,i%N,site_nbr]

  return(priorities)




#score: {'data2D.txt': 0.013532561728395063}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.013532561728395063}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': -0.000616820987654321}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in [-1, 1]:
      if (site_nbr+k) % N >= 0 and (site_nbr+k) % N < N:
        total_energy += J[k,(i//N)%N,(i%N)%N] * h[(site_nbr+k)//N][(site_nbr+k)%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.01361064814814815}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in [0,1]:
      if i+k < N*N:
        total_energy += J[k,i//N,i%N] * h[(i+k)%N//N][(i+k)%N%N]
    total_energy += h[site_nbr][i%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.07844490740740741}
#island_id: 0
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = 0
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]
      total_priority = -prev_spin
      if np.random.rand() < 0.5:  # assign random spin
        if np.random.rand() < 0.5:  # choose direction
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:  # flip the previous spin
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': 0.07843040123456789}
#island_id: 0
#version_generated: 2
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = 0
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]
      total_priority = -prev_spin
      if total_energy == 0 and np.random.rand() < 0.5:  # assign random spin
        if np.random.rand() < 0.5:  # choose direction
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      elif prev_spin == -1 and np.random.rand() < 0.5:  # flip the previous spin
        priorities[i][0] = 1
        priorities[i][1] = -1
      elif prev_spin == 1 and np.random.rand() < 0.5:
        priorities[i][0] = -1
        priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': 0.07917854938271604}
#island_id: 0
#version_generated: 2
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = 0
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]
      total_priority = -prev_spin
      if np.random.rand() < 0.5:  # assign random spin
        if np.random.rand() < 0.5:  # choose direction
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:  # flip the previous spin
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
      if total_priority > 0:
        if priorities[i][0] == -1:
          priorities[i][1] += 1
        else:
          priorities[i][0] -= 1
      elif total_priority < 0:
        if priorities[i][0] == 1:
          priorities[i][0] += 1
        else:
          priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.799382716049405e-05}
#island_id: 3
#version_generated: 2
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.03160632716049383}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      neighbor = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += h[neighbor][i%N]
      else:
        total_spin -= h[neighbor][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Initialize total_spin based on magnetism at the site
    total_spin = h[site_nbr][i%N]
    
    # Calculate total_spin based on interactions with nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Update priorities based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return priorities




#score: {'data2D.txt': 0.08640601851851858}
#island_id: 1
#version_generated: 2
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_row = i // N
    site_nbr_col = i % N
    if (site_nbr_row + site_nbr_col) % 2 == 0:
      if h[site_nbr][i%N] > 0:
        priorities[i] = [total_spin, -total_spin]
      else:
        priorities[i] = [-total_spin, total_spin]
    else:
      if h[site_nbr_row][i%N] > 0:
        priorities[i] = [total_spin, -total_spin]
      else:
        priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0014575617283950615}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i] = [total_spin+J[3,i%N,j], total_spin-J[3,i%N,j]]
      else:
        priorities[i] = [total_spin-J[3,i%N,j], total_spin+J[3,i%N,j]]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + h[site_nbr][i%N]) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin + h[site_nbr][i%N]) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.005734413580246914}
#island_id: 2
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      term2 = total_spin[i][0]
    else:
      term1 = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      term2 = -total_spin[i][0]

    priorities[i][0] = h[site_nbr][i%N] + term1
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 2
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006797839506172837}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = (J[0,i//N,site_nbr] + J[1,i//N,site_nbr]) * h[i//N][site_nbr]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += J[3,i//N,site_nbr]
    else:
      nn_energy -= J[3,i//N,site_nbr]

    priorities[i][0] = -abs(h[site_nbr][i%N]) + nn_energy
    priorities[i][1] = abs(h[site_nbr][i%N]) - nn_energy
  return(priorities)




#score: {'data2D.txt': -0.003161265432098766}
#island_id: 0
#version_generated: 2
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for d in [(0,1), (-1,1)]:
      if (d[0] == 0 and i%N+d[1] < N) or (d[0] == 1 and i//N+d[1]%N < N):
        nn_energy += J[d[0],i//N,d[1]]
    priorities[i][0] = h[site_nbr][i%N] + nn_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16444614197530888}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = i % N
    site_nbr_col = (i // N) % N
    
    for k in range(2):
      if J[k,i%N,i//N] > 0:
        if k == 0:
          priorities[i][0] += h[site_nbr_row,(i+N)%N]
          priorities[i][1] -= h[site_nbr_row,(i+N)%N]
        else:
          priorities[i][0] += h[site_nbr_col,i//N]
          priorities[i][1] -= h[site_nbr_col,i//N]
      else:
        if k == 0:
          priorities[i][0] -= h[site_nbr_row,(i+N)%N]
          priorities[i][1] += h[site_nbr_row,(i+N)%N]
        else:
          priorities[i][0] -= h[site_nbr_col,i//N]
          priorities[i][1] += h[site_nbr_col,i//N]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin at this site
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Assign priorities based on the total spin and magnetism at this site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.06267546296296299}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0, i%N, i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1, i//N, i%N] > 0:
      priorities[i][0] += h[site_nbr2][i//N]
      priorities[i][1] -= h[site_nbr2][i//N]
    else:
      priorities[i][0] -= h[site_nbr2][i//N]
      priorities[i][1] += h[site_nbr2][i//N]
    
    if J[3, i%N, i//N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.0021924382716049383}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_row][i%N]
        priorities[i][1] -= h[site_nbr_row][i%N]
      else:
        priorities[i][0] -= h[site_nbr_row][i%N]
        priorities[i][1] += h[site_nbr_row][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16142299382716074}
#island_id: 1
#version_generated: 2
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i-1)%N if i % N != 0 else (i+1)%N, (i//N-1)%N if i % N != N else (i//N + 1)]
    for j in range(2):
      if J[3,i%N,site_nbrs[j]] > 0:
        priorities[i][0] += h[site_nbrs[j]][i%N]
        priorities[i][1] -= h[site_nbrs[j]][i%N]
      else:
        priorities[i][0] -= h[site_nbrs[j]][i%N]
        priorities[i][1] += h[site_nbrs[j]][i%N]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,site_nbr] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.008601697530864198}
#island_id: 1
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    neighbor_spin = 0
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        neighbor_spin += h[site_nbr][j]
      else:
        neighbor_spin -= h[site_nbr][j]
    
    priorities[i][0] = total_spin + neighbor_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.06122700617283956}
#island_id: 1
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,(i-1)%N//N+(i+1)%N//N, i%N] > 0:
      total_spin += 2
    elif J[1,(i-1)%N//N+(i+1)%N//N, i%N] < 0:
      total_spin -= 2
    
    if J[2,i//N,N-1-i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,(i-1)%N//N+(i+1)%N//N, i%N] > 0:
      total_spin += 2
    elif J[3,(i-1)%N//N+(i+1)%N//N, i%N] < 0:
      total_spin -= 2
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.1639865740740743}
#island_id: 1
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[1,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[2,(i+1)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[3,i%N,(i+N-1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.03866651234567904}
#island_id: 1
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 2
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 2
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 2
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08330416666666673}
#island_id: 2
#version_generated: 2
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  # add more priority based on the interactions with neighbor sites
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0027952160493827163}
#island_id: 0
#version_generated: 2
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0027952160493827163}
#island_id: 0
#version_generated: 2
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(np.square(total_spin))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(np.square(total_spin))
      priorities[i][1] = priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0010899691358024694}
#island_id: 0
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = (J[0,i//N,site_nbr] + J[1,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      total_energy += J[2,i//N,site_nbr]
    else:
      total_energy -= J[2,i//N,site_nbr]

    priorities[i][0] = total_energy + nn_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00765354938271605}
#island_id: 0
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = 0
    for j in [(i+1)%N, (i+N-1)%N, (i-1)%N, (i-1)//N*N + (i+1)%N]:
      if i//N == j//N and abs(j-i) == 1:
        nn_energy += J[0,i//N,j%N] * h[j//N][j%N]
    priorities[i][0] = total_energy + nn_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006286574074074073}
#island_id: 0
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      total_energy += J[3,i//N,site_nbr]
    else:
      total_energy -= J[3,i//N,site_nbr]

    priorities[i][0] = total_energy + nn_energy
    priorities[i][1] = -priorities[i][0]
    if i % (2*N) == 0:
      row = i // N
      col = i % N
      site_nbr_row = row
      site_nbr_col = col
      while True:
        total_energy_row = h[site_nbr_row][col]
        nn_energy_row = (J[1,col,site_nbr_row] + J[2,col,site_nbr_row]) * h[row][col]
        if J[3,col,site_nbr_row] > 0:
          total_energy_row += J[3,col,site_nbr_row]
        else:
          total_energy_row -= J[3,col,site_nbr_row]

        priorities[i][0] = min(priorities[i][0], total_energy_row + nn_energy_row)
        priorities[i][1] = -priorities[i][0]

        site_nbr_row = (site_nbr_row + 1) % N
        if row == site_nbr_row:
          break

  return(priorities)




#score: {'data2D.txt': 0.09617361111111121}
#island_id: 0
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = (J[0,i//N,site_nbr] + J[3,i//N,site_nbr]) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      priorities[i][0] += 2*h[i//N][i%N] - nn_energy
    else:
      priorities[i][0] -= 2*h[i//N][i%N] + nn_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.27832638888888905}
#island_id: 1
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = h[i//N][i%N]
    neighbor_spin = 0
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        neighbor_spin += 1
      else:
        neighbor_spin -= 1
    priorities[i][0] = total_spin + neighbor_spin
    priorities[i][1] = -total_spin - neighbor_spin
  return(priorities)




#score: {'data2D.txt': 0.15683503086419776}
#island_id: 1
#version_generated: 2
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((2-1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((1-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((0-1)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.0008970679012345681}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(4):
      if h[site_nbr][j] > 0:
        priorities[i][0] += J[j,i%N,i//N]
        priorities[i][1] -= J[j,i%N,i//N]
      else:
        priorities[i][0] -= J[j,i%N,i//N]
        priorities[i][1] += J[j,i%N,i//N]
  return(priorities)




#score: {'data2D.txt': 0.000768672839506173}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy + sum([2*J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr][k]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_energy - sum([2*J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr][k]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 4.799382716049405e-05}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + 4*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - 4*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.008833487654320987}
#island_id: 2
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 1
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 1
    
    priorities[i][0] = h[site_nbr][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 2
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016035493827160497}
#island_id: 2
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
    else:
      term1 = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -term1

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for j in range(4):
      energy = h[site_nbr][j] * J[j,i%N,i//N]
      if energy > 0:
        priorities[i][0] += energy
        priorities[i][1] -= energy
      else:
        priorities[i][0] -= energy
        priorities[i][1] += energy
    return(priorities)




#score: {'data2D.txt': -0.016002314814814813}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[0,i//N,i%N] if j == 0 else J[1,i//N,i%N] if j == 1 else J[2,i//N,i%N] if j == 2 else J[3,i//N,i%N] for j in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  return(priorities)




#score: {'data2D.txt': -0.0008970679012345681}
#island_id: 3
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j] > 0:
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.001350462962962963}
#island_id: 3
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  
  # Take advantage of the Ising model's symmetry
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.3274279320987645}
#island_id: 3
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin + sum([abs(J[j,i%N,int(i/N)]) for j in range(4) if j!=2])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([abs(J[j,i%N,int(i/N)]) for j in range(4) if j!=2])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0436155864197531}
#island_id: 2
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + term1 - 0.5 * sum(h[j][i%N] for j in range(N))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0020591049382716058}
#island_id: 2
#version_generated: 2
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][j] for k in range(4) for j in [(k+N-1)%N, i%N]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.031011882716049384}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
     if J[k,i%N,i//N] > 0:
      total_spin += 1
     else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
     priorities[i] = [total_spin, -total_spin]
    else:
     priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
     else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
     site_nbr = (i % N + ((j-1)%2 - 1)) % N
     if J[3,i%N,j] > 0:
      priorities[i][0] += h[site_nbr][j]
      priorities[i][1] -= h[site_nbr][j]
     else:
      priorities[i][0] -= h[site_nbr][j]
      priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0005516975308641968}
#island_id: 1
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin -= J[3,i%N,i//N]
    else:
      total_spin += J[3,i%N,i//N]
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin -= h[site_nbr][i%N]
      else:
        total_spin += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0033560185185185186}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N]
      elif k == 1:
        nn_energy = J[1,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N]
      elif k == 2:
        nn_energy = J[2,i//N,(i%N)] * h[site_nbr][i%N]
      else:
        nn_energy = J[3,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N]
      total_energy += nn_energy
    for k in range(4): 
      if k == 0:
        nn_energy = J[0,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N]
      elif k == 1:
        nn_energy = J[1,i//N,(i%N)] * h[site_nbr][i%N]
      elif k == 2:
        nn_energy = J[2,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N]
      else:
        nn_energy = J[3,i//N,(i%N-1)%N] * h[site_nbr][(i%N-1)%N]
      total_energy += nn_energy
    priorities[i][0] += total_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= sum(J[k,i//N,(i%N+N)%N] for k in range(4))
    else:
      priorities[i][1] += sum(J[k,i//N,(i%N+N)%N] for k in range(4))
  return(priorities)




#score: {'data2D.txt': -0.02526651234567901}
#island_id: 0
#version_generated: 2
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_sum = sum(J[k,i//N,(i%N+k-1)%N] * h[(i%N+k-1)%N,N-1] for k in range(4))
    priorities[i][0] += total_energy + nn_sum
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= sum(J[k,i//N,(i%N+k-1)%N] for k in range(4)) - 2 * J[0,i//N,(i%N+N)%N]
    else:
      priorities[i][1] += sum(J[k,i//N,(i%N+k-1)%N] for k in range(4)) + 2 * J[0,i//N,(i%N+N)%N]
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priority_total = [total_spin, -total_spin]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priority_total[0] += h[site_nbr][j]
        priority_total[1] -= h[site_nbr][j]
      else:
        priority_total[0] -= h[site_nbr][j]
        priority_total[1] += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [priority_total[0], -priority_total[0]]
    else:
      priorities[i] = [-priority_total[0], priority_total[0]]
  
  return(priorities)




#score: {'data2D.txt': 0.0015646604938271609}
#island_id: 1
#version_generated: 2
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    elif J[0,i%N,i//N] < 0:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    elif J[1,i%N,i//N] < 0:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    elif J[2,i%N,i//N] < 0:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    elif J[3,i%N,i//N] < 0:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.22955046296296294}
#island_id: 0
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) - (total_spin))
    else:
      priorities[i][0] -= np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) + (total_spin))

  return(priorities)




#score: {'data2D.txt': 0.21245293209876553}
#island_id: 0
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
  return(priorities)




#score: {'data2D.txt': 0.23635663580246905}
#island_id: 0
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  return(priorities)




#score: {'data2D.txt': 0.23635663580246905}
#island_id: 0
#version_generated: 2
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs)

  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.1155498456790125}
#island_id: 1
#version_generated: 2
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.05548935185185192}
#island_id: 1
#version_generated: 2
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.0004902777777777787}
#island_id: 1
#version_generated: 2
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       total_spin += h[site_nbr][i%N]
     else:
       total_spin -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       priorities[i][0] += h[site_nbr][i%N]
       priorities[i][1] -= h[site_nbr][i%N]
     else:
       priorities[i][0] -= h[site_nbr][i%N]
       priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
     site_nbr = (i % N + ((j-1)%2 - 1)) % N
     if J[3,i%N,j] > 0:
       priorities[i][0] += h[site_nbr][j]
       priorities[i][1] -= h[site_nbr][j]
     else:
       priorities[i][0] -= h[site_nbr][j]
       priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the energy contribution from neighboring sites
    neighbor_energy = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        neighbor_energy += 1
      else:
        neighbor_energy -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + neighbor_energy, -total_spin - neighbor_energy]
    else:
      priorities[i] = [-total_spin - neighbor_energy, total_spin + neighbor_energy]
  
  return(priorities)




#score: {'data2D.txt': -0.0063362654320987645}
#island_id: 0
#version_generated: 2
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(3))
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += np.sum(h) + nn_energy
      priorities[i][1] -= 2 * (np.count_nonzero(h) - 1)
    else:
      priorities[i][0] -= np.sum(h) - nn_energy
      priorities[i][1] += 2 * (np.count_nonzero(h) - 1)
  return(priorities)




#score: {'data2D.txt': -0.008167129629629632}
#island_id: 0
#version_generated: 2
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= sum([abs(J[k,i//N,i%N]) for k in range(4)])
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      priorities[i][1] += sum([abs(J[k,i//N,i%N]) for k in range(4)])
  return(priorities)




#score: {'data2D.txt': 0.1138220679012347}
#island_id: 1
#version_generated: 2
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr_row][j]
        priorities[i][0] += h[site_nbr_row][j]
        priorities[i][1] -= h[site_nbr_row][j]
      else:
        total_spin -= h[site_nbr_row][j]
        priorities[i][0] -= h[site_nbr_row][j]
        priorities[i][1] += h[site_nbr_row][j]
  
  return(priorities)




#score: {'data2D.txt': 0.1164325617283952}
#island_id: 1
#version_generated: 2
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 2
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': 0.10521250000000013}
#island_id: 1
#version_generated: 2
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - (h[site_nbr][i%N] + sum(J[k,i//N,i//N] for k in range(4)))
      priorities[i][1] = -(total_spin - (h[site_nbr][i%N] + sum(J[k,i//N,i//N] for k in range(4))))
    else:
      priorities[i][0] = -(total_spin - (h[site_nbr][i%N] + sum(J[k,i//N,i//N] for k in range(4))))
      priorities[i][1] = total_spin - (h[site_nbr][i%N] + sum(J[k,i//N,i//N] for k in range(4)))
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.005017746913580247}
#island_id: 0
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for j in [(i//N,N-1), (i//N,0), (0,i%N), (N-1,i%N)]:
      if J[3,j[0],j[1]] > 0:
        nn_energy += h[j[0]][j[1]]
      else:
        nn_energy -= h[j[0]][j[1]]

    priorities[i][0] = h[site_nbr][i%N] + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.12036743827160494}
#island_id: 0
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for j in [(i//N,N-1), (i//N,0), (0,i%N), (N-1,i%N)]:
      if J[3,j[0],j[1]] > 0:
        nn_energy += h[j[0]][j[1]]
      else:
        nn_energy -= h[j[0]][j[1]]

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = nn_energy - J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = nn_energy + J[0,i//N,i%N]
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007293055555555556}
#island_id: 0
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum([J[3,j[0],j[1]]*h[j[0]][j[1]] for j in [(i//N,N-1), (i//N,0), (0,i%N), (N-1,i%N)]])
    priorities[i][0] = h[site_nbr][i%N] + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002616820987654321}
#island_id: 0
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for j in [(i//N,N-1), (i//N,0), (0,i%N), (N-1,i%N)]:
      if J[3,j[0],j[1]] > 0:
        nn_energy += h[j[0]][j[1]]
      else:
        nn_energy -= h[j[0]][j[1]]

    total_spin[i][0] = h[site_nbr][i%N] + nn_energy
    if J[0,i%N,i//N] > 0:
      total_spin[i][1] = -total_spin[i][0]
    else:
      total_spin[i][1] = total_spin[i][0]

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = 1
      priorities[i][1] = -1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      if np.random.rand() > 0.5:
        priorities[i][0] = 1
        priorities[i][1] = -1
      else:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.013976080246913582}
#island_id: 3
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    
    # Add interactions with the opposite site
    if (i+1)%N != 0: 
      priorities[i][0] += J[2,i%N,int(i/N)]*h[(2+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    
    if i!=0 and (i+1)%N != N:
      priorities[i][0] += J[1,i%N,int(i/N)]*h[(1+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.018038117283950623}
#island_id: 3
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = (total_spin + h[site_nbr][i%N]) - sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin + h[site_nbr][i%N]) - sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03833719135802469}
#island_id: 3
#version_generated: 2
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Initialize total spin and magnetism
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = -total_spin - J[2,i%N,int(i/N)]*h[(2+N-1)%N][i%N]
      priorities[i][1] = total_spin + J[2,i%N,int(i/N)]*h[(2+N-1)%N][i%N]
    else:
      priorities[i][0] = total_spin + J[2,i%N,int(i/N)]*h[(2+N-1)%N][i%N]
      priorities[i][1] = -total_spin - J[2,i%N,int(i/N)]*h[(2+N-1)%N][i%N]
    
    # Add interactions with the opposite site
    if (i+1)%N != 0: 
      priorities[i][0] += J[1,i%N,int(i/N)]*h[(1+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    
    if i!=0 and (i+1)%N != N:
      priorities[i][0] += J[0,i%N,int(i/N)]*h[(0+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.017162191358024693}
#island_id: 3
#version_generated: 2
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = -total_spin + J[2,i%N,int(i/N)]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + J[2,i%N,int(i/N)]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    
    # Add interactions with the opposite site
    if i!=0 and (i+1)%N != N:
      priorities[i][0] += J[1,i%N,int(i/N)]*h[(1+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0013291666666666677}
#island_id: 3
#version_generated: 2
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + (i//N%2 - 1)) % N

    total_spin = sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr_row][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr_col][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002293055555555555}
#island_id: 1
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    elif total_spin < 0:
      priorities[i] = [-total_spin, total_spin]
    else:
      for j in range(N):
        site_nbr = (i % N + ((j-1)%2 - 1)) % N
        if J[3,i%N,j] > 0:
          total_spin += h[site_nbr][j]
          priorities[i][0] -= h[site_nbr][j]
          priorities[i][1] += h[site_nbr][j]
        else:
          total_spin -= h[site_nbr][j]
          priorities[i][0] += h[site_nbr][j]
          priorities[i][1] -= h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.000811882716049383}
#island_id: 1
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priority = h[site_nbr][i%N]
    else:
      priority = -h[site_nbr][i%N]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       priority += h[site_nbr][i%N]
     else:
       priority -= h[site_nbr][i%N]
    
    for j in range(N):
     site_nbr = (i % N + ((j-1)%2 - 1)) % N
     if J[3,i%N,j] > 0:
      priority += h[site_nbr][j]
     else:
      priority -= h[site_nbr][j]
    
    priorities[i] = [priority, -priority]
  
  return(priorities)




#score: {'data2D.txt': 0.00225108024691358}
#island_id: 1
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)//2 - 1)) % N
    
    total_spin_row = h[site_nbr_row][i%N]
    total_spin_col = J[3,i%N,i//N] * (h[site_nbr_row][i%N] - h[site_nbr_col][i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin_row + total_spin_col, -(total_spin_row + total_spin_col)]
    else:
      priorities[i] = [-total_spin_row - total_spin_col, total_spin_row + total_spin_col]
  
  return(priorities)




#score: {'data2D.txt': 0.1580223765432101}
#island_id: 0
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.08701774691358033}
#island_id: 0
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbors_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    total_energy = neighbors_energy + site_energy
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.009209413580246914}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = sum(J[j,i//N,(i+((j-1)%2 - 1)) % N] if J[j,i//N,(i+((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i+((j-1)%2 - 1)) % N] for j in range(4))
    site_energy = sum(J[(j+1)%4,i//N,(i+((j-1)%2 - 1)) % N] if J[(j+1)%4,i//N,(i+((j-1)%2 - 1)) % N]>0 else -J[(j+1)%4,i//N,(i+((j-1)%2 - 1)) % N] for j in range(4))
    site_nbr = (i + ((i//N-1)%2 - 1)) % N
    neighbors_energy = sum(J[j,i//N,site_nbr] if J[j,i//N,site_nbr]>0 else -J[j,i//N,site_nbr] for j in range(4))
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i%N]
      priorities[i][0] -= h[site_nbr_right][i%N]
    else:
      priorities[i][0] -= h[site_nbr_left][i%N]
      priorities[i][0] += h[site_nbr_right][i%N]
    
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i//N]
      priorities[i][0] -= h[site_nbr_right][i//N]
    else:
      priorities[i][0] -= h[site_nbr_left][i//N]
      priorities[i][0] += h[site_nbr_right][i//N]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Calculate total spin
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    # Calculate priorities based on magnetism and total spin
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    # Add magnetism at site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.02376311728395062}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if neighbor_energy > 0:
      priorities[i][0] = -1
      if h[site_nbr][i%N] < 0:
        priorities[i][1] += np.exp(-neighbor_energy) / (np.exp(-neighbor_energy) + np.exp(neighbor_energy))
      else:
        priorities[i][1] -= np.exp(neighbor_energy) / (np.exp(-neighbor_energy) + np.exp(neighbor_energy))
    elif neighbor_energy < 0:
      priorities[i][0] = 1
      if h[site_nbr][i%N] > 0:
        priorities[i][1] -= np.exp(neighbor_energy) / (np.exp(-neighbor_energy) + np.exp(neighbor_energy))
      else:
        priorities[i][1] += np.exp(-neighbor_energy) / (np.exp(-neighbor_energy) + np.exp(neighbor_energy))
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = 1
      else:
        priorities[i][0] = -1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.022694598765432096}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,(i+k-1)%N] * h[site_nbr][i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -1
      else:
        priorities[i][0] = 1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09301496913580247}
#island_id: 0
#version_generated: 2
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -1
        priorities[i][1] = np.exp(-h[site_nbr][i%N]) / (np.exp(-h[site_nbr][i%N]) + np.exp(h[site_nbr][i%N]))
      else:
        priorities[i][0] = 1
        priorities[i][1] = np.exp(h[site_nbr][i%N]) / (np.exp(-h[site_nbr][i%N]) + np.exp(h[site_nbr][i%N]))
  return(priorities)




#score: {'data2D.txt': 0.06423256172839507}
#island_id: 0
#version_generated: 2
#generate time03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy) / (np.exp(-total_energy) + np.exp(total_energy))
    else:
      if sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)) > 0:
        priorities[i][0] = -1
      else:
        priorities[i][0] = 1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    nn_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        nn_sum += 1
      else:
        nn_sum -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + nn_sum, -total_spin - nn_sum]
    else:
      priorities[i] = [-total_spin - nn_sum, total_spin + nn_sum]
  return(priorities)




#score: {'data2D.txt': 0.07995231481481482}
#island_id: 0
#version_generated: 2
#generate time03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy)
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy)
    else:
      priorities[i][0] = np.random.choice([-1, 1])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.109830401234568}
#island_id: 1
#version_generated: 2
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = [0,0]
    
    # Add magnetism
    total_spin[0] += h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
    
    # Add nearest neighbors
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    
    priorities[i] = total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total magnetism from nearest neighbors and itself
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3, i%N, j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.18069490740740768}
#island_id: 1
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] += h[site_nbr][i%N]
    priorities[i][1] -= h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.0028875000000000003}
#island_id: 0
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum(J[j,i//N,site_nbr] for j in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = 1 + nn_sum
      priorities[i][1] = -2 - nn_sum
    else:
      priorities[i][0] = -1 - nn_sum
      priorities[i][1] = 2 + nn_sum
  return(priorities)




#score: {'data2D.txt': 0.053496141975308636}
#island_id: 0
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum(J[j,i//N,site_nbr] for j in range(3))
    priorities[i][0] = (nn_sum + h_site) / 2
    priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': 0.05216280864197531}
#island_id: 0
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum(J[j,i//N,site_nbr] for j in range(3))
    
    # Add interaction with the diagonal site
    d_sum = sum(J[2,j,i//N] for j in range(N) if i == N*j)
    
    priorities[i][0] = h_site + nn_sum + 0.5*d_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.016650154320987653}
#island_id: 0
#version_generated: 2
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_sum = sum(J[j,i//N,site_nbr] for j in range(3))
    
    priorities[i][0] = h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0] + 2*nn_sum
    
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.19358873456790146}
#island_id: 0
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1, i//N, (i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2, i//N, ((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3, (i//N+1)%N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.13667145061728414}
#island_id: 0
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
  
  return(priorities)




#score: {'data2D.txt': 0.16646651234567927}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i//N]
      priorities[i][1] -= h[site_nbr][i//N]
    else:
      priorities[i][0] -= h[site_nbr][i//N]
      priorities[i][1] += h[site_nbr][i//N]
    
  return(priorities)




#score: {'data2D.txt': 0.0021924382716049383}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i // N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        h_site = h[site_nbr_row][i%N]
        priorities[i][0] += h_site
        priorities[i][1] -= h_site
      else:
        h_site = h[site_nbr_row][i%N]
        priorities[i][0] -= h_site
        priorities[i][1] += h_site
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 1
#version_generated: 2
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k, i%N, i//N] * h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.002739660493827161}
#island_id: 3
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 3
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007041666666666653}
#island_id: 3
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_site_nbr = (site_nbr + 1) % N
    right_site_nbr = (site_nbr + N - 1) % (N*N)
    up_site_nbr = (site_nbr - 1) % (N*N)
    if i % N > 0:
      left_left_site_nbr = (left_site_nbr + N - 1) % (N*N)
    else:
      left_left_site_nbr = site_nbr
    if i % N < N-1:
      right_right_site_nbr = (right_site_nbr + 1) % (N*N)
    else:
      right_right_site_nbr = site_nbr
    if i // N > 0:
      up_up_site_nbr = (up_site_nbr - N) % (N*N)
    else:
      up_up_site_nbr = site_nbr
    if i // N < N-1:
      down_down_site_nbr = (site_nbr + N) % (N*N)
    else:
      down_down_site_nbr = site_nbr
    h_site = sum([J[k,i//N,0]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i//N,1]*(h[site_nbr][i%N]-h[left_site_nbr][i%N]) for k in range(2)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011680555555555552}
#island_id: 0
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])

    priorities[i][0] = (J_up - J_down)*h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.002426388888888888}
#island_id: 0
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == i//N and abs(i%N-((j-1)%2)) <= 1:
        nns.append(h[nn_site][i%N])
      else:
        nns.append(0)
    
    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    priorities[i][0] = (J_up - J_down)*h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0003192901234567904}
#island_id: 0
#version_generated: 2
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site//N and abs(nn_site%N-i%N) > 0:
        continue
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) + J[3,i//N,i//N]
    J_down = -np.sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)]) - J[3,i//N,i//N]

    priorities[i][0] = (J_up - J_down)*h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.002739660493827161}
#island_id: 3
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0012486111111111116}
#island_id: 3
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.002739660493827161}
#island_id: 3
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = min(h_site + nn_energy, -h_site - nn_energy)
    if priorities[i][1] > 0:
      priorities[i][1] += abs(priorities[i][0])
    else:
      priorities[i][1] -= abs(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -0.0015001543209876545}
#island_id: 0
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    for j in range(N):
      if (j == site_nbr) or ((j+1)%2 - 1):
        continue
      nn_energy += J[1,i//N,j] * h[(i//N)%N][(j)%N]
      nn_energy += J[2,i//N,j] * h[i//N][(j+1)%N]

    priorities[i][0] = min(h[site_nbr][i%N] + nn_energy, -h[site_nbr][i%N] - nn_energy)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': 0.0005720679012345679}
#island_id: 0
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = J[0,i//N,site_nbr] * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += J[1,i//N,site_nbr] + J[2,i//N,site_nbr]
    else:
      nn_energy -= J[1,i//N,site_nbr] + J[2,i//N,site_nbr]

    h_site = h[site_nbr][i%N]
    if J[0,i//N,site_nbr] > 0:
      h_site *= -1

    priorities[i][0] = nn_energy
    priorities[i][1] = max(-priorities[i][0], 0) + h_site

  return(priorities)




#score: {'data2D.txt': 0.18784089506172866}
#island_id: 0
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy_up += h[i//N][i%N]
    else:
      nn_energy_up -= h[i//N][i%N]

    nn_energy_down = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * (-h[i//N][i%N])
    if J[3,i//N,site_nbr] > 0:
      nn_energy_down -= h[i//N][i%N]
    else:
      nn_energy_down += -h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = min(nn_energy_up, nn_energy_down)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': 0.0029214506172839504}
#island_id: 2
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023853395061728395}
#island_id: 2
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    h_site = h[site_nbr][i%N]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023853395061728395}
#island_id: 2
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0093125}
#island_id: 0
#version_generated: 2
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    site_nbrs = list(set(site_nbrs))
    
    total_spin = 0
    up_spin = 0
    down_spin = 0
    
    for site in site_nbrs:
      if h[site][i%N] > 0:
        total_spin += 1
        up_spin += 1
      else:
        total_spin -= 1
        down_spin += 1
    
    if total_spin > 0:
      priorities[i][0] = up_spin
      priorities[i][1] = -down_spin
    else:
      priorities[i][0] = -up_spin
      priorities[i][1] = down_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': -0.012409722222222223}
#island_id: 1
#version_generated: 2
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.001298611111111111}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    for j in range(N):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if i*N+j < N**2:
        total_spin += J[3,i//N,j]*h[site_nbr_j][j]
    h_site = np.tanh((h[site_nbr][i%N] + total_spin)/4)
    priorities[i][0] = h_site
    priorities[i][1] = 1 - h_site**2
  return(priorities)




#score: {'data2D.txt': -0.0010365740740740737}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N] for k in range(4)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = 1 - np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006810185185185187}
#island_id: 2
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[k,(i+N)%N,i//N] * h[site_nbr][(k+1)%4] for k in range(4))
    priorities[i][0] = total_spin if all(J[k,(i+N)%N,i//N] == J[(k+2)%4,(i+N)%N,i//N] for k in range(4)) else -total_spin
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on site magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.06750108024691358}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site_nbr][i%N] * (J[k,i//N,i%N]>0) for k, site_nbr in enumerate(site_nbrs))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16415262345679035}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([h[j][i%N] for j in range(N) if J[3,i%N,j] > 0])
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + sum([h[j][i%N] for j in range(N) if J[3,i%N,j] > 0])
    
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [-total_spin, total_spin]
    elif total_spin < 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i][0] = -1
      priorities[i][1] = 1
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][0] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  return(priorities)




#score: {'data2D.txt': 0.21461435185185201}
#island_id: 0
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  return(priorities)




#score: {'data2D.txt': -0.0006757716049382713}
#island_id: 0
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)

  # Calculate the Manhattan distance between sites with the same magnetism
  manhattan_distances = []
  for i in range(N**2):
    row, col = divmod(i, N)
    if h[row][col] > 0:
      manhattan_distance = sum(abs(j - i) for j in (row, col))
    else:
      manhattan_distance = sum(abs(i - j) for j in (row, col))
    manhattan_distances.append(manhattan_distance)

  # Calculate the priority based on the Manhattan distance
  for i in range(N**2):
    priorities[i][0] += manhattan_distances[i]

  return(priorities)




#score: {'data2D.txt': -0.016463117283950616}
#island_id: 0
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = 0
      for k, j in [(k, (k+i-N)//N) for k in range(4)]:
        if h[site_nbr][j] > 0:
          total_spin += J[k,i//N,i//N]
        else:
          total_spin -= J[k,i//N,i//N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00011003086419753066}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018097222222222223}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
    
    # Add the priority based on the site's magnetism
    if h[i%N][i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0017162037037037035}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(4):
      if J[k,i//N,(k+N-1)%N] > 0:
        total_spin += J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N]
      else:
        total_spin -= J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = 1 - np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': -0.0005983024691358024}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if J[k,i//N,(k+N-1)%N] > 0:
        total_spin += h[site_nbr][k]
      else:
        total_spin -= h[site_nbr][k]
    priorities[i][0] = np.sum([J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N] for k in range(4)]) + total_spin
    priorities[i][1] = 1 - np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': 0.0005862654320987659}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N] for k in range(4)])
    priorities[i][0] = (1 + h_site) * np.exp(-total_spin)
    priorities[i][1] = 1 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010365740740740737}
#island_id: 2
#version_generated: 2
#generate time03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i//N,(k+N-1)%N]*h[k][(k+N-1)%N] for k in range(4)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = 1 - np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': 0.06417268518518533}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin + 10
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin + 10

  return(priorities)




#score: {'data2D.txt': 0.1452384259259261}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin + 0.1 * np.sum(J[:,i//N,i%N]) 
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin - 0.1 * np.sum(J[:,i//N,i%N])

  return(priorities)




#score: {'data2D.txt': 0.15443966049382735}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(np.sum(J[:,site,i%N])*h[site][i%N] for site in site_nbrs)
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.1438705246913582}
#island_id: 0
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.1786458333333336}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if J[3,i%N,j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.007897376543209876}
#island_id: 2
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    priority_h_site = h[site_nbr][i%N]
    if h[i%N][i//N] > 0:
      priority_h_site += 1
    else:
      priority_h_site -= 1
    priorities[i][0] = total_spin + priority_h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005183487654320988}
#island_id: 2
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    # Add the priority based on the site's magnetism and interactions with nearest neighbors
    if h[i%N][i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin - 1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[site_nbr][i%N] + total_spin + 1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07012978395061728}
#island_id: 2
#version_generated: 2
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
    
    # Add the priority based on the site's magnetism
    if h[i%N][i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1

    # Calculate the priority based on the interaction with nearest neighbors
    for k in range(4):
      j = (k + i % N) % N
      if J[k,i//N,j] > 0:
        priorities[i][1] -= sign
      else:
        priorities[i][1] += sign

  return(priorities)




#score: {'data2D.txt': -0.0015094135802469135}
#island_id: 3
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.07064645061728399}
#island_id: 3
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = max(-priorities[i][0], -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)]))
    else:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = min(-priorities[i][0], -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)]))
  return(priorities)




#score: {'data2D.txt': -0.0018112654320987652}
#island_id: 3
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.004259104938271605}
#island_id: 2
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in [(0,N-1),(1,1),(3,N-2)]:
      j = (k[1] + i % N) % N
      if k[0] == 0 or k[0] == 1:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k[0],i//N,j]*h[(k[0]+2)%4][j]
    h_site = h[site_nbr][i%N]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0019072530864197538}
#island_id: 2
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in [0,1]:
      j = (k + i % N) % N
      if k == 1:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    h_site = h[site_nbr][i%N]
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.08824305555555563}
#island_id: 2
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:
        sign = -1
      else:
        sign = 1
      total_spin += J[k, i//N, j] * h[(k+N-1)%N][j]
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:
        sign = -1
      else:
        sign = 1
      total_spin += J[k, i//N, j] * h[(k+N-1)%N][j]
    priorities[i][0] = h[i // N][i % N] + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004501543209876543}
#island_id: 2
#version_generated: 2
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    h_site = h[site_nbr][i%N]
    priorities[i][0] = np.sign(total_spin) + 2*np.arctan(np.tanh(h_site+total_spin)) * h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + 2*h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009534413580246913}
#island_id: 2
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      spin_priority = -1
    else:
      spin_priority = 1
    h_site = h[site_nbr][i%N]
    priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002328549382716048}
#island_id: 2
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if J[0,i%N,i//N]>0:
      h_site -= 2*h[site_nbr][i%N]
    else:
      h_site += 2*h[site_nbr][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  total_spin_summed = np.zeros((N,N))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_summed[i//N][i%N] += 1
    else:
      total_spin_summed[i//N][i%N] -= 1

    neighbor_spin = J[0,i//N,i%N]*total_spin_summed[(i+1)%N][i%N] + J[1,i//N,i%N]*total_spin_summed[i//N][(i+1)%N] + J[2,i//N,i%N]*total_spin_summed[(i+N-1)%N][i%N] + J[3,i//N,i%N]*total_spin_summed[i//N][(i+N-1)%N]
    h_site = h[site_nbr][i%N] + neighbor_spin
    priorities[i][0] = h_site
    priorities[i][1] = 1 - np.exp(-h_site)
  return(priorities)




#score: {'data2D.txt': -0.0008362654320987656}
#island_id: 2
#version_generated: 2
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N * N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = np.sum([J[k, i // N, (k + N - 1) % N] * h[site_nbr][i % N] for k in range(4)])
    
    priorities[i][0] = total_spin
    priorities[i][1] = 1 / (1 + np.exp(-2 * total_spin))
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum([J[k,i//N,(k+N-1)%N]*h[site_nbr][max(0, min(i%N+k,N-1))] for k in range(4)])
    h_site = np.sign(total_spin)
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = 1 - np.exp(-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': -0.002041820987654321}
#island_id: 3
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = total_spin + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.0017594135802469141}
#island_id: 3
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    # Add the interactions with nearest neighbors
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    priorities[i][0] += J[0,i//N,i//N]*h[site_nbr][i%N]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] += J[1,i//N,i//N]*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.007015586419753086}
#island_id: 3
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -(h_site + 2*h[site_nbr][i%N]) - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + 2*h[site_nbr][i%N]) - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + nn_sum
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site - nn_sum
      priorities[i][1] = priorities[i][0]
  
  # Sort the priority list by site energy in descending order
  sorted_indices = np.argsort(-priorities[:, 0])
  priorities = priorities[sorted_indices]
  
  return(priorities)




#score: {'data2D.txt': -0.000591512345679012}
#island_id: 0
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]
    
  # Sort the priority list by site energy in descending order
  sorted_indices = np.argsort(-priorities[:, 0])
  priorities = priorities[sorted_indices]
  
  return(priorities)




#score: {'data2D.txt': -0.000591512345679012}
#island_id: 0
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  # Sort the priority list by site energy in descending order
  sorted_indices = np.argsort(-priorities[:, 0])
  priorities = priorities[sorted_indices]
  
  return(priorities)




#score: {'data2D.txt': -0.000591512345679012}
#island_id: 0
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]
  
  # Sort the priority list by site energy in descending order
  sorted_indices = np.argsort(-priorities[:, 0])
  priorities = priorities[sorted_indices]
  
  return(priorities)




#score: {'data2D.txt': -0.0003871913580246915}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] - sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))

  # Sort the sites by their total spin and update the priorities
  indices = np.argsort(priorities[:,0])
  priorities = priorities[indices]

  return(priorities)




#score: {'data2D.txt': -0.03974737654320988}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] - sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': 0.03284398148148149}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    else:
      priorities[i][1] = priorities[i][0] - sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.19329675925925946}
#island_id: 0
#version_generated: 2
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + (total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    for site_nbr in site_nbrs:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += J[3, i//N,i%N]
      else:
        priorities[i][0] -= J[3, i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.17185879629629652}
#island_id: 0
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + (total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += np.sum(np.abs(h[site_nbr][i%N] * J[k, i // N, i % N])) + (total_spin)
      else:
        priorities[i][0] -= np.sum(np.abs(h[site_nbr][i%N] * J[k, i // N, i % N])) - (total_spin)

  return(priorities)




#score: {'data2D.txt': 0.0015859567901234575}
#island_id: 3
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.002470833333333334}
#island_id: 3
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    if i % (N*N) < N:
      site_nbr2 = ((i // N + 1) % N)
      h_site2 = sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N+1][i%N] > 0:
        priorities[i][0] += h_site2 + h[site_nbr2][i%N]
        priorities[i][1] = -priorities[i][0] - sum([J[k,i//N+1,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      else:
        priorities[i][0] += -h_site2 - h[site_nbr2][i%N]
        priorities[i][1] = -priorities[i][0] - sum([J[k,i//N+1,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0008538580246913574}
#island_id: 3
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[2,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -total_spin - J[2,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.14766404320987675}
#island_id: 3
#version_generated: 2
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    if i % N != 0:
      site_nbr2 = (i-1) % N
      h_site2 = sum([J[k,i%N,(i-1)//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site2
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site2
        priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.11463966049382729}
#island_id: 1
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_spin_neighbors = 0
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin_neighbors += h[site_nbr][j]
      else:
        total_spin_neighbors -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + total_spin_neighbors, -total_spin - total_spin_neighbors]
    else:
      priorities[i] = [-total_spin - total_spin_neighbors, total_spin + total_spin_neighbors]
  
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_2 = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr_2][j]
        total_spin -= h[i//N][j]
      else:
        total_spin -= h[site_nbr_2][j]
        total_spin += h[i//N][j]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      priorities[i] = [np.sum(J[:,i//N,i%N]), np.sum([j for j in J[:,i//N,i%N] if j < 0])]
    else:
      priorities[i] = [-np.sum(J[:,i//N,i%N]), -np.sum([j for j in J[:,i//N,i%N] if j > 0])]
    
  return(priorities)




#score: {'data2D.txt': -0.0017594135802469141}
#island_id: 3
#version_generated: 2
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site2 = sum([J[k,i//N,i//N]*h[site_nbr1][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site1 - 2*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site1 + 2*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    # Add the interactions with nearest neighbors
    priorities[i][0] += J[0,i//N,i//N]*h[site_nbr2][i%N]
    priorities[i][0] += J[1,i//N,i//N]*h[site_nbr1][i%N]
  return(priorities)




#score: {'data2D.txt': 0.0026023148148148147}
#island_id: 3
#version_generated: 2
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 2.0524691358025925e-05}
#island_id: 3
#version_generated: 2
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    # Add the interactions with nearest neighbors
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    priorities[i][0] += J[0,i//N,i//N]*h[site_nbr][i%N]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] += J[1,i//N,i//N]*h[site_nbr][i%N]
    site_nbr = i % N
    if i % N > 0:
      site_nbr = (i-1) % N
    else:
      site_nbr = N - 1
    priorities[i][0] += J[2, (i//N), i//N]*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.0020804012345679}
#island_id: 3
#version_generated: 2
#generate time04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site2 = sum([J[k,i//N,i//N]*h[site_nbr1][i%N] for k in range(2)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site1 - h_site2 + 2*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = h_site1 + h_site2 - 2*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.016561265432098765}
#island_id: 0
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_flip = np.where(total_energy + 2*nn_energy > 0, (total_energy + nn_energy) * N - 2*N, 
                 np.where(total_energy - 2*nn_energy > 0, -(total_energy - nn_energy) * N + 2*N, 
                     (total_energy + nn_energy) * N - 2*N if np.random.rand() < 0.5 else -(total_energy - nn_energy) * N + 2*N))
    priorities[i][1] = priority_flip
  return(priorities)




#score: {'data2D.txt': -0.002328549382716048}
#island_id: 2
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if J[0,i%N,i//N]>0:
      total_spin -= 2*h[site_nbr][i%N]
    else:
      total_spin += 2*h[site_nbr][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.007843672839506174}
#island_id: 2
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      if J[k,i%N,i//N]>0:
        priorities[i][0] += h[site_nbr][k]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[site_nbr][k]
        priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.002328549382716048}
#island_id: 2
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if J[0,i%N,i//N]>0:
      h_site -= 2*h[site_nbr][i%N]
    else:
      h_site += 2*h[site_nbr][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009856481481481476}
#island_id: 0
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0,k%N,i//N]*h[site_nbr][k%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009068364197530866}
#island_id: 0
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0][i%N][k] for k in range(3) if abs(k-site_nbr) == 1])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004850308641975308}
#island_id: 0
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0,k%N,i//N]*(site_nbr + ((k-1)%2 - 1)) % N for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017464506172839508}
#island_id: 0
#version_generated: 2
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0,i%N,i//N]*(((k+site_nbr-1)%N) + ((k-1)%2 - 1)) % N for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005183487654320988}
#island_id: 2
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]
    if h[i%N][i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin - 1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[site_nbr][i%N] + total_spin + 1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001406018518518519}
#island_id: 2
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    # Add the priority based on the site's magnetism and interactions with nearest neighbors
    if h[i%N][i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin - np.sum(J[:, i//N, j])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[site_nbr][i%N] + total_spin + np.sum(J[:, i//N, j])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023717592592592597}
#island_id: 2
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      j = (k + i % N) % N
      if k == 1 or k == 3:  
        sign = -1
      else:   
        sign = 1
      total_spin += J[k,i//N,j]*h[(k+N-1)%N][j]

    # Add the priority based on the site's magnetism and interactions with nearest neighbors
    if h[i%N][i//N] > 0:
      priorities[i][0] = total_spin - np.sum(J[1::2,i//N,(i+1)%N]) + np.sum(J[2::2,i//N,(i+1)%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + np.sum(J[1::2,i//N,(i+1)%N]) - np.sum(J[2::2,i//N,(i+1)%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004492438271604939}
#island_id: 0
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

    # Sort the priorities to encourage the assignment of spins that reduce energy
    priorities[i] = np.sort(priorities[i])

  return(priorities)




#score: {'data2D.txt': -0.004492438271604939}
#island_id: 0
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  # Sort the priorities to encourage the assignment of spins that reduce energy
  priorities = np.sort(priorities, axis=1)

  return(priorities)




#score: {'data2D.txt': -0.004492438271604939}
#island_id: 0
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  # Sort the priorities to encourage the assignment of spins that reduce energy
  for i in range(N**2):
    priorities[i] = np.sort(priorities[i])

  return(priorities)




#score: {'data2D.txt': -0.004492438271604939}
#island_id: 0
#version_generated: 2
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    # Add the site's energy and its nearest neighbors' energies
    priorities[i][0] = h_site + nn_energy
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  # Sort the priorities to encourage the assignment of spins that reduce energy
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      priorities[i] = np.sort(-priorities[i])
    else:
      priorities[i] = np.sort(priorities[i])

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 3
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - (neighbor_sum + 2*h[site_nbr][i%N])
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + (neighbor_sum + 2*h[site_nbr][i%N])

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 3
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023757716049382727}
#island_id: 3
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.00040478395061728446}
#island_id: 2
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k][i%N,i//N] * h[site_nbr][k] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.0002662037037037037}
#island_id: 2
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if J[k,i%N,i//N]>0:
        total_spin += h[site_nbr][k]
      else:
        total_spin -= h[site_nbr][k]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0276016975308642}
#island_id: 0
#version_generated: 2
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for j in range(N):
      site_nbr1 = (i % N + ((j-1)%2 - 1)) % N
      site_nbr2 = (i % N + ((j+1)%2 - 1)) % N
      total_energy += J[0,i//N,j] * h[site_nbr1][j]
      total_energy += J[0,i//N,j] * h[site_nbr2][j]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.14726682098765434}
#island_id: 0
#version_generated: 2
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1, 0, 1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    for k in [-1, 0, 1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16171929012345698}
#island_id: 0
#version_generated: 2
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      total_spin += sum(J[j,k//N,(site_nbr+(j-1)%2-N)%N] if J[j,k//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.14108503086419774}
#island_id: 0
#version_generated: 2
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = energy_diff
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11877114197530876}
#island_id: 0
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5 + np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] = -4 * total_spin + 10
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5 - np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] = 4 * total_spin + 10

  return(priorities)




#score: {'data2D.txt': 0.06417268518518533}
#island_id: 0
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin + 10
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin + 10

  return(priorities)




#score: {'data2D.txt': 0.06417268518518533}
#island_id: 0
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = 0
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin += np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        total_spin -= np.sum(J[:,site,i%N])*h[site][i%N]
    total_spin += np.sum(J[:,i//N,i%N])*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin + 10
    else:
      priorities[i][0] = -(total_spin - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin + 10

  return(priorities)




#score: {'data2D.txt': 0.002616203703703705}
#island_id: 3
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i % N == 0:
      if i//N > 0:
        priorities[i][0] += J[2, i//N, i//N]
        priorities[i][1] -= J[2, i//N, i//N]
  return(priorities)




#score: {'data2D.txt': 0.00024336419753086423}
#island_id: 3
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (neighbor_sum + 2*h[site_nbr][i%N]) * J[0,i//N,i//N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(neighbor_sum + 2*h[site_nbr][i%N]) * J[0,i//N,i//N]
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.02283225308641976}
#island_id: 3
#version_generated: 2
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -neighbor_sum - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  # Additional improvement
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 2*h[site_nbr][i%N]
      priorities[i][1] += 2*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.23635663580246905}
#island_id: 0
#version_generated: 2
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs, i % N] * J[0, i // N, i % N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs, i % N] * J[0, i // N, i % N])
  return(priorities)




#score: {'data2D.txt': 0.05065385802469138}
#island_id: 1
#version_generated: 2
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
    if J[1,i//N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += h[(i+1)%N,i%N]
      priorities[i][1] -= h[(i+1)%N,i%N]
    else:
      priorities[i][0] -= h[(i+1)%N,i%N]
      priorities[i][1] += h[(i+1)%N,i%N]
    
    if J[3,i%N,(i+N-1)%N] > 0:
      priorities[i][0] += h[i//N,(i+N-1)%N]
      priorities[i][1] -= h[i//N,(i+N-1)%N]
    else:
      priorities[i][0] -= h[i//N,(i+N-1)%N]
      priorities[i][1] += h[i//N,(i+N-1)%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16621311728395086}
#island_id: 1
#version_generated: 2
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr2][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    return(priorities)




#score: {'data2D.txt': 0.16675200617283975}
#island_id: 1
#version_generated: 2
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  # Improved version
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%N - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]

    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[i//N, site_nbr2]
      priorities[i][1] -= h[i//N, site_nbr2]
    else:
      priorities[i][0] -= h[i//N, site_nbr2]
      priorities[i][1] += h[i//N, site_nbr2]

  return(priorities)




#score: {'data2D.txt': -0.00040478395061728446}
#island_id: 2
#version_generated: 2
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k][i%N,i//N] * h[site_nbr][k] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] += 1
      priorities[i][1] -= (N*N - i)//2
    else:
      priorities[i][0] -= 1
      priorities[i][1] = (i+1)%2
  return(priorities)




#score: {'data2D.txt': -0.0008510802469135804}
#island_id: 2
#version_generated: 2
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k][i%N,i//N] * h[site_nbr][k] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] += np.sum(np.sign(h[site_nbr]))
      priorities[i][1] -= np.sum(np.sign(h[site_nbr]))
    else:
      priorities[i][0] -= np.sum(np.sign(h[site_nbr]))
      priorities[i][1] += np.sum(np.sign(h[site_nbr]))
  return(priorities)




#score: {'data2D.txt': 0.0002554012345679021}
#island_id: 3
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N + 1) % N)
    h_site = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr1][i%N] + sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - 2*h[site_nbr2][i%N]
    else:
      priorities[i][0] = -h_site - h[site_nbr1][i%N] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + 2*h[site_nbr2][i%N]
  return(priorities)




#score: {'data2D.txt': 0.002739660493827161}
#island_id: 3
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.002470833333333334}
#island_id: 3
#version_generated: 2
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
    if i % (N*N) < N:
      site_nbr2 = ((i // N + 1) % N)
      total_spin2 = sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N+1][i%N] > 0:
        priorities[i][0] += total_spin2 + h[site_nbr2][i%N]
        priorities[i][1] = -priorities[i][0] - sum([J[k,i//N+1,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      else:
        priorities[i][0] += -total_spin2 - h[site_nbr2][i%N]
        priorities[i][1] = -priorities[i][0] - sum([J[k,i//N+1,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr=((i//N)%N + ((j-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin += J[j,i//N,i%N]
      else:
        total_spin -= J[j,i//N,i%N]
    for k in range(3):
      site = ((i//N)%N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += J[k,i//N,i%N]
      else:
        total_spin -= J[k,i//N,i%N]
    priorities[i][0] = 3.5*(total_spin**2)
    priorities[i][1] = -2.5*(total_spin**2)
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001140432098765427}
#island_id: 3
#version_generated: 2
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020972222222222147}
#island_id: 0
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[:,site_nbr,i%N].sum() > 0:
      priorities[i][0] += total_spin * 4.5
      priorities[i][1] -= 3.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 4.5
      priorities[i][1] += 3.5 * total_spin
    for k in range(2):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] -= J[:,site,i%N].sum() * h[site][i%N]
        priorities[i][1] += 4.5 * J[:,site,i%N].sum() * h[site][i%N]
      else:
        priorities[i][0] += J[:,site,i%N].sum() * h[site][i%N]
        priorities[i][1] -= 3.5 * J[:,site,i%N].sum() * h[site][i%N]

  return(priorities)




#score: {'data2D.txt': 0.012770524691358025}
#island_id: 0
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    neighbor_sum = J[:,site_nbr,i%N].sum()
    if neighbor_sum > 0:
      priorities[i][0] += total_spin * 4.5 + neighbor_sum * 3.5
      priorities[i][1] -= total_spin * 4.5 - 4.5 * neighbor_sum * total_spin
    else:
      priorities[i][0] -= total_spin * 4.5 - 3.5 * neighbor_sum * total_spin
      priorities[i][1] += total_spin * 4.5 + 3.5 * neighbor_sum * total_spin

  return(priorities)




#score: {'data2D.txt': 0.002347993827160494}
#island_id: 0
#version_generated: 2
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[:,site_nbr,i%N].sum() > 0:
      priorities[i][0] += total_spin * 4.5
      priorities[i][1] -= 3.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 4.5
      priorities[i][1] += 3.5 * total_spin

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] -= J[k,site,i%N] * h[site][i%N]
        priorities[i][1] += 4.5 * J[k,site,i%N] * h[site][i%N]
      else:
        priorities[i][0] += J[k,site,i%N] * h[site][i%N]
        priorities[i][1] -= 3.5 * J[k,site,i%N] * h[site][i%N]

  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.023998302469135802}
#island_id: 0
#version_generated: 2
#generate time04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy_nn = 0
    if J[0,i%N,i//N] > 0:
      energy_nn += h[i//N][i%N]
    else:
      energy_nn -= h[i//N][i%N]

    for j in range(2):
      if J[j,i//N,i%N] > 0 and np.sign(h[site_nbr][i%N]) != np.sign(J[j,i//N,i%N]):
        priorities[i][j] = -energy_nn
      elif J[j,i//N,i%N] < 0 and np.sign(h[site_nbr][i%N]) == np.sign(J[j,i//N,i%N]):
        priorities[i][j] = energy_nn
      else:
        if h[site_nbr][i%N] > 0:
          priorities[i][j] += 1
          priorities[i,1-j] -= 1
        else:
          priorities[i][j] -= 1
  return(priorities)




#score: {'data2D.txt': 0.09998842592592604}
#island_id: 0
#version_generated: 2
#generate time04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr1+(j-1)%2-N)%N] if J[j,i//N,(site_nbr1+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr1+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    total_energy += sum(J[j,site_nbr2,(i%(N*N)-1+N)%N] if J[j,site_nbr2,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr2,(i%(N*N)-1+N)%N] for j in range(4)) * h[site_nbr2][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014862654320987653}
#island_id: 0
#version_generated: 2
#generate time04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin[i][0] += sum(J[j,site_nbr1,(i%(N*N)-1+N)%N] if J[j,site_nbr1,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr1,(i%(N*N)-1+N)%N] for j in range(4))
    total_spin[i][1] += sum(-1*J[j,site_nbr2,(i%(N*N)-1+N)%N] if J[j,site_nbr2,(i%(N*N)-1+N)%N]>0 else J[j,site_nbr2,(i%(N*N)-1+N)%N] for j in range(4))
    total_spin[i][0] += h[site_nbr1][i%N]
    total_spin[i][1] -= 2*h[site_nbr1][i%N]
  return(total_spin)




#score: {'data2D.txt': 0.09998842592592604}
#island_id: 0
#version_generated: 2
#generate time04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_energy1 = sum(J[j,i//N,(site_nbr1+(j-1)%2-N)%N] if J[j,i//N,(site_nbr1+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr1+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    total_energy2 = sum(J[j,site_nbr2,(i%(N*N)-1+N)%N] if J[j,site_nbr2,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr2,(i%(N*N)-1+N)%N] for j in range(4)) * h[site_nbr2][i%N]
    priorities[i][0] = total_energy1 + total_energy2
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16603811728395088}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr_row][i%N] + h[site_nbr_col][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  # Calculate site magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Calculate site interaction with nearest neighbors
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.17477330246913578}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i // N + ((3 - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities[i][0] += J[:, i // N, i % N].sum()
      priorities[i][1] -= J[:, i // N, i % N].sum()
  return priorities




#score: {'data2D.txt': 0.10369799382716048}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[(i//N)%4,i//N,i%N]
      priorities[i][1] -= J[(i//N)%4,i//N,i%N]
  return(priorities)




#score: {'data2D.txt': -0.021811265432098763}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=((i//N)%N + ((i%N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if h[site_nbr][k] > 0:
        total_spin += J[k,i//N,i%N]
      else:
        total_spin -= J[k,i//N,i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.2514186728395062}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=((i//N)%N + ((3-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]
      priorities[i][1] -= J[0,i//N,i%N]
    site_nbr=((i//N)%N + ((2-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[1,i//N,i%N]
      priorities[i][1] -= J[1,i//N,i%N]
    site_nbr=((i//N)%N + ((1-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[2,i//N,i%N]
      priorities[i][1] -= J[2,i//N,i%N]
    site_nbr=((i//N)%N + ((0-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[3,i//N,i%N]
      priorities[i][1] -= J[3,i//N,i%N]
  return(priorities)




#score: {'data2D.txt': -0.0009270061728395067}
#island_id: 2
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N])
    if total_spin > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003267438271604938}
#island_id: 2
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(4)])
    if total_spin > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 2
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02144706790123457}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = J[0, i//N, i%N] + J[1, (i%N+N_half)%N, i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.10751373456790125}
#island_id: 0
#version_generated: 2
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      else:
        if h[site_nbr][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      
      if h[i//N][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    
  return(priorities)




#score: {'data2D.txt': -0.09555941358024717}
#island_id: 0
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    spin = np.sign(total_spin)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + total_bias) * spin
      priorities[i][1] = -total_spin * spin
    else:
      priorities[i][0] = -total_spin * spin
      priorities[i][1] = (total_spin + total_bias) * spin
  
  return(priorities)




#score: {'data2D.txt': 0.13667145061728414}
#island_id: 0
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    
  return(priorities)




#score: {'data2D.txt': 0.16512237654321013}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_up = (i - N) % N
    site_nbr_down = (i + N) % N
    site_nbr_left = i % N - 1 if i % N != 0 else N - 1
    site_nbr_right = i % N + 1 if i % N != N - 1 else 0
    
    total_spin += h[site_nbr_up][i%N]
    total_spin -= h[site_nbr_down][i%N]
    total_spin += h[site_nbr_left][i//N]
    total_spin -= h[site_nbr_right][i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16066496913580272}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N-2)%2 - 1)) % N
    if J[3,i%N,(i//N+1)%N] > 0:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    else:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if J[3,(i//N)%N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16423688271604964}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.11150694444444458}
#island_id: 1
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.03488657407407408}
#island_id: 0
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    # Improved version: consider both neighbor sites
    for j in range(4): 
      if J[j//2,i//N,site_nbr] > 0:
        total_energy += h[i//N][i%N]
      else:
        total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / 2
    priorities[i][1] = -(h_site + total_energy) if J[3,i//N,site_nbr] > 0 else h_site + total_energy

  return(priorities)




#score: {'data2D.txt': -0.0016131172839506174}
#island_id: 0
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    # Improved version: consider both neighbor sites
    for j in range(4): 
      if J[j//2,i//N,site_nbr] > 0:
        total_energy += h[i//N][i%N]
      else:
        total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / 2
    priorities[i][1] = -(h_site + total_energy) if J[3,i//N,site_nbr] > 0 else h_site + total_energy
    
    # Add a term that encourages the spin to be aligned with its neighbors
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        priorities[i][1] += abs(h[nn_site][i%N])
      else:
        priorities[i][1] -= abs(h[nn_site][i%N])

    return(priorities)




#score: {'data2D.txt': -0.03031929012345679}
#island_id: 0
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    for j in range(2): 
     if J[j,i//N,site_nbr] > 0:
       total_energy += h[i//N][i%N]
     else:
       total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / 2
    priorities[i][1] = -(h_site + total_energy) if J[3,i//N,site_nbr] > 0 else h_site + total_energy
  
  return(priorities)




#score: {'data2D.txt': 0.039213734567901226}
#island_id: 0
#version_generated: 2
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4): 
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j//2,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    # Improved version: consider both neighbor sites and use the magnetism
    for j in range(4): 
      if J[j//2,i//N,site_nbr] > 0:
        total_energy += h[i//N][i%N]
      else:
        total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / 2
    priorities[i][1] = -(h_site + total_energy) if J[3,i//N,site_nbr] > 0 else h_site + total_energy
    
    # Add the priority based on the site magnetism
    priorities[i][0] += abs(h_site)
    priorities[i][1] -= abs(h_site)

  return(priorities)




#score: {'data2D.txt': -0.00020169753086419714}
#island_id: 3
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if np.sum(J[:,i//N,i//N]) > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001140432098765427}
#island_id: 3
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + h_sum) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + h_sum) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00033040123456790115}
#island_id: 3
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site][i%N]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001140432098765427}
#island_id: 3
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08026095679012359}
#island_id: 1
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    # Add the interactions with all nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add the magnetism of the site itself
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.002055401234567901}
#island_id: 0
#version_generated: 2
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = sum(h[(i % N + ((j-1)%2 - 1)) % N][i%N] for j in range(4))
    if sum(h[i//N]) > 0:
      total_spin = site_nbr_sum
    else:
      total_spin = -site_nbr_sum
    for k in range(3):
      site = (i % N + ((k)%2 - 1)) % N
      priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
      if h[site][i%N] > 0:
        priorities[i][1] -= 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
  return(priorities)




#score: {'data2D.txt': 0.016608487654320988}
#island_id: 0
#version_generated: 2
#generate time04:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = 0
    total_spin_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      total_spin_sum = site_nbr_sum
    else:
      total_spin_sum = -site_nbr_sum
    for k in range(4):
      site = (i % N + ((k)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
    if site_nbr_sum > 0:
      priorities[i][0] -= 3 * total_spin_sum
      priorities[i][1] += 3 * total_spin_sum
    else:
      priorities[i][0] += 2.5 * total_spin_sum
      priorities[i][1] -= 2.5 * total_spin_sum
  return(priorities)




#score: {'data2D.txt': 0.0017847222222222216}
#island_id: 0
#version_generated: 2
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = np.sum(h[(i % N + ((i//N-1)%2 - 1)) % N])
    if np.sum(h[i//N]) > 0:
      total_spin = site_nbr_sum
    else:
      total_spin = -site_nbr_sum
    for k in range(3):
      site = (i % N + ((k)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0017856481481481482}
#island_id: 0
#version_generated: 2
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      total_spin = site_nbr_sum
    else:
      total_spin = -site_nbr_sum
    
    for k in range(4):
     site = (i % N + ((k)%2 - 1)) % N
     interaction = J[:,site,i%N]
     if h[site][i%N] > 0:
      priorities[i][0] += np.sum(interaction)
      priorities[i][1] -= np.sum(interaction)
     else:
      priorities[i][0] -= np.sum(interaction)
      priorities[i][1] += np.sum(interaction)

  return(priorities)




#score: {'data2D.txt': -0.00020169753086419714}
#island_id: 3
#version_generated: 2
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if np.sum(J[:,i//N,i//N]) > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00020169753086419714}
#island_id: 3
#version_generated: 2
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_sum = sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])
      else:
        h_sum = -sum([J[l,k,i//N]*h[(l+N-1)%N][i%N] for l in range(4)])

    if np.sum(J[:,i//N,i//N]) > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1208970679012347}
#island_id: 0
#version_generated: 2
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = h[i//N][i%N]
    nn_energies = []
    for k in range(-1,3):
      site_nbr = (i + k - 1) % N
      if k==0:
        energy = J[0,i//N,i%N] * total_energy
      elif k == -1 or k == 1:
        energy = J[k+1,i//N,i%N] * h[site_nbr][i%N]
      else:
        energy = J[2,i//N,i%N] * (total_energy + 2*h[site_nbr][i%N])
      nn_energies.append(energy)
    total_energy += sum(nn_energies)
    if np.abs(total_energy) > 1e-6:
      sign = -np.sign(total_energy)
      priorities[i][0] += sign * N
      priorities[i][1] -= 2*N * sign
    else:
      random_sign = np.random.choice([-1, 1])
      priorities[i][0] += random_sign * N
      priorities[i][1] -= 2*N * random_sign
  return(priorities)




#score: {'data2D.txt': 0.03695385802469136}
#island_id: 0
#version_generated: 2
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    if np.abs(energy_diff) > 1e-6:
      sign = -np.sign(energy_diff)
      priorities[i][0] += sign * (total_energy + nn_energy) * N
      priorities[i][1] -= 2*N * sign
    else:
      total_spin = np.sum(h.reshape(N, N), axis=0).flatten()
      if total_spin[i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.03629768518518519}
#island_id: 0
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = total_energy + 2*nn_energy
    sign = -np.sign(energy_diff)
    if np.abs(energy_diff) > 1e-6:
      priorities[i][0] += sign * (total_energy + nn_energy) * N
      priorities[i][1] -= 2*N * sign
    else:
      if total_energy > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 2
      elif total_energy < 0:
        priorities[i][0] -= 1
        priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.00030540123456790163}
#island_id: 0
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    total_spin = np.sum(h[site_nbr]) + np.sum(J[:, i//N, :])
    
    # Adjust priorities based on magnetism
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
    # Calculate interaction energies
    interaction_energy = np.sum(J[:, i//N, :])
    
    # Adjust priorities based on interaction energy
    if interaction_energy > 0:
      priorities[i][0] -= interaction_energy
      priorities[i][1] += interaction_energy
    else:
      priorities[i][0] += interaction_energy
      priorities[i][1] -= interaction_energy
    
  return(priorities)




#score: {'data2D.txt': -0.0015686728395061733}
#island_id: 0
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    total_spin = np.sum(h[site_nbr]) + np.sum(J[:, i//N, :])
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
      priorities[i][1] = total_spin + np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
    else:
      priorities[i][0] = total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
      priorities[i][1] = -total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0012121913580246915}
#island_id: 2
#version_generated: 2
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(4)])
    if total_spin > 0:
      priorities[i][0] = h_site + (total_spin/2) + np.sum(np.array([[h[site_nbr][j], h[site_nbr][j]] for j in [(k+N-1)%N for k in range(4)]])).flatten()
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - (total_spin/2) + np.sum(np.array([[h[site_nbr][j], h[site_nbr][j]] for j in [(k+N-1)%N for k in range(4)]])).flatten()
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.003267438271604938}
#island_id: 2
#version_generated: 2
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(4)])
    if total_spin > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003267438271604938}
#island_id: 2
#version_generated: 2
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(4)])
    if total_spin > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000222067901234568}
#island_id: 2
#version_generated: 2
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*np.sign(h[(k+N-1)%N][(i+N-1)%N]) for k in range(2)])
    total_spin_right = sum([J[k,i%N,(i+N-1)%N]*np.sign(h[k][i%N]) for k in range(2)])

    if total_spin_left > 0 and total_spin_right > 0:
      priorities[i][0] = h_site + (total_spin_left + total_spin_right)
      priorities[i][1] = -priorities[i][0]
    elif total_spin_left < 0 and total_spin_right < 0:
      priorities[i][0] = -h_site - (total_spin_left + total_spin_right)
      priorities[i][1] = -priorities[i][0]
    else:
      if total_spin_left > total_spin_right:
        priorities[i][0] = h_site + total_spin_left
        priorities[i][1] = -priorities[i][0]
      elif total_spin_left < total_spin_right:
        priorities[i][0] = -h_site - total_spin_right
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.20756219135802495}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      else:
        if h[site_nbr][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
      if h[i//N][i%N] > 0:
        total_bias -= 1
      else:
        total_bias += 1
    
    priorities[i][0] = total_spin + total_bias
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.23775879629629618}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      
      if h[i//N][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    priorities[i][0] = total_spin + total_bias
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.19114459876543236}
#island_id: 0
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin += 2
        else:
          total_spin -= 2
      else:
        if h[site_nbr][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      
      if h[i//N][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    priorities[i][0] = total_spin + total_bias
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.0003634259259259258}
#island_id: 3
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i//N,k%N]*h[site][k%N]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000902006172839506}
#island_id: 3
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+1)%2+N//2][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009434722222222223}
#island_id: 3
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i//N,site_nbr]*h[i//N][site]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005341820987654321}
#island_id: 3
#version_generated: 2
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        sign = 1
      else:
        sign = -1
      total_spin += J[k,i%N,i//N]*sign*h[site][i%N]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00033040123456790115}
#island_id: 3
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10218873456790134}
#island_id: 3
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
     site = (i + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       total_spin += h_site
     else:
       total_spin -= h_site

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + abs(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - abs(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009434722222222223}
#island_id: 3
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i//N,site_nbr]*h[i//N][site]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008381635802469136}
#island_id: 2
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
     else:
       h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11323070987654321}
#island_id: 2
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.14856496913580247}
#island_id: 2
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    # Calculate priority for each site based on the sum of interactions and magnetism
    priorities[i][0] = total_spin - np.count_nonzero(J[:,i//N,i%N])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.06078811728395062}
#island_id: 2
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin + max(-np.sum(J[:,i//N,i%N]), np.sum(J[:,i//N,i%N]))
  return(priorities)




#score: {'data2D.txt': -0.18605787037037036}
#island_id: 2
#version_generated: 2
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][i//N,i%N] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07763904320987655}
#island_id: 2
#version_generated: 2
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 2
    else:
      total_spin += 2

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16640416666666694}
#island_id: 1
#version_generated: 2
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Sum over all neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add the magnetism at site (i, i//N)
    total_spin += h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.1315557098765432}
#island_id: 2
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priority = total_spin + max(-np.sum(J[:,i//N,i%N]), np.sum(J[:,i//N,i%N]))
    priorities[i][0] = -priority
    priorities[i][1] = priority

  return(priorities)




#score: {'data2D.txt': -0.1072662037037037}
#island_id: 2
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    priority_flip = np.sum(J[:,i//N,i%N]) + 2*h[site_nbr][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin + max(-priority_flip, priority_flip)
  return(priorities)




#score: {'data2D.txt': 0.11323070987654321}
#island_id: 2
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    # Use the fact that spin assignments can be determined independently for each site
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin + max(-total_spin, total_spin)
  return(priorities)




#score: {'data2D.txt': -0.06078811728395062}
#island_id: 2
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin + max(-np.sum(J[:,i//N,i%N]), np.sum(J[:,i//N,i%N]))
  return(priorities)




#score: {'data2D.txt': -1.1574074074073514e-05}
#island_id: 1
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = sum([J[k,i%N,i//N] * h[site_nbr][k] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1712933641975311}
#island_id: 1
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i % N
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_row][i%N]
      priorities[i][1] -= h[site_nbr_row][i%N]
    else:
      priorities[i][0] -= h[site_nbr_row][i%N]
      priorities[i][1] += h[site_nbr_row][i%N]
    
    site_nbr_row = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_col = i % N
    
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr_row][i%N]
      priorities[i][1] -= h[site_nbr_row][i%N]
    else:
      priorities[i][0] -= h[site_nbr_row][i%N]
      priorities[i][1] += h[site_nbr_row][i%N]
    
    site_nbr_row = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_col = i//N
    
    if J[0,i//N,i//N] > 0:
      priorities[i][0] += h[site_nbr_row][i//N]
      priorities[i][1] -= h[site_nbr_row][i//N]
    else:
      priorities[i][0] -= h[site_nbr_row][i//N]
      priorities[i][1] += h[site_nbr_row][i//N]
    
  return(priorities)




#score: {'data2D.txt': -0.002630401234567902}
#island_id: 1
#version_generated: 2
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i] = [total_spin + magnetism, -total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': -0.008381635802469136}
#island_id: 2
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
      h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
     else:
      h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    if J[0,i%N,i//N] > 0:
     priorities[i][1] = -priorities[i][0]
    else:
     priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.013147067901234568}
#island_id: 2
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(4):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][0] = h_site
    if sum(J[j,i%N,i//N] for j in range(4)) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.008381635802469136}
#island_id: 2
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.013348919753086419}
#island_id: 2
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][0] = total_spin
    if np.sum(J[:,i//N,i//N]) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16616836419753087}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sites = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(4)]
    nn_spins = [J[j,i//N,nn_site] for j,nn_site in zip(range(4),nn_sites)]

    if sum(nn_spins) > 0:
      priorities[i][0] = h_site + max([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]

    # Add the bias term
    if J[1,i//N,site_nbr] > 0:
      priorities[i][0] += h_site + max([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site - min([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  # Check if the priority is correct
  for i in range(N**2):
    if np.abs(priorities[i][0]) > np.abs(priorities[i][1]):
      priorities[i][0], priorities[i][1] = priorities[i][1], priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.06747916666666667}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sites = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(4)]
    nn_spins = [J[j,i//N,nn_site] for j,nn_site in zip(range(4),nn_sites)]

    if sum(nn_spins) > 0:
      priorities[i][0] = h_site + max([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]

    # Add the bias term
    if J[3,i//N,site_nbr] > 0:
      priorities[i][0] += h_site + max([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site - min([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16616836419753087}
#island_id: 0
#version_generated: 2
#generate time04:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sites = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(4)]
    nn_spins = [J[j,i//N,nn_site] for j,nn_site in zip(range(4),nn_sites)]

    if sum(nn_spins) > 0:
      priorities[i][0] = h_site + max([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]

    # Add the bias term
    if J[1,i//N,site_nbr] > 0:
      priorities[i][0] += h_site + max([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site - min([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16616836419753087}
#island_id: 0
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sites = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(4)]
    nn_spins = [J[j,i//N,nn_site] for j,nn_site in zip(range(4),nn_sites)]

    if sum(nn_spins) > 0:
      priorities[i][0] = h_site + max([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_spins])
      priorities[i][1] = -priorities[i][0]

    # Add the bias term
    if J[1,i//N,site_nbr] > 0:
      priorities[i][0] += h_site + max([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site - min([J[k, i//N, site_nbr] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.12867206790123473}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += J[3,i%N,j]*h[site_nbr][j]
      
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16386311728395087}
#island_id: 1
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.017844907407407413}
#island_id: 0
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy_diff = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff *= 2*h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy + site_energy_diff
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': 0.14108503086419774}
#island_id: 0
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    total_energy *= h[site_nbr][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff = total_energy + site_energy
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': 0.009209413580246914}
#island_id: 0
#version_generated: 2
#generate time04:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': 0.10162978395061725}
#island_id: 0
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    total_spin += sum(J[j,i//N,(i+N-(j+1)%2)%N] if J[j,i//N,(i+N-(j+1)%2)%N]>0 else -J[j,i//N,(i+N-(j+1)%2)%N] for j in range(4)) * h[i//N][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': 0.1006195987654321}
#island_id: 0
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
  
  return(priorities)




#score: {'data2D.txt': 0.1006195987654321}
#island_id: 0
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))

  # Additional improvement: Sort spins by priority and update neighboring sites
  sorted_priorities = np.argsort(priorities, axis=0)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    else:
      priorities[i][1] = priorities[i][0] + sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))

  return(priorities)




#score: {'data2D.txt': -0.013138734567901236}
#island_id: 2
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum(J[k,i%N,i//N]*(h[site_nbr][i%N] if k < 2 else h[site_nbr2][i%N]) for k, site_nbr2 in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)]))
    priorities[i][0] = h_site
    if sum(J[k,i%N,i//N] for k in range(4)) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.012977623456790124}
#island_id: 2
#version_generated: 2
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if sum(J[k,i%N,i//N] for k in range(4)) > 0:
      sign = -1
    else:
      sign = 1
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = sign * priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004740586419753086}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.014367438271604938}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
    # additional term based on site interactions
    priorities[i][0] -= J[0,i//N,i%N] * (h[(i-1)%N][i%N] + h[(i+1)%N][i%N])
    priorities[i][1] += J[2,i//N,i%N] * (h[(i-1)%N][i%N] + h[(i+1)%N][i%N])
  
  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00794398148148148}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + 2*h_site
      priorities[i][1] = neighbors_spin + 2*h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0021470679012345678}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - neighbors_spin + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbors_spin - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*h_site - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2*h_site + 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009859567901234578}
#island_id: 3
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % (N*N) < N:
      left_spin = h[i%N][0] if J[0,i%N,i//N] > 0 else -h[i%N][0]
    else: 
      left_spin = priorities[(i-1)%N*N][1]

    right_spin = priorities[(i+1)%N*N][1] if i % N < N else h[N-1][i%N] if J[2,i%N,i//N] > 0 else -h[N-1][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - neighbors_spin + left_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbors_spin + right_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.005594598765432098}
#island_id: 1
#version_generated: 2
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = np.sum(h[i//N])
    
    priorities[i] = [total_spin + magnetism, -total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': 0.0006810185185185193}
#island_id: 1
#version_generated: 2
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    if i % N > 0:
      total_spin += h[site_nbr2][i%N] + J[3,i%N,i//N]
      
    for k in range(1,3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N] - h[site_nbr1][i%N]
      else:
        total_spin -= h[site_nbr][i%N] - h[site_nbr1][i%N]
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16621311728395086}
#island_id: 1
#version_generated: 2
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1654507716049385}
#island_id: 1
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i // N
    total_spin = h[site_nbr_row][site_nbr_col]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add horizontal and vertical interactions
    for j in range(N):
      site_nbr_row = (i % N + ((j-1)%2 - 1)) % N
      if J[3, i%N, j] > 0:
        priorities[i][0] += h[site_nbr_row][j]
        priorities[i][1] -= h[site_nbr_row][j]
      else:
        priorities[i][0] -= h[site_nbr_row][j]
        priorities[i][1] += h[site_nbr_row][j]

    # Add diagonal interactions
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16223996913580271}
#island_id: 1
#version_generated: 2
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i//N]
      priorities[i][1] -= h[site_nbr][i//N]
    else:
      priorities[i][0] -= h[site_nbr][i//N]
      priorities[i][1] += h[site_nbr][i//N]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.000756944444444444}
#island_id: 1
#version_generated: 2
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.007510648148148146}
#island_id: 3
#version_generated: 2
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        sign = 1
      else:
        sign = -1
      total_spin += J[k,i%N,i//N]*sign*h[site][i%N]
      
    priority = h_site + total_spin
    
    if priority > 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      priorities[i][0] = -1
      priorities[i][1] = 1
      
  return(priorities)




#score: {'data2D.txt': 0.00616712962962963}
#island_id: 3
#version_generated: 2
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        sign = 1
      else:
        sign = -1
      total_spin += J[k,i%N,i//N]*sign*h[site][i%N]
    
    if np.sum(h) > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005341820987654321}
#island_id: 3
#version_generated: 2
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        sign = 1
      else:
        sign = -1
      total_spin += J[k,i%N,i//N]*sign*h[site][i%N]
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006356481481481482}
#island_id: 2
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priority_up = total_spin + max(-np.sum(J[:,i//N,i%N]), 0)
    priority_down = -total_spin + max(np.sum(J[:,i//N,i%N]), 0)

    priorities[i][0] = -min(priority_up, priority_down)
    priorities[i][1] = max(priority_up, priority_down)

  return(priorities)




#score: {'data2D.txt': -0.0009270061728395067}
#island_id: 2
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N])
    if total_spin > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05776712962962964}
#island_id: 2
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= total_spin - sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.003063117283950618}
#island_id: 2
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N])
    if total_spin > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009270061728395067}
#island_id: 2
#version_generated: 2
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N])
    if total_spin > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11323070987654321}
#island_id: 2
#version_generated: 2
#generate time04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priority = -total_spin + max(-total_spin, total_spin)
    priorities[i][0] = -priority
    priorities[i][1] = priority

  return(priorities)




#score: {'data2D.txt': 0.061619290123456794}
#island_id: 2
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1

    priority_up = total_spin + max(-np.sum(J[:,i//N,i%N]), np.sum(J[:,i//N,i%N]))
    priority_down = -total_spin - min(-np.sum(J[:,i//N,i%N]), -np.sum(J[:,i//N,i%N]))

    priorities[i][0] = -priority_up
    priorities[i][1] = -priority_down

  return(priorities)




#score: {'data2D.txt': 0.00034799382716049353}
#island_id: 3
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
    # Add an additional term to the priority based on the overall magnetism
    if np.sum(h) > 0:
      priorities[i][0] -= np.sum(h)
      priorities[i][1] += np.sum(h)
    else:
      priorities[i][0] += np.sum(h)
      priorities[i][1] -= np.sum(h)
  
  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h[site_nbr][i%N]
      priorities[i][1] = neighbors_spin + h[site_nbr][i%N]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02971064814814815}
#island_id: 1
#version_generated: 2
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)//2 - 1)) % N

    row_spin = h[site_nbr_row][i%N]
    col_spin = np.sum(h[:,i%N])

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        row_spin += 1
        col_spin += 1
      else:
        row_spin -= 1
        col_spin -= 1

    priorities[i][0] = row_spin + col_spin
    priorities[i][1] = -row_spin - col_spin

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': -0.06800663580246916}
#island_id: 3
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + (1-h_site)
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0041375}
#island_id: 3
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site + J[0,i//N,i//N]*h[i//N][i%N]
    else:
      priorities[i][0] = -h_site - neighbors_spin + J[0,i//N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.018506327160493826}
#island_id: 3
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.11230478395061742}
#island_id: 1
#version_generated: 2
#generate time04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i//N]
        priorities[i][1] -= h[site_nbr][i//N]
      else:
        priorities[i][0] -= h[site_nbr][i//N]
        priorities[i][1] += h[site_nbr][i//N]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time04:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': -0.018670833333333334}
#island_id: 3
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
    # Add the site's own magnetism to both options
    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] += h[i//N][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.12449768518518535}
#island_id: 3
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
  
  return(priorities)




#score: {'data2D.txt': -0.018506327160493826}
#island_id: 3
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.00019429012345679002}
#island_id: 2
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00019429012345679002}
#island_id: 2
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor

    # Normalize the priority values to ensure that they are between 0 and 1
    max_priority = np.max(priorities[i])
    if max_priority > 0:
      priorities[i] /= max_priority

  return(priorities)




#score: {'data2D.txt': -0.022686265432098764}
#island_id: 2
#version_generated: 2
#generate time04:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003078703703703707}
#island_id: 2
#version_generated: 2
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 2
    elif total_spin[1] < 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.0014927469135802467}
#island_id: 2
#version_generated: 2
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = (i // N + ((d-1)%2 - 1)) % N
      if i // N == neighbor or i % N == site_nbr % N:
        continue
      interaction = J[d,i//N,site_nbr]*h[neighbor][i%N]
      total_spin += interaction

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19226620370370398}
#island_id: 3
#version_generated: 2
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)

    # Add a term to encourage more magnetization
    if h[i//N][i%N] > 0:
      priorities[i][0] += abs(h_site)
      priorities[i][1] -= abs(h_site)
    else:
      priorities[i][0] -= abs(h_site)
      priorities[i][1] += abs(h_site)

  return(priorities)




#score: {'data2D.txt': 0.12447608024691374}
#island_id: 3
#version_generated: 2
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])
  
  return(priorities)




#score: {'data2D.txt': 0.12449768518518535}
#island_id: 3
#version_generated: 2
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)

  return(priorities)




#score: {'data2D.txt': 8.533950617283953e-05}
#island_id: 2
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 2*total_spin[0]
      priorities[i][1] += 4
    elif total_spin[1] < 0:
      priorities[i][0] += 2*total_spin[0]
      priorities[i][1] -= 4

  return(priorities)




#score: {'data2D.txt': -0.006466203703703703}
#island_id: 2
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      if h[site_nbr][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 2
    elif total_spin[1] < 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': 0.0003078703703703707}
#island_id: 2
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 2
    elif total_spin[1] < 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.0005415123456790127}
#island_id: 0
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_spin = np.sum(h[site_nbr], axis=0)
    if np.sign(total_spin).any():
      priorities[i][np.argmax(np.abs(total_spin)) + 1] += 1
  return(priorities)




#score: {'data2D.txt': 0.15333225308641996}
#island_id: 0
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      delta = 2*h[site_nbr][i%N]
      priorities[i][0] -= delta / 4
      priorities[i][1] += 1 if delta > 0 else -1
    else:
      total_energy = (h[site_nbr][i%N] + h[i//N][i%N]) + nn_energy
      priorities[i][0] -= total_energy / 2
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.0007535493827160494}
#island_id: 0
#version_generated: 2
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[k,i//N,i%N] * (h[site_nbr][i%N] - h[(i+k-1)%N][i%N]) for k in range(3))
    if total_spin > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time04:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': -0.04725293209876544}
#island_id: 3
#version_generated: 2
#generate time04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])
    
    # add a term to favor alignment with neighboring spins
    for k in range(3):
      if J[k,i//N,i%N] > 0:
        if h[(k+N-1)%N][i%N] > 0:
          priorities[i][0] += 2 * abs(h[(k+N-1)%N][i%N])
          priorities[i][1] -= 2 * abs(h[(k+N-1)%N][i%N])
        else:
          priorities[i][0] -= 2 * abs(h[(k+N-1)%N][i%N])
          priorities[i][1] += 2 * abs(h[(k+N-1)%N][i%N])
      else:
        if h[(k+N-1)%N][i%N] > 0:
          priorities[i][0] -= 2 * abs(h[(k+N-1)%N][i%N])
          priorities[i][1] += 2 * abs(h[(k+N-1)%N][i%N])
        else:
          priorities[i][0] += 2 * abs(h[(k+N-1)%N][i%N])
          priorities[i][1] -= 2 * abs(h[(k+N-1)%N][i%N])
    
  return(priorities)




#score: {'data2D.txt': -0.08245910493827165}
#island_id: 1
#version_generated: 2
#generate time04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i][0] = total_spin + magnetism
    priorities[i][1] = -total_spin - magnetism
  
  return(priorities)




#score: {'data2D.txt': 0.11533317901234581}
#island_id: 1
#version_generated: 2
#generate time04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= 1
        priorities[i][1] += 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.012708487654320987}
#island_id: 2
#version_generated: 2
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      if np.sum(h) > 0:
        priorities[i][0] *= -1

  return(priorities)




#score: {'data2D.txt': -0.022686265432098764}
#island_id: 2
#version_generated: 2
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013381172839506171}
#island_id: 2
#version_generated: 2
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

    # Add the interaction with the four neighbors
    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_neighbor
    return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': -0.0017010802469135807}
#island_id: 1
#version_generated: 2
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = []
    for j in range(4):
      site_nbrs.append((i % N + ((j-1)%2 - 1)) % N)
    
    total_spin = sum(h[site_nbr][i%N] if J[j,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.018506327160493826}
#island_id: 3
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h[site_nbr][i%N]
      priorities[i][1] = 2*neighbors_spin + h[site_nbr][i%N]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.003961882716049384}
#island_id: 3
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + (1+h_site)
      priorities[i][1] = neighbors_spin + (1-h_site)
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + 2*h_site
      priorities[i][1] = 2*neighbors_spin + 2*h_site
    else:
      priorities[i][0] = -2*h_site - 2*neighbors_spin
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.007524845679012346}
#island_id: 3
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -neighbors_spin + h_site
      priorities[i][1] = neighbors_spin + h_site
    else:
      priorities[i][0] = -h_site - neighbors_spin
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.005544907407407407}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(J[:,i//N,i%N])
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= np.sum(J[:,i//N,i%N])
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.002785956790123457}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    total_magnetism = np.sum(J[:,i//N,i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + total_magnetism
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin + total_magnetism
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.046673919753086414}
#island_id: 0
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin + np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = total_spin - np.sum(J[:,i//N,i%N])
  return(priorities)




#score: {'data2D.txt': 0.06635231481481484}
#island_id: 3
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # Add a bias to the priority for sites with strong interactions
    if neighbors_spin > 0.5:
      priorities[i][0] += 0.5
      priorities[i][1] -= 0.5
    elif neighbors_spin < -0.5:
      priorities[i][0] -= 0.5
      priorities[i][1] += 0.5
  
  return(priorities)




#score: {'data2D.txt': -0.0007841049382716053}
#island_id: 3
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = -2*np.tanh(neighbors_spin) * (np.exp(h_site) if h_site > 0 else np.exp(-h_site))
      priorities[i][1] = 2*np.tanh(neighbors_spin) * (np.exp(h_site) if h_site > 0 else np.exp(-h_site))
  return(priorities)




#score: {'data2D.txt': 0.12395293209876557}
#island_id: 3
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = neighbors_spin * (2*(h[i//N][i%N] < 0) - 1)
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
  
  return(priorities)




#score: {'data2D.txt': -0.0019745370370370385}
#island_id: 2
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr::N]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr::N]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008797839506172841}
#island_id: 2
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([abs(J[k, i % N, i // N]) * (h[site_nbr][i % N] - h[(k + N - 1) % N][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum([abs(J[k, i % N, i // N]) * (h[site_nbr][i % N] - h[(k + N - 1) % N][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h[site_nbr][i%N] - total_spin) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019745370370370385}
#island_id: 2
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr::N]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr::N]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019745370370370385}
#island_id: 2
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr::N]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr::N]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0027949074074074074}
#island_id: 2
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr::N]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr::N]) - total_spin
      priorities[i][1] = -priorities[i][0]

  # Additional improvement: Sort the priority list in descending order of `priorities[i][0]` and then by `priorities[i][1]`.
  indices = np.argsort((-priorities).sum(axis=1))
  priorities = priorities[indices]
  return(priorities)




#score: {'data2D.txt': -0.0019745370370370385}
#island_id: 2
#version_generated: 2
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr::N]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr::N]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02601126543209877}
#island_id: 0
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    energy_diff = total_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    energy_diff /= 2
    if sum(J[:,i//N,site_nbr]) > 0:
      priorities[i][0] = energy_diff
      priorities[i][1] = -energy_diff
    else:
      priorities[i][0] = -energy_diff
      priorities[i][1] = energy_diff
  return(priorities)




#score: {'data2D.txt': -0.02601126543209877}
#island_id: 0
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    energy_diff = total_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    if sum(J[:,i//N,site_nbr]) > 0:
      priorities[i][0] = energy_diff
      priorities[i][1] = -energy_diff
    else:
      priorities[i][0] = -energy_diff
      priorities[i][1] = energy_diff
  return(priorities)




#score: {'data2D.txt': -0.13920632716049386}
#island_id: 0
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    energy_diff = total_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy if sum(J[:,i//N,site_nbr]) > 0 else total_energy
  return(priorities)




#score: {'data2D.txt': -0.02601126543209877}
#island_id: 0
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    energy_diff = total_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    if sum(J[:,i//N,site_nbr]) > 0:
      priorities[i][0] = energy_diff
      priorities[i][1] = -energy_diff
    else:
      priorities[i][0] = -energy_diff
      priorities[i][1] = energy_diff
  return(priorities)




#score: {'data2D.txt': 0.12447608024691374}
#island_id: 3
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.1672837962962963}
#island_id: 3
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # sum of the magnetism at the current site and its neighbors
    total_magnetism = h[i//N][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_magnetism > 0:
      priorities[i][0] = -2*total_magnetism
      priorities[i][1] = 2*total_magnetism + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*total_magnetism]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*total_magnetism]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.021317438271604934}
#island_id: 3
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])
    
    # add a term to encourage alignment with the majority spin
    site_spin = (h[i//N][i%N] > 0) * 2 - 1
    neighbors_spin_avg = np.sum([J[k,i%N,i//N]*site_spin for k in range(3)]) / 3
    priorities[i][0] += neighbors_spin_avg
    priorities[i][1] -= neighbors_spin_avg
  
  return(priorities)




#score: {'data2D.txt': -0.028468981481481484}
#island_id: 3
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)

    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

    # add a term to favor alignment with nearest neighbors
    for j in range(N):
      if (j==0 or h[(i//N)%N][(i%(N-1))]) > 0:
        priorities[i][0] += 2 * h[j][i%N]
        priorities[i][1] -= 2 * h[j][i%N]

  return(priorities)




#score: {'data2D.txt': -0.012708487654320987}
#island_id: 2
#version_generated: 2
#generate time04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      if np.sum(h) > 0:
        priorities[i][0] *= -1
    total = np.sum(priorities[i])
    for k in range(2):
      priorities[i][k] -= total / 2
  return(priorities)




#score: {'data2D.txt': 0.01255570987654321}
#island_id: 2
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      if np.sum(h) > 0:
        priorities[i][0] *= -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][1] += np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': -0.009282870370370372}
#island_id: 2
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      if np.sum(h) > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0035763888888888894}
#island_id: 2
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      if h[site_nbr][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= (total_spin[0]+total_spin[1])**2/4
      priorities[i][1] += 2*(total_spin[0]+total_spin[1])
    elif total_spin[1] < 0:
      priorities[i][0] += (total_spin[0]-total_spin[1])**2/4
      priorities[i][1] -= 2*(total_spin[0]-total_spin[1])

  return(priorities)




#score: {'data2D.txt': 0.0003078703703703707}
#island_id: 2
#version_generated: 2
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]*h[(site_nbr+d+2)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 2
    elif total_spin[1] < 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.0002998456790123461}
#island_id: 2
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      if i // N == (site_nbr + ((d-1)%2 - 1)) % N or i % N == site_nbr % N:
        continue
      h_neighbor = J[d,i//N,site_nbr]
      priorities[i][0] += h_site * h_neighbor
      priorities[i][1] = -priorities[i][0]

    # additional computation to improve the priority function
    total_spin = np.sum(priorities[:i], axis=0)
    if total_spin[1] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 2
    elif total_spin[1] < 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0018124999999999999}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k, i//N, i//N] for k in range(4)])
    else:
      total_spin = -sum([J[k, i//N, i//N] for k in range(4)])
    
    if J[3, i//N, i%N] > 0:
      total_spin += h[site_nbr][i%N]
    elif J[3, i//N, i%N] < 0:
      total_spin -= h[site_nbr][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1654507716049385}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N) % N
    
    total_spin = h[site_nbr_row][site_nbr_col]
    
    # Add interaction with nearest neighbors
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Prioritize spin assignment based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.07447947530864202}
#island_id: 1
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i//N,i%N] > 0:
       total_spin += h[site_nbr][i%N]
       priorities[i][0] -= h[site_nbr][i%N]
       priorities[i][1] += h[site_nbr][i%N]
     else:
       total_spin -= h[site_nbr][i%N]
       priorities[i][0] += h[site_nbr][i%N]
       priorities[i][1] -= h[site_nbr][i%N]
    
    if J[3,i//N,i%N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
     priorities[i] = [total_spin, -total_spin]
    else:
     priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.1613686728395064}
#island_id: 1
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
    for j in range(2):
      priorities[i][j] *= np.sign(priorities[i][j])
  return(priorities)




#score: {'data2D.txt': 0.03331898148148148}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1

      priorities[i][0] += h_site*h_neighbor
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.08552237654320988}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin_energy = h[site_nbr][i%N]
    neighbor_contributions = []
    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      energy = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      neighbor_contributions.append(energy)
    total_energy = spin_energy + sum(neighbor_contributions)
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012050925925925925}
#island_id: 2
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      total_spin += h_neighbor
    if np.sum(h[site_nbr]) > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': -0.020127314814814817}
#island_id: 2
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      J_val = J[d,i//N,neighbor[0]]
      priorities[i][0] += h_site * J_val
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  priority_total = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': 0.03331898148148148}
#island_id: 2
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1

      priorities[i][0] += h_site*h_neighbor
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.12094614197530865}
#island_id: 2
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1

      priorities[i][0] += h_site*h_neighbor + h_neighbor
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11913657407407421}
#island_id: 3
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      edge_penalty = 10 * abs(h[i//N][i%N])
      priorities[i][0] += edge_penalty / 2
      priorities[i][1] -= edge_penalty / 2
    
  return(priorities)




#score: {'data2D.txt': -0.06991836419753089}
#island_id: 3
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the priority for each spin state
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    else:
      priorities[i][0] = -np.max([-h_site, -2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]) * (1 if h_site > 0 else -1)
    
    # Add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])
  
  return(priorities)




#score: {'data2D.txt': -0.19235293209876567}
#island_id: 3
#version_generated: 2
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

  # add a term to prioritize the current site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += abs(h_site)
      priorities[i][1] -= abs(h_site)
    else:
      priorities[i][0] -= abs(h_site)
      priorities[i][1] += abs(h_site)

  return(priorities)




#score: {'data2D.txt': -0.02569922839506173}
#island_id: 2
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += np.sign(h_site + h_neighbor)
      priorities[i][1] -= 2*np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': -0.00010941358024691294}
#island_id: 2
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      J_val = J[(d+2)%4,i//N,neighbor[0]]
      h_neighbor = J_val*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += spin_bias * h_neighbor
      priorities[i][1] -= 1*np.sign(h_neighbor)
  return(priorities)




#score: {'data2D.txt': 0.0015276234567901232}
#island_id: 2
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_site + h_neighbor
      if np.sum(h) > 0:
        priorities[i][0] *= -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][1] += np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': -0.0017822530864197532}
#island_id: 2
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if np.sum(h[site_nbr]) > 0:
      priorities[i][0] += np.sum(h[site_nbr])
      priorities[i][1] -= len(h[site_nbr])
    else:
      priorities[i][0] -= np.sum(h[site_nbr])
      priorities[i][1] += len(h[site_nbr])

  for i in range(N**2):
    for d in range(4):
      neighbor = ((i % N + (d-1)%2) % N, i // N)
      if neighbor == (i % N, i // N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_neighbor
      if np.sum(h) > 0:
        priorities[i][1] -= np.sign(h_neighbor)
      else:
        priorities[i][1] += np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1403445987654323}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11631959876543223}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16573317901234594}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = i % N
    site_nbr_col = i // N
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_row][(k+1)%2] + h[site_nbr_col][(k+1)%2]
        priorities[i][1] -= h[site_nbr_row][(k+1)%2] - h[site_nbr_col][(k+1)%2]
      else:
        priorities[i][0] -= h[site_nbr_row][(k+1)%2] + h[site_nbr_col][(k+1)%2]
        priorities[i][1] += h[site_nbr_row][(k+1)%2] - h[site_nbr_col][(k+1)%2]
    
  return(priorities)




#score: {'data2D.txt': 0.0018600308641975325}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin1 = h[site_nbr1][i%N]
    total_spin2 = h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin1 += 1
        total_spin2 -= 1
      else:
        total_spin1 -= 1
        total_spin2 += 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin1, -total_spin2]
    else:
      priorities[i] = [-total_spin1, total_spin2]
    
  return(priorities)




#score: {'data2D.txt': -0.006468364197530864}
#island_id: 1
#version_generated: 2
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,-1] for _ in range(N**2)]
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    
    priorities[i][0] = total_spin
    priorities[i][1] *= -1
    
  return(priorities)




#score: {'data2D.txt': 0.0008047839506172833}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1 + np.sum((J[:, i//N, i%N] - J[1, i//N, i%N]) * (h[(i-1)%N][i%N] if i % N != 0 else h[site_nbr][i%N]))
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1 + np.sum((J[:, i//N, i%N] - J[1, i//N, i%N]) * (h[(i-1)%N][i%N] if i % N != 0 else h[site_nbr][i%N]))
  return(priorities)




#score: {'data2D.txt': 0.001602006172839506}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N%N,i%N] * h[site_nbr][i%N] for k in [0,1])
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.0013742283950617285}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy_plus = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_energy_minus = sum(J[k,i//N,i%N] * (-h[(i+k-1)%N][i%N]) for k in range(3))
    if total_energy_plus > total_energy_minus:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy_plus < total_energy_minus:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.0013742283950617285}
#island_id: 0
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.12094614197530865}
#island_id: 2
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      J_val = J[d,i//N,neighbor[0]]
      h_neighbor = 1 if J_val > 0 else -1

      priorities[i][0] += h_site*h_neighbor + h_neighbor
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.05009151234567901}
#island_id: 2
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    total_spin = 0
    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1
      
      total_spin += h_neighbor
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.12094614197530865}
#island_id: 2
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1

      priorities[i][0] += h_site*h_neighbor + h_neighbor
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1575625}
#island_id: 2
#version_generated: 2
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for d in range(4):
      neighbor = ((site_nbr + (d-1)%2) % N, i % N)
      if neighbor == (site_nbr, i % N):
        continue
      if J[d,i//N,neighbor[0]] > 0:
        h_neighbor = 1
      else:
        h_neighbor = -1

      priorities[i][0] += h_site*h_neighbor + 2*J[d,i//N,neighbor[0]]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.060959413580246945}
#island_id: 3
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # sum of the magnetism at the current site and its neighbors
    total_magnetism = h[i//N][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_magnetism > 0:
      priorities[i][0] = -2*total_magnetism
      priorities[i][1] = 2*total_magnetism + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*total_magnetism]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*total_magnetism]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] += np.sum([abs(J[k,site_nbr,i%N]) for k in range(3)])
    priorities[i][1] -= np.sum([abs(J[k,site_nbr,i%N]) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.07181311728395065}
#island_id: 3
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += -2*total_spin
      priorities[i][1] -= 2*total_spin + h_site
    else:
      priorities[i][0] -= np.max([-h_site, -2*total_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] += np.min([h_site, 2*total_spin]) * (1 if h_site > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.1672837962962963}
#island_id: 3
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # sum of the magnetism at the current site and its neighbors
    total_magnetism = h[i//N][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_magnetism > 0:
      priorities[i][0] = -2*total_magnetism
      priorities[i][1] = 2*total_magnetism + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*total_magnetism]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*total_magnetism]) * (1 if h_site > 0 else -1)

    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += 10 * abs(h[i//N][i%N])
      priorities[i][1] += 10 * abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16525632716049407}
#island_id: 1
#version_generated: 2
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': 0.11593626543209891}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr1][i%N]
    else:
      total_spin = -h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr3 = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr3][j]
        priorities[i][1] -= h[site_nbr3][j]
      else:
        priorities[i][0] -= h[site_nbr3][j]
        priorities[i][1] += h[site_nbr3][j]
    
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr4][i%N]
      priorities[i][1] -= h[site_nbr4][i%N]
    else:
      priorities[i][0] -= h[site_nbr4][i%N]
      priorities[i][1] += h[site_nbr4][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time05:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return priorities




#score: {'data2D.txt': 0.002007253086419754}
#island_id: 0
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    if np.sum(J[:,i//N,i//N]) > 0:
      priorities[i][1] = -priorities[i][0]
      priority_sum = np.sum(np.abs(J[:,i//N,i//N]))
      if J[3,i//N,site_nbr] > 0:
        priority_sum += h[i//N][i%N]
      else:
        priority_sum -= h[i//N][i%N]

      priorities[i][0] = h_site + nn_energy + (J[3,i//N,site_nbr] - J[1,i//N,site_nbr]) * np.tanh((priority_sum)/2.0)
    else:
      if i % N < N/2:
        priorities[i][1] = 1
        priorities[i][0] = -1
      else:
        priorities[i][1] = -1
        priorities[i][0] = 1
  return(priorities)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for k in range(4):
      if k == 0:
        nn_energy += J[k,i//N,site_nbr] * h[i//N][i%N]
      else:
        nn_energy += J[k,i//N,site_nbr] * h[(i+k-1)%N][(i+k-1)%N]

    if np.sum(J[:,i//N,i//N]) > 0:
      priority_sum = -np.sum(np.abs(J[:,i//N,i//N]))
    else:
      priority_sum = np.sum(np.abs(J[:,i//N,i//N]))

    h_site = 2*h[site_nbr][i%N] * (1 + np.tanh((priority_sum)/4.0))
    priorities[i][0] = -h_site
    priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = 0
    for k in [1,2]: 
      if J[k,i//N,site_nbr] > 0:
        nn_energy += h[i//N][i%N]
      else: 
        nn_energy -= h[i//N][i%N]

    priorities[i][0] = -np.tanh(h[site_nbr][i%N] + nn_energy)
    priorities[i][1] = np.tanh(-h[site_nbr][i%N] - nn_energy)
  return(priorities)




#score: {'data2D.txt': -0.04073256172839506}
#island_id: 0
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_energy = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy += h[i//N][i%N]
    else:
      nn_energy -= h[i//N][i%N]

    priority_sum = np.sum(np.abs(J[:,i//N,i//N])) + (J[3,i//N,site_nbr] - J[1,i//N,site_nbr])
    priorities[i][0] = h_site + nn_energy + priority_sum * np.tanh((np.sum(priorities[:i], axis=0)).sum() / 2.0)
  return(priorities)




#score: {'data2D.txt': -0.0007841049382716053}
#island_id: 3
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin_sign = np.sign(neighbors_spin)
      priorities[i][0] = -2*neighbors_spin_sign*np.abs(neighbors_spin) + h_site
      priorities[i][1] = 2*neighbors_spin_sign*np.abs(neighbors_spin) + h_site
  return(priorities)




#score: {'data2D.txt': -0.0007841049382716053}
#island_id: 3
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = np.tanh(neighbors_spin)
      priorities[i][0] = (np.exp(h_site) if h_site > 0 else np.exp(-h_site)) * (1 - 2*neighbors_spin)
      priorities[i][1] = (np.exp(h_site) if h_site > 0 else np.exp(-h_site)) * (2*neighbors_spin + 1)
  return(priorities)




#score: {'data2D.txt': -0.1984495370370373}
#island_id: 3
#version_generated: 2
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin_abs = np.abs(neighbors_spin)
      priorities[i][0] = -2*np.exp(-neighbors_spin_abs) * (np.exp(h_site) if h_site > 0 else np.exp(-h_site))
      priorities[i][1] = 2*np.exp(-neighbors_spin_abs) * (np.exp(h_site) if h_site > 0 else np.exp(-h_site))
  return(priorities)




#score: {'data2D.txt': -0.22585848765432098}
#island_id: 3
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = neighbors_spin * (2*(h[i//N][i%N] < 0) - 1)
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # additional term to account for magnetism
    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] -= h[i//N][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.04080910493827161}
#island_id: 3
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = neighbors_spin * (2*(h[i//N][i%N] < 0) - 1)
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # Add a correction term to balance the priority for sites with strong magnetism
    if abs(h_site) > 0.5:
      priorities[i][0] -= h_site**2
      priorities[i][1] += h_site**2
  
  return(priorities)




#score: {'data2D.txt': -0.011707253086419773}
#island_id: 3
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = neighbors_spin * (2*(h[i//N][i%N] < 0) - 1)
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # Additional term to favor the majority vote
    majority_vote = np.sign(np.sum(h))
    if np.all(h >= 0):
      majority_vote = 1
    priorities[i][0] += majority_vote
    priorities[i][1] -= majority_vote
  
  return(priorities)




#score: {'data2D.txt': 0.12395293209876557}
#island_id: 3
#version_generated: 2
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      neighbors_spin = neighbors_spin * (2*(h[i//N][i%N] < 0) - 1)
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
  
  return(priorities)




#score: {'data2D.txt': -0.0017822530864197532}
#island_id: 2
#version_generated: 2
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if np.sum(h[site_nbr]) > 0:
      priorities[i][0] += np.sum(h[site_nbr])
      priorities[i][1] -= len(h[site_nbr])
    else:
      priorities[i][0] -= np.sum(h[site_nbr])
      priorities[i][1] += len(h[site_nbr])

    for d in range(4):
      neighbor = ((i % N + (d-1)%2) % N, i // N)
      if neighbor == (i % N, i // N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_neighbor
      if np.sum(h) > 0:
        priorities[i][1] -= np.sign(h_neighbor)
      else:
        priorities[i][1] += np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': -0.0017822530864197532}
#island_id: 2
#version_generated: 2
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if np.sum(h[site_nbr]) > 0:
      priorities[i][0] += np.sum(h[site_nbr])
      priorities[i][1] -= len(h[site_nbr])
    else:
      priorities[i][0] -= np.sum(h[site_nbr])
      priorities[i][1] += len(h[site_nbr])
    
    for d in range(4):
      neighbor = ((i % N + (d-1)%2) % N, i // N)
      if neighbor == (i % N, i // N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_neighbor
      if np.sum(h) > 0:
        priorities[i][1] -= np.sign(h_neighbor)
      else:
        priorities[i][1] += np.sign(h_neighbor)
  
  return(priorities)




#score: {'data2D.txt': -0.0017822530864197532}
#island_id: 2
#version_generated: 2
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if np.sum(h[site_nbr]) > 0:
      priorities[i][0] += np.sum(h[site_nbr])
      priorities[i][1] -= len(h[site_nbr])
    else:
      priorities[i][0] -= np.sum(h[site_nbr])
      priorities[i][1] += len(h[site_nbr])

    for d in range(4):
      neighbor = ((i % N + (d-1)%2) % N, i // N)
      if neighbor == (i % N, i // N):
        continue
      h_neighbor = J[d,i//N,neighbor[0]]*h[neighbor[0]][neighbor[1]]
      priorities[i][0] += h_neighbor
      if np.sum(h) > 0:
        priorities[i][1] -= np.sign(h_neighbor)
      else:
        priorities[i][1] += np.sign(h_neighbor)

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.0019449074074074076}
#island_id: 1
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       total_spin += h[site_nbr][i%N]
     else:
       total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
     priorities[i][0] = total_spin
     priorities[i][1] = -total_spin
    else:
     priorities[i][0] = -total_spin
     priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.02665817901234568}
#island_id: 0
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    magnetism = np.sum(h)
    if magnetism > 0:
      priorities[i][0] += total_energy / (magnetism * 2) - (np.count_nonzero(h) % 2)
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= total_energy / (abs(magnetism)) - (np.count_nonzero(h) % 2)
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.021363425925925928}
#island_id: 0
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if np.sum(h) > 0:
      priorities[i][0] += abs(total_energy)
      priorities[i][1] -= np.sign(total_energy)
    else:
      priorities[i][0] -= abs(total_energy)
      priorities[i][1] += np.sign(total_energy)
  return(priorities)




#score: {'data2D.txt': 0.060661265432098765}
#island_id: 0
#version_generated: 2
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    priority_total = np.array([total_energy, -total_energy])
    priorities[i] = (priority_total + np.sum(h, axis=None)) / 2 if np.sum(h) > 0 else (-priority_total + np.sum(h, axis=None)) / 2
  return(priorities)




#score: {'data2D.txt': 0.11913657407407421}
#island_id: 3
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h[site_nbr][i%N]
      priorities[i][1] = 2*neighbors_spin + h[site_nbr][i%N]
    else:
      priorities[i][0] = np.max([-h[site_nbr][i%N], -2*neighbors_spin]) * (1 if h[site_nbr][i%N] < 0 else -1)
      priorities[i][1] = np.min([h[site_nbr][i%N], 2*neighbors_spin]) * (1 if h[site_nbr][i%N] > 0 else -1)
    
    # add a term to penalize flips
    if i % N == 0 or i % N == N-1:
      edge_penalty = 10 * abs(h[i//N][i%N])
      priorities[i][0] += edge_penalty / 2
      priorities[i][1] -= edge_penalty / 2
  
  return(priorities)




#score: {'data2D.txt': 0.11804953703703719}
#island_id: 3
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -2*neighbors_spin + h_site
      priorities[i][1] = 2*neighbors_spin + h_site
    else:
      priorities[i][0] = np.max([-h_site, -2*neighbors_spin]) * (1 if h_site < 0 else -1)
      priorities[i][1] = np.min([h_site, 2*neighbors_spin]) * (1 if h_site > 0 else -1)
    
    # Add a term to penalize flips
    edge_penalty = 10 * abs(h[i//N][i%N])
    if i % N == 0 or i % N == N-1:
      priorities[i][0] += edge_penalty / 2
      priorities[i][1] -= edge_penalty / 2
    else:
      priorities[i][0] += edge_penalty / (N-1)
      priorities[i][1] -= edge_penalty / (N-1)

  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
  return(priorities)




#score: {'data2D.txt': 0.06221929012345679}
#island_id: 0
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*row_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002346759259259259}
#island_id: 3
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    priorities[i][0] = h_site + row_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023137345679012356}
#island_id: 3
#version_generated: 2
#generate time05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06088688271604938}
#island_id: 0
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1, 0]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09463842592592592}
#island_id: 0
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1, 0, 1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    for k in [-1, 0, 1]:
      x = (i+k)%N*N + ((i+k)//N-1)%2
      if 0 <= x < N**2:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][((x%N)+k)%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.10038873456790123}
#island_id: 0
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      priorities[i][0] = 1
      priorities[i][1] = -1
  return(priorities)




#score: {'data2D.txt': 0.14726682098765434}
#island_id: 0
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.14408842592592613}
#island_id: 1
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum(J[:,i//N,i%N]) - J[3,i//N,i%N]
      priorities[i][1] -= sum(J[:,i//N,i%N]) - J[3,i//N,i%N]
    else:
      priorities[i][0] -= sum(J[:,i//N,i%N]) - J[3,i//N,i%N]
      priorities[i][1] += sum(J[:,i//N,i%N]) - J[3,i//N,i%N]
  return(priorities)




#score: {'data2D.txt': 0.16178194444444466}
#island_id: 1
#version_generated: 2
#generate time05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1-i//N] > 0:
      priorities[i][0] += h[site_nbr][N-1-i//N]
      priorities[i][1] -= h[site_nbr][N-1-i//N]
    else:
      priorities[i][0] -= h[site_nbr][N-1-i//N]
      priorities[i][1] += h[site_nbr][N-1-i//N]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N-1)%2 - 1)) % N if i//N < N else (i % N + ((i//N-2)%2 - 1)) % N
    total_spin_row = h[site_nbr_row][i%N]
    total_spin_col = h[site_nbr_col][i//N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin_row += 1
        total_spin_col -= 1
      else:
        total_spin_row -= 1
        total_spin_col += 1

    priorities[i] = [total_spin_row, -total_spin_row]
  return(priorities)




#score: {'data2D.txt': -0.0018856481481481482}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]

    # Add interactions with diagonally neighboring sites
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] += 3.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] -= 2.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0018856481481481482}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
    
    for k in range(3):
     site = (i % N + ((k-1)%2 - 1)) % N
     if h[site][i%N] > 0:
       priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
       priorities[i][1] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
     else:
       priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
       priorities[i][1] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]

    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
     priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] += 3.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
     priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] -= 2.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0017266975308641971}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 4.5
      priorities[i][1] -= 3 * total_spin
    else:
      priorities[i][0] -= total_spin * 4.5
      priorities[i][1] += 3 * total_spin
    
    for k in range(3):
     site = (i % N + ((k-1)%2 - 1)) % N
     if h[site][i%N] > 0:
      priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
      priorities[i][1] += 4.5 * np.sum(J[:,site,i%N])*h[site][i%N]
     else:
      priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
      priorities[i][1] -= 3 * np.sum(J[:,site,i%N])*h[site][i%N]

    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
     priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] += 4.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
     priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] -= 3 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0018856481481481482}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
    
    for k in range(3):
     site = (i % N + ((k-1)%2 - 1)) % N
     if h[site][i%N] > 0:
      priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
      priorities[i][1] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
     else:
      priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
      priorities[i][1] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]

    # Add interactions with diagonally neighboring sites
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
     priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] += 3.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
     priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
     priorities[i][1] -= 2.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.000322067901234568}
#island_id: 2
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      for j in range(3):
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        h_site += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    else:
      for j in range(3):
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        h_site -= J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total
    priorities[i][1] = -total

  return(priorities)




#score: {'data2D.txt': -0.0003739197530864197}
#island_id: 2
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else 0
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else 0
    top_h = h[i//N][(i-1)%N] if i // N > 0 else 0
    bot_h = h[i//N][(i+1)%N] if i // N < N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*left_h - J[3,i%N,i//N]*right_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00821929012345679}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[k][i%N,i//N] for k in range(4)])
    if J[0][i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = np.exp(-2*h_site) * (np.exp(2*nn_sum) if h_site > 0 else np.exp(-2*nn_sum))
  return(priorities)




#score: {'data2D.txt': 0.0017464506172839508}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0,i%N,i//N]*(((k+site_nbr-1)%N) + ((k-1)%2 - 1)) % N for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005162037037037045}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[0,k,i//N]*(k+site_nbr-1)%N + J[1,k,i//N]*((k+site_nbr+1)%N) for k in range(3)])
    if h[site_nbr][i%N] > 0:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = h_site + nn_sum
    else:
      h_site = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0025390432098765436}
#island_id: 2
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      h_site += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.33239182098765335}
#island_id: 2
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      for j in range(3):
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        h_site += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    else:
      for j in range(3):
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        h_site -= J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(np.abs(J[:, i//N, i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(np.abs(J[:, i//N, i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005666512345679013}
#island_id: 0
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for j in range(N):
      if i % N == 0: 
        site_nbr = (j + ((N-1)%2 - 1)) % N
        total_energy += J[1,i//N,j]
      elif i % N == N-1:
        site_nbr = (j + ((0)%2 - 1)) % N
        total_energy += J[3,i//N,j]
      else: 
        if i % N < N//2:
          site_nbr = (j + ((i%N+1)%2 - 1)) % N
        else:
          site_nbr = (j + ((i%N-1)%2 - 1)) % N
        total_energy += J[2,i//N,j]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.005666512345679013}
#island_id: 0
#version_generated: 2
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for j in range(N):
      if i % N == 0: 
        site_nbr = (j + ((N-1)%2 - 1)) % N
        total_energy += J[1,i//N,j]
      elif i % N == N-1:
        site_nbr = (j + ((0)%2 - 1)) % N
        total_energy += J[3,i//N,j]
      else: 
        if i % N < N//2:
          site_nbr = (j + ((i%N+1)%2 - 1)) % N
        else:
          site_nbr = (j + ((i%N-1)%2 - 1)) % N
        total_energy += J[2,i//N,j]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.005666512345679013}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for j in range(N):
      if i % N == 0: 
        site_nbr = (j + ((N-1)%2 - 1)) % N
        total_energy += J[1,i//N,j]
      elif i % N == N-1:
        site_nbr = (j + ((0)%2 - 1)) % N
        total_energy += J[3,i//N,j]
      else: 
        if i % N < N//2:
          site_nbr = (j + ((i%N+1)%2 - 1)) % N
        else:
          site_nbr = (j + ((i%N-1)%2 - 1)) % N
        total_energy += J[2,i//N,j]
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for j in range(N):
      if i % N == 0: 
        site_nbr = (j + ((N-1)%2 - 1)) % N
        total_energy += J[1,i//N,j]
      elif i % N == N-1:
        site_nbr = (j + ((0)%2 - 1)) % N
        total_energy += J[3,i//N,j]
      else: 
        if i % N < N//2:
          site_nbr = (j + ((i%N+1)%2 - 1)) % N
        else:
          site_nbr = (j + ((i%N-1)%2 - 1)) % N
        total_energy += J[2,i//N,j]
    if total_energy > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.19477453703703726}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[0,i//N,i%N])) - (total_spin)
    else:
      priorities[i][0] -= np.sum(np.abs(J[0,i//N,i%N])) + (total_spin)

  return(priorities)




#score: {'data2D.txt': 0.3084183641975301}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
      priorities[i][0] -= np.sum(np.abs(J[:, i // N, i % N])) + (total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
      priorities[i][0] += np.sum(np.abs(J[:, i // N, i % N])) - (total_spin)
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(J[:,i//N,i%N][site_nbrs.index(i % N)] * (h[site][i%N] if h[i//N][i%N] == J[0, i // N, i % N] else -h[site][i%N]) for site in site_nbrs)
    priorities[i][1] = total_spin
    priorities[i][0] = abs(h[i//N][i%N] - (np.sum(np.abs(J[:, i // N, i % N])) + total_spin))
  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -J[k,i//N,k//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*(h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -J[k,i//N,k//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if h[i//N].sum() > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001181018518518519}
#island_id: 2
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(1,4):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j-1,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    if np.any(h == h[i//N]):
      for j in range(3):
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0980273148148149}
#island_id: 1
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[i//N][i%N] > 0 else total_spin
  
  for j in range(N):
    site_nbr = (j + ((i-1)%2 - 1)) % N
    for i in range(N):
      if J[3,i,j] > 0:
        priorities[i*N+j][0] += h[site_nbr][j]
        priorities[i*N+j][1] -= h[site_nbr][j]
      else:
        priorities[i*N+j][0] -= h[site_nbr][j]
        priorities[i*N+j][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.006107253086419753}
#island_id: 1
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0023137345679012356}
#island_id: 3
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = 2*(sum([J[k,i//N,k//N] > 0 for k in range(3)]) - len([k for k in range(3) if J[k,i//N,k//N] <= 0])) + sum([h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023137345679012356}
#island_id: 3
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023137345679012356}
#island_id: 3
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11926589506172863}
#island_id: 0
#version_generated: 2
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    # Calculate the priority based on the interactions with neighboring sites
    priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) * (h[site_nbrs[0]][i%N] + h[site_nbrs[2]][i%N]))
  return(priorities)




#score: {'data2D.txt': 0.21461435185185201}
#island_id: 0
#version_generated: 2
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  return(priorities)




#score: {'data2D.txt': 0.21461435185185201}
#island_id: 0
#version_generated: 2
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  
  return(priorities)




#score: {'data2D.txt': 0.0024807098765432106}
#island_id: 2
#version_generated: 2
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for j in range(4):
      if j == 0:
        site_nbr_neighbor = (i // N + ((i % N - 1) % N - 1)) % N
      elif j == 1:
        site_nbr_neighbor = i//N
      elif j == 2:
        site_nbr_neighbor = (i // N + ((i % N + 1) % N - 1)) % N
      else:
        site_nbr_neighbor = (i % N + ((i//N-1)%2 - 1)) % N
      h_site += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0030050925925925926}
#island_id: 2
#version_generated: 2
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      total_spin += J[0,i%N,j]*h[site_nbr][j]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0015270061728395064}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    
    # Calculate the priority for -1 spin
    if h[site_nbr][i%N] < 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
    
  return(priorities)




#score: {'data2D.txt': 0.018646759259259262}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k, i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 1 if h[site_nbr][i%N] > 0 else 1
  return(priorities)




#score: {'data2D.txt': 0.018646759259259262}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 1 if h[site_nbr][i%N] > 0 else 1
  return(priorities)




#score: {'data2D.txt': 0.010574845679012344}
#island_id: 0
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 1 if h[site_nbr][i%N] > 0 else 1
  return(priorities)




#score: {'data2D.txt': 0.0017547839506172848}
#island_id: 2
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_sum = 0
    for j in range(4):
      if j < 2:
        site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
        neighbor_sum += J[j//2,i%N,i//N]*h[site_nbr_neighbor][i%N]
      else:
        site_nbr_neighbor = (i % N + ((i//N-1)%2 - 1)) % N
        neighbor_sum += J[2,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + neighbor_sum)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.01878503086419753}
#island_id: 2
#version_generated: 2
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N,N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] = total_spin[site_nbr][i%N][0]
    priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.0028449074074074067}
#island_id: 0
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = sum([J[i,k%N,k//N]*h_site for i in range(4)]) + J[3,k//N,k//N]
    J_down = -sum([J[i,k%N,k//N]*(-h_site) for i in range(4)]) - J[3,k//N,k//N]

    priorities[k][0] = (J_up - J_down)*h_site
    priorities[k][1] = -priorities[k][0]

  return(priorities)




#score: {'data2D.txt': -0.000474845679012345}
#island_id: 0
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  nns = [i for i in range(4)]
  priorities = [[0,0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]
    J_down = -np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]

    priorities[k][0] = (2*J_up - 2*J_down)*h_site
    priorities[k][1] = -priorities[k][0]
    
    if h[site_nbr][k%N] > 0:
      total_spin = np.sum([J[i,k//N,k//N]*(-1) for i in nns]) + J[3,k//N,k//N]
    else:
      total_spin = -np.sum([J[i,k//N,k//N]*(1) for i in nns]) - J[3,k//N,k//N]

    if total_spin > 0:
      priorities[k][0] += total_spin
    elif total_spin < 0:
      priorities[k][0] -= total_spin
    
    priorities[k][1] = -priorities[k][0]

  return(priorities)




#score: {'data2D.txt': -0.004138425925925926}
#island_id: 0
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  nns = [i for i in range(4)]
  priorities = [[0,0] for _ in range(N*N)]

  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[i,k%N,k//N]*h_site for i in nns]) + J[3,k//N,k//N]
    J_down = -np.sum([J[i,k%N,k//N]*(-h_site) for i in nns]) - J[3,k//N,k//N]

    priorities[k][0] = np.abs(J_up)
    priorities[k][1] = np.abs(J_down)

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*row_sum
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0021186728395061723}
#island_id: 3
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if row_sum > 0:
      priorities[i][0] = h[site_nbr][i%N] + 2*row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (2*h_site + 4*row_sum)
    priorities[i][1] = -(2*h_site + 4*row_sum)

  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.055199845679012344}
#island_id: 2
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(4):
      site_nbr_neighbor = (i // N + ((i % N + k - 1) % 2 - 1)) % N
      h_site += J[k,i//N,i%N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006492283950617286}
#island_id: 2
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j % N] > 0:
        total_spin += J[j, i % N, i // N]
      else:
        total_spin -= J[j, i % N, i // N]
    if np.sum(h) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0025390432098765436}
#island_id: 2
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    for j in range(3):
      if j == 0:
        site_nbr_neighbor = (i // N + ((i % N + 1) % 2 - 1)) % N
      elif j == 1:
        site_nbr_neighbor = (i // N + ((i % N + 2) % 2 - 1)) % N
      else:
        site_nbr_neighbor = (i // N + ((i % N - 1) % 2 - 1)) % N
      h_site += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.027090586419753086}
#island_id: 2
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_h = h[site_nbr][i%N]
    neighbor_sum = 0
    for j in range(4):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      neighbor_sum += J[j,i//N,i%N]*h[site_nbr_neighbor][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(site_h + neighbor_sum)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    total_spin = h[site_nbr][i%N]
    
    # Calculate contribution from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Check site's magnetism and adjust priorities accordingly
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return(priorities)




#score: {'data2D.txt': 0.002866512345679012}
#island_id: 3
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - row_sum
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021186728395061723}
#island_id: 3
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_energy > 0:
      priorities[i][0] = h[site_nbr][i%N] + 2*total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0035137345679012344}
#island_id: 3
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if row_sum > 0:
      priorities[i][0] = h[site_nbr][i%N] + row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005066512345679012}
#island_id: 1
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # calculate the total spin from all four directions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.17055509259259258}
#island_id: 0
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total magnetism at this site
    total_spin = h[site_nbr][i%N]
    
    # Calculate the interactions with nearest neighbors
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j, i//N, site_nbr] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the priority for each spin direction
    priorities[i][0] = total_spin + abs(total_spin)/2
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.1963816358024692}
#island_id: 0
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
    
    # Add more terms to the priority function based on J
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,site_nbr] > 0:
        priorities[i][0] += J[j,i//N,site_nbr]
        priorities[i][1] -= J[j,i//N,site_nbr]
      else:
        priorities[i][0] -= J[j,i//N,site_nbr]
        priorities[i][1] += J[j,i//N,site_nbr]
        
  # Add a term that favors -1 when the site is close to an edge
  for i in range(N**2):
    if (i % N) == 0 or (i % N) == N-1:
      priorities[i][1] += 1
    elif ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.0048023148148148165}
#island_id: 3
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + 4*row_sum) - row_sum
      priorities[i][1] = -(2*h_site + 4*row_sum)
    else:
      priorities[i][0] = (2*h_site + 4*row_sum)
      priorities[i][1] = -(2*h_site + 4*row_sum)

  return(priorities)




#score: {'data2D.txt': 0.0034628086419753075}
#island_id: 3
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    neighbor_contributions = np.array([2*h[(k+N-1)%N][i%N] + 4*row_sum if J[0,k,i//N]>0 else -2*h[(k+N-1)%N][i%N]-4*row_sum for k in range(3)])
    priorities[i][0] = (h_site + neighbor_contributions).sum()
    priorities[i][1] = -(h_site + neighbor_contributions).sum()

  return(priorities)




#score: {'data2D.txt': 0.0007646604938271613}
#island_id: 3
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    # Calculate the priority using the magnetism and interactions
    priorities[i][0] = 2*h_site + 4*row_sum - 2*np.sum(J[:,i//N,i//N], axis=0)
    priorities[i][1] = -(2*h_site + 4*row_sum) - 2*np.sum(J[:,i//N,i//N], axis=0)

  return(priorities)




#score: {'data2D.txt': -0.003535648148148148}
#island_id: 3
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum)
    priorities[i][1] = -(4*h_site + 8*row_sum)

  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*(h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = max(-total_spin, 0)
  return(priorities)




#score: {'data2D.txt': -0.006586265432098766}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*(h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin + sum([abs(J[k,i//N,k//N])*(abs(h[(k+N-1)%N][i%N])-1) for k in range(3) if J[k,i//N,k//N]>0])
  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*(h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010445833333333333}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,k//N]*(h[(k+N-1)%N][i%N] if J[k,i//N,k//N]>0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    total_spin = (4*h_site + 8*row_sum)
    priorities[i][0] = np.exp(total_spin)
    priorities[i][1] = -np.exp(total_spin)

  return(priorities)




#score: {'data2D.txt': -0.0035782407407407408}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) - np.sum(np.abs(h[:, i%N]))
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(np.abs(h[:, i%N]))

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum)
    priorities[i][1] = -(4*h_site + 8*row_sum)

  # Symmetry: If the priority is high for spin up, it's also high for spin down
  priorities[:,1] += priorities[:,0]
  priorities[:,0] = np.zeros((N*N,))
  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = (total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007038580246913579}
#island_id: 2
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = (total_spin + np.sum(h[i//N]))/2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin + np.sum(h[i//N]))/2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005597222222222218}
#island_id: 2
#version_generated: 2
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      if h[i//N][site_nbr_neighbor] > 0:
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.570987654321014e-05}
#island_id: 2
#version_generated: 2
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0,i%N,i//N]*h[site_nbr][i%N])
    for j in range(3):
      site_nbr_neighbor = (i // N + ((i % N + j - 1) % 2 - 1)) % N
      total_spin += J[j,i%N,i//N]*h[site_nbr_neighbor][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    total_spin /= 2
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.1647081790123459}
#island_id: 1
#version_generated: 2
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0017075617283950617}
#island_id: 1
#version_generated: 2
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i+N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    if J[1,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]
    
    if J[2,i%N,i//N] > 0:
      total_spin += h[site_nbr3][i%N]
    else:
      total_spin -= h[site_nbr3][i%N]
    
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr4][i%N]
    else:
      total_spin -= h[site_nbr4][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.06651898148148154}
#island_id: 1
#version_generated: 2
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 6.466049382716177e-05}
#island_id: 1
#version_generated: 2
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0034628086419753075}
#island_id: 3
#version_generated: 2
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    neighbor_contributions = np.array([2*h[(k+N-1)%N][i%N] + 4*row_sum if J[0,k,i//N]>0 else -2*h[(k+N-1)%N][i%N]-4*row_sum for k in range(3)])
    priorities[i][0] = (h_site + neighbor_contributions).sum()
    priorities[i][1] = -(h_site + neighbor_contributions).sum()

  return(priorities)




#score: {'data2D.txt': 0.0034628086419753075}
#island_id: 3
#version_generated: 2
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    neighbor_contributions = np.array([2*h[(k+N-1)%N][i%N] + 4*row_sum if J[0,k,i//N]>0 else -2*h[(k+N-1)%N][i%N]-4*row_sum for k in range(3)])
    priorities[i][0] = (h_site + neighbor_contributions).sum()
    priorities[i][1] = -(h_site + neighbor_contributions).sum()

  return(priorities)




#score: {'data2D.txt': 0.006120833333333333}
#island_id: 3
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum([2*h[(k+N-1)%N][i%N] if J[0,k,i//N]>0 else -2*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -h_site - sum([2*h[(k+N-1)%N][i%N] if J[0,k,i//N]>0 else -2*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0030791666666666667}
#island_id: 3
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    neighbor_contributions = np.array([-2*h[(k+N-1)%N][i%N] - 4*row_sum if J[0,k,i//N]>0 else 2*h[(k+N-1)%N][i%N] + 4*row_sum for k in range(3)])
    
    priorities[i][0] = (h_site + neighbor_contributions).sum()
    priorities[i][1] = -(h_site + neighbor_contributions).sum()

  return(priorities)




#score: {'data2D.txt': 0.003583179012345679}
#island_id: 2
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j % N] > 0:
        total_spin += J[j, i % N, i // N]
      else:
        total_spin -= J[j, i % N, i // N]
    if np.sum(h) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr].sum()
    if h[site_nbr].sum() > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008016975308641973}
#island_id: 2
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j % N] > 0:
        total_spin += J[j, i % N, i // N]
      else:
        total_spin -= J[j, i % N, i // N]
    site_spin_sum = np.sum(h)
    if site_spin_sum > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005875000000000003}
#island_id: 2
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j % N] > 0:
        total_spin += J[j, i % N, i // N]
      else:
        total_spin -= J[j, i % N, i // N]
    magnetism = np.sum(h)
    if magnetism > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    elif magnetism < 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      # If the overall magnetism is zero, assign spins based on interactions
      for k in range(4):
        site_nbr = (i % N + ((k-1)%2 - 1)) % N
        total_spin += J[k, i % N, i // N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.053862500000000035}
#island_id: 0
#version_generated: 2
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      total_spin += J[j//3,i%N,i//N]*h[nn_site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([total_spin, np.sum(J[:,i//N,i//N], axis=0)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([total_spin, np.sum(J[:,i//N,i//N], axis=0)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021658950617283955}
#island_id: 0
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_spin = np.sum(J[[0,1,2,3],i%N,i//N]*h[[site_nbr,(site_nbr+1)%N,(site_nbr+N)%N,(site_nbr+N-1)%N][::-1],i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = nn_spin
      priorities[i][1] = -nn_spin
    else:
      priorities[i][0] = -nn_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interaction with all neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.15842762345679035}
#island_id: 1
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_left = (i % N + ((i-1)%N - 1)) % N
    site_nbr_right = (i % N + ((i+1)%N - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_left][i%N]
      priorities[i][1] -= h[site_nbr_left][i%N]
      priorities[i][0] += h[site_nbr_right][i%N]
      priorities[i][1] -= h[site_nbr_right][i%N]
    else:
      priorities[i][0] -= h[site_nbr_left][i%N]
      priorities[i][1] += h[site_nbr_left][i%N]
      priorities[i][0] -= h[site_nbr_right][i%N]
      priorities[i][1] += h[site_nbr_right][i%N]
    
    site_nbr_up = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_up][i%N]
      priorities[i][1] -= h[site_nbr_up][i%N]
      priorities[i][0] += h[site_nbr_down][i%N]
      priorities[i][1] -= h[site_nbr_down][i%N]
    else:
      priorities[i][0] -= h[site_nbr_up][i%N]
      priorities[i][1] += h[site_nbr_up][i%N]
      priorities[i][0] -= h[site_nbr_down][i%N]
      priorities[i][1] += h[site_nbr_down][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.0013794753086419744}
#island_id: 0
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site + max([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]

  # Additional optimization step
  for i in range(N**2):
    if np.any(priorities[i]):
      max_idx = np.argmax(priorities[i])
      priorities[i][max_idx] += 1
      priorities[i][1-max_idx] -= 1

  return(priorities)




#score: {'data2D.txt': -0.04994243827160493}
#island_id: 0
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site + max([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    
    # Add a bonus term for sites with high magnetism
    if h_site > 0:
      priorities[i][0] += abs(h_site)
      priorities[i][1] -= abs(h_site)
    else:
      priorities[i][0] -= abs(h_site)
      priorities[i][1] += abs(h_site)

  return(priorities)




#score: {'data2D.txt': 0.0007581790123456782}
#island_id: 0
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site + max([n for n in nn_values])
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])

  return(priorities)




#score: {'data2D.txt': -0.0013794753086419744}
#island_id: 0
#version_generated: 2
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site + max([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009205092592592593}
#island_id: 1
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.14003101851851868}
#island_id: 1
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,(i+1)%N,i//N] > 0:
      total_spin += 1
    elif i % N != N-1:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -5.60185185185183e-05}
#island_id: 1
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.009465895061728397}
#island_id: 0
#version_generated: 2
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    
    # Check if the energy difference between assigning spin 1 and -1 is greater than zero
    if (total_energy + site_energy + neighbors_energy) > site_energy_diff:
      priorities[i][0] = total_energy + site_energy + neighbors_energy
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][0] = total_energy + site_energy + neighbors_energy
      priorities[i][1] = priorities[i][0] - site_energy_diff
    
  return(priorities)




#score: {'data2D.txt': 0.009209413580246914}
#island_id: 0
#version_generated: 2
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  
  return(priorities)




#score: {'data2D.txt': 0.009209413580246914}
#island_id: 0
#version_generated: 2
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': -0.007734104938271604}
#island_id: 0
#version_generated: 2
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    site_energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy_diff *= h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] + site_energy_diff
    else:
      priorities[i][1] = priorities[i][0] - site_energy_diff
  return(priorities)




#score: {'data2D.txt': -0.002830401234567901}
#island_id: 0
#version_generated: 2
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -3*total_spin
      priorities[i][1] = 4*total_spin
    else:
      priorities[i][0] = 3*total_spin
      priorities[i][1] = -4*total_spin
  return(priorities)




#score: {'data2D.txt': -0.0004992283950617277}
#island_id: 2
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][0]
    for j in range(1,N):
      if J[0,i%N,i//N] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    if np.sum(h) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006501697530864198}
#island_id: 2
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr])
    if total_spin > 0:
      priorities[i][0] = total_spin * np.sum(J[:, i%N, i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin * np.sum(J[:, i%N, i//N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.08433410493827165}
#island_id: 2
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    interaction_sum = 0
    for k in range(4):
      neighbor_site = ((i // N) % N + ((k-1)%2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        interaction_sum += h[neighbor_site][i%N]
      else:
        interaction_sum -= h[neighbor_site][i%N]
    priorities[i][0] = total_spin + interaction_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007958333333333333}
#island_id: 2
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if h[site_nbr][j % N] > 0:
        total_spin += J[j, i % N, i // N]
      else:
        total_spin -= J[j, i % N, i // N]
    site_up = (i % N + ((i//N+1)%2 - 1)) % N
    site_down = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_up][i%N] > 0:
      total_spin += J[3, i % N, i // N]
    else:
      total_spin -= J[3, i % N, i // N]
    site_left = (i % N + ((i//N)%2 - 1)) % N
    site_right = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i%N][site_left] > 0:
      total_spin += J[1, i % N, i // N]
    else:
      total_spin -= J[1, i % N, i // N]
    if h[i%N][site_right] > 0:
      total_spin += J[2, i % N, i // N]
    else:
      total_spin -= J[2, i % N, i // N]
    if np.sum(h) > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1389492283950619}
#island_id: 1
#version_generated: 2
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    site_nbr2 = (i % N + ((i//N)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate total spin based on J tensor
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add or subtract magnetism depending on sign of h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0020837962962962963}
#island_id: 2
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else 0
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else 0
    top_h = h[i//N][(i-1)%N] if i // N > 0 else 0
    bot_h = h[i//N][(i+1)%N] if i // N < N-1 else 0

    left_energy = -J[2,i%N,i//N]*h_site + J[3,i%N,i//N]*left_h if i % N != 0 else -J[2,i%N,i//N]*h_site
    right_energy = -J[2,i%N,i//N]*h_site + J[3,i%N,i//N]*right_h if i % N != N-1 else -J[2,i%N,i//N]*h_site
    top_energy = -J[0,i%N,i//N]*h_site + J[1,i%N,i//N]*top_h if i // N > 0 else -J[0,i%N,i//N]*h_site
    bot_energy = -J[0,i%N,i//N]*h_site + J[1,i%N,i//N]*bot_h if i // N < N-1 else -J[0,i%N,i//N]*h_site

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h + top_energy + bot_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + J[2,i%N,i//N]*left_h - J[3,i%N,i//N]*right_h + top_energy + bot_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0238233024691358}
#island_id: 2
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else 0
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else 0
    top_h = h[i//N][(i-1)%N] if i // N > 0 else 0
    bot_h = h[i//N][(i+1)%N] if i // N < N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(4)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h
      priorities[i][1] = sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(4)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(4)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h
      priorities[i][1] = -sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(4)]) + J[2,i%N,i//N]*left_h - J[3,i%N,i//N]*right_h

  return(priorities)




#score: {'data2D.txt': -0.3180501543209868}
#island_id: 2
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else 0
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else 0
    top_h = h[i//N][(i-1)%N] if i // N > 0 else 0
    bot_h = h[i//N][(i+1)%N] if i // N < N-1 else 0

    spin_diff = abs(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*left_h + J[3,i%N,i//N]*right_h)
    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_diff
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -spin_diff
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00068287037037037}
#island_id: 2
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_h = h[(i-1)%N][i%N] if i % N != 0 else 0
    right_h = h[(i+1)%N][i%N] if i % N != N-1 else 0
    top_h = h[i//N][(i-1)%N] if i // N > 0 else 0
    bot_h = h[i//N][(i+1)%N] if i // N < N-1 else 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + 4*row_sum
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0024905864197530864}
#island_id: 3
#version_generated: 2
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site = -h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    pair_energy = J[0, i//N, i%N] + J[1, (i+1)%N, i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy + pair_energy) / 3
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= (h[site_nbr][i%N] - nn_energy - pair_energy) / 3
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.030975154320987675}
#island_id: 0
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= (h[site_nbr][i%N] - nn_energy) / 2
      priorities[i][1] += 1

  # Add a term proportional to the total magnetization at each site
  for i in range(N):
    for j in range(N):
      priorities[i*N+j][0] += h[i][j]
  return(priorities)




#score: {'data2D.txt': 0.013900154320987653}
#island_id: 0
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k, i//N, i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1 - np.sum(np.abs(h[(i+k-1)%N][i%N] - h[site_nbr][i%N]) for k in range(4))
    else:
      priorities[i][0] -= (h[site_nbr][i%N] - nn_energy) / 2
      priorities[i][1] += 1 + np.sum(np.abs(h[(i+k-1)%N][i%N] - h[site_nbr][i%N]) for k in range(4))
  return(priorities)




#score: {'data2D.txt': 0.03138533950617284}
#island_id: 0
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1 - np.exp(-2*h[site_nbr][i%N] - 4*nn_energy)
    else:
      priorities[i][0] -= (h[site_nbr][i%N] - nn_energy) / 2
      priorities[i][1] += 1 + np.exp(2*h[site_nbr][i%N] + 4*nn_energy)
  return(priorities)




#score: {'data2D.txt': -0.003535648148148148}
#island_id: 3
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (8*h_site + 16*row_sum)
    priorities[i][1] = -(8*h_site + 16*row_sum)

  return(priorities)




#score: {'data2D.txt': -0.003535648148148148}
#island_id: 3
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum)
    priorities[i][1] = -(4*h_site + 8*row_sum)
  return(priorities)




#score: {'data2D.txt': 0.0011038580246913567}
#island_id: 3
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003535648148148148}
#island_id: 3
#version_generated: 2
#generate time05:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    total_spin = (4*h_site + 8*row_sum)
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    if magnetism > 0:
     priorities[i] = [total_spin, -total_spin]
    else:
     priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0007791666666666668}
#island_id: 1
#version_generated: 2
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_row][i%N]
        priorities[i][1] -= h[site_nbr_row][i%N]
      else:
        priorities[i][0] -= h[site_nbr_row][i%N]
        priorities[i][1] += h[site_nbr_row][i%N]
      
      if J[k+2,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_col][i//N]
        priorities[i][1] -= h[site_nbr_col][i//N]
      else:
        priorities[i][0] -= h[site_nbr_col][i//N]
        priorities[i][1] += h[site_nbr_col][i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [priorities[i][0], -priorities[i][0]]
    else:
      priorities[i] = [-priorities[i][0], priorities[i][0]]
  
  return(priorities)




#score: {'data2D.txt': 0.029697376543209877}
#island_id: 1
#version_generated: 2
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += h[site_nbr][i%N] * J[k,i//N,i%N]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%N - 1)) % N
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.11150694444444458}
#island_id: 1
#version_generated: 2
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] -= 2
    elif J[3,i%N,i//N] < 0:
      priorities[i][0] += 2
    
  return(priorities)




#score: {'data2D.txt': -0.12114274691358037}
#island_id: 2
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      neighbor_nbr = (i % N + ((i//N + j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += h[neighbor_nbr][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[neighbor_nbr][i%N]
        priorities[i][1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -5.092592592592593e-06}
#island_id: 2
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_neighbor = (i//N + ((i%N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_neighbor][(i+N-1)%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_neighbor][(i+N-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005094135802469128}
#island_id: 2
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.13751003086419764}
#island_id: 2
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetic field at each site
    B = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if B > 0:
      priorities[i][0] = -B
      priorities[i][1] = 1
    else:
      priorities[i][0] = B
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.0011038580246913567}
#island_id: 3
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.854938271604939e-05}
#island_id: 3
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009710956790123456}
#island_id: 3
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1634936728395064}
#island_id: 1
#version_generated: 2
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
   site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
   total_spin = h[site_nbr][i%N]
   
   # Add nearest neighbor interactions
   for k in range(4):
    if J[k,i%N,i//N] > 0:
     total_spin += 1
    else:
     total_spin -= 1
   
   # Add diagonal and horizontal interactions
   for k in range(3):
    site_nbr = (i % N + ((k-1)%2 - 1)) % N
    if J[3,i%N,k] > 0:
     total_spin += h[site_nbr][i%N]
     priorities[i][0] -= h[site_nbr][i%N]
     priorities[i][1] += h[site_nbr][i%N]
    else:
     total_spin -= h[site_nbr][i%N]
     priorities[i][0] += h[site_nbr][i%N]
     priorities[i][1] -= h[site_nbr][i%N]
   
   # Update priority
   if h[i//N][i%N] > 0:
    priorities[i] = [total_spin, -total_spin]
   else:
    priorities[i] = [-total_spin, total_spin]
 
  return(priorities)




#score: {'data2D.txt': -0.002785956790123457}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    total_magnetism = np.sum(J[:,i//N,i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + total_magnetism
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin + total_magnetism
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0062433641975308644}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0062433641975308644}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0062433641975308644}
#island_id: 0
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.16327361111111133}
#island_id: 1
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N+N-1)%2 - 1)) % N
    for k in range(3):
      if J[3,i%N,(i//N+k)%N] > 0:
        total_spin += h[site_nbr2][k]
      else:
        total_spin -= h[site_nbr2][k]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1613686728395064}
#island_id: 1
#version_generated: 2
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate total spin with neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priority based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Finalize priority with site-specific adjustments
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    
    total_spin = sum(h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.002089043209876543}
#island_id: 3
#version_generated: 2
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) + np.sum(J[:(i+1), i//N, :])
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(J[(i+1):, i//N, :])
  return(priorities)




#score: {'data2D.txt': -0.002089043209876543}
#island_id: 3
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) + np.sum(J[:(i+1), i//N, :])
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(J[(i+1):, i//N, :])
  return(priorities)




#score: {'data2D.txt': 0.15497052469135827}
#island_id: 1
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i // N + ((i%N+1)%N - 1)) % N
    site_nbr4 = (i % N + ((i//N+1)%N - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N] + h[site_nbr3][i%N] + h[site_nbr4][i%N]
    
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.1647081790123459}
#island_id: 1
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.06088688271604938}
#island_id: 0
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1, 0]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1, 0, 1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002215895061728395}
#island_id: 3
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site)
      priorities[i][1] = np.sum(J[:, i//N, i//N]) * h_site
    else:
      priorities[i][0] = 2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011038580246913567}
#island_id: 3
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005688117283950618}
#island_id: 3
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site)
      priorities[i][1] = np.max([-priorities[i][0], row_sum])
    else:
      priorities[i][0] = 2 * (row_sum + h_site)
      priorities[i][1] = np.min([priorities[i][0], -row_sum])

  return(priorities)




#score: {'data2D.txt': 0.07335354938271613}
#island_id: 2
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0019884259259259265}
#island_id: 2
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      if k==0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif k==1:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        if h[site_nbr][i%N] > 0:
          total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
          total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -total_spin
    priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 2
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  return(priorities)




#score: {'data2D.txt': 0.13751003086419764}
#island_id: 2
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetic field at each site
    B = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
    
    if B > 0:
      priorities[i][0] = -B
      priorities[i][1] = 1
    else:
      priorities[i][0] = B
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.007106635802469136}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    total_energy = h_site + sum(nn_values)
    priority_total = np.array([total_energy, -total_energy])
    
    priorities[i] = priority_total
    
  return(priorities)




#score: {'data2D.txt': 0.007106635802469136}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    total_energy = h_site + sum(nn_values)
    priority_total = np.array([total_energy, -total_energy])
    
    priorities[i] = priority_total
    
  return(priorities)




#score: {'data2D.txt': 0.007106635802469136}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    total_energy = h_site + sum(nn_values)
    priority_total = np.array([total_energy, -total_energy])
    
    priorities[i] = priority_total
    
  return(priorities)




#score: {'data2D.txt': -0.0027952160493827163}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0027952160493827163}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0019226851851851853}
#island_id: 0
#version_generated: 2
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum(J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j-1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(2))
    total_spin_right = sum(J[j,i//N,(i%N + ((j+1)%2 - 1)) % N] if J[j,i//N,(i%N + ((j+1)%2 - 1)) % N]>0 else -J[j,i//N,(i%N + ((j+1)%2 - 1)) % N] for j in range(2,4))
    total_spin = (total_spin_left - total_spin_right) * h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbrs = []
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i//N,i%N]
      site_nbrs.append((site_nbr, h[site_nbr][i%N]))
    if sum([x[1] for x in site_nbrs]) > 0:
      priorities[i] = [sum([x[1] for x in site_nbrs]), -sum([x[1] for x in site_nbrs])]
    else:
      priorities[i] = [-sum([x[1] for x in site_nbrs]), sum([x[1] for x in site_nbrs])]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-row_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(row_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003300925925925926}
#island_id: 3
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -(row_sum + J[1,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum + J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.854938271604939e-05}
#island_id: 3
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002093672839506173}
#island_id: 3
#version_generated: 2
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) + np.sum(J[:i//N+1, i//N, :])
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(J[i//N+1:, i//N, :])
  return(priorities)




#score: {'data2D.txt': -0.00027947530864197597}
#island_id: 3
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_total = np.sum(J[:, i//N, :]) * (h_site + 2*row_sum)
    priorities[i][0] = -priority_total
    priorities[i][1] = priority_total
  return(priorities)




#score: {'data2D.txt': -0.002090586419753086}
#island_id: 3
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) + np.sum(J[:, i//N, :i+1].flatten())
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(J[:, i//N, i+1:].flatten())
  return(priorities)




#score: {'data2D.txt': -0.0033109567901234566}
#island_id: 3
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][0] = (8*h_site + 16*row_sum) + np.sum(J[:, i//N, :])
    priorities[i][1] = -(8*h_site + 16*row_sum) - np.sum(J[:, i//N, 1:])
  return(priorities)




#score: {'data2D.txt': -0.0009813271604938276}
#island_id: 0
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    if total_energy > 0:
      priorities[i][0] += total_energy + nn_energy
      priorities[i][1] -= total_energy - nn_energy
    elif total_energy < 0:
      priorities[i][0] -= total_energy - nn_energy
      priorities[i][1] += total_energy + nn_energy
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 2
        priorities[i][1] -= 2
      else:
        priorities[i][0] -= 2
        priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': 0.06365231481481481}
#island_id: 0
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    delta = total_energy + nn_energy
    if delta > 0:
      priorities[i][0] += 2
      priorities[i][1] -= 2
    elif delta < 0:
      priorities[i][0] -= 2
      priorities[i][1] += 2
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.13934027777777777}
#island_id: 0
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N2 and 0 <= y < N:
        energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 0
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy -= J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06221929012345679}
#island_id: 0
#version_generated: 2
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -4.2438271604937796e-05}
#island_id: 0
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for k in [-1,0]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[k,i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002089043209876543}
#island_id: 3
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (8*h_site + 16*row_sum) + np.sum(J[:, i//N, :])
    priorities[i][1] = -(8*h_site + 16*row_sum) - np.sum(J[:, i//N, :])
  return(priorities)




#score: {'data2D.txt': -0.002089043209876543}
#island_id: 3
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (4*h_site + 8*row_sum) + np.sum(J[:i, i//N, :])
    priorities[i][1] = -(4*h_site + 8*row_sum) - np.sum(J[i:, i//N, :])
  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 1
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add site magnetism and priority
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11600354938271619}
#island_id: 1
#version_generated: 2
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    total_spin = h[i//N][i%N]
    if total_spin > 0:
      priorities[i][0] = np.exp(-row_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(row_sum)
      priorities[i][1] = -priorities[i][0]

  # Calculate magnetism contribution
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.exp(-row_sum)
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] += np.exp(row_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005793364197530852}
#island_id: 3
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(-row_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(row_sum)
      priorities[i][1] = -priorities[i][0]

  # Compute the magnetization
  magnetization = sum([h[i//N][i%N] for i in range(N**2)])

  # Adjust the priorities based on the magnetization
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][1] += -magnetization
    else:
      priorities[i][1] += magnetization

  return(priorities)




#score: {'data2D.txt': 0.009710956790123456}
#island_id: 3
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009845833333333333}
#island_id: 3
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1))
      priorities[i][1] = -priorities[i][0]

    # Add interaction term
    for k in range(4):
      if J[k, i%N, i//N] != 0:
        site_neighbor = (i % N + ((k-1)%2 - 1)) % N
        h_site_neighbor = h[site_neighbor][i%N]
        priorities[i][0] += -J[k, i%N, i//N] * h_site_neighbor
        priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009710956790123456}
#island_id: 3
#version_generated: 2
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002184413580246913}
#island_id: 1
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if J[3,i%N,i//N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': -0.00853256172839506}
#island_id: 1
#version_generated: 2
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11405694444444459}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time05:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    for k in range(4):
      site_nbr1 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr1][i%N]
      else:
        total_spin -= h[site_nbr1][i%N]
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0004464506172839504}
#island_id: 1
#version_generated: 2
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = ((i//N)*N + ((i%N-1)%N)) % N
    site_nbr4 = ((i//N)*N + ((i%N+1)%N)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N] + J[0,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i//N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0023483024691358027}
#island_id: 1
#version_generated: 2
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = []
    total_spin = 0
    
    # calculate total spin and add neighbors' spins
    for k in range(4):
      if k < 2:
        j = (i % N + ((k-1)%2 - 1)) % N
      else:
        j = i // N
      site_nbrs.append((j, k))
      total_spin += J[k,i%N,j]
    
    # adjust based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0001609567901234567}
#island_id: 1
#version_generated: 2
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin
    total_spin = h[site_nbr][i%N] + J[0,i%N,i//N] + J[3,i%N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr2 = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.05150848765432102}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018050925925925938}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004557098765432103}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.05150848765432102}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin + np.sum(J[:,i//N,i//N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.05150848765432102}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0012066358024691358}
#island_id: 2
#version_generated: 2
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= 2*sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += 2*sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.0020010802469135804}
#island_id: 2
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] if j == i%N else h[j][i//N] for j in range(N)])
    priorities[i][0] = sum([J[k,i//N,j]*h[(k+N-1)%N][j] for k, j in zip(range(3),range(N))])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0002223765432098769}
#island_id: 2
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priorities[i][0] = total_spin * sum([J[k,i%N,site_nbr] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06917453703703702}
#island_id: 0
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Check the majority spin of neighboring sites
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        # Assign the spin with lower energy
        for spin in [-1,1]:
          site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
          total_energy_new = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * spin*h[(i+k-1)%N][i%N] for k in range(3))
          if total_energy_new <= 0:
            priorities[i][0] = spin
            priorities[i][1] = -spin
            break
  return(priorities)




#score: {'data2D.txt': 0.0788912037037037}
#island_id: 0
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[max(0, i-1)][0]]
      majority_spin = np.sign(np.sum([s for s in neighbors_spin]))
      if np.random.rand() < 0.5:  
        priorities[i][0] = -majority_spin
        priorities[i][1] = majority_spin
      else:
        priorities[i][0] = -priorities[max(0, i-1)][0]
        priorities[i][1] = -priorities[max(0, i-1)][1]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interactions with neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priority based on site magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.050944907407407425}
#island_id: 1
#version_generated: 2
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i][0] = total_spin + sum(h[j][i%N] for j in range(N))
    priorities[i][1] = -priorities[i][0]
  
  return priorities




#score: {'data2D.txt': -0.0018050925925925938}
#island_id: 2
#version_generated: 2
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07521250000000006}
#island_id: 2
#version_generated: 2
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    sum_of_interactions = np.sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum_of_interactions + total_spin
      priorities[i][1] = -sum_of_interactions - total_spin
    else:
      priorities[i][0] = -sum_of_interactions - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.11692947530864212}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= 1
        priorities[i][1] += 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.000811882716049383}
#island_id: 1
#version_generated: 2
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0009770061728395056}
#island_id: 3
#version_generated: 2
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    total_spin = h[i//N][i%N]
    if total_spin > 0:
      priorities[i][0] = np.exp(-row_sum) * (1 - total_spin)
      priorities[i][1] = -priorities[i][0] + total_spin
    else:
      priorities[i][0] = np.exp(row_sum) * (1 + total_spin)
      priorities[i][1] = -priorities[i][0] - total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    total_spin = h[i//N][i%N]
    if total_spin > 0:
      priorities[i][0] = np.exp(-row_sum) * (1 + total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.exp(row_sum) * (1 - total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.12697638888888904}
#island_id: 1
#version_generated: 2
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
    site_nbr = (i % N + ((i//N)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
    site_nbr = (i % N + ((i//N-2)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
  return(priorities)




#score: {'data2D.txt': -0.0007893518518518522}
#island_id: 1
#version_generated: 2
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i//N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the interaction with neighbors
    neighbor_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        neighbor_sum += 1
      else:
        neighbor_sum -= 1
    
    total_spin += neighbor_sum
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.008333796296296294}
#island_id: 0
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    site_spin = sum([J[0, i//N, i%N], J[1, i//N, (i+1)%N], J[2, i//N, ((i+N-1)%N)], J[3, (i//N-1)%N if i//N > 0 else N-1, (i%N)]])
    
    site_bias = h[i//N][i%N]
    
    if site_spin > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    elif site_spin < 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    else:
      if site_bias > 0:
        priorities[i][0] = total_spin + total_bias
        priorities[i][1] = -total_spin
      elif site_bias < 0:
        priorities[i][0] = -total_spin
        priorities[i][1] = total_spin + total_bias
  
  return(priorities)




#score: {'data2D.txt': 0.1753149691358027}
#island_id: 0
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    
    # add the interaction with itself
    if J[2, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.0008427469135802471}
#island_id: 2
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_of_interactions = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
        sum_of_interactions -= J[j,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[j,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0025513888888888886}
#island_id: 2
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_of_interactions = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
        sum_of_interactions -= J[j,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[j,i//N,i%N]
    priorities[i][0] = sum_of_interactions + total_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -sum_of_interactions - total_spin
    else:
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.04071126543209877}
#island_id: 2
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_of_interactions = 0
    for k in range(4):
      if h[site_nbr][(k+N-1)%N] > 0:
        total_spin += 1
        for j in range(4):
          if J[k,i//N,i%N] > 0 and (j == k or abs(k-j) != N):
            sum_of_interactions -= J[k,i//N,i%N]
      else:
        total_spin -= 1
        for j in range(4):
          if J[k,i//N,i%N] < 0 and (j == k or abs(k-j) != N):
            sum_of_interactions += J[k,i//N,i%N]
    priorities[i][0] = sum_of_interactions + total_spin
    priorities[i][1] = -sum_of_interactions - total_spin
  return(priorities)




#score: {'data2D.txt': 0.09105324074074085}
#island_id: 1
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i % N+1)%N - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.012957561728395062}
#island_id: 1
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
  return(priorities)




#score: {'data2D.txt': 0.0015646604938271609}
#island_id: 1
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total_spin
    total_spin = h[site_nbr][i%N]
    
    # Add interactions from nearest neighbors
    total_spin += np.sum(J[:,i%N,i//N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 7.7623456790123e-05}
#island_id: 1
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][k]
      else:
        total_spin -= h[site_nbr][k]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0010560185185185182}
#island_id: 0
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = J[0,i//N,site_nbr] * h[i//N][i%N]
    nn_energy_down = J[0,i//N,site_nbr] * (-h[i//N][i%N])
    
    energy_diff = abs(nn_energy_up - nn_energy_down)
    if energy_diff > 0.5:
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1

  return(priorities)




#score: {'data2D.txt': 0.18784089506172866}
#island_id: 0
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy_up += h[i//N][i%N]
    else:
      nn_energy_up -= h[i//N][i%N]

    nn_energy_down = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * (-h[i//N][i%N])
    if J[3,i//N,site_nbr] > 0:
      nn_energy_down -= h[i//N][i%N]
    else:
      nn_energy_down += -h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = min(nn_energy_up, nn_energy_down)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': -0.00047114197530864234}
#island_id: 0
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = J[0,i//N,site_nbr] * h[i//N][i%N]
    nn_energy_down = J[0,i//N,site_nbr] * (-h[i//N][i%N])

    # Prioritize the spin with lower energy and opposite magnetism
    if nn_energy_up > 0:
      priorities[i][1] += 1
    elif nn_energy_down < 0:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': -0.0005668209876543211}
#island_id: 2
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetic field at each site
    B = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
    
    if B > 0:
      priorities[i][0] = -B
      priorities[i][1] = 1
    else:
      priorities[i][0] = B
      priorities[i][1] = -1
      
  # Sort the sites based on their priority values
  sorted_indices = np.argsort(priorities[:,0])
  
  # Return a list of priorites for each site with its corresponding spin
  return [(priorities[i][0], 1 if priorities[i][0] < 0 else -1) for i in sorted_indices]




#score: {'data2D.txt': 0.13751003086419764}
#island_id: 2
#version_generated: 2
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetic field at each site
    B = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
    
    if B > 0:
      priorities[i][0] = -B
      priorities[i][1] = 1
    else:
      priorities[i][0] = B
      priorities[i][1] = -1
      
  return(priorities)




#score: {'data2D.txt': -0.00268317901234568}
#island_id: 2
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    # Calculate the total magnetic field at each site
    B = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
    
    if B > 0:
      priorities[i][0] = -B * (1 if h_site > 0 else -1)
      priorities[i][1] = 1 if h_site > 0 else -1
    else:
      priorities[i][0] = B * (1 if h_site < 0 else -1)
      priorities[i][1] = 1 if h_site < 0 else -1

  return(priorities)




#score: {'data2D.txt': 0.009832561728395061}
#island_id: 3
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1)) - J[0,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1)) - J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009761574074074074}
#island_id: 3
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1)) - 2 * J[3, i%N, i//N] * (h[site_nbr-1][i%N] if i % N != 0 else 0)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1)) + 2 * J[3, i%N, i//N] * (h[(site_nbr+1)%N][i%N] if i % N != N-1 else 0)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.009922067901234566}
#island_id: 3
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h_site > 0:
      priorities[i][0] = -2 * (row_sum + h_site) - np.sum(np.abs(h[:site_nbr]-1))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (row_sum + h_site) + np.sum(np.abs(h[site_nbr:]-1))
      priorities[i][1] = -priorities[i][0]

    # Add interaction term
    for k in range(4):
      if J[k, i%N, i//N] != 0:
        site_neighbor = (i % N + ((k-1)%2 - 1)) % N
        h_site_neighbor = h[site_neighbor][i%N]
        priorities[i][0] += -J[k, i%N, i//N] * h_site_neighbor
        priorities[i][1] -= priorities[i][0]

    # Add priority term for magnetism
    if h_site > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((2)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.006468364197530864}
#island_id: 1
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_spin *= -2
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.11165324074074087}
#island_id: 1
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.05150848765432102}
#island_id: 2
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_energy = sum([J[k, (i%N)%N, i//N]*h[(k+N-1)%N][(i%N)%N] for k in range(3)]) + total_spin + np.sum(J[:,i//N,i//N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0022233024691358017}
#island_id: 2
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(3):
      if J[j,i//N,i//N] > 0:
        total_spin += J[j,i//N,i//N]
      else:
        total_spin -= J[j,i//N,i//N]
    if total_spin > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00048503086419753125}
#island_id: 2
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr])
    if sum(h[site_nbr]) > 0:
      priorities[i][0] += total_spin + np.sum([J[k,site_nbr,i//N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= total_spin + np.sum([J[k,site_nbr,i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.14016095679012366}
#island_id: 1
#version_generated: 2
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 2
    else:
      total_spin -= 2
    
    if J[2,i%N,i//N] > 0:
      total_spin += 4
    else:
      total_spin -= 4
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16051651234567924}
#island_id: 1
#version_generated: 2
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1-i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.32663101851851756}
#island_id: 1
#version_generated: 2
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr_sum = 0
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
        site_nbr_sum += 1
      else:
        total_spin -= h[site_nbr][i%N]
        site_nbr_sum -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        site_nbr_sum += 1
      else:
        total_spin -= h[site_nbr][j]
        site_nbr_sum -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + site_nbr_sum, -total_spin - site_nbr_sum]
    else:
      priorities[i] = [-total_spin - site_nbr_sum, total_spin + site_nbr_sum]
  
  return(priorities)




#score: {'data2D.txt': 0.004610030864197533}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += J[0,i%N,i//N]*h[(0+N-1)%N][i%N]
    else:
      total_spin -= J[0,i%N,i//N]*h[(0+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.00042854938271604925}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if k==0:
        total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
      elif k==1:
        total_spin -= J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        if site_nbr == i % N and (k-2)%2==0:
          total_spin += 2*h[site_nbr][i%N]
        elif site_nbr == i % N and (k-2)%2!=0:
          total_spin -= 2*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0008427469135802471}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_of_interactions = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
        sum_of_interactions -= J[j,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[j,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00257422839506173}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      spin_bias = 1
    else:
      spin_bias = -1
    
    total_spin = np.sum(h[site_nbr])
    
    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      
      if h[i//N][i%N] > 0:
        interaction_bias = 1
      else:
        interaction_bias = -1
        
      priorities[i][0] += spin_bias * total_spin
      priorities[i][1] -= spin_bias * total_spin
    
    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      
      if h[site_nbr_j][i%N] > 0:
        interaction_bias = 1
      else:
        interaction_bias = -1
        
      priorities[i][0] += spin_bias * interaction_bias * J[j,i//N,i%N]
      priorities[i][1] -= spin_bias * interaction_bias * J[j,i//N,i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.004249228395061729}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    sum_of_interactions = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
        sum_of_interactions -= J[j,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[j,i//N,i%N]
    priorities[i][0] = -sum_of_interactions + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.012195833333333333}
#island_id: 2
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_of_interactions = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
        sum_of_interactions -= J[j,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[j,i//N,i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
        sum_of_interactions -= J[k,i//N,i%N]
      else:
        total_spin -= 1
        sum_of_interactions += J[k,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum_of_interactions + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0020032407407407408}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
    
    if i < N_half:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([n for n in nns])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([n for n in nns])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -h_site - sum([n for n in nns])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([n for n in nns])
        priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.009937191358024653}
#island_id: 0
#version_generated: 2
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) + np.sum(np.multiply(h, J))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) - np.sum(np.multiply(h, J))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 0
#version_generated: 2
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007742283950617288}
#island_id: 0
#version_generated: 2
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05150848765432102}
#island_id: 2
#version_generated: 2
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010773148148148157}
#island_id: 2
#version_generated: 2
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr].sum()
    for j in range(3):
      if J[j,i%N,i//N]*h[(j+N-1)%N][i%N] > 0:
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010328703703703708}
#island_id: 1
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = []
    total_spin = 0
    
    for j in range(4):
      if j == 0:
        site_nbrs.append(i%N)
      elif j == 1:
        site_nbrs.append((i+N-1)%N)
      elif j == 2:
        site_nbrs.append((i+1)%N)
      else:
        site_nbrs.append((i-N-1)%N if i < N else (i-N))
    
    for j in range(N):
      total_spin += h[j][site_nbrs[0]]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0015066358024691357}
#island_id: 2
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(k, j) for k in range(max(0, i//N-1), min(N, i//N+2)) for j in range(max(0, (i+N)%N-1), min(N, (i+N)%N+2))]
    neighbor_priors = [h[site_nbr][j] if J[0,j,i//N] > 0 else -h[site_nbr][j] for k, j in neighbors]
    avg_neighbor_prior = sum(neighbor_priors) / len(neighbors)
    
    priorities[i][0] = h_site + avg_neighbor_prior
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site_left = h[site_nbr_left][i%N]
    else:
      h_site_left = -h[site_nbr_left][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007233024691358025}
#island_id: 2
#version_generated: 2
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000988425925925926}
#island_id: 2
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site_left = h[site_nbr_left][i%N]
    else:
      h_site_left = -h[site_nbr_left][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + J[0,i%N,i//N]*h_site_up + J[2,i//N,i%N]*h_site_down + J[3,i%N,i//N]*h_site_left
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - J[0,i%N,i//N]*h_site_up - J[2,i//N,i%N]*h_site_down - J[3,i%N,i//N]*h_site_left
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0034810185185185187}
#island_id: 2
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site_left = h[site_nbr_left][i%N]
    else:
      h_site_left = -h[site_nbr_left][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.020854783950617285}
#island_id: 0
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02378348765432099}
#island_id: 0
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
      
    if sum([n for n in nns]) > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.02287700617283951}
#island_id: 0
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023143518518518526}
#island_id: 3
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006569444444444442}
#island_id: 3
#version_generated: 2
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N]
    priorities[i][1] = -(J[0,i%N,i//N]*h[site_nbr][i%N])
  return(priorities)




#score: {'data2D.txt': 0.002369907407407407}
#island_id: 3
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i//N,i//N]*h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31057978395061653}
#island_id: 3
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  # Calculate the absolute value of the priority for each site
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.abs(priorities[i][0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.abs(priorities[i][0])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007581790123456782}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site + max([n for n in nn_values])
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
  return(priorities)




#score: {'data2D.txt': 0.00011712962962963014}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site + max([n for n in nn_values]) + min([-n for n in nn_values])
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0] - (max([n for n in nn_values]) if sum(nn_values) < 0 else min([n for n in nn_values]))

  return(priorities)




#score: {'data2D.txt': 0.0007581790123456782}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site + max([n for n in nn_values])
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
  return(priorities)




#score: {'data2D.txt': -0.015299845679012346}
#island_id: 0
#version_generated: 2
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site + max([n for n in nn_values])
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
      
  # Improved part
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(4)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(4)]
    
    if sum(nn_values) > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site + max([n for n in nn_values])
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
      
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] = N**2 - priorities[i][0]
    else:
      priorities[i][0] = sum(-h[site_nbr][j] for j in range(N))
      priorities[i][1] = N**2 + priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.08374922839506171}
#island_id: 2
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[3,i//N,i%N]
      priorities[i][1] = -J[3,i//N,i%N]
    else:
      priorities[i][0] = -J[2,i//N,i%N] - J[0,i//N,i%N]
      priorities[i][1] = J[2,i//N,i%N] + J[0,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.07376496913580247}
#island_id: 2
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002369907407407407}
#island_id: 3
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i//N,i//N]*h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  # Sort spins in descending order of priority for each site
  for i in range(N**2):
    if priorities[i][0] > 0:
      priorities[i][0], priorities[i][1] = abs(priorities[i][0]), -abs(priorities[i][0])
    else:
      priorities[i][0], priorities[i][1] = -abs(priorities[i][0]), abs(priorities[i][0])

  return priorities




#score: {'data2D.txt': -0.0028964506172839506}
#island_id: 3
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i//N,i//N]*h[i//N][i%N] > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001204166666666666}
#island_id: 3
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N]
    for j in range(4):
      if j == 0:
        if J[j,i//N,i//N] > 0:
          total_magnetism += J[j,i//N,i//N]*h[(i+N-1)%N][i%N]
        else:
          total_magnetism -= J[j,i//N,i//N]*h[(i+N-1)%N][i%N]
      elif j == 1 or j == 3:
        if J[j,i//N,i//N] > 0:
          total_magnetism += J[j,i//N,i//N]*h[i//N][(i+1)%N]
        else:
          total_magnetism -= J[j,i//N,i//N]*h[i//N][(i+1)%N]
      elif j == 2:
        if i % N != 0 and i % N != N-1:
          if J[j,i//N,i//N] > 0:
            total_magnetism += J[j,i//N,i//N]*h[i//N][i%N+1]
          else:
            total_magnetism -= J[j,i//N,i//N]*h[i//N][i%N+1]

    if total_magnetism > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism

  return(priorities)




#score: {'data2D.txt': 0.0014745370370370377}
#island_id: 3
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_magnetism + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - np.sum(h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] = N**2 - priorities[i][0]
    else:
      priorities[i][0] = sum(-h[site_nbr][j] for j in range(N))
      priorities[i][1] = N**2 + priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023143518518518526}
#island_id: 3
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0026961419753086424}
#island_id: 3
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    site_nbr2 = ((i+1) % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])
    else:
      h_site -= J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017535493827160495}
#island_id: 3
#version_generated: 2
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if h[site_nbr][k] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015445987654320995}
#island_id: 0
#version_generated: 2
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[site_nbr][j] if k==0 else h[(i+k-1)%N][i%N]) for j in range(N) for k in [-1,1])
    priority_total = nn_energy
    if priority_total > 0:
      priorities[i][0] += priority_total * N
      priorities[i][1] -= 2*N
    elif priority_total < 0:
      priorities[i][0] -= abs(priority_total) * N
      priorities[i][1] += 2*N
  return(priorities)




#score: {'data2D.txt': 0.053702314814814814}
#island_id: 0
#version_generated: 2
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_total = total_energy + nn_energy
    if priority_total > 0:
      priorities[i][0] += abs(priority_total) * N
      priorities[i][1] -= 2*N
    elif priority_total < 0:
      priorities[i][0] -= abs(priority_total) * N
      priorities[i][1] += 2*N
  return(priorities)




#score: {'data2D.txt': -0.0020560185185185187}
#island_id: 0
#version_generated: 2
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,(i+k-N)%N,i%N] * (h[(i+k-N)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_total = total_energy + nn_energy
    if priority_total > 0:
      priorities[i][0] += priority_total * N
      priorities[i][1] -= 2*N
    elif priority_total < 0:
      priorities[i][0] -= abs(priority_total) * N
      priorities[i][1] += 2*N
  return(priorities)




#score: {'data2D.txt': 0.019614043209876544}
#island_id: 0
#version_generated: 2
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_total = total_energy + nn_energy
    spin = np.sign(priority_total)
    if abs(priority_total) > 0.5:
      priorities[i][0] += abs(priority_total)*N*spin
      priorities[i][1] -= 2*N*spin
    elif priority_total > 0.25 or (priority_total == 0 and i % 2 == 0):
      priorities[i][0] += 0.5*N*spin
      priorities[i][1] -= N*spin
    else:
      priorities[i][0] -= 0.5*N*spin
      priorities[i][1] += N*spin
  return(priorities)




#score: {'data2D.txt': -0.015788117283950617}
#island_id: 2
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0] - 2*J[1,i//N,i%N]*(h[site_nbr_left][i%N])
    else:
      priorities[i][0] = -h[site_nbr][i%N] - J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0] + 2*J[1,i//N,i%N]*(h[site_nbr_left][i%N])

  return(priorities)




#score: {'data2D.txt': -0.011824537037037036}
#island_id: 2
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]

    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] -= J[0,i//N,i%N]*h[site_nbr][i%N]
    else:
      priorities[i][0] -= J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] += J[0,i//N,i%N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -7.978395061728354e-05}
#island_id: 2
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01487638888888889}
#island_id: 2
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      if i % N != 0:
        priorities[i][0] += J[1,i//N,i%N]*h[site_nbr_left][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      if i % N != 0:
        priorities[i][0] -= J[1,i//N,i%N]*h[site_nbr_left][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20419367283950635}
#island_id: 0
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin_up = sum([J[j,i//N,i%N] * h[(i % N + ((j-1)%2 - 1)) % N][i%N] for j in range(4)])
    total_spin_down = abs(total_spin_up)

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 10 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -12 * total_spin_up
    elif total_spin_down > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 4
        priorities[i][1] = 10 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3
        priorities[i][1] = -8 * total_spin_up
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 4
        priorities[i][1] = 10 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3
        priorities[i][1] = -8 * total_spin_up

  return(priorities)




#score: {'data2D.txt': 0.11659429012345691}
#island_id: 0
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[j,i//N,i%N] * h[site_nbr][i%N] for j in range(4)])
    total_spin_down = abs(total_spin_up)

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 10 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -16 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 16 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -16 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 16 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.10234490740740754}
#island_id: 0
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[j,i//N,i%N] * h[site_nbr][i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -8 * total_spin_up + 10
    else:
      priorities[i][0] = -(total_spin_up - 2.5) * 3.5
      priorities[i][1] = 8 * total_spin_up + 10
  return(priorities)




#score: {'data2D.txt': 0.0378658950617284}
#island_id: 0
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[j,i//N,i%N] * h[site_nbr][j] for j in range(4)])
    total_spin_down = abs(total_spin_up)

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -8 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 8 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -8 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 8 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.0005662037037037041}
#island_id: 3
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010665123456790127}
#island_id: 3
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site_k = ((k-1) % 2 + i % N + ((i // N - (k-1)//2) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011075617283950625}
#island_id: 0
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    total_spin = h[site_nbr].sum() + J[:, i//N, :].sum(axis=0)[i%N]
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin - (J[:, i//N, (i%N+1)%N] + J[:, i//N, (i%N+N-1)%N]).sum()
      priorities[i][1] = total_spin + (J[:, i//N, (i%N+1)%N] + J[:, i//N, (i%N+N-1)%N]).sum()
    else:
      priorities[i][0] = total_spin - (J[:, i//N, (i%N+1)%N] + J[:, i//N, (i%N+N-1)%N]).sum()
      priorities[i][1] = -total_spin - (J[:, i//N, (i%N+1)%N] + J[:, i//N, (i%N+N-1)%N]).sum()
  
  return(priorities)




#score: {'data2D.txt': 0.00015077160493827212}
#island_id: 0
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      site = (i + ((j-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin + np.sum(J[:, i//N, :])
      priorities[i][1] = total_spin - np.sum(J[:, i//N, :])
    else:
      priorities[i][0] = total_spin + np.sum(J[:, i//N, :])
      priorities[i][1] = -total_spin - np.sum(J[:, i//N, :])
  
  return(priorities)




#score: {'data2D.txt': -0.0015686728395061733}
#island_id: 0
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin
    total_spin = np.sum(h[site_nbr]) + np.sum(J[:, i//N, :])
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
      priorities[i][1] = total_spin + np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
    else:
      priorities[i][0] = total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
      priorities[i][1] = -total_spin - np.sum(J[:, i//N, (i%N+1)%N] - J[:, i//N, (i%N+N-1)%N])
  
  return(priorities)




#score: {'data2D.txt': -0.0018378086419753084}
#island_id: 0
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = np.sum(J[:, i//N, :]) if i%N > 0 else 0
    right_spin = np.sum(J[:, i//N, :]) if i%N < N-1 else 0
    up_spin = np.sum(J[:, (i//N)%N, :(i%N)]) if i//N > 0 else 0
    down_spin = np.sum(J[:, (i//N)%N, i%N:]) if i//N < N-1 else 0
    total_spin = h[site_nbr].sum() + left_spin + right_spin + up_spin + down_spin
    
    if h[i//N].sum() > 0:
      priorities[i][0] = -total_spin - left_spin + right_spin - up_spin + down_spin
      priorities[i][1] = total_spin + left_spin - right_spin + up_spin - down_spin
    else:
      priorities[i][0] = total_spin + left_spin - right_spin + up_spin - down_spin
      priorities[i][1] = -total_spin - left_spin + right_spin - up_spin + down_spin
  
  return(priorities)




#score: {'data2D.txt': -0.00341929012345679}
#island_id: 3
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += h[site_k][i % N]
      else:
        total_spin -= h[site_k][i % N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.04022546296296299}
#island_id: 3
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += J[k, i % N, i //N] * h[site_k][i%N]
      else:
        total_spin -= J[k, i % N, i //N] * h[site_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005128086419753085}
#island_id: 3
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004514043209876546}
#island_id: 3
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        total_spin -= J[k, i % N, i // N] * h[site_k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = priorities[i][0] - priorities[i][1]
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11411743827160509}
#island_id: 1
#version_generated: 2
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.07797793209876544}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = np.mean([priorities[(i-k-1)%N*N + (i-k-1)%N][0] for k in range(3) if i-k-1>=0])
      total_priority = -prev_spin
      if np.random.rand() < 0.5:  
        if np.random.rand() < 0.5:  
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:  
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': 0.07859583333333334}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = 0
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]
      total_priority = -prev_spin
      if np.random.rand() < 0.5:  # assign random spin
        if np.random.rand() < 0.5:  # choose direction
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:  # flip the previous spin
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': 0.07881682098765432}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      prev_spin = 0
      if i > 0:
        prev_spin = priorities[(i-1)//N*N + (i-1)%N][0]
      total_priority = -prev_spin
      if np.random.rand() < 0.5:  # assign random spin
        if np.random.rand() < 0.5:  # choose direction
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = 1
          priorities[i][1] = -1
      else:  # flip the previous spin
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.19357268518518544}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(J[:,i//N,i%N]) + sum(h[site_nbr][i%N] * J[1,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][0] -= np.sum(J[:,i//N,i%N]) - sum(h[site_nbr][i%N] * J[1,i//N,i%N] for site_nbr in site_nbrs)
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  return(priorities)




#score: {'data2D.txt': 0.21461435185185201}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  return(priorities)




#score: {'data2D.txt': 0.21461435185185201}
#island_id: 0
#version_generated: 2
#generate time06:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
  # Calculate the priority based on the magnetism
  priorities[:, 1] -= h.flatten()
  return(priorities)




#score: {'data2D.txt': -0.011396759259259261}
#island_id: 2
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      priorities[i][0] += J[k,i%N,i//N]*h[k][i%N]
      if J[k,i%N,i//N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.009531944444444445}
#island_id: 2
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    J_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        J_sum += J[k,i%N,i//N]
      else:
        J_sum -= J[k,i%N,i//N]

    priorities[i][0] = h[site_nbr][i%N]*J_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10320879629629635}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = 0.5 * (h[i//N][i%N] + h[(i+1)%N][(i-1)%N])
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    for k in [0, 1]:
      if k == 0:
        total_energy += J[k, i//N, i%N] * (h[site_nbr][i%N] - h[(i+k)%N][(i-1)%N])
      else:
        total_energy -= J[k, i//N, i%N] * (h[site_nbr][i%N] - h[(i-k)%N][(i+1)%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07383966049382715}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0.5 * (h[site_nbr][i%N] + h[i%N][site_nbr])
    for k in [0, 1]:
      if k == 0:
        total_energy += J[k, i//N, i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
      else:
        total_energy -= J[k, i//N, i%N] * (h[(i-k)%N][i%N] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006820524691358024}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0.5 * (h[site_nbr][i%N] + h[i%N][site_nbr])
    for k in [-1,1]:
      total_energy += J[k,i//N,i%N] * ((h[(i+k)%N][i%N]-2*h[site_nbr][i%N]) if (k==0 or i==0 or i==N*N-1) else (h[(i+k)%N][i%N]+h[(i-k)%N][i%N]-4*h[site_nbr][i%N]))
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07383966049382715}
#island_id: 0
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0.5 * (h[site_nbr][i%N] + h[i%N][site_nbr])
    for k in [0, 1]:
      if k == 0:
        total_energy += J[k, i//N, i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
      else:
        total_energy -= J[k, i//N, i%N] * (h[(i-k)%N][i%N] - h[site_nbr][i%N])
    if k == 0:
      priorities[i][1] = total_energy
    else:
      priorities[i][0] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.0015949074074074069}
#island_id: 0
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    priorities[i][0] = (J_up + J_down)*h_site
    priorities[i][1] = -priorities[i][0]
    
    # Apply the Metropolis-Hastings algorithm to improve the priority assignment
    current_spin = h_site
    new_spin = -current_spin
    delta_energy = 2 * np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[new_spin]+nns)]) 
    if np.exp(-delta_energy) > np.random.rand():
      current_spin, new_spin = new_spin, current_spin
    
    # Update the priority based on the new spin
    priorities[i][0] = (J_up + J_down)*current_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0011680555555555552}
#island_id: 0
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    
    # Calculate the priority for up and down
    if h_site > 0:
      priorities[i][0] = J_up - J_down
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J_down - J_up
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004153240740740741}
#island_id: 0
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    priorities[i][0] = (J_up + J_down)*h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0014745370370370377}
#island_id: 3
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_magnetism + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - np.sum(h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000559413580246914}
#island_id: 3
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism + np.sum(h)
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism - np.sum(h)

  return(priorities)




#score: {'data2D.txt': 0.0014745370370370377}
#island_id: 3
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_magnetism + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - np.sum(h)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00024305555555555525}
#island_id: 3
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N]
    for k in range(3):
      if i % N == 0:
        if k == 0:  # left
          total_magnetism += J[k,i%N,int(i/N)]
        else:
          break
      elif i % N == N-1:
        if k == 2:  # right
          total_magnetism += J[k,i%N,int(i/N)]
        else:
          break
      else:
        if k == 0:  # left
          total_magnetism += J[0,i%N,int(i/N)]
        elif k == 2:  # right
          total_magnetism += J[2,i%N,int(i/N)]
        else:
          total_magnetism += J[1,int(i/N),int(i/N)]
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_magnetism > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.978395061728354e-05}
#island_id: 2
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006949074074074075}
#island_id: 2
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[3,i//N,i%N]*h[site_nbr_up][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[2,i//N,i%N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.015788117283950617}
#island_id: 2
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([h[site_nbr][i%N], J[3,i//N,i%N]*h[site_nbr_up][i%N], J[2,i//N,i%N]*h[site_nbr_down][i%N], J[1,i//N,i%N]*h[site_nbr_left][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum([h[site_nbr][i%N], J[3,i//N,i%N]*h[site_nbr_up][i%N], J[2,i//N,i%N]*h[site_nbr_down][i%N], J[1,i//N,i%N]*h[site_nbr_left][i%N]])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0258195987654321}
#island_id: 2
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + J[3,i//N,i%N]*h[site_nbr_up][i%N] + J[2,i//N,i%N]*h[site_nbr_down][i%N]
      if site_nbr == site_nbr_left:
        priorities[i][0] += J[1,i//N,i%N]*h[site_nbr_left][i%N]
      else:
        priorities[i][0] -= J[1,i//N,i%N]*h[site_nbr_left][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -priorities[i][0]
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - J[3,i//N,i%N]*h[site_nbr_up][i%N] - J[2,i//N,i%N]*h[site_nbr_down][i%N]
      if site_nbr == site_nbr_left:
        priorities[i][0] -= J[1,i//N,i%N]*h[site_nbr_left][i%N]
      else:
        priorities[i][0] += J[1,i//N,i%N]*h[site_nbr_left][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -priorities[i][0]
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010536265432098766}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      if j % 2 == 1:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin += J[j,i//N,i//N]*h[site_nbr][i%N]
    priorities[i][0] = total_spin + np.sum(h)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009587962962962969}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_magnetism + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - np.sum(h)
      priorities[i][1] = -priorities[i][0]

  # Apply a simple correction to improve the priority function
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += 2 * J[3,i//N,i//N]
      priorities[i][1] -= 2 * J[3,i//N,i//N]

  return(priorities)




#score: {'data2D.txt': -0.0009717592592592595}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = np.sum(h)
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -np.sum(h)
  return(priorities)




#score: {'data2D.txt': -0.0009717592592592595}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -total_magnetism - np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_magnetism + np.sum(h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009245370370370372}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0 if h[site_nbr][i%N] > 0 else 1
    for j in range(4):
      total_spin += J[j,i//N,i//N]*h[site_nbr][i%N]
    priorities[i][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.002110956790123457}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = J[0,i//N,i//N]*h[site_nbr][i%N] + J[1,i//N,i//N]*h[(i+N)%N][i%N] + \
           J[2,i//N,i//N]*h[(i+1)%N][i%N] + J[3,i//N,i//N]*h[i%N][(i+1)%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010384413580246913}
#island_id: 3
#version_generated: 2
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin -= J[j,i//N,i//N]
      else:
        total_spin += J[j,i//N,i//N]
    priorities[i][0] = total_spin + np.sum(h)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    J_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        J_sum += J[k,i%N,i//N]
      else:
        J_sum -= J[k,i%N,i//N]

    priority_spin = np.sign(h[site_nbr][i%N]*J_sum)
    
    if h[site_nbr][i%N] > 0:
      priorities[i][1] = -priority_spin
      priorities[i][0] = (1-priority_spin)
    else:
      priorities[i][1] = priority_spin
      priorities[i][0] = -(1-priority_spin)

  return(priorities)




#score: {'data2D.txt': -0.0015233024691358025}
#island_id: 2
#version_generated: 2
#generate time06:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    J_sum = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        J_sum += J[k,i%N,i//N]
      else:
        J_sum -= J[k,i%N,i//N]

    total_spin = h[site_nbr][i%N] + J_sum
    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0015961419753086417}
#island_id: 1
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin from magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Determine priority based on total spin
    if total_spin > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    elif total_spin < 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      # If total spin is zero, assign priority randomly
      priorities[i] = np.random.rand(2)
  
  return(priorities)




#score: {'data2D.txt': 0.11353009259259272}
#island_id: 1
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] = -total_spin - sum(h[site_nbr][j] for j in range(N))
    else:
      priorities[i][0] = -total_spin - sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] = total_spin + sum(h[site_nbr][j] for j in range(N))
  
  return(priorities)




#score: {'data2D.txt': 0.1448251543209879}
#island_id: 1
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((2-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((1-1)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.04351867283950617}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0., 0.] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(4)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(4)]
    
    if sum(nn_values) > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site + max([n for n in nn_values])
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
      
  return(priorities)




#score: {'data2D.txt': 0.014186882716049383}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(4)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(4)]
    
    if sum(nn_values) > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site + max([n for n in nn_values])
    elif sum(nn_values) < 0:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
    else:
      if np.mean(nn_values) > 0:
        priorities[i][0] += h_site
        priorities[i][1] -= 2*h_site + max([n for n in nn_values])
      elif np.mean(nn_values) < 0:
        priorities[i][0] -= h_site
        priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
  return(priorities)




#score: {'data2D.txt': -0.008056327160493775}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(4)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(4)]
    
    if sum(nn_values) > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site + max([n for n in nn_values])
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0] - min([n for n in nn_values])
      
  # Another improved part
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N**2):
    priorities[i][0] += total_spin[i][0]
    if total_spin[i][1] > 0:
      priorities[i][1] -= 2*total_spin[i][0] + max([J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4)])
    else:
      priorities[i][1] = -priorities[i][0] - min([J[j,i//N,(i%N + ((j-1)%2 - 1)) % N] for j in range(4)])
      
  return(priorities)




#score: {'data2D.txt': -0.002361882716049383}
#island_id: 1
#version_generated: 2
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate total interactions
    total_interactions = np.sum(J[:, i//N, i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + total_interactions, -total_spin - total_interactions]
    else:
      priorities[i] = [-total_spin - total_interactions, total_spin + total_interactions]
      
  return(priorities)




#score: {'data2D.txt': 0.13779398148148167}
#island_id: 1
#version_generated: 2
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    neighbor_sum = np.sum(J[:,i//N,i//N])
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + neighbor_sum, -total_spin - neighbor_sum]
    else:
      priorities[i] = [-total_spin - neighbor_sum, total_spin + neighbor_sum]
  return(priorities)




#score: {'data2D.txt': -0.0648949074074074}
#island_id: 1
#version_generated: 2
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin * (h[i//N][i%N] > 0) - (1-total_spin) * (h[i//N][i%N] < 0)
    priorities[i][1] = -(total_spin * (h[i//N][i%N] > 0) - (1-total_spin) * (h[i//N][i%N] < 0))
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    for k in range(2):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k+2,i%N,i//N] > 0:
       total_spin += 1
     else:
       total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and nearest neighbor interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority based on magnetism and nearest neighbor interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31057978395061653}
#island_id: 3
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -priorities[i][0]

  # Calculate the absolute value of the priority for each site
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.abs(priorities[i][0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.abs(priorities[i][0])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0.5 * (h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_magnetism > 0:
      priorities[i][0] += np.abs(total_magnetism)
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= np.abs(total_magnetism)
      priorities[i][1] += priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += h[site_k][i % N]
      else:
        total_spin -= h[site_k][i % N]
    site_nbr2 = ((i+1) % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += (h[site_nbr][i%N] + h[site_nbr2][i%N])
    else:
      total_spin -= (h[site_nbr][i%N] + h[site_nbr2][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002473302469135803}
#island_id: 3
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = ((i+1) % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])
    else:
      h_site -= J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])

    for k in range(2):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * (h[site_k][i%N])
      else:
        h_site -= J[k, i % N, i // N] * (h[site_k][i%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0026961419753086424}
#island_id: 3
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    site_nbr2 = ((i+1) % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])
    else:
      h_site -= J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -priorities[i][1]
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = priorities[i][1]
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.002418672839506173}
#island_id: 3
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      total_spin += J[k, i % N, i // N] * h[site_k][i % N]
    site_nbr2 = ((i+1) % N + ((i//N-1)%2 - 1)) % N
    total_spin += J[3, i % N, i // N] * (h[site_nbr][i%N] + h[site_nbr2][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007470679012345676}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy = 0
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      site_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_energy + site_energy
    if total_spin > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16209521604938287}
#island_id: 0
#version_generated: 2
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = 0
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      site_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_energy + site_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001859722222222222}
#island_id: 3
#version_generated: 2
#generate time06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_magnetism = h[site_nbr][i%N]
    neighbor_spins = [h[(k+N-1)%N][i%N] for k in range(3)]
    total_neighbor_spin_product = sum([J[k,i//N,i//N]*neighbor_spins[k] for k in range(3)])
    if J[0,i//N,i//N]*h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin_magnetism + total_neighbor_spin_product
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = total_spin_magnetism + total_neighbor_spin_product
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0028964506172839506}
#island_id: 3
#version_generated: 2
#generate time06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i//N,i//N]*h[i//N][i%N] > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = -(priorities[i][0])
    else:
      total_magnetism2 = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i//N,i//N]*h[i//N][i%N] > 0:
        priorities[i][0] = -total_magnetism2
        priorities[i][1] = -(priorities[i][0])
      else:
        priorities[i][0] = total_magnetism2
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07376496913580247}
#island_id: 2
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.027498302469135805}
#island_id: 2
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if J[1,i//N,i%N] > 0 else -priorities[i][0] - 2*J[1,i//N,i%N]
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if J[2,i//N,i%N] > 0 else -priorities[i][0] - 2*J[2,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.07458564814814815}
#island_id: 2
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020658950617283957}
#island_id: 2
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]

      priorities[i][0] = total_spin
      if total_spin > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.011396759259259261}
#island_id: 2
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      priorities[i][0] += J[k,i%N,i//N]*h[k][i%N]
      if J[k,i%N,i//N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.01748287037037037}
#island_id: 0
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.2787578703703699}
#island_id: 0
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.16735632716049403}
#island_id: 0
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N][site_nbr%N] * h[site_nbr][i%N] for j, site_nbr in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N][site_nbr%N]) * h[site_nbr][i%N] for j, site_nbr in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.16695416666666685}
#island_id: 0
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.0009229938271604936}
#island_id: 3
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = np.sum([J[j,i//N,i//N]*h[site_nbr][j] for j in range(4)])
    if total_magnetism > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism

  return(priorities)




#score: {'data2D.txt': -0.0012365740740740737}
#island_id: 3
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[site_nbr][i%N]
    for j in range(4):
      if J[j,i//N,i//N] > 0:
        total_magnetism += J[j,i//N,i//N]*h[(i+N-1)%N][i%N] if j == 0 else J[j,i//N,i//N]*h[i//N][(i+1)%N]
      else:
        total_magnetism -= J[j,i//N,i//N]*h[(i+N-1)%N][i%N] if j == 0 else J[j,i//N,i//N]*h[i//N][(i+1)%N]

    if total_magnetism > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism

  return(priorities)




#score: {'data2D.txt': -0.020554783950617286}
#island_id: 3
#version_generated: 2
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_magnetism = 0
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i//N,i//N] > 0:
      total_magnetism += J[0,i//N,i//N]*h[site_nbr1][i%N]
    else:
      total_magnetism -= J[0,i//N,i//N]*h[site_nbr1][i%N]
    
    if i % N != 0 and i % N != N-1:
     site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
     if J[2,i//N,i//N] > 0:
      total_magnetism += J[2,i//N,i//N]*h[i//N][site_nbr2]
     else:
      total_magnetism -= J[2,i//N,i//N]*h[i//N][site_nbr2]
    
    if i % N != 0:
     site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
     site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
     if J[1,i//N,i//N] > 0:
      total_magnetism += J[1,i//N,i//N]*h[i//N][site_nbr2]
     else:
      total_magnetism -= J[1,i//N,i//N]*h[i//N][site_nbr2]
    
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism
    else:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism

  return(priorities)




#score: {'data2D.txt': -0.07006466049382717}
#island_id: 0
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sum = 0
    
    # Sum of interactions with nearest neighbors
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nn_sum += J[j,i//N,site_nbr]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum + abs(nn_sum)/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum - abs(nn_sum)/2
      if nn_sum == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
    
    # Add a term that favors -1 when the site is close to an edge
    if (i % N) in [0, N-1]:
      priorities[i][1] += 1
    elif ((i//N)%N) in [0, N-1]:
      priorities[i][1] -= 1
  
  return(priorities)




#score: {'data2D.txt': 0.1963816358024692}
#island_id: 0
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
    
    # Add more terms to the priority function based on J
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,site_nbr] > 0:
        priorities[i][0] += J[j,i//N,site_nbr]
        priorities[i][1] -= J[j,i//N,site_nbr]
      else:
        priorities[i][0] -= J[j,i//N,site_nbr]
        priorities[i][1] += J[j,i//N,site_nbr]
        
    # Add a term that favors -1 when the site is close to an edge
    if (i % N) == 0 or (i % N) == N-1:
      priorities[i][1] += 1
    elif ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      priorities[i][1] -= 1
      
  return(priorities)




#score: {'data2D.txt': -0.3115118827160486}
#island_id: 0
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,site_nbr] > 0:
        nns.append(J[j,i//N,site_nbr])
      else:
        nns.append(-J[j,i//N,site_nbr])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
    
    # Add a term that favors -1 when the site is close to an edge
    edge_term = 0
    if (i % N) == 0 or (i % N) == N-1:
      edge_term = 1
    elif ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      edge_term = -1
    
    priorities[i][1] += edge_term
  
  return(priorities)




#score: {'data2D.txt': -0.038613734567901264}
#island_id: 3
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    for k in range(4): # Changed the range to 4, as we are considering all 8 nearest neighbors
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += J[k, i % N, i //N] * h[site_k][i%N]
      else:
        total_spin -= J[k, i % N, i //N] * h[site_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0031257716049382716}
#island_id: 3
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
      if J[k, i % N, i // N] > 0:
        total_spin += J[k, i % N, i //N] * h[site_k][i%N]
      else:
        total_spin -= J[k, i % N, i //N] * h[site_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.038613734567901264}
#island_id: 3
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    for k in range(4):
     site_k = (k + i % N + ((i // N - k) % 2 - 1)) % N
     if J[k, i % N, i // N] > 0:
       total_spin += J[k, i % N, i //N] * h[site_k][i%N]
     else:
       total_spin -= J[k, i % N, i //N] * h[site_k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.012104475308641977}
#island_id: 3
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 1))
  
  # Calculate site magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i] += h[site_nbr][i%N]
    
  # Prioritize spins based on site interactions
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16496682098765456}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with neighbors
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,(i+N-1)%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,(i+N-1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i//N,(i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1

      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1

      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0784452160493827}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05347608024691358}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      if np.sum(h) > 0:
        priorities[i][1] = -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[3,i//N,i%N]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      if np.sum(h) > 0:
        priorities[i][1] = -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009597067901234567}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      total_spin = sum([J[3,i//N,k]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = 2*np.sum(J[:,i//N,i%N]) if np.sum(h) > 0 else -priorities[i][0]
    else:
      total_spin = sum([-J[3,i//N,k]*h[k][i%N] for k in [site_nbr, site_nbr_up, site_nbr_down]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1

      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1

      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.023731327160493827}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N] for k in [0, 1, 2, 3]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0, i//N, i%N]
      priorities[i][1] = -priorities[i][0] - 2*total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1

      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1

      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008588117283950618}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_left = sum(J[k,i//N,(i%N+N-1)%N] * h[site_nbr][(i%N+N-1)%N] for k in range(3))
    nn_energy_right = sum(J[k,i//N,(i%N+1)%N] * h[site_nbr][(i%N+1)%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += -h[site_nbr][i%N]
      priorities[i][1] -= 2 - nn_energy_left - nn_energy_right
    else:
      priorities[i][0] += -h[site_nbr][i%N]
      priorities[i][1] += 2 + nn_energy_left + nn_energy_right
  return(priorities)




#score: {'data2D.txt': 0.08863688271604939}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N] for k in range(3))
    total_energy = nn_energy + h[site_nbr][i%N]
    priorities[i][0] += -total_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(3))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(3))
  return(priorities)




#score: {'data2D.txt': 0.08863688271604939}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N] for k in range(3))
    total_energy = nn_energy + h[site_nbr][i%N]
    priorities[i][0] += -total_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(3))
    else:
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(3))
  return(priorities)




#score: {'data2D.txt': 0.04317052469135804}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]

    for j in range(N):
      if J[2,i//N,j] > 0:
        neighbor_energy = h[j][i%N]
      else:
        neighbor_energy = -h[j][i%N]

      total_energy += neighbor_energy

    priorities[i][1] -= (h_site + total_energy) / abs(h[i//N][i%N])

    for j in range(N):
      if J[3,i//N,j] > 0:
        neighbor_energy = h[j][i%N]
      else:
        neighbor_energy = -h[j][i%N]

      total_energy += neighbor_energy

    priorities[i][1] -= (h_site + total_energy) / abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.05282669753086421}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06976620370370373}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06761774691358027}
#island_id: 0
#version_generated: 2
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i//N,site_nbr] > 0:
      neighbor_energy = h[site_nbr][i%N]
    else:
      neighbor_energy = -h[site_nbr][i%N]

    priorities[i][0] += (neighbor_energy) / abs(h[i//N][i%N])
    priorities[i][1] -= (neighbor_energy) / abs(h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.005456635802469135}
#island_id: 3
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin - np.sum(np.abs(h[range(N),i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + np.sum(np.abs(h[range(N),i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,int(i/N)]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total_spin > 0:
      priorities[i][0] = total_spin * (1 - np.exp(-2 * total_spin))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin * (1 - np.exp(2 * total_spin))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.016411882716049382}
#island_id: 2
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    total_spin = np.sum(J[0,i//N:i//N+1,i%N]) + h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[3,i//N,i%N]*h[site_nbr_up][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[2,i//N,i%N]*h[site_nbr_down][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002570524691358025}
#island_id: 2
#version_generated: 2
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_up = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_down = (i // N + ((i % N+1)%2 - 1)) % N
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N

    spin_up = J[0,i//N,i%N] * h[site_nbr_up][i%N]
    spin_down = J[1,i//N,i%N] * h[i//N][i%N]
    spin_left = J[2,i//N,i%N] * h[site_nbr_left][i%N]
    spin_right = J[3,i//N,i%N] * h[(i // N + ((i % N+1)%2 - 1)) % N][i%N]

    priorities[i][0] = spin_up + spin_down + spin_left
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.05358101851851853}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][1] = np.sum(h[i//N])
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        priorities[i][0] += J[abs(k),i//N,x%N] * h[x%N][y]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.05159212962962965}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr])
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_spin += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][1] = np.sum(h[i//N])
    for k in [-1,0,1]:
      if k == 0:
        continue
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        priorities[i][0] += J[abs(k),i//N,x%N] * h[x%N][y]
  return(priorities)




#score: {'data2D.txt': 0.009607253086419753}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority
    
  return(priorities)




#score: {'data2D.txt': 0.009607253086419753}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority
    
  return(priorities)




#score: {'data2D.txt': 0.026000462962962965}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    priorities[i][0] = -total_priority  # Corrected this line as per the problem statement
    priorities[i][1] = total_priority
  
  return(priorities)




#score: {'data2D.txt': -0.05666373456790132}
#island_id: 2
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
    down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
    left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
    right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08201620370370373}
#island_id: 2
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = np.sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = np.sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1

      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1

      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002766975308641979}
#island_id: 3
#version_generated: 2
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006628086419753085}
#island_id: 3
#version_generated: 2
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.13416064814814838}
#island_id: 1
#version_generated: 2
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,(i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.014057561728395061}
#island_id: 2
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*1 if J[k,i//N,i%N] > 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N]*1 if J[k,i//N,i%N] < 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.000811882716049383}
#island_id: 1
#version_generated: 2
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr1][i%N]
    else:
      total_spin = -h[site_nbr1][i%N]
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
       total_spin += h[site_nbr][i%N]
     else:
       total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.00610817901234568}
#island_id: 1
#version_generated: 2
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # calculate the site magnetism and interactions from top and left
    total_spin += h[i%N][i//N]
    
    if i//N > 0:
      total_spin -= J[1,i//N,i%N] * h[(i//N-1)%N][i%N]
    if i%N > 0:
      total_spin -= J[2,i//N,i%N] * h[i//N][i%N-1]
    
    # calculate the site magnetism and interactions from bottom
    if i//N < N-1:
      total_spin += J[3,i//N,i%N] * h[(i//N+1)%N][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  
  return priorities




#score: {'data2D.txt': -0.0009455246913580242}
#island_id: 1
#version_generated: 2
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N)%2 - 1)) % N
    total_spin += h[site_nbr2][i%N]
    
    if J[3,i%N,i//N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
    return(priorities)




#score: {'data2D.txt': -5.60185185185183e-05}
#island_id: 1
#version_generated: 2
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.014057561728395061}
#island_id: 2
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*1 if J[k,i//N,i%N] > 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      if np.sum(h) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N]*1 if J[k,i//N,i%N] < 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.001268055555555555}
#island_id: 2
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N]*h[site_nbr][j] if k == j else J[k,i//N,i%N]*(h[site_nbr][max(0,j-1)]+h[site_nbr][min(j+1,N-1)]) for k in range(4) for j in [3,2,1,0]])
    priorities[i][0] = total_spin
    if np.sum(h) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0] - 2*np.sum([J[k,i//N,i%N]*h[site_nbr][j] if k == j else J[k,i//N,i%N]*(h[site_nbr][max(0,j-1)]+h[site_nbr][min(j+1,N-1)]) for k in range(4) for j in [3,2,1,0]])

  return(priorities)




#score: {'data2D.txt': 0.014057561728395061}
#island_id: 2
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*1 if J[k,i//N,i%N] > 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N]*1 if J[k,i//N,i%N] < 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.014057561728395061}
#island_id: 2
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*1 if J[k,i//N,i%N] > 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N]*1 if J[k,i//N,i%N] < 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*1 if J[k,i//N,i%N] > 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] += total_spin
    else:
      total_spin = sum([-J[k,i//N,i%N]*1 if J[k,i//N,i%N] < 0 else -1 for k in [3,2,1,0]])
      priorities[i][0] -= total_spin

  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority by summing total spin and magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.07592268518518523}
#island_id: 1
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if J[2,i//N,(i%N)] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.1663158950617286}
#island_id: 1
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_row = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr_row][i%N] + h[i//N][site_nbr_col]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.03755416666666666}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    if total_energy + 2*nn_energy > 0:
      priorities[i][0] += (total_energy + nn_energy) * N
      priorities[i][1] -= 2*N
    elif total_energy - 2*nn_energy > 0:
      priorities[i][0] -= (total_energy - nn_energy) * N
      priorities[i][1] += 2*N
    else:
      if total_energy > 0:
        priorities[i][0] += (total_energy + nn_energy) * N
        priorities[i][1] -= 2*N
      elif total_energy < 0:
        priorities[i][0] -= (total_energy - nn_energy) * N
        priorities[i][1] += 2*N
  return(priorities)




#score: {'data2D.txt': -0.007692438271604938}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    energy_diff = 4*nn_energy - total_energy
    priorities[i][0] += energy_diff * N
    priorities[i][1] -= 2*N if energy_diff > 0 else 2*N
  return(priorities)




#score: {'data2D.txt': 0.01707175925925926}
#island_id: 0
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    if total_energy + 2*nn_energy > 0:
      priorities[i][0] = (total_energy + nn_energy) * N
      priorities[i][1] = -2*N
    elif total_energy - 2*nn_energy > 0:
      priorities[i][0] = -(total_energy - nn_energy) * N
      priorities[i][1] = 2*N
    else:
      if np.random.rand() < 0.5:
        priorities[i][0] = (total_energy + nn_energy) * N
        priorities[i][1] = -2*N
      else:
        priorities[i][0] = -(total_energy - nn_energy) * N
        priorities[i][1] = 2*N
  return(priorities)




#score: {'data2D.txt': 0.016795524691358026}
#island_id: 0
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    if total_energy + 2*nn_energy > 0:
      priorities[i][0] += (total_energy + nn_energy) * N
      priorities[i][1] -= 2*N
    elif total_energy - 2*nn_energy > 0:
      priorities[i][0] -= (total_energy - nn_energy) * N
      priorities[i][1] += 2*N
    else:
      if np.random.rand() < 0.5:
        priorities[i][0] += (total_energy + nn_energy) * N
        priorities[i][1] -= 2*N
      else:
        priorities[i][0] -= (total_energy - nn_energy) * N
        priorities[i][1] += 2*N
  for k in range(N**2):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      priorities[k][0] += 4
      priorities[k][1] -= 2
    else:
      priorities[k][0] -= 4
      priorities[k][1] += 2
  for k in range(3):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      priorities[k*N+k][0] -= 4
      priorities[k*N+k][1] += 2
  return(priorities)




#score: {'data2D.txt': -2.1450617283950395e-05}
#island_id: 2
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      up_neighbor_sum = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3]])
      down_neighbor_sum = sum([-J[k,i//N,i%N]*down_neighbor_spin for k in [2]])
      left_neighbor_sum = sum([-J[k,i//N,i%N]*left_neighbor_spin for k in [1]])
      right_neighbor_sum = sum([J[k,i//N,i%N]*right_neighbor_spin for k in [0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      up_neighbor_sum = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3]])
      down_neighbor_sum = sum([J[k,i//N,i%N]*down_neighbor_spin for k in [2]])
      left_neighbor_sum = sum([J[k,i//N,i%N]*left_neighbor_spin for k in [1]])
      right_neighbor_sum = sum([-J[k,i//N,i%N]*right_neighbor_spin for k in [0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1465699074074074}
#island_id: 2
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      priorities[i][0] = sum([J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,i//N,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] < 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] < 0 else -1
      
      priorities[i][0] = sum([-J[k,i//N,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.15374953703703717}
#island_id: 2
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      up_neighbor_sum = sum([J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum + J[0,site_nbr,i%N]
      priorities[i][1] = -priorities[i][0] if np.sum(h) > 0 else -priorities[i][0] - 2*np.sum(J[:,i//N,i%N])
    else:
      up_neighbor_spin = 1 if J[3,site_nbr,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,site_nbr,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,site_nbr,i//N] < 0 else -1
      right_neighbor_spin = 1 if J[0,site_nbr,i//N] < 0 else -1
      
      up_neighbor_sum = sum([-J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([-J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([-J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([-J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3480912037037039}
#island_id: 2
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': -9.182098765432054e-05}
#island_id: 3
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = (2*h_site + left_spin + right_spin + top_spin + bottom_spin) / 5
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007325617283950618}
#island_id: 3
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007007716049382716}
#island_id: 3
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    h_site = sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin

    if J[0,i%N,i//N] > 0:
      h_site *= -1
    else:
      h_site *= -1

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0004331790123456791}
#island_id: 3
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = h_site + 2*J[0,i%N,i//N]*left_spin + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.3480912037037039}
#island_id: 2
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': -0.06163564814814816}
#island_id: 2
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  # Add a term that takes into account the interactions with the site's nearest neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] += np.sum(J[:,i//N,i%N])
      priorities[i][1] -= 1
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] -= np.sum(J[:,i//N,i%N])
      priorities[i][1] += 1
      
  return(priorities)




#score: {'data2D.txt': -0.023547685185185185}
#island_id: 2
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - 2*np.sum(J[:,i//N,i%N])
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin + 2*np.sum(J[:,i//N,i%N])
  return(priorities)




#score: {'data2D.txt': 0.30678503086419767}
#island_id: 2
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) 
      priorities[i][0] = total_spin * (np.sum(h) > 0).astype(int)
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.001118364197530864}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[k][i//N,i//N]*h[(site_nbr+k-1)%4][i%N] for k in range(4)])
    J_down = J[3][i//N,i//N]*h[site_nbr][i%N]

    if h_site * (J_up - J_down) > 0:
      priorities[i][0] = h_site * J_up
      priorities[i][1] = -priorities[i][0]
    else:
      total_energy = h_site * J_up + J_down
      priorities[i][0] = total_energy
      priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': -0.001118364197530864}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[k][i//N,i//N]*h[(site_nbr+k-1)%4][i%N] for k in range(4)])
    J_down = J[3][i//N,i//N]*h[site_nbr][i%N]

    if h_site * (J_up - J_down) > 0:
      priorities[i][0] = h_site * J_up
      priorities[i][1] = -priorities[i][0]
    else:
      total_energy = h_site * J_up + J_down
      priorities[i][0] = total_energy
      priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': -0.001147685185185185}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[k][i//N,i//N]*h[(site_nbr+k-1)%4][i%N] for k in range(4)])
    J_down = J[3][i//N,i//N]*h[site_nbr][i%N]

    if h_site * (J_up - J_down) > 0:
      priorities[i][0] = h_site * J_up
      priorities[i][1] = -priorities[i][0]
    else:
      total_energy = h_site * J_up + J_down
      if abs(total_energy) < 1e-6: # small energy, prioritize magnetism
        priorities[i][0] = h_site
        priorities[i][1] = -priorities[i][0]
      elif h_site > 0:
        priorities[i][0] = total_energy + J_up
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = total_energy - J_down
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013733024691358023}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_up = np.sum([J[k][i//N,i//N]*h[(site_nbr+k-1)%4][i%N] for k in range(4)])
    J_down = J[3][i//N,i//N]*h[site_nbr][i%N]

    if h_site * (J_up - J_down) > 0:
      priorities[i][0] = h_site * J_up
      priorities[i][1] = -priorities[i][0]
    else:
      total_energy = h_site * J_up + J_down
      priorities[i][0] = total_energy
      priorities[i][1] = total_energy

  # Sort the sites based on their energies and return
  indices = np.argsort(np.sum(priorities, axis=1))
  return priorities[indices]




#score: {'data2D.txt': 0.16598287037037063}
#island_id: 1
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with the four nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add interaction with the site itself (if it's not at the edge)
    if i % N != 0 and i % N != N - 1:  # for sites that have both up and down neighbors
      total_spin += h[i//N][i%N]
    
    # Determine priority based on magnetism and spin interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.12289614197530878}
#island_id: 1
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.3480912037037039}
#island_id: 2
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': 0.2551680555555552}
#island_id: 2
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin - np.sum(h)
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      elif nn_energy < 0:
        priorities[i][0] -= (np.abs(nn_energy)) / 4
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.10055663580246924}
#island_id: 0
#version_generated: 2
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(total_spin):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= total_spin / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': -8.904320987654257e-05}
#island_id: 1
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = [0,0]
    
    # Site interactions
    for k in [(i-1)%N,i,(i+1)%N]:
      if k != i:
        site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
        total_spin[0] += J[3,k%N,k//N]*h[site_nbr][k%N]
        total_spin[1] -= J[3,k%N,k//N]*h[site_nbr][k%N]
    
    # Magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin[0], -total_spin[0]]
    else:
      priorities[i] = [-total_spin[0], total_spin[0]]
  
  return(priorities)




#score: {'data2D.txt': -0.00553503086419753}
#island_id: 1
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_interaction = 1
    else:
      h_interaction = -1
      
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    priority_total = [total_spin + h_interaction, -total_spin - h_interaction]
    
    priorities[i][0] = np.sum([h_interaction for _ in range(N) if J[3,i%N,_] > 0])
    priorities[i][1] = -np.sum([h_interaction for _ in range(N) if J[3,i%N,_] < 0])
    
  return(priorities)




#score: {'data2D.txt': 0.002027006172839506}
#island_id: 1
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  for i in range(N2):
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.01543472222222222}
#island_id: 1
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.28123256172839456}
#island_id: 0
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][j] for k, j in enumerate([(k+1)%2 for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.3016492283950611}
#island_id: 0
#version_generated: 2
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up + 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down - 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.2913541666666661}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin_up = sum([J[k, i//N, i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5 + sum([J[k, i//N, i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5 + sum([J[k, i//N, i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
      priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.27800385802469096}
#island_id: 0
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3
    else:
      priorities[i][0] -= 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2])
    
  return(priorities)




#score: {'data2D.txt': 0.00033842592592592534}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    total_energy = sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin

    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003626697530864197}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    total_spin = sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin

    if h[i//N][i%N] > 0:
      total_spin += 2*J[0,i//N,i%N]
    else:
      total_spin -= 2*J[0,i//N,i%N]

    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00033842592592592534}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    spin_energy = sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin

    magnetism = h[site_nbr][i%N]

    priorities[i][0] = spin_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0027328703703703703}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) - J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0035001543209876545}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    neighbors = [left_spin, right_spin, top_spin, bottom_spin]
    sum_neighbors = sum(neighbors)
    
    priorities[i][0] = 2*h_site + J[3,i%N,i//N]*sum_neighbors
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006061882716049382}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(site_nbr+k)%N][i%N] for k in [0,1,3]]) + J[2,i%N,i//N]*h[site_nbr][(i+N+1)%N]
    priorities[i][0] = 2*h[site_nbr][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007631172839506181}
#island_id: 3
#version_generated: 2
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
    # Add the interaction with itself to avoid self-interaction
    if h_site > 0:
      priorities[i][0] -= J[3,i//N,i//N]
    elif h_site < 0:
      priorities[i][0] += J[3,i//N,i//N]
  return(priorities)




#score: {'data2D.txt': -0.0014226851851851855}
#island_id: 0
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin_sum = np.sum(h, axis=0)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_spin = np.sum(h[site_nbr], axis=0)
    if total_spin_sum[i%N].any():
      priorities[i][np.argmax(np.abs(total_spin)) + 1] += 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_spin = np.sum(h[site_nbr], axis=0)
    if np.sign(total_spin).any():
      spin_diff = np.max(np.abs(total_spin)) - np.min(np.abs(total_spin))
      priorities[i][np.argmin(spin_diff)] += 1
  return(priorities)




#score: {'data2D.txt': 0.0027461419753086426}
#island_id: 0
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_spin = np.sum(h[site_nbr], axis=0)
    if np.sign(total_spin).any():
      priorities[i][np.argmax(np.abs(total_spin)) + 1] += 1
      nn_energy *= -1 if (total_spin > 0).all() else 1
      for k in range(3):
        if J[k,i//N,i%N] * h[(i+k-1)%N][i%N] < 0:
          priorities[i][np.argmax(np.abs(total_spin)) + 1] -= 1
  return(priorities)




#score: {'data2D.txt': 0.0007631172839506181}
#island_id: 3
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
    
    # Add the interaction with itself to avoid self-interaction
    if h_site > 0:
      priorities[i][0] -= J[3,i//N,i//N]
    elif h_site < 0:
      priorities[i][0] += J[3,i//N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.00015879629629629666}
#island_id: 3
#version_generated: 2
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin - h_site
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001757561728395062}
#island_id: 3
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i//N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i//N,i//N]*top_spin + J[2,i//N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007631172839506181}
#island_id: 3
#version_generated: 2
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
    
    # Add the interaction with itself to avoid self-interaction
    if h_site > 0:
      priorities[i][0] -= J[3,i//N,i//N]
    elif h_site < 0:
      priorities[i][0] += J[3,i//N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.00017669753086419716}
#island_id: 3
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008371913580246923}
#island_id: 0
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][np.arange(N)])
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -1]
    else:
      priority_total = [-total_spin, 1]

    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        continue
      priority_total[0] += np.sum(J[j,i//N,nn_site])
      if j==3:
        break
      neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
        continue
      priority_total[1] -= np.sum(J[j,i//N,nn_site])
    priorities[i][0] = priority_total[0]
    priorities[i][1] = -priority_total[0]

  return(priorities)




#score: {'data2D.txt': -0.0007760802469135811}
#island_id: 0
#version_generated: 2
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][np.arange(N)])
    
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -1]
    else:
      priority_total = [-total_spin, 1]

    nn_sites = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    
    if J[0,i//N,i%N] > 0:
      priority_total[0] -= np.sum(J[0,i//N,nn_sites])
    else:
      priority_total[0] += np.sum(J[0,i//N,nn_sites])

    if h[i//N][i%N] > 0:
      priority_total[1] -= 2
    else:
      priority_total[1] += 2
    
    priorities[i][0] = priority_total[0]
    priorities[i][1] = -priority_total[0]
  
  return(priorities)




#score: {'data2D.txt': 0.0008371913580246923}
#island_id: 0
#version_generated: 2
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][np.arange(N)])
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -1]
    else:
      priority_total = [-total_spin, 1]

    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        continue
      priority_total[0] += np.sum(J[j,i//N,nn_site])
      if j==3:
        continue
      neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
        continue
      priority_total[1] -= np.sum(J[j,i//N,nn_site])
    priorities[i][0] = max(-10000,priority_total[0])
    priorities[i][1] = min(10000,-priority_total[0])
  return(priorities)




#score: {'data2D.txt': 0.041551080246913605}
#island_id: 0
#version_generated: 2
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][np.arange(N)])
    if h[i//N][i%N] > 0:
      priority_total = [total_spin, -1]
    else:
      priority_total = [-total_spin, 1]

    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        continue
      priority_total[0] += np.sum(J[j,i//N,nn_site])
      if j==3:
        continue
      neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == neighbor // N and abs(neighbor % N - site_nbr % N) > 0:
        continue
      priority_total[1] -= np.sum(J[j,i//N,nn_site])
    if np.abs(priority_total[0]) < np.abs(priority_total[1]):
      priorities[i][0] = priority_total[0]
      priorities[i][1] = -priority_total[0]
    else:
      priorities[i][0] = priority_total[1]
      priorities[i][1] = -priority_total[1]
  return(priorities)




#score: {'data2D.txt': -0.005543672839506172}
#island_id: 1
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]

    if J[1,i//N,i%N]%N+i != i:
      site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
      if J[1,i//N,i%N]%N+i != i:
        priorities[i][0] += h[site_nbr2][i%N]
        priorities[i][1] -= h[site_nbr2][i%N]
      else:
        priorities[i][0] -= h[site_nbr2][i%N]
        priorities[i][1] += h[site_nbr2][i%N]

    if J[3,i%N,i//N]%N+i != i:
      site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
      if J[3,i//N,i%N]%N+i != i:
        priorities[i][0] += h[site_nbr2][i%N]
        priorities[i][1] -= h[site_nbr2][i%N]
      else:
        priorities[i][0] -= h[site_nbr2][i%N]
        priorities[i][1] += h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority for each spin value
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.005126388888888888}
#island_id: 3
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = (2*h_site + left_spin + right_spin + top_spin + bottom_spin) / 5
    priorities[i][1] = -priorities[i][0] + sum(J[:,i//N,i//N])/(4*len(np.where(J[:,i//N,i//N]>0)[0]))
  return(priorities)




#score: {'data2D.txt': 0.0003745370370370369}
#island_id: 3
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N] * J[0,i%N,i//N]
    right_spin = h[(site_nbr + (N+1))%N][i%N] * J[0,(i+N)%N,i//N]
    top_spin = h[site_nbr][(i+N-1)%N] * J[1,i//N,(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N] * J[1,i//N,(i+N+1)%N]

    if sum([left_spin, right_spin, top_spin, bottom_spin]) > 0:
      priorities[i][0] = 2
      priorities[i][1] = -2
    else:
      priorities[i][0] = -2
      priorities[i][1] = 2
  return(priorities)




#score: {'data2D.txt': -9.182098765432054e-05}
#island_id: 3
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = (2*h_site + left_spin + right_spin + top_spin + bottom_spin) / 5
    priorities[i][1] = -priorities[i][0] if priorities[i][0] != 0 else -1/4
  return(priorities)




#score: {'data2D.txt': -0.009804783950617285}
#island_id: 0
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    left_up_nbr = ((i+N-1)%N+(i//N-1))
    right_down_nbr = ((i+1)%N+(i//N)%N)
    if i % N > 0: 
      total_energy += J[0,i//N,i%N] * (h[i%N][i%N] - h[site_nbr][i%N])
    if i % N < N-1:
      total_energy += J[1,i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N])
    if i // N > 0: 
      total_energy += J[2,i//N,i%N] * (h[i%N,0] - h[site_nbr][i%N])
    if i // N < N-1:
      total_energy += J[3,i//N,i%N] * (h[i%N,N-1] - h[site_nbr][i%N])
    if h[i%N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.03570293209876543}
#island_id: 0
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    left_up_nbr = ((i+N-1)%N+(i//N-1))
    right_down_nbr = ((i+1)%N+(i//N)%N)
    if i % N > 0: 
      total_energy += J[0,i//N,i%N] * (h[i%N][i%N] - h[site_nbr][i%N])
    if i % N < N-1:
      total_energy += J[1,i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N])
    if i // N > 0: 
      total_energy += J[2,i//N,i%N] * (h[i%N,0] - h[site_nbr][i%N])
    if i // N < N-1:
      total_energy += J[3,i//N,i%N] * (h[i%N,N-1] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.03570293209876543}
#island_id: 0
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    left_up_nbr = ((i+N-1)%N+(i//N-1))
    right_down_nbr = ((i+1)%N+(i//N)%N)
    if i % N > 0: 
      total_energy += J[0,i//N,i%N] * (h[i%N][i%N] - h[site_nbr][i%N])
    if i % N < N-1:
      total_energy += J[1,i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N])
    if i // N > 0: 
      total_energy += J[2,i//N,i%N] * (h[i%N,0] - h[site_nbr][i%N])
    if i // N < N-1:
      total_energy += J[3,i//N,i%N] * (h[i%N,N-1] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.03570293209876543}
#island_id: 0
#version_generated: 2
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    left_up_nbr = ((i+N-1)%N+(i//N-1))
    right_down_nbr = ((i+1)%N+(i//N)%N)
    if i % N > 0: 
      total_energy += J[0,i//N,i%N] * (h[i%N][i%N] - h[site_nbr][i%N])
    if i % N < N-1:
      total_energy += J[1,i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N])
    if i // N > 0: 
      total_energy += J[2,i//N,i%N] * (h[i%N,0] - h[site_nbr][i%N])
    if i // N < N-1:
      total_energy += J[3,i//N,i%N] * (h[i%N,N-1] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - (h[site_nbr][i%N] * J[3,i%N,i//N])
      priorities[i][1] = -(total_spin + h[site_nbr][i%N] * J[3,i%N,i//N])
    else:
      priorities[i][0] = -(total_spin - h[site_nbr][i%N] * J[3,i%N,i//N])
      priorities[i][1] = total_spin + h[site_nbr][i%N] * J[3,i%N,i//N]
  
  return(priorities)




#score: {'data2D.txt': 0.06917453703703702}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Check the majority spin of neighboring sites
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        # Assign the spin with lower energy
        for spin in [-1,1]:
          site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
          total_energy_new = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * spin*h[(i+k-1)%N][i%N] for k in range(3))
          if total_energy_new <= 0:
            priorities[i][0] = spin
            priorities[i][1] = -spin
            break
  return(priorities)




#score: {'data2D.txt': 0.0038075617283950614}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = h[i%N][i//N] + sum(J[k,(i+k-1)%N//N,i%N] * h[(i+k-1)%N//N][(i+k-1)%N%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        for spin in [-1,1]:
          total_energy_new = h[i%N][i//N] + sum(J[k,(i+k-1)%N//N,i%N] * spin*h[(i+k-1)%N//N][(i+k-1)%N%N] for k in range(3))
          if total_energy_new <= 0:
            priorities[i][0] = spin
            priorities[i][1] = -spin
            break
  return(priorities)




#score: {'data2D.txt': 0.06917453703703702}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Check the majority spin of neighboring sites
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        # Assign the spin with lower energy
        min_energy = float('inf')
        best_spin = None
        for spin in [-1,1]:
          site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
          total_energy_new = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * spin*h[(i+k-1)%N][i%N] for k in range(3))
          if total_energy_new < min_energy:
            min_energy = total_energy_new
            best_spin = spin
        priorities[i][0] = best_spin
        priorities[i][1] = -best_spin
  return(priorities)




#score: {'data2D.txt': 0.06917453703703702}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      # Check the majority spin of neighboring sites
      neighbors_spin = [priorities[(i+N)%N*N + (i+N)%N][0], priorities[(i-N)%N*N + (i-N)%N][0], priorities[i-1][0]]
      if len(set(neighbors_spin)) == 1:
        priorities[i][0] = neighbors_spin[0]
        priorities[i][1] = -neighbors_spin[0]
      else:
        # Assign the spin with lower energy
        for spin in [-1,1]:
          site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
          total_energy_new = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * spin*h[(i+k-1)%N][i%N] for k in range(3))
          if total_energy_new <= 0:
            priorities[i][0] = spin
            priorities[i][1] = -spin
            break
  return(priorities)




#score: {'data2D.txt': 0.021363425925925928}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if np.sum(h) > 0:
      priorities[i][0] += abs(total_energy)
      priorities[i][1] -= np.sign(total_energy)
    else:
      priorities[i][0] -= abs(total_energy)
      priorities[i][1] += np.sign(total_energy)
  return(priorities)




#score: {'data2D.txt': 0.021363425925925928}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N]) for k in range(4))
    total_energy = h[site_nbr][i%N] + nn_energy
    if np.sum(h) > 0:
      priorities[i][0] += abs(total_energy)
      priorities[i][1] -= np.sign(total_energy)
    else:
      priorities[i][0] -= abs(total_energy)
      priorities[i][1] += np.sign(total_energy)
  return(priorities)




#score: {'data2D.txt': 0.0008745370370370393}
#island_id: 0
#version_generated: 2
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_energy = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      energy = h[site_nbr][j] 
      nn_energy = sum(J[k,i,j] * (h[(i+k-1)%N][j] if k % 2 == 0 else -h[(i+k-1)%N][j]) for k in range(4))
      total_energy[i][j] = energy + nn_energy
      if np.sum(h) > 0:
        priorities[i*N+j][0] += abs(total_energy[i][j])
        priorities[i*N+j][1] -= np.sign(total_energy[i][j])
      else:
        priorities[i*N+j][0] -= abs(total_energy[i][j])
        priorities[i*N+j][1] += np.sign(total_energy[i][j])
  return(priorities)




#score: {'data2D.txt': -0.022030709876543212}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_site_top = (site_nbr + ((0)%2 - 1)) % N
    nn_site_bot = (site_nbr + ((2)%2 - 1)) % N
    nn_site_left = (site_nbr + ((1)%2 - 1)) % N
    nn_site_right = (site_nbr + ((3)%2 - 1)) % N

    total_spin = h[nn_site_top][i%N] + h[nn_site_bot][i%N] + h[nn_site_left][i//N] + h[nn_site_right][i//N]
    if J[0,i//N,site_nbr] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.02594984567901235}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_site_top = (site_nbr + ((0)%2 - 1)) % N
    nn_site_bot = (site_nbr + ((2)%2 - 1)) % N
    nn_site_left = (site_nbr + ((1)%2 - 1)) % N

    total_spin = h[nn_site_top][i%N] + h[nn_site_bot][i%N] + h[nn_site_left][i//N]
    if J[0,i//N,site_nbr] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.03214521604938272}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_site_top = (site_nbr + ((0)%2 - 1)) % N
    nn_site_bot = (site_nbr + ((2)%2 - 1)) % N
    nn_site_left = (site_nbr + ((1)%2 - 1)) % N

    total_spin = h[nn_site_top][i%N] + h[nn_site_bot][i%N] + h[nn_site_left][i//N]
    if J[0,i//N,site_nbr] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    if J[1,i//N,site_nbr] > 0 and i % N != 0:
      total_spin += h[i//N][i%N - 1]
    elif J[1,i//N,site_nbr] < 0 and i % N != 0:
      total_spin -= h[i//N][i%N - 1]

    if J[2,i//N,site_nbr] > 0 and (i // N) % 2 == 0:
      total_spin += h[(i // N) % N + ((i % N-1)%2 - 1), i % N]
    elif J[2,i//N,site_nbr] < 0 and (i // N) % 2 == 0:
      total_spin -= h[(i // N) % N + ((i % N-1)%2 - 1), i % N]

    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.02594984567901235}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_site_top = (site_nbr + ((0)%2 - 1)) % N
    nn_site_bot = (site_nbr + ((2)%2 - 1)) % N
    nn_site_left = (site_nbr + ((1)%2 - 1)) % N

    total_spin = h[nn_site_top][i%N] + h[nn_site_bot][i%N] + h[nn_site_left][i//N]
    if J[0,i//N,site_nbr] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    priorities[i][0] = -total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06976620370370373}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + total_energy) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.004578858024691358}
#island_id: 0
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = (h_site + sum(nns) * abs(h[i//N][i%N])) / abs(h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': 0.16506095679012367}
#island_id: 1
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.009205092592592593}
#island_id: 1
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.1719331790123457}
#island_id: 1
#version_generated: 2
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = i % N
    
    total_spin_row = sum(J[k,site_nbr_row,i//N] * h[site_nbr_row][j] for k, j in enumerate(range(N)) if k in [0,1])
    total_spin_col = sum(J[k,site_nbr_col,k] * h[i//N][k] for k in range(2))
    
    magnetism = h[i//N][i%N]
    
    priorities[i][0] = total_spin_row + total_spin_col + magnetism
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00041682098765432175}
#island_id: 2
#version_generated: 2
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_product = 1 if J[3,i//N,i%N]*J[0,site_nbr,i%N] > 0 else -1
      priorities[i][0] = np.sum([J[k,site_nbr,i%N] for k in [3,2,1,0]]) + spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      spin_product = 1 if J[3,site_nbr,i%N]*J[0,site_nbr,i//N] < 0 else -1
      priorities[i][0] = np.sum([-J[k,site_nbr,i%N] for k in [3,2,1,0]]) + spin_product
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09952669753086425}
#island_id: 2
#version_generated: 2
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      up_neighbor_sum = sum([J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbor_spin = 1 if J[3,site_nbr,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,site_nbr,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,site_nbr,i//N] < 0 else -1
      right_neighbor_spin = 1 if J[0,site_nbr,i//N] < 0 else -1
      
      up_neighbor_sum = sum([-J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([-J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([-J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([-J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09952669753086425}
#island_id: 2
#version_generated: 2
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      up_neighbor_sum = sum([J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbor_spin = 1 if J[3,site_nbr,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,site_nbr,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,site_nbr,i//N] < 0 else -1
      right_neighbor_spin = 1 if J[0,site_nbr,i//N] < 0 else -1
      
      up_neighbor_sum = sum([-J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([-J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([-J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([-J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09952669753086425}
#island_id: 2
#version_generated: 2
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbor_spin = 1 if J[3,i//N,i%N] > 0 else -1
      down_neighbor_spin = 1 if J[2,i//N,i%N] > 0 else -1
      left_neighbor_spin = 1 if J[1,i//N,i%N] > 0 else -1
      right_neighbor_spin = 1 if J[0,i//N,i%N] > 0 else -1
      
      up_neighbor_sum = sum([J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbor_spin = 1 if J[3,site_nbr,i%N] < 0 else -1
      down_neighbor_spin = 1 if J[2,site_nbr,i%N] < 0 else -1
      left_neighbor_spin = 1 if J[1,site_nbr,i//N] < 0 else -1
      right_neighbor_spin = 1 if J[0,site_nbr,i//N] < 0 else -1
      
      up_neighbor_sum = sum([-J[k,site_nbr,i%N]*up_neighbor_spin for k in [3,2,1,0]])
      down_neighbor_sum = sum([-J[k,site_nbr,i%N]*down_neighbor_spin for k in [3,2,1,0]])
      left_neighbor_sum = sum([-J[k,site_nbr,i//N]*left_neighbor_spin for k in [3,2,1,0]])
      right_neighbor_sum = sum([-J[k,site_nbr,i//N]*right_neighbor_spin for k in [3,2,1,0]])
      
      priorities[i][0] = up_neighbor_sum + down_neighbor_sum + left_neighbor_sum + right_neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0036263888888888886}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] = total_spin + sum(h[j][i//N] for j in range(N))
      priorities[i][1] = -total_spin - sum(h[j][i//N] for j in range(N))
    else:
      priorities[i][0] = -total_spin - sum(h[j][i//N] for j in range(N))
      priorities[i][1] = total_spin + sum(h[j][i//N] for j in range(N))
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.009723302469135803}
#island_id: 1
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      spin = 1
    else:
      spin = -1
      
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0 and (k==0 or i//N==(i-1)%N) and (k==1 or i%N==(i-1)%N):
        total_spin += spin
      elif J[k,i%N,i//N] < 0 and ((k==2 and i//N==(i+1)%N) or (k==3 and i%N==(i+1)%N)):
        total_spin -= spin
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.15589922839506187}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j,i//N,site_nbr] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    priorities[i][0] = total_spin + h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0015489197530864196}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]

    nn_energy_sum = 0
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy_sum += h[nn_site][i%N]
      else:
        nn_energy_sum -= h[nn_site][i%N]

    total_energy = nn_energy_sum * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0] if J[2,i//N,site_nbr] > 0 else priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023300925925925924}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4):
      if j == 0:
        nn_site = (site_nbr + 1) % N
      elif j == 1:
        nn_site = (site_nbr + ((N-1)%2 - 1)) % N
      elif j == 2:
        nn_site = site_nbr - 1
      else:
        nn_site = (site_nbr + ((i//N-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0] if J[2,i//N,site_nbr] > 0 else priorities[i][0]
 
  return(priorities)




#score: {'data2D.txt': -0.0006054012345679014}
#island_id: 0
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      energy_diff = sum([J[j,i//N,site_nbr]*h[site_nbr][i%N] for j in range(3)]) * h[i//N][i%N]
    else:
      energy_diff = -sum([J[j,i//N,site_nbr]*h[site_nbr][i%N] for j in range(3)]) * h[i//N][i%N]

    priorities[i][0] = energy_diff
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.009615895061728394}
#island_id: 3
#version_generated: 2
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for k in range(3):
      total_spin += J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr][i%N])

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if k == 3:
        continue
      j = (i % N + (k-1)%2 - 1) % N
      total_spin += J[k,i%N,j]*h[site_nbr][j]
    h_site = h[i//N][i%N] + total_spin
    
    if h_site > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2819881172839501}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + (J[1,i%N,i//N]**2 + J[3,i%N,i//N]**2)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - (J[1,i%N,i//N]**2 + J[3,i%N,i//N]**2)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002766975308641979}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007325617283950618}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00040725308641975297}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.0051742283950617285}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = -2*h_site - J[1,i%N,i//N]*top_spin - J[2,i%N,i//N]*bottom_spin - abs(h_site) + sum([J[k,i%N,i//N]*abs(s) for k,s in zip([0,3], [left_spin, right_spin])])
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007325617283950618}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*s for k,s in zip([0,3], [left_spin, right_spin])]) + J[1,i%N,i//N]*top_spin + J[2,i%N,i//N]*bottom_spin
    priorities[i][1] = 2*abs(h_site) - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -9.182098765432054e-05}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_total = (2*h_site + left_spin + right_spin + top_spin + bottom_spin) / 5
    priorities[i][0] = priority_total.copy()
    priorities[i][1] = -priority_total.copy()
  return(priorities)




#score: {'data2D.txt': -0.22301342592592593}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = (2*h_site + left_spin + right_spin + top_spin + bottom_spin) / 5
    if J[1,i//N,i%N] > 0:
      priorities[i][1] += 1
    else:
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 5.663580246913619e-05}
#island_id: 3
#version_generated: 2
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N]
    right_spin = h[(site_nbr + (N+1))%N][i%N]
    top_spin = h[site_nbr][(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N]

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = left_spin + right_spin + top_spin + bottom_spin
    priorities[i][0] = (2*h_site + spin_sum) / 6
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007297839506172835}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N] * J[0,i%N,i//N]
    right_spin = h[(site_nbr + (N+1))%N][i%N] * J[0,(i+N)%N,i//N]
    top_spin = h[site_nbr][(i+N-1)%N] * J[1,i//N,(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N] * J[1,i//N,(i+N+1)%N]

    if sum([left_spin, right_spin, top_spin, bottom_spin]) > 0:
      priorities[i][0] += np.sum(np.where([left_spin, right_spin], [2, -2], [-2, 2]))
      priorities[i][1] -= np.sum(np.where([left_spin, right_spin], [2, -2], [-2, 2]))
    else:
      priorities[i][0] -= np.sum(np.where([left_spin, right_spin], [2, -2], [-2, 2]))
      priorities[i][1] += np.sum(np.where([left_spin, right_spin], [2, -2], [-2, 2]))

  return(priorities)




#score: {'data2D.txt': 0.00041589506172839497}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N] * J[0,i%N,i//N]
    right_spin = h[(site_nbr + (N+1))%N][i%N] * J[0,(i+N)%N,i//N]
    top_spin = h[site_nbr][(i+N-1)%N] * J[1,i//N,(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N] * J[1,i//N,(i+N+1)%N]

    if left_spin > 0 and right_spin < 0:
      priorities[i][0] = -2
      priorities[i][1] = 2
    elif top_spin > 0 and bottom_spin < 0:
      priorities[i][0] = 2
      priorities[i][1] = -2
    else:
      if sum([left_spin, right_spin]) > 0:
        priorities[i][0] = 2
        priorities[i][1] = -2
      elif sum([top_spin, bottom_spin]) > 0:
        priorities[i][0] = -2
        priorities[i][1] = 2
      else:
        if left_spin > right_spin and top_spin > bottom_spin:
          priorities[i][0] = 2
          priorities[i][1] = -2
        elif left_spin < right_spin and top_spin < bottom_spin:
          priorities[i][0] = -2
          priorities[i][1] = 2
        else:
          if left_spin > right_spin:
            priorities[i][0] = 2
            priorities[i][1] = -2
          elif left_spin < right_spin:
            priorities[i][0] = -2
            priorities[i][1] = 2
          else:
            if top_spin > bottom_spin:
              priorities[i][0] = 2
              priorities[i][1] = -2
            elif top_spin < bottom_spin:
              priorities[i][0] = -2
              priorities[i][1] = 2
            else:
              priorities[i][0] = 0
              priorities[i][1] = 0

  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.0006523148148148149}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = h[(site_nbr + N-1)%N][i%N] * J[0,i%N,i//N]
    right_spin = h[(site_nbr + (N+1))%N][i%N] * J[0,(i+N)%N,i//N]
    top_spin = h[site_nbr][(i+N-1)%N] * J[1,i//N,(i+N-1)%N]
    bottom_spin = h[site_nbr][(i+N+1)%N] * J[1,i//N,(i+N+1)%N]

    if sum([left_spin, right_spin, top_spin, bottom_spin]) > 0:
      priorities[i][0] = np.sum(np.where([left_spin, right_spin, top_spin, bottom_spin], [1,-1,-2,2], [0,0,0,0]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(np.where([left_spin, right_spin, top_spin, bottom_spin], [1,-1,-2,2], [0,0,0,0]))
      priorities[i][1] = np.sum(np.where([left_spin, right_spin, top_spin, bottom_spin], [1,-1,-2,2], [0,0,0,0]))

  return(priorities)




#score: {'data2D.txt': -0.3407547839506162}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or (i%N==0 and k==0) or (i%N==N-1 and k==2):
        J_site = 0
      else:
        J_site = J[k,i%N,i//N]

      priorities[i][0] += h_site + J_site*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_momentum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_momentum + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      spin_momentum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_momentum - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + ((i%N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_k = h[site_k][i%N]
      else:
        h_k = -h[site_k][i%N]

      priorities[i][0] += h_site + h_k
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.009023919753086421}
#island_id: 1
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr_row][j]
      else:
        total_spin -= h[site_nbr_row][j]
      
      priorities[i][0] += total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add J[k,i//N,i%N] interactions with nearest neighbors
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Update priorities based on site magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return priorities




#score: {'data2D.txt': -0.20846033950617282}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    
    # Improved priority calculation
    if J[1,i//N,site_nbr]>0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.1408939814814815}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    
    # Improved priority calculation
    if sum(J[k,i//N,site_nbr] for k in [1,3]) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.11357206790123456}
#island_id: 0
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(1 if J[j,i//N,(site_nbr+(j-1)%2-N)%N] > 0 else -1 for j in range(4))
    total_spin *= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    
    # Improved priority calculation
    if sum(1 if J[j,i//N,(site_nbr+(j-1)%2-N)%N] > 0 else -1 for j in range(4)) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.3480912037037039}
#island_id: 2
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.34930169753086443}
#island_id: 2
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': 0.01903472222222222}
#island_id: 2
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin if np.sum(h) > 0 else total_spin + 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.3480912037037039}
#island_id: 2
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N] for k in [3,2,1,0]]) + J[0,i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin if np.sum(h) > 0 else -total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      total_spin = sum([-J[k,i//N,i%N] for k in [3,2,1,0]])
      priorities[i][0] = -total_spin
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': 0.15883101851851872}
#island_id: 0
#version_generated: 2
#generate time07:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if abs(total_spin_up) > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.1629297839506175}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = -2.5
      priorities[i][1] = 4.5
    elif total_spin_down > 0:
      priorities[i][0] = 3.5 + (total_spin_down - 2.5) * 3.5
      priorities[i][1] = -8 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = 3.5 + (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 8 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.1710476851851854}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    total_spin_up = sum([J[j,i//N,i%N]*h[site_nbr][i%N] for j, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)])])
    total_spin_down = sum([abs(J[j,i//N,i%N])*h[site_nbr][i%N] for j, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)])])
    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2*(total_spin_up - 2.5)*3.5
      priorities[i][1] = -4*total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5)*3.5
      priorities[i][1] = 4*total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5)*3.5
        priorities[i][1] = -4*total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5)*3.5
        priorities[i][1] = 4*total_spin_down
  return(priorities)




#score: {'data2D.txt': 0.1710476851851854}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.00024490740740740706}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_nbr_opp = (i % N + ((i//N-1)%2)) % N
    total_energy_opposite = sum(J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] if J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_opp][i%N]
    priorities[i][0] = total_energy + total_energy_opposite
    if total_energy > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00024490740740740706}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_nbr_opp = (i % N + ((i//N-1)%2)) % N
    total_energy_opposite = sum(J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] if J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_opp][i%N]
    priorities[i][0] = total_energy + total_energy_opposite
    if total_energy > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00024490740740740706}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_nbr_opp = (i % N + ((i//N-1)%2)) % N
    total_energy_opposite = sum(J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] if J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_opp][i%N]
    priorities[i][0] = total_energy + total_energy_opposite
    if total_energy > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00024490740740740706}
#island_id: 0
#version_generated: 2
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_nbr_opp = (i % N + ((i//N-1)%2)) % N
    total_energy_opposite = sum(J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] if J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr_opp+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_opp][i%N]
    if total_energy > 0:
      priorities[i][0] = total_energy + total_energy_opposite
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_energy + total_energy_opposite
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.25791466049382694}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if abs(total_spin_up) > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up

  return(priorities)




#score: {'data2D.txt': -0.03956527777777778}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs_down)])

    if abs(total_spin_up) > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

    # Add the site's magnetism to the priority
    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] -= h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.23863966049382707}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if abs(total_spin_up) > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
    elif abs(total_spin_down) > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down
      else:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up

  return(priorities)




#score: {'data2D.txt': 0.15883101851851872}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs_up = [(i % N + ((k-1)%2 - 1)) % N if k%2 == 0 else (i % N + ((k-1)%2)) % N for k in range(4)]
    site_nbrs_down = [(i % N + ((k-1)%2 - 1)) % N if k%2 != 0 else (i % N + ((k-1)%2)) % N for k in range(4)]

    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs_up)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * h[site][i%N] for j, site in enumerate(site_nbrs_down)])

    if abs(total_spin_up) > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.0029816358024691353}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i][0] += sum(J[:,i//N,i%N])
      priorities[i][1] -= sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= sum(J[:,i//N,i%N])
      priorities[i][1] += sum(J[:,i//N,i%N])
  
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    
    total_spin = sum(h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs))
    
    magnetism = h[i//N][i%N]
    
    priorities[i] = [total_spin + magnetism, total_spin - magnetism]
  
  return(priorities)




#score: {'data2D.txt': 0.1553591049382718}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N-1+1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+N-1)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N+N)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N] + h[site_nbr3][i%N] + h[site_nbr4][i%N]
    
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16595262345679038}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%N - 1)) % N
    site_nbr3 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N+1)%N - 1)) % N

    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.1606640432098768}
#island_id: 1
#version_generated: 2
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = J[3,i//N,i%N]
    
    if total_spin > 0:
      priorities[i] = [priorities[i][0], priorities[i][1]-total_spin]
    else:
      priorities[i] = [priorities[i][0]+total_spin, priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.010939043209876544}
#island_id: 2
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.tanh(h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 2
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy
  
  return(priorities)




#score: {'data2D.txt': -0.001728858024691358}
#island_id: 2
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_sum > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - abs(neighbor_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008303240740740743}
#island_id: 0
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,k//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008303240740740743}
#island_id: 0
#version_generated: 2
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    nn_sum = sum([J[k,i//N,k//N]*n for k,n in zip(range(3),nns)])

    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09179212962962971}
#island_id: 1
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbrs = [(i-1)%N if i % N != 0 else N-1, (i+1)%N]
    for j in range(N):
      total_spin += sum(h[site_nbr][j] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priorities based on total spin and magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.010939043209876544}
#island_id: 2
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.tanh(h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.014348302469135803}
#island_id: 2
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        total_spin -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.tanh(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.06887824074074074}
#island_id: 2
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[site_nbr][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
    priorities[i][0] = np.tanh(h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.exp(h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.24416373456790097}
#island_id: 3
#version_generated: 2
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.041511574074074076}
#island_id: 3
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      priorities[i][0] += h[j][i%N]
      if h[j][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11631959876543223}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if J[3,i%N,j] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.1637804012345681}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.014348302469135803}
#island_id: 2
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        total_spin -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.tanh(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.014348302469135803}
#island_id: 2
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        total_spin -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    for _ in range(5):  # Repeat the process 5 times
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      total_spin = h[site_nbr][i%N]
      for d in range(4):
        n = (i + ((-1)**d)%N)
        if J[d,i//N,i%N] > 0:
          total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
        else:
          total_spin -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

      priorities[i][0] = np.tanh(total_spin)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09154182098765441}
#island_id: 1
#version_generated: 2
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Add magnetism
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
      
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.08245910493827165}
#island_id: 1
#version_generated: 2
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i] = [total_spin + magnetism, -total_spin - magnetism]
  
  return(priorities)




#score: {'data2D.txt': -0.005132561728395061}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])
    
    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    if i >= N:
      site_nbr = (i - N + ((i//N-1)%2 - 1)) % N
      nns.append(J[0,i//N,site_nbr])
    if i < N:
      site_nbr = (i + N + ((i//N)%2 - 1)) % N
      nns.append(J[3,i//N,site_nbr])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005132561728395061}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005132561728395061}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    if priorities[i][0] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006757716049382714}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1) % N + ((i%N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,site_nbr1,i%N])*h[site_nbr1][i%N] + np.sum(J[:,site_nbr2,i%N])*h[site_nbr2][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] += 3.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] -= 2.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': 0.0031766975308641972}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      if J[j][i % N + ((i // N) % 2 - 1), i % N] > 0:
        total_spin += h[i % N + ((i // N) % 2 - 1)][i % N]
      else:
        total_spin -= h[i % N + ((i // N) % 2 - 1)][i % N]
    if h[i // N][i % N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
  return(priorities)




#score: {'data2D.txt': 0.002392438271604938}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1) % N + ((i%N-1)%2 - 1)) % N
    total_spin1 = np.sum(J[:,site_nbr1,i%N])*h[site_nbr1][i%N]
    total_spin2 = np.sum(J[:,site_nbr2,i%N])*h[site_nbr2][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin1 * 3.5 + total_spin2 * 4
      priorities[i][1] -= 2.5 * (total_spin1 + total_spin2)
    else:
      priorities[i][0] -= total_spin1 * 3.5 - total_spin2 * 4
      priorities[i][1] += 2.5 * (total_spin1 + total_spin2)
  return(priorities)




#score: {'data2D.txt': 0.00447824074074074}
#island_id: 0
#version_generated: 2
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,site_nbr1,i%N])*h[site_nbr1][i%N] + np.sum(J[:,(site_nbr1+N)%N,i%N])*h[(site_nbr1+N)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] += 3.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] += np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
      priorities[i][1] -= 2.5 * np.sum(J[:,site_nbr,i%N])*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.028958487654320984}
#island_id: 3
#version_generated: 2
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 2*h[site][i%N]
      else:
        priorities[i][0] -= 2*h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0] + h_site

  return(priorities)




#score: {'data2D.txt': -0.011615895061728394}
#island_id: 3
#version_generated: 2
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,k//N] > 0:
        h_site_k = h[site_nbr_k][i%N]
      else:
        h_site_k = -h[site_nbr_k][i%N]

      priorities[i][0] += J[k,i%N,k//N]*2*h_site_k
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.23991373456790102}
#island_id: 3
#version_generated: 2
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_neighbor = (k+N-1)%N
     if J[k,i%N,i//N] > 0:
       priorities[i][0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N] - h[i//N][i%N]
     else:
       priorities[i][0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N] + h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 2
#version_generated: 2
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site
    
  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 2
#version_generated: 2
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -priorities[i][1] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = priorities[i][1] + total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 2
#version_generated: 2
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site

  return(priorities)




#score: {'data2D.txt': 0.01748287037037037}
#island_id: 0
#version_generated: 2
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.19206033950617307}
#island_id: 0
#version_generated: 2
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] if J[j,i//N,i%N] > 0 else -h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * (1 if J[j,i//N,i%N] > 0 else -1) * h[site][i%N] for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = 2 * (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.008163425925925926}
#island_id: 3
#version_generated: 2
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_neighbor = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000794598765432099}
#island_id: 3
#version_generated: 2
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.zeros(2)
    
    # calculate total spin at this site based on magnetism and interaction
    for j in range(N):
      if J[0,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    if np.sum(h[i//N]) > 0:
      priorities[i][0] = np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N-1+1)%2 - 1)) % N, (i % N + ((i//N-1-1)%2 - 1)) % N]
    for j in site_nbrs:
      total_spin[0] += J[0,i%N,i//N]*h[j][i%N]
      total_spin[1] -= J[0,i%N,i//N]*h[j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[1]
      priorities[i][1] = total_spin[0]
    else:
      priorities[i][0] = total_spin[1]
      priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.011615895061728394}
#island_id: 3
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,k//N] > 0:
        h_site_k = h[site_nbr_k][i%N]
      else:
        h_site_k = -h[site_nbr_k][i%N]

      priorities[i][0] += J[k,i%N,k//N]*2*h_site_k
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012192438271604938}
#island_id: 3
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,k//N] > 0:
        h_site_k = h[site_nbr_k][i%N]
      else:
        h_site_k = -h[site_nbr_k][i%N]

      priorities[i][0] += J[k,i%N,k//N]*2*h_site_k
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032418209876543215}
#island_id: 3
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[k,i%N,k//N] > 0:
        total_spin += 2*h[site_nbr_k][i%N]
      else:
        total_spin -= 2*h[site_nbr_k][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002751697530864197}
#island_id: 0
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + J[0,i//N,i%N] + J[1,site_nbr,N-1-i%N] + J[2,i//N,i%N] + J[3,site_nbr,i%N]
      priorities[i][1] -= 5*J[0,i//N,i%N] - J[1,site_nbr,N-1-i%N] - 4*J[2,i//N,i%N] - J[3,site_nbr,i%N]
    else:
      priorities[i][0] -= total_spin + J[0,i//N,i%N] + J[1,site_nbr,N-1-i%N] + J[2,i//N,i%N] + J[3,site_nbr,i%N]
      priorities[i][1] += 5*J[0,i//N,i%N] - J[1,site_nbr,N-1-i%N] + 4*J[2,i//N,i%N] + J[3,site_nbr,i%N]

  return(priorities)




#score: {'data2D.txt': -0.00143070987654321}
#island_id: 0
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    for k in range(4):
      if k == 0 and i % N != 0:
        site = ((i//N + (k-1)%2 - 1)) % N*N
      elif k == 1 and i % N == N-1:
        site = ((i//N + (k-1)%2 - 1)) % N*N
      elif k == 2 and i % N != 0:
        site = ((i//N + (k-1)%2 - 1)) % N*N
      else:
        site = ((i//N + (k-1)%2 - 1)) % N*N
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]

    return(priorities)




#score: {'data2D.txt': -0.09152083333333334}
#island_id: 0
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + np.sum(J[:,i//N,i%N])
      priorities[i][1] -= total_spin - 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin + 2*np.sum(J[:,i//N,i%N])

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = np.sum(J[:, i // N, i % N]) * h[site_nbr][i % N]
    
    if h[site_nbr][i % N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    for k in range(4):
      if J[k, i // N, i % N] > 0:
        priorities[i][0] += J[k, i // N, i % N]
        priorities[i][1] -= 2 * J[k, i // N, i % N]
      else:
        priorities[i][0] -= J[k, i // N, i % N]
        priorities[i][1] += 2 * J[k, i // N, i % N]

  return(priorities)




#score: {'data2D.txt': -0.000614351851851852}
#island_id: 2
#version_generated: 2
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0007266975308641981}
#island_id: 2
#version_generated: 2
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site

  return(priorities)




#score: {'data2D.txt': 0.004226388888888889}
#island_id: 2
#version_generated: 2
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + total_spin*np.exp(-2*h_site)
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin + total_spin*np.exp(2*h_site)
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the priority based on the magnetism and interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the priority for assigning spins to -1 and 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.08191466049382728}
#island_id: 1
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i % N]
      priorities[i][1] -= h[site_nbr][i % N]
    else:
      priorities[i][0] -= h[site_nbr][i % N]
      priorities[i][1] += h[site_nbr][i % N]
  
  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0012155864197530865}
#island_id: 2
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_sum > 0:
      priorities[i][0] = h_site + (neighbor_sum - 2*h[site_nbr][i%N]) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - abs(neighbor_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.10682052469135811}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interactions with neighbors
    up_left = J[0,i%N,i//N] if i%N > 0 and i//N > 0 else 0
    down_right = J[3,i%N,i//N] if i%N < N-1 and i//N < N-1 else 0
    up = J[1,i%N,i//N] if i//N > 0 else 0
    down = J[2,i%N,i//N] if i//N < N-1 else 0
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority based on total spin and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + up_left + down_right, -total_spin - up - down]
    else:
      priorities[i] = [-total_spin - up_left - down_right, total_spin + up + down]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0015646604938271609}
#island_id: 1
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = sum(J[k,i%N,i//N] for k in range(4)) + h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.20505817901234583}
#island_id: 0
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]))
  return(priorities)




#score: {'data2D.txt': -0.0075646604938271605}
#island_id: 0
#version_generated: 2
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(J[0,i//N,i%N]*(h[site][i%N] if j==i%N else 0) for site,j in zip(site_nbrs,site_nbrs))
    if h[i//N][i%N] > 0:
      priorities[i][1] += total_spin
    else:
      priorities[i][1] -= total_spin
  return(priorities)




#score: {'data2D.txt': 0.22955046296296294}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) - (total_spin))
    else:
      priorities[i][0] -= np.sum(np.abs(h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) + (total_spin))

  return(priorities)




#score: {'data2D.txt': -0.004394907407407407}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += -2*h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= 2
    else:
      priorities[i][0] += 2*h[site_nbr][i%N] - nn_energy
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': 0.018646759259259262}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 1 if h[site_nbr][i%N] > 0 else 1
  return(priorities)




#score: {'data2D.txt': -0.026731327160493826}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if J[0, i//N,i%N] * (h[site_nbr][i%N] + h[i//N][i%N]) < 0:
      priorities[i][0] -= J[0, i//N,i%N]
    if J[1, i//N,i%N] * (h[(i-1)%N][i%N] - h[site_nbr][i%N]) < 0:
      priorities[i][0] += J[1, i//N,i%N]
    if J[2, i//N,i%N] * (h[(i+1)%N][i%N] - h[site_nbr][i%N]) < 0:
      priorities[i][0] -= J[2, i//N,i%N]
    priorities[i][1] -= 1 if h[site_nbr][i%N] > 0 else 1
  return(priorities)




#score: {'data2D.txt': 0.0019365740740740747}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 2 if h[site_nbr][i%N] > 0 else -2
  return(priorities)




#score: {'data2D.txt': 0.0443554012345679}
#island_id: 0
#version_generated: 2
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3
      priorities[i][1] = -4 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    else:
      priorities[i][0] = -(sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3)
      priorities[i][1] = 4 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
  return(priorities)




#score: {'data2D.txt': 0.27791805555555515}
#island_id: 0
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    if h[site_nbrs[0]][i%N] > 0:
      priorities[i][0] += 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k, site_nbr in zip(range(4), site_nbrs) if (k-1)%2 == (i//N+1)%2]) - 3
    else:
      priorities[i][0] -= 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k, site_nbr in zip(range(4), site_nbrs) if (k-1)%2 == (i//N+1)%2])
  
  return(priorities)




#score: {'data2D.txt': -0.013099537037037036}
#island_id: 3
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      priority_total = [total_spin, -total_spin]
    else:
      total_spin = -h[site_nbr][i%N]
      priority_total = [-total_spin, total_spin]

    for k in range(3):
      site_neighbor = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        priority_total[0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N]
        priority_total[1] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N]
      else:
        priority_total[0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N]
        priority_total[1] += J[k,i%N,i//N]*2*h[site_neighbor][i%N]

    priorities[i] = np.array(priority_total)

  return(priorities)




#score: {'data2D.txt': 0.23991373456790102}
#island_id: 3
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_neighbor = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N] - h[i//N][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N] + h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005106944444444444}
#island_id: 2
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - 2*h_site
      priorities[i][1] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin - 2*h_site
      priorities[i][1] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.000614351851851852}
#island_id: 2
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.000614351851851852}
#island_id: 2
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.000614351851851852}
#island_id: 2
#version_generated: 2
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.012409722222222223}
#island_id: 1
#version_generated: 2
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16523503086419777}
#island_id: 1
#version_generated: 2
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N - 1)%2 - 1)) % N
    if J[3, i % N, i // N] > 0:
      total_spin += h[site_nbr][i % N]
    else:
      total_spin -= h[site_nbr][i % N]
    
    site_nbr = (i % N + ((N - 1)%2 - 1)) % N
    if J[1, i % N, i // N] > 0:
      total_spin += h[site_nbr][i % N]
    else:
      total_spin -= h[site_nbr][i % N]
    
    site_nbr = (i % N + ((N - 2)%2 - 1)) % N
    if J[2, i % N, i // N] > 0:
      total_spin += h[site_nbr][i % N]
    else:
      total_spin -= h[site_nbr][i % N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.1337850308641976}
#island_id: 3
#version_generated: 2
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]
    
    total_spin = 0
    for j in range(N):
      if i < N:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j-N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site + total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros(2)
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][0] -= 1
      priorities[i][1] += 1
      
  return(priorities)




#score: {'data2D.txt': 0.00642237654320988}
#island_id: 3
#version_generated: 2
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(h[(k+N-1)%N][i%N] for k in range(3))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - sum(h[(k+N-1)%N][i%N] for k in range(3))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.050189969135802474}
#island_id: 0
#version_generated: 2
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    J_sum = sum(J[j, i//N, i%N] * h[site_nbr][i%N] for j, site_nbr in zip(range(4), site_nbrs))
    if h[i//N][i%N] > 0:
      priorities[i][0] += 3.5 * J_sum
      priorities[i][1] -= 2.5 * J_sum
    else:
      priorities[i][0] -= 3.5 * J_sum
      priorities[i][1] += 2.5 * J_sum
  return priorities




#score: {'data2D.txt': -0.0012100308641975301}
#island_id: 0
#version_generated: 2
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = 0
    site_nbrs = []
    for j in range(4):
      site_nbr = ((i // N) % N + ((j - 1) % 2 - 1)) % N
      site_nbrs.append(site_nbr)
      if J[j, i // N, i % N] * h[site_nbr][i % N] > 0:
        total_spin += J[j, i // N, i % N]
      else:
        total_spin -= J[j, i // N, i % N]
    priority_total = np.sum(h[site_nbrs], axis=0)
    if np.mean(h[i//N]) > 0:
      priorities[i][0] += 3.5 * total_spin + priority_total[0]
      priorities[i][1] -= 2.5 * total_spin - priority_total[1]
    else:
      priorities[i][0] -= 3.5 * total_spin + priority_total[0]
      priorities[i][1] += 2.5 * total_spin - priority_total[1]
  return priorities




#score: {'data2D.txt': 0.031508179012345684}
#island_id: 0
#version_generated: 2
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin_plus = 0
    total_spin_minus = 0
    for j in range(4):
      site_nbr = ((i // N) % N + ((j - 1) % 2 - 1)) % N
      if J[j, i // N, i % N] * h[site_nbr][i % N] > 0:
        total_spin_plus += J[j, i // N, i % N]
        total_spin_minus -= J[j, i // N, i % N]
      else:
        total_spin_plus -= J[j, i // N, i % N]
        total_spin_minus += J[j, i // N, i % N]
    if h[i // N][i % N] > 0:
      priorities[i][0] += 3.5 * (total_spin_plus - total_spin_minus)
      priorities[i][1] -= 2.5 * (total_spin_plus - total_spin_minus)
    else:
      priorities[i][0] -= 3.5 * (total_spin_plus - total_spin_minus)
      priorities[i][1] += 2.5 * (total_spin_plus - total_spin_minus)
  return priorities




#score: {'data2D.txt': -0.0010828703703703695}
#island_id: 2
#version_generated: 2
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site

  # Calculate the interaction energy between each site and its four nearest neighbors.
  for i in range(N**2):
    for j in range(4):
      if J[j, i%N, i//N] > 0:
        priorities[i][0] += J[j, i%N, i//N]
        priorities[i][1] -= J[j, i%N, i//N]
      else:
        priorities[i][0] -= J[j, i%N, i//N]
        priorities[i][1] += J[j, i%N, i//N]

  return(priorities)




#score: {'data2D.txt': -0.002022993827160494}
#island_id: 2
#version_generated: 2
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -0.0005217592592592589}
#island_id: 2
#version_generated: 2
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + 2*h_site + np.sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - 2*h_site - np.sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.24416373456790097}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + ((site_nbr-1)%2 - 1)) % N
    site_nbr_2 = (site_nbr + ((site_nbr+1)%2 - 1)) % N

    for k in range(3):
      priorities[i][0] += J[k, i%N, i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2422538580246911}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_neighbor = (k+N-1)%N
     priorities[i][0] += J[k,i//N,site_nbr]*2*h[site_neighbor][i%N] - h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.20890570987654314}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += (J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]) + J[0,i%N,i//N]*h_site
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14205293209876543}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    for k in range(4):
      neighbors = [(i+1)%N, (i+N-1)%N, (i-N)%N, (i-1)%N]
      site_nbrs = [j if J[k,i//N,j] > 0 else -j for j in neighbors]
      priorities[i][0] += np.sum(site_nbrs) + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.033389969135802465}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + ((site_nbr-1)%2 - 1)) % N
    site_nbr_2 = (site_nbr + ((site_nbr+1)%2 - 1)) % N

    for k in range(3):
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[(k+N-1)%N][i%N]
      else:
        priorities[i][0] -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10108101851851857}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + ((site_nbr-1)%2 - 1)) % N
    site_nbr_2 = (site_nbr + ((site_nbr+1)%2 - 1)) % N

    for k in range(3):
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += J[k, i%N, i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]
      else:
        priorities[i][0] -= J[k, i%N, i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003529320987654319}
#island_id: 3
#version_generated: 2
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + ((site_nbr-1)%2 - 1)) % N
    site_nbr_2 = (site_nbr + ((site_nbr+1)%2 - 1)) % N

    for k in range(3):
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.24416373456790097}
#island_id: 3
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (site_nbr + ((site_nbr-1)%2 - 1)) % N
    site_nbr_2 = (site_nbr + ((site_nbr+1)%2 - 1)) % N

    for k in range(3):
      priorities[i][0] += J[k, i%N, i//N]*2*h[(k+N-1)%N][i%N] - h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.1637804012345681}
#island_id: 1
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.02685108024691357}
#island_id: 1
#version_generated: 2
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,N-1-i%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
    if J[2,i//N,(i+1)%N] > 0:
      priorities[i][0] += h[(i+1)%N][i%N]
      priorities[i][1] -= h[(i+1)%N][i%N]
    else:
      priorities[i][0] -= h[(i+1)%N][i%N]
      priorities[i][1] += h[(i+1)%N][i%N]
    
    if J[3,i//N,(i-1)%N==i%N and i>0 or (i+1)%N] > 0:
      priorities[i][0] += h[(i-1)%N==i%N and i>0 or (i+1)%N][i%N]
      priorities[i][1] -= h[(i-1)%N==i%N and i>0 or (i+1)%N][i%N]
    else:
      priorities[i][0] -= h[(i-1)%N==i%N and i>0 or (i+1)%N][i%N]
      priorities[i][1] += h[(i-1)%N==i%N and i>0 or (i+1)%N][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.1525949074074074}
#island_id: 2
#version_generated: 2
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + total_spin*np.exp(-2*h_site) + (h[i//N][i%N]**2)*np.exp(4*h_site)
      priorities[i][1] = total_spin + 2*h_site
    else:
      priorities[i][0] = total_spin + total_spin*np.exp(2*h_site) - (h[i//N][i%N]**2)*np.exp(-4*h_site)
      priorities[i][1] = -total_spin
      
  return(priorities)




#score: {'data2D.txt': 0.181820216049383}
#island_id: 2
#version_generated: 2
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h_site
      priorities[i][1] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 1
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h_site
      priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 1

  return(priorities)




#score: {'data2D.txt': 0.0035733024691358027}
#island_id: 2
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - 2*h_site
      priorities[i][1] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = total_spin - 2*h_site
      priorities[i][1] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  # Add a term to the priority that favors aligning spins with their neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,k]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= sum([J[k,i//N,k]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,i//N,k]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += sum([J[k,i//N,k]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.010065277777777777}
#island_id: 2
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N] - h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*h[site_nbr][i%N]
    else:
      priorities[i][0] = total_spin - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N] - h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -total_spin + 2*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.1626575617283951}
#island_id: 2
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(3)]
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    h_site = h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - 2*h_site
      priorities[i][1] = total_spin + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    else:
      priorities[i][0] = total_spin - 2*h_site
      priorities[i][1] = -total_spin - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])

  return(priorities)




#score: {'data2D.txt': -0.002997993827160494}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # calculate site magnetism
    total_spin += h[i//N][i%N]
    
    # calculate nearest neighbor interactions
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # calculate next-nearest neighbor interactions
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i//N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.003102623456790124}
#island_id: 1
#version_generated: 2
#generate time07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for d in range(4):
      n = (i + ((-1)**d)%N)
      total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
    priorities[i][0] = np.exp(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.exp(-h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      n = (i + ((-1)**d)%N)
      if J[d,i//N,i%N] > 0:
        h_site += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
      else:
        h_site -= J[d,i//N,i%N]*h[(n+N-1)%N][i%N]

    priorities[i][0] = np.exp(h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for d in range(4):
      n = (i + ((-1)**d)%N)
      total_spin += J[d,i//N,i%N]*h[(n+N-1)%N][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    priorities[i][0] = np.exp(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006327314814814815}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h_site
      priorities[i][1] = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 1
    else:
      priorities[i][0] = -np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h_site
      priorities[i][1] = -np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 1
    
  return(priorities)




#score: {'data2D.txt': 0.181820216049383}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -spin_sum - 2*h_site
      priorities[i][1] = spin_sum + 1
    else:
      priorities[i][0] = spin_sum - 2*h_site
      priorities[i][1] = -spin_sum - 1

  return(priorities)




#score: {'data2D.txt': -0.17987206790123483}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*h_site
      priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 1
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*h_site
      priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 1

  return(priorities)




#score: {'data2D.txt': 0.31406836419753004}
#island_id: 2
#version_generated: 2
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_h_site
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_h_site
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.011632561728395061}
#island_id: 3
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
     site_neighbor = (k+N-1)%N
     if J[k,i%N,i//N] > 0:
      priorities[i][0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N]
     else:
      priorities[i][0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N]

    if h[i//N][i%N] > 0:
     priorities[i][1] = -priorities[i][0] + h_site
    else:
     priorities[i][1] = -priorities[i][0] - h_site

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for k in range(3):
      site_neighbor = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += J[k,i%N,i//N]*2*h[site_neighbor][i%N] - h[i//N][i%N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*2*h[site_neighbor][i%N] + h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[1]
      priorities[i][1] = -priorities[i][0] - h_site
    else:
      priorities[i][0] = total_spin[1]
      priorities[i][1] = -priorities[i][0] + h_site

  return(priorities)




#score: {'data2D.txt': -0.019360339506172834}
#island_id: 3
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_neighbor = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 2*h[site_nbr][i%N]*J[k,i%N,i//N]
      else:
        priorities[i][0] -= 2*h[site_nbr][i%N]*J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02497885802469136}
#island_id: 3
#version_generated: 2
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[0:(i%N+1),i//N], axis=0) @ h[site_nbr]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.20282268518518537}
#island_id: 0
#version_generated: 2
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        total_spin += np.sign(h[site_nbr][i%N])
      else:
        total_spin -= np.sign(h[site_nbr][i%N])
      
      if h[i//N][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    priorities[i][0] = total_spin + total_bias
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.027281635802469135}
#island_id: 0
#version_generated: 2
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      else:
        if h[site_nbr][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
    
    priorities[i][0] = -total_spin
    priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.15901805555555582}
#island_id: 0
#version_generated: 2
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    bias_sum = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k, i//N, i%N] > 0:
        if h[i//N][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
        bias_sum += h[site_nbr][i%N]
      else:
        if h[i//N][i%N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
        bias_sum -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin + bias_sum
    priorities[i][1] = -total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.002275771604938272}
#island_id: 0
#version_generated: 2
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = np.sum(J[0,i//N,i%N])*h[site_nbr][i%N]
    total_spin_right = np.sum(J[1,i//N,i%N])*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin_left + total_spin_right
      priorities[i][1] -= 2*(total_spin_left + total_spin_right) - np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] -= total_spin_left + total_spin_right
      priorities[i][1] += 2*(total_spin_left + total_spin_right) + np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.002275771604938272}
#island_id: 0
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = np.sum(J[0,i//N:i//N+1,i%N])*h[site_nbr][i%N]
    total_spin_right = np.sum(J[1,i//N:i//N+1,i%N])*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin_left + total_spin_right
      priorities[i][1] -= 2*(total_spin_left + total_spin_right) - np.sum(J[:,i//N:i//N+1,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] -= total_spin_left + total_spin_right
      priorities[i][1] += 2*(total_spin_left + total_spin_right) + np.sum(J[:,i//N:i//N+1,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.003370833333333333}
#island_id: 0
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = np.sum(J[0,i//N,i%N])*h[site_nbr][i%N]
    right_spin = np.sum(J[1,i//N,i%N])*h[site_nbr][i%N]
    total_spin_left = left_spin + right_spin
    total_spin_right = left_spin - right_spin
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin_left + total_spin_right
      priorities[i][1] -= 2*(total_spin_left + total_spin_right) - np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    else:
      priorities[i][0] -= total_spin_left + total_spin_right
      priorities[i][1] += 2*(total_spin_left + total_spin_right) + np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.30563070987654256}
#island_id: 0
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    
    if h[i//N][i%N] > 0:
      spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    else:
      spin_neighbors = [-h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] -= np.sum(np.abs(spin_neighbors) + total_spin)
    
  return(priorities)




#score: {'data2D.txt': 0.20714336419753102}
#island_id: 0
#version_generated: 2
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(-h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs)
    
  return(priorities)




#score: {'data2D.txt': 0.29094243827160504}
#island_id: 0
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
  
  return(priorities)




#score: {'data2D.txt': 0.30563070987654256}
#island_id: 0
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin)
    
    if h[i//N][i%N] > 0:
      spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    else:
      spin_neighbors = [-h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
      priorities[i][0] -= np.sum(np.abs(spin_neighbors) + total_spin)
    
  return(priorities)




#score: {'data2D.txt': -0.0011405864197530865}
#island_id: 3
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j,i%N,i//N]>0:
        h_neighbor = h[(j+1)%2][i%N]
      else:
        h_neighbor = -h[(j+1)%2][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': -0.0006217592592592593}
#island_id: 3
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a trick to make the algorithm more efficient
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] -= J[2,i%N,i//N]*h[site_nbr][i%N]
    else:
      priorities[i][0] -= J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] += J[2,i%N,i//N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.19124830246913604}
#island_id: 0
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.01748287037037037}
#island_id: 0
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008921296296296299}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[k,i//N,k] > 0:
        h_site += J[k,i//N,k]*h[site_nbr_k][(i-1)%N]
      else:
        h_site -= J[k,i//N,k]*h[site_nbr_k][(i-1)%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003532407407407407}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003117438271604939}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k+1)%2 == ((i // N) % 2):
        h_site += J[k, i % N, i // N] * h[(k + N - 1) % N][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[(k + N - 1) % N][i % N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00212608024691358}
#island_id: 3
#version_generated: 2
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018935185185185222}
#island_id: 2
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024853395061728394}
#island_id: 2
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003459413580246913}
#island_id: 2
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) * flip_sign
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -0.00029058641975308696}
#island_id: 2
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00804675925925926}
#island_id: 1
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.17405478395061755}
#island_id: 1
#version_generated: 2
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_row = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_row][i%N]
      priorities[i][1] -= h[site_nbr_row][i%N]
    else:
      priorities[i][0] -= h[site_nbr_row][i%N]
      priorities[i][1] += h[site_nbr_row][i%N]
    
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr_col][i%N]
      priorities[i][1] -= h[site_nbr_col][i%N]
    else:
      priorities[i][0] -= h[site_nbr_col][i%N]
      priorities[i][1] += h[site_nbr_col][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.012795216049382725}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    if J[1,i//N,(i+1)%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    if J[2,i//N,N-1-i%N] > 0:
      priorities[i][0] += h[(i+1)%N,N-1-i%N]
      priorities[i][1] -= h[(i+1)%N,N-1-i%N]
    else:
      priorities[i][0] -= h[(i+1)%N,N-1-i%N]
      priorities[i][1] += h[(i+1)%N,N-1-i%N]
    if J[3,i//N,(i+N-1)%N] > 0:
      priorities[i][0] += h[(i+N-1)%N,i%N]
      priorities[i][1] -= h[(i+N-1)%N,i%N]
    else:
      priorities[i][0] -= h[(i+N-1)%N,i%N]
      priorities[i][1] += h[(i+N-1)%N,i%N]
  return(priorities)




#score: {'data2D.txt': 0.013293981481481481}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin and its sign
    total_spin = h[site_nbr][i%N]
    is_positive = total_spin > 0
    
    # Check interactions with neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        if is_positive:
          priorities[i][1] -= 1
        else:
          priorities[i][0] += 1
      else:
        if is_positive:
          priorities[i][0] -= 1
        else:
          priorities[i][1] += 1
    
    # Normalize the total spin value to a range between -1 and 1
    priorities[i][0] = min(1, max(-1, priorities[i][0]))
    priorities[i][1] = min(1, max(-1, priorities[i][1]))
  
  return(priorities)




#score: {'data2D.txt': -0.08245910493827165}
#island_id: 1
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    spin_direction = np.sign(total_spin)
    
    priorities[i] = [total_spin + h[i//N][i%N], -total_spin - h[i//N][i%N]]
    
  return(priorities)




#score: {'data2D.txt': -0.009439351851851852}
#island_id: 0
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,(i+k-1)%N//N,(i+k-1)%N%N] * h[(i+k-1)%N//N][(i+k-1)%N%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2,(i+1)%N//N,i%N%N] * h[(i+1)%N//N][i%N%N] < 0:
        priorities[i][0] -= J[2,(i+1)%N//N,i%N%N]
      if i % N < N-1 and J[1,i//N-1,i%N] * h[i//N-1,i%N] < 0:
        priorities[i][0] -= J[1,i//N-1,i%N]
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2,(i+1)%N//N,i%N%N] * h[(i+1)%N//N][i%N%N] > 0:
        priorities[i][0] += J[2,(i+1)%N//N,i%N%N]
      if i % N < N-1 and J[1,i//N-1,i%N] * h[i//N-1,i%N] > 0:
        priorities[i][0] += J[1,i//N-1,i%N]
    priorities[i][1] -= 2 if h[site_nbr][i%N] > 0 else -2
  return(priorities)




#score: {'data2D.txt': 0.0019365740740740747}
#island_id: 0
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k, i//N%N, i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] < 0:
        priorities[i][0] -= J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] < 0:
        priorities[i][0] -= J[1, i//N,i%N]
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      if i % N > 0 and J[2, i//N,i%N] * h[(i+1)%N][i%N] > 0:
        priorities[i][0] += J[2, i//N,i%N]
      if i % N < N-1 and J[1, i//N,i%N] * h[(i-1)%N][i%N] > 0:
        priorities[i][0] += J[1, i//N,i%N]
    priorities[i][1] -= 2 if h[site_nbr][i%N] > 0 else -2
  return(priorities)




#score: {'data2D.txt': -0.029549845679012345}
#island_id: 0
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N]
      priorities[i][0] += sum(J[k,i//N%N,i%N] * (h[(i+k-1)%N][i%N] > 0) for k in range(3))
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N]
      priorities[i][0] -= sum(J[k,i//N%N,i%N] * (h[(i+k-1)%N][i%N] > 0) for k in range(3))
    priorities[i][1] -= 2 if h[site_nbr][i%N] > 0 else -2
  return(priorities)




#score: {'data2D.txt': 0.009784104938271603}
#island_id: 0
#version_generated: 2
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N%N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_spin = np.sum(h[site_nbr])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 2*h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= total_spin - 2 if total_spin > 0 else -total_spin - 2
    else:
      priorities[i][0] -= 2*h[site_nbr][i%N] - nn_energy
      priorities[i][1] += total_spin - 2 if total_spin < 0 else -total_spin + 2
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.008933796296296297}
#island_id: 1
#version_generated: 2
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr1 = (i % N + ((3)%2 - 1)) % N
    site_nbr2 = (i % N + ((2)%2 - 1)) % N
    site_nbr3 = (i % N + ((1)%2 - 1)) % N
    site_nbr4 = (i % N + ((0)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin += h[site_nbr1][i%N]
      total_spin -= h[site_nbr2][i%N]
      total_spin += h[site_nbr3][i%N]
      total_spin -= h[site_nbr4][i%N]
    else:
      total_spin -= h[site_nbr1][i%N]
      total_spin += h[site_nbr2][i%N]
      total_spin -= h[site_nbr3][i%N]
      total_spin += h[site_nbr4][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i] = [total_spin, -total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.005822067901234568}
#island_id: 1
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]

    if J[2,i//N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': -0.04715046296296296}
#island_id: 1
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin + np.sum(h[i//N])
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0005016975308641971}
#island_id: 3
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.638888888888933e-05}
#island_id: 3
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if j != i%N:
        total_spin += J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007529320987654318}
#island_id: 2
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,(i+N-k-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,(i+N-k-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008918055555555556}
#island_id: 2
#version_generated: 2
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+1)%N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][0] -= J[1,i%N,i//N]*h[(site_nbr2+N-1)%N][i%N]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][0] += J[1,i%N,i//N]*h[(site_nbr2+N-1)%N][i%N]

    if h[site_nbr1][i%N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0010365740740740743}
#island_id: 2
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19175570987654336}
#island_id: 2
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = np.sum(h[i//N]) + h_site
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + sum([J[k,i//N,k%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= total_spin - sum([J[k,i//N,k%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': -0.08162391975308649}
#island_id: 2
#version_generated: 2
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N] > 0:
      spin_sum += J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
    else:
      spin_sum -= J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = 0
    total_spin_down = 0
    for j in range(N):
      if j != i%N:
        total_spin_up += J[0, i%N, j] * h[site_nbr][j]
        total_spin_down -= J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if np.sum(h[site]) > 0:
        total_spin_up += J[k+1, i%N, i//N] * h[site][i%N]
        total_spin_down -= J[k+1, i%N, i//N] * h[site][i%N]
      else:
        total_spin_up -= J[k+1, i%N, i//N] * h[site][i%N]
        total_spin_down += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin_up
      priorities[i][1] = -total_spin_down
    else:
      priorities[i][0] = -total_spin_up
      priorities[i][1] = total_spin_down

  return(priorities)




#score: {'data2D.txt': -0.001829166666666667}
#island_id: 3
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = 0
    total_spin_right = 0
    for j in range(N):
      if j != i%N:
        total_spin_left += J[0, i%N, j] * h[site_nbr][j]
        total_spin_right += J[1, i%N, j] * h[(i+N-1)%N][j]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin_left + total_spin_right
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin_left - total_spin_right
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.638888888888933e-05}
#island_id: 3
#version_generated: 2
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if j != i%N:
        total_spin += J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.05899429012345683}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias + (total_spin ** 2) / N
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias + (total_spin ** 2) / N
  
  return(priorities)




#score: {'data2D.txt': 0.13667145061728414}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
  
  return(priorities)




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = []
    
    for k in range(4):
      if (k == 0 and i % N != 0) or (k == 1 and i % N == N-1):
        site_nbrs.append((i // N, (i % N + N - 1) % N))
      elif (k == 2 and i % N != N-1) or (k == 3 and i % N == 0):
        site_nbrs.append((i // N, (i % N - 1) % N))
      else:
        site_nbrs.append(((i // N + k//2)%N, (i % N + k%2)%N))
    
    total_spin = sum([J[k][i//N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.049481018518518556}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = []
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k, i//N, i%N] > 0:
        site_nbrs.append(-1)
        total_spin -= 1
      else:
        site_nbrs.append(1)
        total_spin += 1
      
      if h[site_nbr][i%N] > 0:
        total_bias -= 1
      else:
        total_bias += 1
    
    for site_nbr in site_nbrs:
      if h[i//N][i%N] > 0:
        priorities[i][0] += site_nbr + total_bias
        priorities[i][1] = -site_nbr
      else:
        priorities[i][0] = -site_nbr
        priorities[i][1] += site_nbr + total_bias
    
  return(priorities)




#score: {'data2D.txt': 0.21054675925925936}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin>0))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin<0))
  return(priorities)




#score: {'data2D.txt': 0.21054675925925936}
#island_id: 0
#version_generated: 2
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin>0)) - np.sum((h[site_nbrs[1]][i%N] * J[1,i//N,i%N]) * (total_spin<0))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin<0)) - np.sum((h[site_nbrs[1]][i%N] * J[1,i//N,i%N]) * (total_spin>0))

  return(priorities)




#score: {'data2D.txt': 0.21054675925925936}
#island_id: 0
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin>0))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin<0))

  return(priorities)




#score: {'data2D.txt': 0.21054675925925936}
#island_id: 0
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin>0))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum((h[site_nbrs[0]][i%N] * J[0,i//N,i%N]) * (total_spin<0))
  return(priorities)




#score: {'data2D.txt': 0.0023282407407407405}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N > 0:
        priorities[i][0] += J[1,i%N,i//N]*h[(i-1)%N][i%N]
      if i % N < N-1:
        priorities[i][0] += J[2,i%N,i//N]*h[(i+1)%N][i%N]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N > 0:
        priorities[i][0] -= J[1,i%N,i//N]*h[(i-1)%N][i%N]
      if i % N < N-1:
        priorities[i][0] -= J[2,i%N,i//N]*h[(i+1)%N][i%N]

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0036084876543209876}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      neighbors_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = J[0,i//N,i%N]*h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      neighbors_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -J[0,i//N,i%N]*h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029390432098765434}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015816358024691355}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      h_site += J[k,i%N,i//N]*h[site][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001856635802469136}
#island_id: 3
#version_generated: 2
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[2,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.08162391975308649}
#island_id: 2
#version_generated: 2
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N] > 0:
      spin_sum += J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
    else:
      spin_sum -= J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07924151234567907}
#island_id: 2
#version_generated: 2
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N]
    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N] > 0:
      spin_sum += J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]
    else:
      spin_sum -= J[2,i//N,(i//N+1)%N]*h[(site_nbr2+site_nbr1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00033595679012345846}
#island_id: 3
#version_generated: 2
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,(i+N-1)%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[2,i%N,(i+N-1)%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + J[2,i%N,(i+N-1)%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.exp(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.exp(-total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002845833333333333}
#island_id: 1
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i // N + ((i%N+1)%N - 1)) % N
    site_nbr4 = (i % N + ((i//N+1)%N - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    if i % N > 0:
      total_spin += J[3,i%N,(i-1)//N] * (h[(i-1)%N][i%N] - h[site_nbr2][i%N])
    
    if i // N < N-1:
      total_spin += J[1,i//N,i%N] * (h[i//N,(i+1)%N] - h[site_nbr3][i%N])
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate interactions from neighbors
    spin_interactions = np.sum(J[:,i%N,i//N])
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on site magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0037334876543209878}
#island_id: 0
#version_generated: 2
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate total spin at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
  # Calculate priority for each of the four neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      neighbor = (site_nbr + ((k-1)%2 - 1)) % N*N
      if h[neighbor//N][neighbor%N] > 0:
        priorities[i][0] += J[k, i//N, i%N]
        priorities[i][1] -= 2*J[k, i//N, i%N]
      else:
        priorities[i][0] -= J[k, i//N, i%N]
        priorities[i][1] += 2*J[k, i//N, i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.07506589506172838}
#island_id: 0
#version_generated: 2
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin + sum(J[k,i//N,i%N] for k in range(4))
      priorities[i][1] -= total_spin - 2*sum(J[k,i//N,i%N] for k in range(4))
    else:
      priorities[i][0] -= total_spin + sum(J[k,i//N,i%N] for k in range(4))
      priorities[i][1] += total_spin + 2*sum(J[k,i//N,i%N] for k in range(4))
  
  return(priorities)




#score: {'data2D.txt': -0.003691203703703703}
#island_id: 0
#version_generated: 2
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site_nbr = (i + ((k-1)%2 - 1)) % N*N
      if h[site_nbr//N][site_nbr%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.006426388888888889}
#island_id: 0
#version_generated: 2
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site_nbr = (i + ((k-1)%2 - 1)) % N*N
      
      if h[site_nbr//N][site_nbr%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
    
    # Calculate the priority for each of the four neighbors in a separate loop
    for k in range(4):
      site_nbr = (i + ((k-1)%2 - 1)) % N*N
      
      if h[site_nbr//N][site_nbr%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
  
  return(priorities)




#score: {'data2D.txt': -7.638888888888933e-05}
#island_id: 3
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if j != i%N:
        total_spin += J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.638888888888933e-05}
#island_id: 3
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if j != i%N:
        total_spin += J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.638888888888933e-05}
#island_id: 3
#version_generated: 2
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if j != i%N:
        total_spin += J[0, i%N, j] * h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k+1, i%N, i//N] * h[site][i%N]
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0019547839506172835}
#island_id: 2
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) * flip_sign
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': 0.0007979938271604941}
#island_id: 2
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    for k in range(3):
        if i//N < N-1 and i%N < N-1: # top-right neighbor exists
            h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        elif i//N < N-1: # only top neighbor exists
            h_site += J[0,i%N,i//N]*h[(k+N-1)%N][i%N]
        else:
            if k == 2: continue
            h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priority = flip_sign*h_site
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': 0.0022847222222222223}
#island_id: 2
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) * flip_sign
    if i < N**2-N:
      # add interaction with bottom neighbor
      priority += J[3,i//N,i%N]*h[(i+1)%N//N][(i+1)%N]
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -0.0005464506172839507}
#island_id: 2
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h_site > 0:
      priority = h_site + total_spin
    else:
      priority = -h_site - total_spin

    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': 0.1138220679012347}
#island_id: 1
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': -0.009956635802469136}
#island_id: 1
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.11623101851851865}
#island_id: 1
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
    
  return(priorities)




#score: {'data2D.txt': -0.00577824074074074}
#island_id: 1
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i%N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i//N,i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.0018720679012345673}
#island_id: 3
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h[site_nbr][i%N]
    else:
      for k in range(4):
        priorities[i][1] -= J[k,i//N,i%N]*h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.0007464506172839516}
#island_id: 3
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]
        if k == 1 or k == 3:
          priorities[i][0] -= J[k,i//N,i%N]*2
    else:
      for k in range(4):
        priorities[i][0] -= J[k,i//N,i%N]
        if k == 1 or k == 3:
          priorities[i][0] += J[k,i//N,i%N]*2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004689814814814821}
#island_id: 3
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(4):
        J_val = J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
        priorities[i][0] += J_val*h_site
        priorities[i][1] -= J_val
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(4):
        J_val = J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
        priorities[i][0] += J_val*h_site
        priorities[i][1] -= J_val

  return(priorities)




#score: {'data2D.txt': -0.021852932098765435}
#island_id: 3
#version_generated: 2
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k,i//N,i%N]
      else:
        total_spin -= J[k,i//N,i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006097222222222228}
#island_id: 2
#version_generated: 2
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    for k in range(4):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priority = flip_sign*h_site
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': -0.004336574074074073}
#island_id: 2
#version_generated: 2
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    spin_magnetism = 0
    
    for k in range(4):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[(k+N-1)%N][i%N] > 0:
        spin_magnetism -= 1
      else:
        spin_magnetism += 1
    
    if total_spin > 0:
      priorities[i][0] = spin_magnetism + total_spin
      priorities[i][1] = -spin_magnetism - total_spin
    elif total_spin < 0:
      priorities[i][0] = -spin_magnetism - total_spin
      priorities[i][1] = spin_magnetism + total_spin
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = 1.0
        priorities[i][1] = -1.0
      else:
        priorities[i][0] = -1.0
        priorities[i][1] = 1.0
  
  return(priorities)




#score: {'data2D.txt': 0.0006516975308641984}
#island_id: 2
#version_generated: 2
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.00041527777777777765}
#island_id: 2
#version_generated: 2
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbrs = [(i % N + ((j - 1) % 2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbr][i % N] for site_nbr in site_nbrs]
    
    if all(h_site > 0 for h_site in h_sites):
      priority = -np.sum(h_sites)
    elif all(h_site < 0 for h_site in h_sites):
      priority = np.sum(h_sites)
    else:
      priority = np.sum([h_site * (1 if h_site > 0 else -1) for h_site in h_sites])
    
    priorities[i][0] = priority
    priorities[i][1] = -priority
  
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.1155498456790125}
#island_id: 1
#version_generated: 2
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.08276095679012349}
#island_id: 1
#version_generated: 2
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i][0] = -total_spin + magnetism
    priorities[i][1] = total_spin - magnetism
    
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Calculate total spin from nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add magnetism at the site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with left and top neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Add interactions with right and bottom neighbors
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.0009152777777777785}
#island_id: 2
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1
    
    total_spin = 0
    for k in range(3):
      site_nbr = (i // N + ((k-1)%2 - 1)) % N
      if i//N < N-1 and i%N < N-1: 
        total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
      elif i//N < N-1: 
        total_spin += J[0,i%N,i//N]*h[site_nbr][i%N]
    
    if h_site > 0:
      priorities[i][0] = total_spin + 1
      priorities[i][1] = -total_spin - 1
    else:
      priorities[i][0] = total_spin - 1
      priorities[i][1] = -total_spin + 1

  return(priorities)




#score: {'data2D.txt': -0.008721759259259259}
#island_id: 2
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
        if k == 0 and i%N < N-1: # left neighbor exists
            total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
        elif k == 2 and i//N < N-1: # top neighbor exists
            total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
        elif k == 3 and (i%N) % 2 == 0: # bottom-left neighbor exists
            total_spin += J[k,i%N,i//N]*h[(i+N-1)%N][i%N]
        else:
            if k != 1: continue
            total_spin += J[1,i%N,i//N]*h[site_nbr][i%N]

    magnetism = h[site_nbr][i%N]
    if magnetism > 0:
        priorities[i][0] = -total_spin + 1
        priorities[i][1] = total_spin - 2
    else:
        priorities[i][0] = -total_spin - 1
        priorities[i][1] = total_spin + 2

  return(priorities)




#score: {'data2D.txt': -0.0014587962962962964}
#island_id: 2
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if i//N < N-1 and i%N < N-1: # top-right neighbor exists
        total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]
      elif i//N < N-1: # only top neighbor exists
        total_spin += J[0,i%N,i//N]*h[site_nbr][i%N]
      else:
        if k == 2: continue
        total_spin += J[k,i%N,i//N]*h[site_nbr][i%N]

    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    priority = flip_sign*(total_spin + h[site_nbr][i%N])
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    
    # Calculate the priority values based on the total energy
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -(priorities[i][0])
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.14726682098765434}
#island_id: 0
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time08:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add magnetism of site itself
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0013612654320987656}
#island_id: 2
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_idx, col_idx = divmod(i, N)
    if (row_idx+col_idx) % 2 == 1:
      flip_sign = -1
    else:
      flip_sign = 1

    neighbors = [(site_nbr+N//2, i%N), ((i-1)%N, row_idx)]
    for neighbor in neighbors:
      if neighbor[0] >= N or neighbor[0] < 0 or neighbor[1] >= N or neighbor[1] < 0:
        continue
      flip_sign *= np.sign(h[neighbor[0]][neighbor[1]] - J[0, i//N, neighbor[0]%N] * h[neighbor[0], neighbor[1]])
    priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + flip_sign * np.sum(h)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037793209876543185}
#island_id: 2
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_idx, col_idx = divmod(i, N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority = (1 - 2*h_site) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N] - h[site_nbr][i%N]) for k in range(3)])
    priorities[i][0] = priority
    priorities[i][1] = -priority

  return(priorities)




#score: {'data2D.txt': 0.0283983024691358}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N] * h[(i+k-1)%N][i%N] if k % 2 == 0 else -h[(i+k-1)%N][i%N] for k in range(4)])
    total_spin_down = abs(total_spin_up)

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down

  return(priorities)




#score: {'data2D.txt': 0.0026032407407407406}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      site_nbrs.sort()
      for j, site in enumerate(site_nbrs):
        if h[site][i%N] > 0:
          priorities[i][0] += J[j,i//N,i%N]
          priorities[i][1] -= J[j,i//N,i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.16791620370370391}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin_up = 0
    total_spin_down = 0
    
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        total_spin_up += J[j,i//N,i%N]
        total_spin_down += abs(J[j,i//N,i%N])
      else:
        total_spin_up -= J[j,i//N,i%N]
        total_spin_down -= abs(J[j,i//N,i%N])
    
    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = (total_spin_up - 2.5) * 3.5
        priorities[i][1] = -4 * total_spin_up
      else:
        priorities[i][0] = -(total_spin_down - 2.5) * 3.5
        priorities[i][1] = 4 * total_spin_down
        
  return(priorities)




#score: {'data2D.txt': 0.01748287037037037}
#island_id: 0
#version_generated: 2
#generate time08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_up = sum([J[j,i//N,i%N] * h[site][i%N] for j, site in enumerate(site_nbrs)])
    total_spin_down = sum([abs(J[j,i//N,i%N]) * abs(h[site][i%N]) for j, site in enumerate(site_nbrs)])

    if total_spin_up > 0 and total_spin_down == 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    elif total_spin_down > 0:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    else:
      if h[i//N][i%N] > 0:
        spin_bias = (total_spin_up - total_spin_down)
        priorities[i][0] = (spin_bias - 2.5) * 3.5
        priorities[i][1] = -4 * max(abs(spin_bias), 1e-9)
      else:
        spin_bias = -(total_spin_down - total_spin_up)
        priorities[i][0] = -(spin_bias - 2.5) * 3.5
        priorities[i][1] = 4 * max(abs(spin_bias), 1e-9)

  return(priorities)




#score: {'data2D.txt': -0.0031430555555555556}
#island_id: 2
#version_generated: 2
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.sum(h) + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      if np.sum(h) > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 8.996913580246929e-05}
#island_id: 2
#version_generated: 2
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    interaction_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004218055555555555}
#island_id: 2
#version_generated: 2
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.sum(h) - neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.19477453703703726}
#island_id: 0
#version_generated: 2
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[0,i//N,i%N])) - (total_spin)
    else:
      priorities[i][0] -= np.sum(np.abs(J[0,i//N,i%N])) + (total_spin)
  return(priorities)




#score: {'data2D.txt': 0.19477453703703726}
#island_id: 0
#version_generated: 2
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[0,i//N,i%N])) - (total_spin)
    else:
      priorities[i][0] -= np.sum(np.abs(J[0,i//N,i%N])) + (total_spin)

  return(priorities)




#score: {'data2D.txt': 0.19477453703703726}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(np.abs(J[0,i//N,i%N])) - (total_spin)
    else:
      priorities[i][0] -= np.sum(np.abs(J[0,i//N,i%N])) + (total_spin)
  return(priorities)




#score: {'data2D.txt': 0.274606944444444}
#island_id: 0
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + abs(h[site_nbrs[0]][i%N])
      priorities[i][0] -= (np.sum(np.abs(J[:, i // N, i % N])) + (total_spin))
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - abs(h[site_nbrs[0]][i%N])
      priorities[i][0] += (np.sum(np.abs(J[:, i // N, i % N])) + (total_spin))
  return(priorities)




#score: {'data2D.txt': -0.004218055555555555}
#island_id: 2
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.sum(h) - neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004218055555555555}
#island_id: 2
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.sum(h) - neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004218055555555555}
#island_id: 2
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.sum(h) - neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if np.sum(h) > 0:
        priorities[i][0] = -neighbors_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = neighbors_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009143055555555524}
#island_id: 3
#version_generated: 2
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      h_site += J[k,i%N,i//N]*h[site][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h) - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site][i%N]
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 1.5586419753086167e-05}
#island_id: 3
#version_generated: 2
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      neighbors = [J[0,i//N,i%N]*h[(0+1)%4][i%N], J[1,i//N,i%N]*h[(1+1)%4][i%N],
                   J[2,i//N,i%N]*h[(2+1)%4][i%N], J[3,i//N,i%N]*h[(3+1)%4][i%N]]
      priorities[i][0] = np.sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      neighbors = [J[0,i//N,i%N]*h[(0+1)%4][i%N], J[1,i//N,i%N]*h[(1+1)%4][i%N],
                   J[2,i//N,i%N]*h[(2+1)%4][i%N], J[3,i//N,i%N]*h[(3+1)%4][i%N]]
      priorities[i][0] = np.sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005016975308641971}
#island_id: 3
#version_generated: 2
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.429012345679001e-05}
#island_id: 3
#version_generated: 2
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
        if i//N < N/2 and k % 2 == 1:
          priorities[i][0] -= J[k,i//N,i%N]*J[(k+2)%4,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(4):
        priorities[i][0] += J[k,i//N,i%N]*h_site*h[(k+N-1)%N][i%N]
        if i//N < N/2 and k % 2 == 1:
          priorities[i][0] -= J[k,i//N,i%N]*J[(k+2)%4,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3419566358024681}
#island_id: 3
#version_generated: 2
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(4):
        J_val = J[k, i//N, i%N]*h_site*h[(k+N-1)%N][i%N]
        priorities[i][0] += J_val
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(4):
        J_val = J[k, i//N, i%N]*h_site*h[(k+N-1)%N][i%N]
        priorities[i][0] -= J_val
    if h[i//N][i%N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.0017683641975308638}
#island_id: 0
#version_generated: 2
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    priorities[i][0] = (J_up + J_down)*h_site
    priorities[i][1] = -priorities[i][0]

  # Apply the Metropolis-Hastings algorithm to improve the priority assignment
  for i in range(N**2):
    current_spin = h_site
    new_spin = -current_spin
    delta_energy = 2 * np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[new_spin]+nns)]) 
    if np.exp(-delta_energy) > np.random.rand():
      current_spin, new_spin = new_spin, current_spin

    # Update the priority based on the new spin
    priorities[i][0] = (J_up + J_down)*current_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    
    # Calculate the priority based on the interactions
    priorities[i][0] = 2 * np.sum([abs(J[k,i//N,i//N]) for k in range(4)]) 
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0018125}
#island_id: 0
#version_generated: 2
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[h_site]+nns)]) 
    J_down = -np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[-h_site]+nns)])
    priorities[i][0] = (J_up + J_down)*h_site
    priorities[i][1] = -priorities[i][0]
    
  # Apply the Metropolis-Hastings algorithm to improve the priority assignment
  for i in range(N**2):
    current_spin = h_site
    new_spin = -current_spin
    delta_energy = 2 * np.sum([J[k,i//N,i//N]*n for k,n in zip(range(4),[new_spin]+nns)]) 
    if np.exp(-delta_energy) > np.random.rand():
      current_spin, new_spin = new_spin, current_spin
    
    # Update the priority based on the new spin
    priorities[i][0] = (J_up + J_down)*current_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.004281635802469135}
#island_id: 1
#version_generated: 2
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.11089398148148161}
#island_id: 1
#version_generated: 2
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.00012083333333333356}
#island_id: 2
#version_generated: 2
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors = [(k, j) for k in range(3) for j in range(N) if abs(k-j) == 1]
      spin_product = sum([J[k,i//N,j]*h[(k+N-1)%N][j] for k,j in neighbors])
      priorities[i][0] = spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors = [(k, j) for k in range(3) for j in range(N) if abs(k-j) == 1]
      spin_product = sum([J[k,i//N,j]*h[(k+N-1)%N][j] for k,j in neighbors])
      priorities[i][0] = -spin_product
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015692901234567902}
#island_id: 2
#version_generated: 2
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      neighbors_spin = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = sum(neighbors_spin)
      priorities[i][1] = -sum(neighbors_spin) - np.sum(J[:,i%N,i//N])
    else:
      neighbors_spin = [-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = sum(neighbors_spin)
      priorities[i][1] = -sum(neighbors_spin) + np.sum(J[:,i%N,i//N])
  return(priorities)




#score: {'data2D.txt': 0.005422993827160495}
#island_id: 2
#version_generated: 2
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priority_sum = sum([J[k,i%N,i//N]*(2*h[site_nbr][i%N]-1) for k in range(3)])
      if abs(priorities[i][0]) > abs(priority_sum):
        priorities[i][0] = -priorities[i][0]
        priorities[i][1] = 1-priorities[i][1]
  return(priorities)




#score: {'data2D.txt': -0.0007146604938271606}
#island_id: 2
#version_generated: 2
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or h[site_nbr][i%N] < 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        site_nbr2 = (site_nbr + ((i//N-1)%2 - 1)) % N
        if h[site_nbr2][i%N] > 0:
          priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.15878101851851875}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.0016047839506172848}
#island_id: 3
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013143518518518517}
#island_id: 3
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    for neighbor in neighbors:
      priorities[i][0] += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin

  return(priorities)




#score: {'data2D.txt': 0.0002782407407407406}
#island_id: 2
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010115740740740736}
#island_id: 3
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009208333333333333}
#island_id: 3
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_priorities = []
    for neighbor in neighbors:
      neighbor_priority = J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N] + h_site
      neighbor_priorities.append(neighbor_priority)
    
    priorities[i][0] = np.mean(neighbor_priorities)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005200462962962962}
#island_id: 3
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site-wise magnetization
  h_avg = np.mean(h, axis=0)
  
  # Iterate over each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total magnetic field at the site
    total_field = h[site_nbr][i%N] + J[0, i%N, i//N]*h[(site_nbr+N-1)%N][i%N]
    
    # If magnetism is positive, calculate priority for up spin and down spin
    if h_avg[i%N] > 0:
      priorities[i][0] = total_field + J[1, i%N, i//N]*h[(site_nbr+N-1)%N][i%N]
      priorities[i][1] = -total_field - J[1, i%N, i//N]*h[(site_nbr+N-1)%N][i%N]
    else:
      # If magnetism is negative, calculate priority for up spin and down spin
      priorities[i][0] = -total_field + J[1, i%N, i//N]*h[(site_nbr+N-1)%N][i%N]
      priorities[i][1] = total_field + J[1, i%N, i//N]*h[(site_nbr+N-1)%N][i%N]
  
  return priorities




#score: {'data2D.txt': -0.00553503086419753}
#island_id: 3
#version_generated: 2
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors])
    
    priorities[i][0] += h_site + neighbor_sum
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 2
    else:
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': 0.0010115740740740736}
#island_id: 3
#version_generated: 2
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010115740740740736}
#island_id: 3
#version_generated: 2
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0002782407407407406}
#island_id: 2
#version_generated: 2
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008513888888888885}
#island_id: 2
#version_generated: 2
#generate time08:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      for k in range(3):
        site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
        if h[i//N][site_nbr2] > 0:
          total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      for k in range(3):
        site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
        if h[i//N][site_nbr2] < 0:
          total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0795986111111111}
#island_id: 0
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if np.random.rand() < 0.5:  # assign random spin
        priorities[i][0] = np.random.choice([-1, 1])
        priorities[i][1] = -priorities[i][0]
      else:  # flip the previous spin
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        if i > 0:
          prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        else:  
          prev_spin = 0
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          if np.random.rand() < 0.5:  # assign random spin
            priorities[i][0] = np.random.choice([-1, 1])
            priorities[i][1] = -priorities[i][0]
          else:  # flip the previous spin
            site_nbr_prev_prev = (i-2) % N + ((i//N-2)%2 - 1) % N
            if i > 1:
              prev_prev_spin = priorities[(i-2)//N*N + (i-2)%N][0] * (-1) + priorities[(i-2)//N*N + (i-2)%N][1]
            else:  
              prev_prev_spin = 0
            if prev_prev_spin == -1 and np.random.rand() < 0.5:
              priorities[i][0] = 1
              priorities[i][1] = -1
            elif prev_prev_spin == 1 and np.random.rand() < 0.5:
              priorities[i][0] = -1
              priorities[i][1] = 1
  return(priorities)




#score: {'data2D.txt': 0.0794442901234568}
#island_id: 0
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if np.random.rand() < 0.5:  # assign random spin
        priorities[i][0] = np.random.choice([-1, 1])
        priorities[i][1] = -priorities[i][0]
      else:  # flip the previous spin
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        if i > 0:
          prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        else:  
          prev_spin = 0
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
          priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
  return(priorities)




#score: {'data2D.txt': 0.0799270061728395}
#island_id: 0
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if np.random.rand() < 0.5:  
        priorities[i][0] = np.random.choice([-1, 1])
        priorities[i][1] = -priorities[i][0]
      else:
        site_nbr_prev = (i % N + ((i//N-1)%2 - 1)) % N
        if i > 0:
          prev_spin = priorities[(i-1)//N*N + (i-1)%N][0] * (-1) + priorities[(i-1)//N*N + (i-1)%N][1]
        else:  
          prev_spin = 0
        if prev_spin == -1 and np.random.rand() < 0.5:
          priorities[i][0] = 1
          priorities[i][1] = -1
        elif prev_spin == 1 and np.random.rand() < 0.5:
          priorities[i][0] = -1
          priorities[i][1] = 1
        else:
          if total_energy == 0:
            priorities[i][0] = priorities[(i-1)//N*N + (i-1)%N][0]
            priorities[i][1] = priorities[(i-1)//N*N + (i-1)%N][1]
          else:
            if np.random.rand() < 0.5:
              priorities[i][0] = -priorities[(i-1)//N*N + (i-1)%N][0]
              priorities[i][1] = -priorities[(i-1)//N*N + (i-1)%N][1]
            else:
              if total_energy > 0:
                priorities[i][0] = np.random.choice([-1, 1])
                priorities[i][1] = -priorities[i][0]
              elif total_energy < 0:
                priorities[i][0] = -np.random.choice([-1, 1])
                priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16370509259259286}
#island_id: 1
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_row = i // N
    site_nbr_col = i % N
    site_nbr_left = (site_nbr_row * N + site_nbr_col - 1) % N
    site_nbr_right = (site_nbr_row * N + site_nbr_col + 1) % N
    site_nbr_up = ((site_nbr_row - 1) * N + site_nbr_col) % N
    site_nbr_down = ((site_nbr_row + 1) * N + site_nbr_col) % N
    
    for k in range(2):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr_left][i%N]
        total_spin -= h[site_nbr_right][i%N]
        total_spin += h[site_nbr_up][i%N]
        total_spin -= h[site_nbr_down][i%N]
      else:
        total_spin -= h[site_nbr_left][i%N]
        total_spin += h[site_nbr_right][i%N]
        total_spin -= h[site_nbr_up][i%N]
        total_spin += h[site_nbr_down][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.004975771604938272}
#island_id: 1
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    
    if h[site_nbr1][i%N] > 0:
      priorities[i] = [h[site_nbr1][i%N], -h[site_nbr1][i%N]]
    else:
      priorities[i] = [-h[site_nbr1][i%N], h[site_nbr1][i%N]]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        if k % 2 == 0:
          priorities[i][0] += h[site_nbr1][i%N]
          priorities[i][1] -= h[site_nbr1][i%N]
        else:
          priorities[i][0] += h[site_nbr2][i//N]
          priorities[i][1] -= h[site_nbr2][i//N]
      else:
        if k % 2 == 0:
          priorities[i][0] -= h[site_nbr1][i%N]
          priorities[i][1] += h[site_nbr1][i%N]
        else:
          priorities[i][0] -= h[site_nbr2][i//N]
          priorities[i][1] += h[site_nbr2][i//N]
  
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_total = total_energy + nn_energy
    priorities[i][0] += abs(priority_total) * N
    priorities[i][1] -= 2*N if priority_total > 0 else 2*N
  return(priorities)




#score: {'data2D.txt': 0.053702314814814814}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    nn_energy = sum(J[k,i//N,i%N] * (h[(i+k-1)%N][i%N] if k==0 else h[(i+(k+1)-1)%N][i%N]) for k in range(-1,2))
    priority_total = total_energy + nn_energy
    if priority_total > 0:
      priorities[i][0] += abs(priority_total) * N
      priorities[i][1] -= 4*N
    elif priority_total < 0:
      priorities[i][0] -= abs(priority_total) * N
      priorities[i][1] += 4*N
  return(priorities)




#score: {'data2D.txt': -0.3204834876543202}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] if k==0 else J[k,i//N,(i+(k+1)-1)%N] * h[(i+(k+1)-1)%N][i%N] for k in range(-2,3))
    total_energy += 4*h[i//N][i%N]
    priority_total = total_energy
    if priority_total > 0:
      priorities[i][0] += priority_total * N
      priorities[i][1] -= 2*N
    elif priority_total < 0:
      priorities[i][0] -= abs(priority_total) * N
      priorities[i][1] += 2*N
  return(priorities)




#score: {'data2D.txt': 0.11228317901234569}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin += J[0,i//N,i%N]
      else:
        total_spin -= J[0,i//N,i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.01577361111111111}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_energy = -np.sum(J[:,i//N,i%N])
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      total_energy = np.sum(J[:,i//N,i%N])
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09630354938271606}
#island_id: 0
#version_generated: 2
#generate time08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0.5 * (h[site_nbr][i%N] + h[i%N][site_nbr])
    for k in [0,1]:
      if k == 0:
        total_energy += J[k,i//N,i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
      elif k == 1 and i % N != site_nbr:
        total_energy += J[k,i//N,i%N] * (h[(i+k)%N][i%N] - h[site_nbr][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.0011356481481481484}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008612654320987655}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j]*J[k,i//N,j] for k in range(4) for j in [0,N-1]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i//N,i//N]*h[(k+N-1)%4][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i//N,i//N]*h[(k+N-1)%4][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008513888888888885}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      site_nbrs = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(3)]
      for k, site in enumerate(site_nbrs):
        if h[i//N][site] > 0:
          total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][j]*J[0,k,i//N] for k in range(N) for j in [i%N]])
      site_nbrs = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(3)]
      for k, site in enumerate(site_nbrs):
        if h[i//N][site] < 0:
          total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005616820987654321}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = row_sum + 2*h_site
    else:
      priorities[i][0] = row_sum + 2*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008276234567901234}
#island_id: 2
#version_generated: 2
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + row_sum) / 3
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site + row_sum) / 3
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0012791666666666663}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if J[3,i%N,j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    
    priorities[i] = [total_spin, -total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0037304012345679006}
#island_id: 2
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    row_sum1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    row_sum2 = sum([J[k,i%N,i//N]*h[(k+N+1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum1-row_sum2
      priorities[i][1] = row_sum1 + row_sum2 + 2*h_site1 + 2*h_site2
    else:
      priorities[i][0] = row_sum1 + row_sum2 + 2*h_site1 + 2*h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009049537037037038}
#island_id: 2
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = row_sum + 2*h[site_nbr][i%N]
    else:
      priorities[i][0] = row_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008940277777777776}
#island_id: 2
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = row_sum + 2*h_site
    else:
      priorities[i][0] = row_sum + 2*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02840725308641976}
#island_id: 2
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = row_sum + 2*h[site_nbr][i%N]
    else:
      priorities[i][0] = row_sum + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  # Add a term to prioritize spins that align with the magnetism
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.08701188271604945}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)

    # Calculate the priority based on the number of interactions with neighboring sites
    priorities[i][0] += len(site_nbrs)

  return(priorities)




#score: {'data2D.txt': 0.16823719135802495}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)

  # Calculate the priority based on the interaction with nearest neighbors
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin_neighbor = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin_neighbor)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin_neighbor)

  # Calculate the priority based on the magnetism
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': 0.08720941358024699}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(h[site_nbr][i%N] * J[0,i//N,i%N] for site_nbr in site_nbrs)

  # Calculate the priority based on the interaction energy with nearest neighbors
  for i in range(N**2):
    priorities[i][0] += np.sum(np.abs(J[:, i // N, i % N]))

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    if neighbor_sum > 0.5:
      priorities[i][0] = h_site + neighbor_sum - 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
    
  # Improve the priority by considering the total magnetism at each site
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      site_magnetism = 1
    else:
      site_magnetism = -1
    
    priorities[i][0] += site_magnetism
    priorities[i][1] -= site_magnetism

  return(priorities)




#score: {'data2D.txt': 0.06221929012345679}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy - 1e-3 * (priorities[i][0] + priorities[i][1])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      delta_h = 1
    else:
      delta_h = -1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy = J[abs(k),i//N,x%N] * h[x%N][y] - delta_h
        priorities[i][0] = -total_energy
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_energy = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k),i//N,x%N] * h[x%N][y]
    for k in [-1,0,1]:
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy -= J[abs(k),i//N,x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.15155725308641996}
#island_id: 1
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    J_values = [J[k,i%N,i//N] for k in range(4)]
    
    if all(J_values): 
      priorities[i][0] += sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
      priorities[i][1] -= sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    else:
      priorities[i][0] -= sum(-h[site_nbr][i%N] for site_nbr in site_nbrs)
      priorities[i][1] += sum(-h[site_nbr][i%N] for site_nbr in site_nbrs)
    
    j = i % N
    if J[3,i%N,j] > 0:
      priorities[i][0] += h[site_nbr][j]
      priorities[i][1] -= h[site_nbr][j]
    else:
      priorities[i][0] -= h[site_nbr][j]
      priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.0013066358024691356}
#island_id: 1
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    elif total_spin < 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = -1
      priorities[i][1] = 1
    
  return(priorities)




#score: {'data2D.txt': 0.1659541666666669}
#island_id: 1
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N)%2 - 1)) % N
    
    total_spin = h[site_nbr_row][i%N] + h[site_nbr_col][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.08373009259259265}
#island_id: 1
#version_generated: 2
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i%N+1)%2 - 1)) % N

    total_spin = h[site_nbr1][i%N] + J[0,i%N,i//N]
    
    if J[1,i%N,i//N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    if J[2,i%N,i//N] > 0:
      total_spin += h[site_nbr2][i%N]
    else:
      total_spin -= h[site_nbr2][i%N]

    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr1][i%N]
    else:
      total_spin -= h[site_nbr1][i%N]

    if J[1,i//N,i%N] > 0:
      total_spin += h[i//N][i%N]
    else:
      total_spin -= h[i//N][i%N]

    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': 0.16129182098765452}
#island_id: 1
#version_generated: 2
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((2-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    site_nbr = (i % N + ((1-1)%2 - 1)) % N
    if J[0,i//N,i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    site_nbr = (i % N + ((0-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.012038425925925925}
#island_id: 1
#version_generated: 2
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    if magnetism > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + magnetism
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin - magnetism

  return(priorities)




#score: {'data2D.txt': -0.1662359567901237}
#island_id: 1
#version_generated: 2
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.11291774691358038}
#island_id: 1
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if i % (N*N//2) == 0:
      for j in range(N):
        site_nbr = (i % N + ((j-1)%2 - 1)) % N
        if J[3,i%N,j] > 0:
          priorities[i][0] += h[site_nbr][j]
          priorities[i][1] -= h[site_nbr][j]
        else:
          priorities[i][0] -= h[site_nbr][j]
          priorities[i][1] += h[site_nbr][j]
    
    if i % N == 0 or i % N == N-1:
      for k in range(4):
        site_nbr = (i % N + ((k-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          priorities[i][0] += h[site_nbr][i%N]
          priorities[i][1] -= h[site_nbr][i%N]
        else:
          priorities[i][0] -= h[site_nbr][i%N]
          priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.001845216049382715}
#island_id: 1
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.14243996913580265}
#island_id: 1
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with horizontal and vertical neighbors
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,(i-1)%N] > 0 and i % N != 0:
      total_spin += 1
    elif J[3,i%N,(i-1)%N] < 0 and i % N != 0:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16535262345679036}
#island_id: 1
#version_generated: 2
#generate time08:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr2 = (i % N + ((2-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr2][i//N]
      priorities[i][1] -= h[site_nbr2][i//N]
    else:
      priorities[i][0] -= h[site_nbr2][i//N]
      priorities[i][1] += h[site_nbr2][i//N]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = -h_site + total_spin
      else:
        priorities[i][j] = h_site - total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin

  return(priorities)




#score: {'data2D.txt': 0.010065586419753088}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    if h_site > 0:
      priorities[i][0] = neighbor_sum - 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum + 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i//N,i%N]*h[(neighbor+N-1)%N][i%N]

    if neighbor_sum > 0.5:
      priorities[i][0] = h_site + neighbor_sum - 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013853395061728393}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum - np.sum(np.sign(neighbor_sum-0.5))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0012970679012345677}
#island_id: 3
#version_generated: 2
#generate time08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.023318055555555554}
#island_id: 0
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(3):
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][0] += h[(i%N)%N][i//N]
      else:
        priorities[i][0] -= h[(i%N)%N][i//N]

    # Calculate the site's interaction with its diagonal neighbors.
    for j in range(2):
      if i % N != 0 and i % N != N-1:
        dnn_site = (site_nbr + ((j-1)%2 - 1)) % N
        if J[j,i//N,dnn_site] > 0:
          priorities[i][0] += h[dnn_site][(i%N)%N]
        else:
          priorities[i][0] -= h[dnn_site][(i%N)%N]

    if i % N == 0 or (i+1) % N == 0:
      priorities[i][1] = priorities[i][1]/2
    elif i < N:
      priorities[i][1] = priorities[i][1]-priorities[(i+1)%N][1]
    else:
      priorities[i][1] = priorities[i][1]-priorities[(i-1)%N][1]

  return(priorities)




#score: {'data2D.txt': 0.037143672839506175}
#island_id: 0
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Calculate the distance to the nearest spin flip
    dist = np.zeros(4)
    for k in range(4):
      if J[k,i//N,(i%N)%N] > 0:
        dist[k] = -h[(i%N)%N][i//N]
      else:
        dist[k] = h[(i%N)%N][i//N]

    # Add some new spin prioritization based on the site's interaction with its neighbors.
    priorities[i][0] += np.min(dist)
    priorities[i][1] += 2*np.min(dist)

  return(priorities)




#score: {'data2D.txt': 0.023224845679012347}
#island_id: 0
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4):  # Changed from 3 to 4
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(4):  # Changed from 3 to 4
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][0] += h[(i%N)%N][i//N]
      else:
        priorities[i][0] -= h[(i%N)%N][i//N]

    # New spin prioritization based on the site's interaction with its neighbors.
    for j in range(4):  # Changed from 3 to 4
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][1] -= h[(i%N)%N][i//N]
      else:
        priorities[i][1] += h[(i%N)%N][i//N]

    if i % N == 0 or (i+1) % N == 0:
      priorities[i][1] = priorities[i][1]/2
    elif i < N:
      priorities[i][1] = priorities[i][1]-priorities[(i+1)%N][1]
    else:
      priorities[i][1] = priorities[i][1]-priorities[(i-1)%N][1]

  return(priorities)




#score: {'data2D.txt': 0.009500771604938273}
#island_id: 0
#version_generated: 2
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(3):
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][0] += h[(i%N)%N][i//N]
      else:
        priorities[i][0] -= h[(i%N)%N][i//N]

    # Additional improvement: prioritize spins that agree with the majority of neighbors
    nn_spin = np.mean(nns)
    if nn_spin > 0:
      priorities[i][1] += 1
    elif nn_spin < 0:
      priorities[i][1] -= 1
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010055092592592591}
#island_id: 3
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    if h_site > 0:
      priorities[i][0] = neighbor_sum - 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum + 2*abs(neighbor_sum-0.5)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010055092592592591}
#island_id: 3
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priority_sum = neighbor_sum
    if h_site > 0:
      priorities[i][0] = priority_sum - 2*abs(priority_sum-0.5)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -priority_sum + 2*abs(priority_sum-0.5)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16438503086419778}
#island_id: 1
#version_generated: 2
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  for k in range(N):
    site_nbr = (k % N + ((3-1)%2 - 1)) % N
    if J[3,k,N-1] > 0:
      for i in range(k*N+k,k*N+N):
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
    else:
      for i in range(k*N+k,k*N+N):
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.07742916666666667}
#island_id: 0
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = np.exp(-total_energy)
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = np.exp(total_energy)
    else:
      site_nbrs = [(i-1)%N, (i+1)%N, ((i//N-1)%2 - 1)*N + i%N]
      sites = [j for k in site_nbrs for j in [h[k][i%N], J[0,k,i//N]] if k != i]
      total_spin = sum(sites)
      priorities[i][0] = np.sign(total_spin)
      priorities[i][1] = 1 - abs(total_spin)
  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Calculate total spin from nearest neighbors and magnetism
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Update priorities based on total spin and magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add the effect of nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Add the effect of horizontal and vertical interactions
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0015646604938271609}
#island_id: 1
#version_generated: 2
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    
    total_spin = h[site_nbr1][i%N] + sum(J[k,i%N,site_nbr2] for k in range(4))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Compute priority based on nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Compute priority based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    # Compute priority based on site interactions
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbrs = [(i % N + (k-1)%2 - 1) % N for k in range(4)]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbrs[k]][i%N]
        priorities[i][1] -= h[site_nbrs[k]][i%N]
      else:
        priorities[i][0] -= h[site_nbrs[k]][i%N]
        priorities[i][1] += h[site_nbrs[k]][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.0017850308641975303}
#island_id: 1
#version_generated: 2
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i % N + ((i//N)%2 - 1)) % N
    
    total_spin = h[site_nbr_row][i%N] + sum(J[k,i%N,i//N] for k in range(4))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
    site_nbr_row_col = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr_row_col][j]
        priorities[i][1] -= h[site_nbr_row_col][j]
      else:
        priorities[i][0] -= h[site_nbr_row_col][j]
        priorities[i][1] += h[site_nbr_row_col][j]

  return(priorities)




#score: {'data2D.txt': 0.2504004629629628}
#island_id: 1
#version_generated: 2
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priorities[i,0] = total_spin
    priorities[i,1] = -total_spin if h[i//N][i%N] > 0 else total_spin
  return(priorities)




#score: {'data2D.txt': 0.29094243827160504}
#island_id: 0
#version_generated: 2
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    
  return(priorities)




#score: {'data2D.txt': 0.29094243827160504}
#island_id: 0
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    
  return(priorities)




#score: {'data2D.txt': 0.20053966049382735}
#island_id: 0
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
  
  # Calculate the sum of magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priorities[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.29094243827160504}
#island_id: 0
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    
  # Add a term to prioritize spins that are farthest away from the nearest neighbor
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    distance_to_neighbor = np.sum((np.arange(N) == site) * np.abs(np.arange(N) - site))
    priorities[i][0] -= distance_to_neighbor
  
  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001279320987654323}
#island_id: 2
#version_generated: 2
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    row_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -row_sum - sum(J[:, i%N, i//N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = row_sum + sum(J[:, i%N, i//N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07924614197530871}
#island_id: 0
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr1+(j-1)%2-N)%N] if J[j,i//N,(site_nbr1+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr1+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    total_energy += sum(J[j,site_nbr2,(i%(N*N)-1+N)%N] if J[j,site_nbr2,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr2,(i%(N*N)-1+N)%N] for j in range(4)) * h[site_nbr2][i%N]
    total_energy += sum(J[j,i//N,(i%N+(j-1)%2-N)%N] if J[j,i//N,(i%N+(j-1)%2-N)%N]>0 else -J[j,i//N,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[i//N][i%N]
    total_energy += sum(J[j,site_nbr1,(i%(N*N)-1+N)%N] if J[j,site_nbr1,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr1,(i%(N*N)-1+N)%N] for j in range(4)) * h[site_nbr1][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1363162037037038}
#island_id: 0
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_energy = 0
    for j in range(4):
      site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
      site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
      if J[j,i//N,site_nbr1] > 0:
        total_energy += h[site_nbr1][i%N]
      else:
        total_energy -= h[site_nbr1][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_energy1 = sum(J[j,i//N,(site_nbr1+(j-1)%2-N)%N] if J[j,i//N,(site_nbr1+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr1+(j-1)%2-N)%N] for j in range(4))
    total_energy2 = sum(J[j,site_nbr2,(i%(N*N)-1+N)%N] if J[j,site_nbr2,(i%(N*N)-1+N)%N]>0 else -J[j,site_nbr2,(i%(N*N)-1+N)%N] for j in range(4))
    priorities[i][0] = total_energy1 + total_energy2
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.09998842592592604}
#island_id: 0
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    total_energy = sum(J[j, i//N, (site_nbr1+(j-1)%2-N)%N] if J[j, i//N, (site_nbr1+(j-1)%2-N)%N]>0 else -J[j, i//N, (site_nbr1+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    total_energy += sum(J[j, site_nbr2, (i%(N*N)-1+N)%N] if J[j, site_nbr2, (i%(N*N)-1+N)%N]>0 else -J[j, site_nbr2, (i%(N*N)-1+N)%N] for j in range(4)) * h[site_nbr2][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001252623456790123}
#island_id: 1
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        total_spin -= h[site_nbr][j]
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return(priorities)




#score: {'data2D.txt': 0.07609212962962968}
#island_id: 1
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_col = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    site_nbr_row = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr_row][i//N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.0012229938271604932}
#island_id: 1
#version_generated: 2
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]
        priorities[i][1] -= J[k,i%N,i//N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]
        priorities[i][1] += J[k,i%N,i//N]
    
    return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0012970679012345677}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0012489197530864194}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0012970679012345677}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = sum([J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N] for neighbor in neighbors])
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0013621913580246913}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priority = (2*np.abs(neighbor_sum-0.5) + h_site) * (temp_h_site > 0)
    priorities[i][0] = priority
    priorities[i][1] = -priority
  
  return(priorities)




#score: {'data2D.txt': -0.0012489197530864194}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = sum(J[neighbor, i%N, i//N] * h[(neighbor+N-1)%N][i%N] for neighbor in neighbors)
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
  
  # Add additional term based on site magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.0013779320987654317}
#island_id: 3
#version_generated: 2
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = np.sum([J[neighbor,i%N,i//N] for neighbor in neighbors])
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0013412037037037036}
#island_id: 3
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    site_spin_count = np.sum(h==temp_h_site, axis=1)
    site_up_count = site_spin_count[i%N]
    site_down_count = N*2 - site_spin_count[i//N]
    
    if temp_h_site == 1:
      priorities[i][0] = (2*np.abs(neighbor_sum-0.5) + h_site) * (site_up_count / (N*N))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (2*np.abs(neighbor_sum-0.5) + h_site) * (site_down_count / (N*N))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    if i % N != N - 1: # last row, no right neighbor
      priorities[i][1] = -priorities[i][0]
    elif i // N != N - 1: # not the last column, has right neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      left_nbr_sum = 0
      for l in range(3):
        if abs(l-i%N)<1 and abs(l//N-(i//N-1))<1: # left up, down or same row
          left_nbr_sum += J[l,i%N,(i//N-1)*N+i%N]*h[(l+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0] - left_nbr_sum
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [(k, j) for k in range(max(0, i//N-1), min(N, i//N+2)) 
           for j in range(max(0, i%N-1), min(N, i%N+2)) 
           if (abs(k-i//N)<1 and abs(j-i%N)<1) and (k,j)!=(i//N,i%N)]
    neighbor_sum = 0
    for k, j in neighbors:
      neighbor_sum += J[k*10 + (j-1), i//N, i%N]*h[k,j]
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003026234567901231}
#island_id: 0
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total energy and magnetism
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_magnetism = np.sum(h[i//N])
    
    # Determine the priority based on the total energy, magnetism and interaction
    if total_energy > 0:
      priorities[i][0] = -1 if total_magnetism > 0 else 1
      priorities[i][1] = -1 if total_magnetism < 0 else 1
    elif total_energy < 0:
      priorities[i][0] = 1 if total_magnetism > 0 else -1
      priorities[i][1] = 1 if total_magnetism < 0 else -1
    else:
      # Determine the priority based on the magnetism and interaction
      site_nbr_mag = h[site_nbr][i%N]
      if site_nbr_mag > 0:
        priorities[i][0] = 1 if np.sum(h[i//N]) > 0 else -1
        priorities[i][1] = -1 if np.sum(h[i//N]) < 0 else 1
      else:
        priorities[i][0] = -1 if np.sum(h[i//N]) > 0 else 1
        priorities[i][1] = 1 if np.sum(h[i//N]) < 0 else -1
  
  return(priorities)




#score: {'data2D.txt': 0.00021527777777777767}
#island_id: 0
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total energy and magnetism
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_magnetism = np.sum(h[i//N])
    
    # Determine the priority based on the total energy, magnetism and interaction
    if total_energy > 0:
      priorities[i][0] = -1 if total_magnetism > 0 else 1
      priorities[i][1] = -1 if total_magnetism < 0 else 1
    elif total_energy < 0:
      priorities[i][0] = 1 if total_magnetism > 0 else -1
      priorities[i][1] = 1 if total_magnetism < 0 else -1
    else:
      # Determine the priority based on the magnetism and interaction
      site_nbr_mag = h[site_nbr][i%N]
      if site_nbr_mag > 0:
        priorities[i][0] = 1 if np.sum(h[i//N]) > 0 else -1
        priorities[i][1] = -1 if np.sum(h[i//N]) < 0 else 1
      else:
        priorities[i][0] = -1 if np.sum(h[i//N]) > 0 else 1
        priorities[i][1] = 1 if np.sum(h[i//N]) < 0 else -1
    
    # Additional logic for improving the priority function
    if total_energy == 0 and site_nbr_mag == 0:
      priorities[i][0] = 1 if np.random.rand() < 0.5 else -1
      priorities[i][1] = -1 if np.random.rand() > 0.5 else 1
  
  return(priorities)




#score: {'data2D.txt': 0.0003294753086419748}
#island_id: 0
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total energy and magnetism
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    total_magnetism = np.sum(h[i//N])
    
    # Determine the priority based on the total energy, magnetism and interaction
    if total_energy > 0:
      priorities[i][0] = -1 if total_magnetism > 0 else 1
      priorities[i][1] = -1 if total_magnetism < 0 else 1
    elif total_energy < 0:
      priorities[i][0] = 1 if total_magnetism > 0 else -1
      priorities[i][1] = 1 if total_magnetism < 0 else -1
    else:
      # Determine the priority based on the magnetism and interaction
      site_nbr_mag = h[site_nbr][i%N]
      
      # Check for a majority vote of neighbors
      neighbor_magnets = [h[(i+k-1)%N][i%N] for k in range(3)]
      if np.count_nonzero(neighbor_magnets) > N//2:
        priorities[i][0] = 1 if site_nbr_mag > 0 else -1
        priorities[i][1] = -1 if site_nbr_mag < 0 else 1
      else:
        # Determine the priority based on the magnetism and interaction
        priorities[i][0] = 1 if np.sum(h[i//N]) > 0 else -1
        priorities[i][1] = -1 if np.sum(h[i//N]) < 0 else 1
  
  return(priorities)




#score: {'data2D.txt': -0.012652932098765432}
#island_id: 1
#version_generated: 2
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += J[j,i//N,i%N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.23635663580246905}
#island_id: 0
#version_generated: 2
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[site_nbrs.index(i % N),i//N,i%N] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs, i%N] * J[site_nbrs.index(i % N),i//N,i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs, i%N] * J[site_nbrs.index(i % N),i//N,i%N])
  return(priorities)




#score: {'data2D.txt': 0.21245293209876553}
#island_id: 0
#version_generated: 2
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
  return(priorities)




#score: {'data2D.txt': 0.2400146604938273}
#island_id: 0
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
      for j in range(4):
        if h[site_nbrs[j]][i%N] > 0:
          priorities[i][1] -= np.abs(J[j,i//N,i%N])
        else:
          priorities[i][1] += np.abs(J[j,i//N,i%N])
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
  return(priorities)




#score: {'data2D.txt': 0.0027804012345679016}
#island_id: 0
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(J[:, i // N, i % N] - total_spin) + np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
    else:
      priorities[i][1] -= np.sum(J[:, i // N, i % N] + total_spin) - np.sum(h[site_nbrs, i%N] * J[:, i // N, i % N])
  return(priorities)




#score: {'data2D.txt': 0.0009452160493827153}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    # Calculate the priority using a more efficient approach
    if neighbor_sum > 0:
      priorities[i][0] = h_site + np.sum(neighbor_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.0009887345679012339}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010115740740740736}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010115740740740736}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013248456790123453}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
    # added this to the end to make it even better
    for k in range(4):
      if abs(k-i%N)<1 and abs(k//N-i//N)<1:
        site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.0012489197530864194}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
    # Additional term to take into account the global magnetization
    if neighbor_sum > 0:
      priorities[i][0] -= 0.1
    elif neighbor_sum < 0:
      priorities[i][0] += 0.1
    
  return(priorities)




#score: {'data2D.txt': -0.0014220679012345678}
#island_id: 3
#version_generated: 2
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site * (2*np.abs(neighbor_sum-0.5) + np.sign(h_site))
    priorities[i][0] = temp_h_site
    priorities[i][1] = -temp_h_site
    
  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 3
#version_generated: 2
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = 0
    for j in range(N):
      if abs(i%N-j)<1 and abs(i//N-j//N)<1 and i!=j:
        neighbor_sum += J[3+(j-1)%2,i%N,j//N]*h[(i+N-1)%N][j]

    # Calculate the priority using a more efficient approach
    if neighbor_sum > 0:
      priorities[i][0] = h_site + np.sum(neighbor_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.0009677469135802464}
#island_id: 3
#version_generated: 2
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(k,N) for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = np.sum([J[k[0],k[1]%N,k[1]//N]*h[(k[0]+N-1)%N][k[1]%N] for k in neighbors])

    if neighbor_sum > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.0009452160493827153}
#island_id: 3
#version_generated: 2
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
     neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    # Calculate the priority using a more efficient approach
    if neighbor_sum > 0:
      priorities[i][0] = h_site + np.sum(neighbor_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.20148780864197546}
#island_id: 3
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
    # Additional term to take into account the global magnetization
    if neighbor_sum > 0:
      priorities[i][0] -= 0.05*h_site
    elif neighbor_sum < 0:
      priorities[i][0] += 0.05*h_site
    
    # Calculate priority based on total spin and magnetism
    site_spin = h[i//N][i%N]
    if site_spin > 0:
      priorities[i][1] -= 0.01
    elif site_spin < 0:
      priorities[i][1] += 0.01
    
  return(priorities)




#score: {'data2D.txt': -0.0012489197530864194}
#island_id: 3
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
    # Additional term to take into account the global magnetization
    if neighbor_sum > 0:
      priorities[i][0] -= 0.1
    elif neighbor_sum < 0:
      priorities[i][0] += 0.1
    
  return(priorities)




#score: {'data2D.txt': -0.0012489197530864194}
#island_id: 3
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    temp_h_site = h_site
    if neighbor_sum > 0.5:
      temp_h_site = -1
    else:
      temp_h_site = 1
    
    priorities[i][0] = temp_h_site * (2*np.abs(neighbor_sum-0.5) + h_site)
    priorities[i][1] = -priorities[i][0]
    
    # Additional term to take into account the global magnetization
    if neighbor_sum > 0:
      priorities[i][0] -= 0.05*h_site
    elif neighbor_sum < 0:
      priorities[i][0] += 0.05*h_site
    
  return(priorities)




#score: {'data2D.txt': 0.0002473765432098762}
#island_id: 3
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(4) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    if i < N**2//2:
        priorities[i][1] = -priorities[i][0]
    else:
        priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001335339506172839}
#island_id: 3
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]

    priorities[i][0] = h_site + neighbor_sum
    if i % N > 0: 
     priorities[i][0] += J[2,i%N,i//N]*(h[(i-1)%N][i%N])
    if i % N < N - 1:
     priorities[i][0] += J[1,i%N,i//N]*(h[(i+1)%N][i%N])

    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009281635802469134}
#island_id: 3
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    neighbors = [k for k in range(3) if abs(k-i%N)<1 and abs(k//N-i//N)<1]
    neighbor_sum = 0
    for neighbor in neighbors:
      neighbor_sum += J[neighbor,i%N,i//N]*h[(neighbor+N-1)%N][i%N]
    
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.27800385802469096}
#island_id: 0
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3
    else:
      priorities[i][0] -= 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2])
    
  return(priorities)




#score: {'data2D.txt': 0.2662297839506169}
#island_id: 0
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate([(i % N + ((k-1)%2 - 1)) % N for k in range(4)])])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3
    else:
      priorities[i][0] -= 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2])
    
    # Add priority based on magnetism
    priorities[i][0] += h[i//N][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.27800385802469096}
#island_id: 0
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin_up = sum([J[k,i//N,i%N]*h[(i % N + ((k-1)%2 - 1)) % N][i%N] for k in range(4)])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2]) - 3
    else:
      priorities[i][0] -= 1.5 * sum([J[k,i//N,i%N]*h[k][i%N] for k in range(4) if (k-1)%2 == (i//N+1)%2])
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00041126543209876504}
#island_id: 2
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = h_site + neighbor_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 3
#version_generated: 2
#generate time08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009527623456790124}
#island_id: 3
#version_generated: 2
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 2
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.675925925925899e-05}
#island_id: 0
#version_generated: 2
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[(j+2)%4,i//N,site_nbr] for j in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= total_energy
      priorities[i][1] += 1
    else:
      priorities[i][0] += total_energy
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.0009214506172839502}
#island_id: 0
#version_generated: 2
#generate time08:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = np.sum([np.sign(h[site_nbr][k]) * J[0,k,site_nbr] for k in range(N)])
  return(priorities)




#score: {'data2D.txt': -0.0009214506172839502}
#island_id: 0
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = np.sum([np.sign(h[site_nbr][k]) * J[0,k,site_nbr] for k in range(N)])  # added this line
  return(priorities)




#score: {'data2D.txt': 0.0016736111111111112}
#island_id: 0
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[(j+1)%2,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    total_spin = np.sum([np.sign(h[site_nbr][k]) * J[0,k,site_nbr] for k in range(N)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.15639552469135828}
#island_id: 0
#version_generated: 2
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    for k in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      
      if J[k, i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      if h[site_nbr][i%N] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    # Add the interaction with itself
    if J[2, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    # Determine the sign of the bias term based on the site magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    
  return(priorities)




#score: {'data2D.txt': 0.1806878086419755}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = []
    
    for k in [(i//N-1)%N, (i//N+1)%N, (i%N-1)%N, (i%N+1)%N]:
      if k != i//N and k != i%N:
        site_nbrs.append((k, i%N))
    
    total_spin = 0
    total_bias = 0
    
    for k, j in site_nbrs:
      if J[0, k, j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      if h[k][j] > 0:
        total_bias += 1
      else:
        total_bias -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
  
  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    total_bias = 0
    
    site_nbrs = []
    for k in range(4):
      if k % 2 == 0:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      else:
        site_nbr = (i % N + ((i//N)%2 - 1)) % N
      
      site_nbrs.append((site_nbr, J[k, i//N, i%N]))
    
    if h[i//N][i%N] > 0:
      total_bias += 1
    else:
      total_bias -= 1
    
    for site_nbr, interaction in site_nbrs:
      if interaction > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + total_bias
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + total_bias
    
  return(priorities)




#score: {'data2D.txt': -0.11896990740740757}
#island_id: 3
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] if total_spin < 0 else -priorities[i][0] - 2
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003083796296296296}
#island_id: 3
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = np.exp(-priorities[i][0])
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = 1-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 3
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 3
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared,2))
  
  for i in range(N_squared):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      delta = (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][0] += delta
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      elif nn_energy < 0:
        priorities[i][0] -= (np.abs(nn_energy)) / 4
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      elif nn_energy < 0:
        priorities[i][0] -= (np.abs(nn_energy)) / 4
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.18986743827160513}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += total_energy / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(total_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      elif total_energy < 0:
        priorities[i][0] -= (np.abs(total_energy)) / 4
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= total_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.18919830246913602}
#island_id: 0
#version_generated: 2
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if np.sign(h[site_nbr][i%N]) == np.sign(h[i//N][i%N]):
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= 1
    else:
      delta = h[site_nbr][i%N] - h[i//N][i%N]
      if np.abs(delta) > np.abs(nn_energy):
        priorities[i][0] += delta / 2
        priorities[i][1] += 1 if delta < 0 else -1
      elif nn_energy < 0:
        priorities[i][0] -= (np.abs(nn_energy)) / 4
        priorities[i][1] += 1 if delta < 0 else -1
      else:
        priorities[i][0] -= nn_energy / 4
        priorities[i][1] += 1 if delta < 0 else -1
  return(priorities)




#score: {'data2D.txt': 0.30371774691357956}
#island_id: 0
#version_generated: 2
#generate time08:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5
      priorities[i][1] = -4 * total_spin_up + 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5
      priorities[i][1] = 4 * total_spin_down + 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.3016492283950611}
#island_id: 0
#version_generated: 2
#generate time08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)])
    total_spin_down = abs(total_spin_up)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin_up - 2.5) * 3.5 + np.sum([h[k][k % N] for k in range(N)])
      priorities[i][1] = -4 * total_spin_up + 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)]) + np.sum([h[k][k % N] for k in range(N)])
    else:
      priorities[i][0] = -(total_spin_down - 2.5) * 3.5 + np.sum([h[k][k % N] for k in range(N)])
      priorities[i][1] = 4 * total_spin_down - 2 * sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k in range(4)]) + np.sum([h[k][k % N] for k in range(N)])

  return(priorities)




#score: {'data2D.txt': -0.01357638888888889}
#island_id: 3
#version_generated: 2
#generate time08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))

  for i in range(N_squared):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    else:
      priorities[i][0] = total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.04693379629629629}
#island_id: 3
#version_generated: 2
#generate time08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared,2))
  
  for i in range(N_squared):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = np.exp(-2*h[site_nbr][i%N]/float(N))
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = 1 - priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.005006635802469136}
#island_id: 3
#version_generated: 2
#generate time08:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))
  
  for i in range(N_squared):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total magnetism at each site
    total_magnetism = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_magnetism + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_magnetism + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]

  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.1510945987654323}
#island_id: 1
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with nearest neighbors
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + np.sum(h[:, i%N]), -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin + np.sum(h[:, i%N])]
    
  return(priorities)




#score: {'data2D.txt': 0.16147793209876568}
#island_id: 1
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N//N] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
  
  return(priorities)




#score: {'data2D.txt': -1.4660493827160393e-05}
#island_id: 2
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N or i % N == (k + N - 1) % N:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013256172839506153}
#island_id: 2
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_neighbor = (i + N - 1) % N
    right_neighbor = (i + 1) % N
    up_neighbor = i//N * N + (i % N - 1) % N if i % N != 0 else i//N * N + (N-1)
    down_neighbor = i//N * N + (i % N + 1) % N if i % N != N-1 else i//N * N + 0

    spin_up = h[i//N][i%N] > 0
    spin_down = h[up_neighbor//N][up_neighbor % N] > 0
    spin_left = h[left_neighbor//N][left_neighbor % N] > 0 if left_neighbor != i else False
    spin_right = h[right_neighbor//N][right_neighbor % N] > 0 if right_neighbor != i else False

    priority_up = J[1,i%N,up_neighbor//N]
    priority_left = J[3,left_neighbor % N,i//N]
    priority_down = J[2,i//N,down_neighbor//N]
    priority_right = J[2,i//N,right_neighbor//N]

    if spin_up and not spin_down and not spin_left and not spin_right:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    elif not spin_up and spin_down and spin_left and not spin_right:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([priority_up, priority_left, priority_down, priority_right])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00032175925925925975}
#island_id: 2
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1) % N, (i+N-1)%N, (i-N) % N, (i-1) % N]
    neighbor_sum = sum([J[k,i%N,i//N]*h[n][i%N] for k,n in zip(range(4),neighbors)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022047839506172872}
#island_id: 3
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 3
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  return(priorities)




#score: {'data2D.txt': 0.0031773148148148147}
#island_id: 3
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] < 0:
        priorities[i][0] += h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N,N))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  return priorities




#score: {'data2D.txt': -0.11914490740740753}
#island_id: 1
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    magnetism = h[i//N][i%N]
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += magnetism
      else:
        total_spin -= magnetism
    if magnetism > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.0027239197530864196}
#island_id: 1
#version_generated: 2
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = -abs(total_spin)
    priorities[i][1] = abs(total_spin)
  
  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in [0,1]:  # only consider top-left and bottom-right neighbors
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.24334830246913608}
#island_id: 0
#version_generated: 2
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    
    # Additional term to minimize the ground state
    priorities[i][0] -= np.sum(J[:, i // N, i % N])
  
  return(priorities)




#score: {'data2D.txt': 0.20053966049382735}
#island_id: 0
#version_generated: 2
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
  
  # Calculate the sum of magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priorities[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.17778287037037058}
#island_id: 0
#version_generated: 2
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    
    total_spin = sum(h[site][i%N] * J[:,i//N,i%N][site_nbrs.index(i % N)] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][1] += np.sum(np.abs(J[:, i // N, i % N]) - total_spin) + sum(1 for _ in range(N) if J[0,i//N,i%N] < 0)
    else:
      priorities[i][1] -= np.sum(np.abs(J[:, i // N, i % N]) + total_spin) - sum(1 for _ in range(N) if J[0,i//N,i%N] > 0)
    
    spin_neighbors = [h[site][i%N] * J[0,i//N,i%N] for site in site_nbrs]
    priorities[i][0] += np.sum(np.abs(spin_neighbors) - total_spin)
    
  # Calculate the sum of magnetism at each site
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  
  return(priorities)




#score: {'data2D.txt': -0.00020478395061728394}
#island_id: 2
#version_generated: 2
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N)%2][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07655077160493831}
#island_id: 0
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = J[0,i//N,site_nbr] * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy_up += h[i//N][i%N]
    else:
      nn_energy_up -= h[i//N][i%N]

    nn_energy_down = J[0,i//N,site_nbr] * (-h[i//N][i%N])
    if J[3,i//N,site_nbr] > 0:
      nn_energy_down -= h[i//N][i%N]
    else:
      nn_energy_down += -h[i//N][i%N]

    # Prioritize the spin with lower energy
    priorities[i][0] = min(nn_energy_up, nn_energy_down)
    if J[3,i//N,site_nbr] > 0 and h[i//N][i%N] > 0:
      priorities[i][1] = max(-priorities[i][0], 0)
    elif J[3,i//N,site_nbr] < 0 and h[i//N][i%N] < 0:
      priorities[i][1] = max(-priorities[i][0], 0)
    else:
      if nn_energy_up < nn_energy_down:
        priorities[i][1] = max(-priorities[i][0], 0)
      else:
        priorities[i][1] = -max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': 0.09613750000000007}
#island_id: 0
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * h[i//N][i%N]
    if J[3,i//N,site_nbr] > 0:
      nn_energy_up += h[i//N][i%N]
    else:
      nn_energy_up -= h[i//N][i%N]

    nn_energy_down = (J[1,i//N,site_nbr] + J[2,i//N,site_nbr]) * (-h[i//N][i%N])
    if J[3,i//N,site_nbr] > 0:
      nn_energy_down -= h[i//N][i%N]
    else:
      nn_energy_down += -h[i//N][i%N]

    # Calculate the priority for both spins
    priorities[i][0] = min(nn_energy_up + J[3,i//N,site_nbr], nn_energy_down + J[3,i//N,site_nbr])
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': 0.000810956790123457}
#island_id: 0
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy_up = (J[0,i//N,site_nbr] + J[3,i//N,site_nbr]) * h[i//N][i%N]
    nn_energy_down = (J[0,i//N,site_nbr] + J[3,i//N,site_nbr]) * (-h[i//N][i%N])
    
    # Prioritize the spin with lower energy
    priorities[i][0] = min(nn_energy_up, nn_energy_down)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': 0.009271759259259259}
#island_id: 3
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  # Add a small correction to the priorities based on the magnetism
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 0.01
      priorities[i][1] -= 0.01
    else:
      priorities[i][0] -= 0.01
      priorities[i][1] += 0.01

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009527623456790124}
#island_id: 3
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23990324074074065}
#island_id: 3
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j, i % N, i // N] > 0:
        total_spin += J[j, i % N, i // N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin -= J[j, i % N, i // N] * (2*h[site_nbr][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = 1 + 2*total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = 1 - 2*total_spin

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[site_nbr][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.32867793209876567}
#island_id: 0
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1, i//N, (i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2, i//N, ((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3, (i//N+1)%N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[i//N][i%N] > 0 else total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.19389058641975307}
#island_id: 0
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i//N,(i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i//N,((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,(i//N+1)%N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 0
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = 0
    for k in range(4):
      if J[k][i//N, i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.16151898148148147}
#island_id: 0
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = []
    if i % N > 0:
      site_nbrs.append(i-1)
    if i % N < N-1:
      site_nbrs.append(i+1)
    if (i//N) > 0:
      site_nbrs.append(i-N)
    if (i//N) < N-1:
      site_nbrs.append(i+N)
    
    for site_nbr in site_nbrs:
      if J[0, i//N, i%N] > 0 and J[0, site_nbr//N, site_nbr%N] > 0:
        priorities[i][0] += 2
        priorities[i][1] -= 2
      elif J[0, i//N, i%N] < 0 and J[0, site_nbr//N, site_nbr%N] < 0:
        priorities[i][0] -= 2
        priorities[i][1] += 2
      else:
        priorities[i][0] += 1 if h[site_nbr//N][site_nbr%N] > 0 else -1
        priorities[i][1] -= 1 if h[site_nbr//N][site_nbr%N] > 0 else 1
        
  return(priorities)




#score: {'data2D.txt': 0.0005408950617283954}
#island_id: 2
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = 2*h_site + 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00020416666666666605}
#island_id: 2
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = h_site + neighbor_spin - (neighbor_spin**2) / (8 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin + (neighbor_spin**2) / (8 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h_site > 0:
      priorities[i][0] = -neighbor_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = neighbor_spin
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019143518518518526}
#island_id: 2
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = -h_site - neighbor_spin
      priorities[i][1] = 1 - priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbor_spin
      priorities[i][1] = 1 - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005408950617283954}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = 2*h_site + 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -5.7253086419752575e-05}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = h_site + 2*np.tanh(neighbor_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - 2*np.tanh(-neighbor_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005387345679012347}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = -2*h_site + 4*neighbor_spin
      priorities[i][1] = np.exp(-priorities[i][0])
    else:
      priorities[i][0] = 2*h_site + 4*neighbor_spin
      priorities[i][1] = 1-priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0003964506172839507}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = 2*h_site + 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - 4*neighbor_spin
      priorities[i][1] = -priorities[i][0]

  # Add a small bias to favor the majority spin at each site
  for i in range(N**2):
    neighbor_spins = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if np.sum([1 if s > 0 else -1 for s in neighbor_spins]) > 0:
      priorities[i][0] += 0.5
      priorities[i][1] -= 0.5
    else:
      priorities[i][0] -= 0.5
      priorities[i][1] += 0.5

  return(priorities)




#score: {'data2D.txt': -0.0014850308641975315}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N)%2][i%N] for k in range(4)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012603395061728396}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N)%2][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  # Sort the sites by their priority values
  sorted_indices = np.argsort(priorities[:, 0])
  priorities = priorities[sorted_indices]

  return priorities




#score: {'data2D.txt': -0.0007983024691358031}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N)%2][i%N] for k in range(4)])
    magnetic_field = 0 if J[1,i//N,i//N]%2 == h[i//N][i%N] else 1
    priorities[i][0] = h_site + neighbor_sum - magnetic_field
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0033347222222222224}
#island_id: 2
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.32500385802469123}
#island_id: 0
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1, i//N, (i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2, i//N, ((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3, (i//N+1)%N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[i//N][i%N] > 0 else total_spin
    
  return(priorities)




#score: {'data2D.txt': -0.004260956790123457}
#island_id: 0
#version_generated: 2
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1, i//N, (i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2, i//N, ((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3, (i//N+1)%N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    spin = np.sign(np.sum(J[:, i//N, i%N]))
    
    priorities[i][0] = total_spin - h[site_nbr][i%N]
    priorities[i][1] = -total_spin if spin == 1 else total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.21091003086419755}
#island_id: 0
#version_generated: 2
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for j in range(4):
      if J[j, i//N, i%N] > 0:
        total_spin += 1
      elif J[j, i//N, i%N] < 0:
        total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[i//N][i%N] > 0 else total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.32500385802469123}
#island_id: 0
#version_generated: 2
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1, i//N, (i+1)%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2, i//N, ((i+N-1)%N)] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3, (i//N+1)%N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[i//N][i%N] > 0 else total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = h[i//N][i%N]
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_spin *= np.sign(total_spin)
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.00020416666666666605}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = h_site + neighbor_spin - (neighbor_spin**2) / (8 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin + (neighbor_spin**2) / (8 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.00027206790123456795}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = np.sqrt(h_site**2 + neighbor_spin**2) - abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sqrt(h_site**2 + neighbor_spin**2) + abs(h_site)
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.001045216049382716}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = h_site + neighbor_spin - (neighbor_spin**2) / (8 * abs(h_site)) + np.tanh(neighbor_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_spin + (neighbor_spin**2) / (8 * abs(h_site)) + np.tanh(-neighbor_spin)
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = (neighbor_spin - 2) / (4 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(neighbor_spin + 2) / (4 * abs(h_site))
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0033347222222222224}
#island_id: 2
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0994189814814815}
#island_id: 2
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in [(0,1), (1,3), (2,0), (3,2)]:
      if J[k[0], i//N, i%N] > 0 and h[i//N][i%N] == h[k[0]][k[1]]:
        priorities[i][0] += 2*J[k[0], i//N, i%N]
        priorities[i][1] -= 2*J[k[0], i//N, i%N]
      elif J[k[0], i//N, i%N] < 0 and h[i//N][i%N] != h[k[0]][k[1]]:
        priorities[i][0] += 2*J[k[0], i//N, i%N]
        priorities[i][1] -= 2*J[k[0], i//N, i%N]

  return(priorities)




#score: {'data2D.txt': -0.002719907407407408}
#island_id: 2
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = neighbor_sum + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
      priorities[i][0] += sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    else:
      priorities[i][0] = -neighbor_sum - np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -0.00244891975308642}
#island_id: 2
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (neighbor_sum + np.sum(J[:,i//N,i%N])) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(neighbor_sum + np.sum(J[:,i//N,i%N])) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001845216049382715}
#island_id: 0
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin

  return(priorities)




#score: {'data2D.txt': 0.010103549382716057}
#island_id: 0
#version_generated: 2
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(h[site][i%N] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin * 3.5
      priorities[i][1] -= 2.5 * total_spin
    else:
      priorities[i][0] -= total_spin * 3.5
      priorities[i][1] += 2.5 * total_spin
    for j, site in enumerate(site_nbrs):
      if h[site][i%N] > 0:
        priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
  return(priorities)




#score: {'data2D.txt': 0.16525632716049407}
#island_id: 1
#version_generated: 2
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.006940895061728394}
#island_id: 1
#version_generated: 2
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [-priorities[i][0], priorities[i][0]]
    else:
      priorities[i] = [priorities[i][0], -priorities[i][0]]
  
  return(priorities)




#score: {'data2D.txt': 0.13779398148148167}
#island_id: 1
#version_generated: 2
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum(J[:,i//N,i//N])
      priorities[i][1] = -total_spin - sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -total_spin - sum(J[:,i//N,i//N])
      priorities[i][1] = total_spin + sum(J[:,i//N,i//N])
      
  return(priorities)




#score: {'data2D.txt': 0.0009634259259259264}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    # This is the key improvement: we only need to calculate the absolute value of total_priority once
    total_priority = abs(h_site + nn_sum)
    
    priorities[i][0] = total_priority if h[site_nbr][i%N] > 0 else -total_priority
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.2104557098765431}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority
    
    # Add a bias term for the site's own spin value
    site_spin_value = 2*h[i//N][i%N]
    priorities[i][0] -= site_spin_value
    priorities[i][1] += site_spin_value
    
  return(priorities)




#score: {'data2D.txt': 0.009607253086419753}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority
    
  return(priorities)




#score: {'data2D.txt': 0.026000462962962965}
#island_id: 0
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = [h[(site_nbr + j) % N][i%N] for j in range(-1,2) if (site_nbr + j) % N != site_nbr]
    
    nn_sum = sum([J[k,i//N,i%N]*n for k,n in zip(range(3),nns)])
    
    total_priority = h_site + nn_sum
    
    priorities[i][0] = -total_priority
    priorities[i][1] = total_priority
    
  return(priorities)




#score: {'data2D.txt': 0.0030195987654321015}
#island_id: 3
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    h_site_sign = np.sign(h[i//N][i%N])
    priorities[i][0] = (1+h_site_sign*h_site)/2
    priorities[i][1] = 1-priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012010802469135824}
#island_id: 3
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012010802469135824}
#island_id: 3
#version_generated: 2
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.011318981481481482}
#island_id: 3
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))

  for i in range(N_squared):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])

    if h[i // N][i % N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i % N]
      spin_diff = sum([J[k, i % N, i // N] * (h[(k + N - 1) % N][i % N] - h[i // N][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0] - total_spin - spin_diff
    else:
      priorities[i][0] = total_spin + h[site_nbr][i % N]
      spin_diff = sum([J[k, i % N, i // N] * (h[(k + N - 1) % N][i % N] - h[i // N][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0] - total_spin + spin_diff

  return(priorities)




#score: {'data2D.txt': -0.01357638888888889}
#island_id: 3
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))

  for i in range(N_squared):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    else:
      priorities[i][0] = total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.14232638888888907}
#island_id: 3
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))

  for i in range(N_squared):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = -total_spin - abs(sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0] - total_spin
    else:
      priorities[i][0] = total_spin - abs(sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0] - total_spin

  return(priorities)




#score: {'data2D.txt': -0.01357638888888889}
#island_id: 3
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  priorities = np.zeros((N_squared, 2))

  for i in range(N_squared):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = -total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    else:
      priorities[i][0] = total_spin + h[site_nbr][i % N]
      priorities[i][1] = -priorities[i][0] - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.014049537037037037}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total_energy += J[j,i//N,i%N]*(h[(i+j-3)%N][i%N])
      else:
        total_energy -= J[j,i//N,i%N]*(h[(i+j-3)%N][i%N])
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.014498611111111113}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total_energy += 2*J[j,i//N,i%N]*h[(i+j-3)%N][i%N]
      else:
        total_energy -= 2*J[j,i//N,i%N]*h[(i+j-3)%N][i%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.014472067901234571}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total_energy += 2*J[j,i//N,i%N]*h[(i+j-3)%N][i%N]
      else:
        total_energy -= 2*J[j,i//N,i%N]*h[(i+j-3)%N][i%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
    if i % N == 0 or i % N == N-1:
      priorities[i][1] -= 1.5
  return(priorities)




#score: {'data2D.txt': -0.008167129629629632}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,(i//N)%N,i%N] * h[site_nbr][i%N] for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= sum([abs(J[k,(i//N)%N,i%N]) for k in range(4)])
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      priorities[i][1] += sum([abs(J[k,(i//N)%N,i%N]) for k in range(4)])
  return(priorities)




#score: {'data2D.txt': -0.008167129629629632}
#island_id: 0
#version_generated: 2
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,i%N] * h[site_nbr][i%N] for k in range(4))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + nn_energy
      priorities[i][1] -= sum([abs(J[k,i//N,i%N]) for k in range(4)])
    else:
      priorities[i][0] -= h[site_nbr][i%N] - nn_energy
      priorities[i][1] += sum([abs(J[k,i//N,i%N]) for k in range(4)])
  return(priorities)




#score: {'data2D.txt': -0.00877391975308642}
#island_id: 0
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,(i//N)%N,i%N] * h[site_nbr][i%N] for k in [0, 1, 3])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += (h[site_nbr][i%N] + nn_energy) / 2
      priorities[i][1] -= sum([abs(J[k,(i//N)%N,i%N]) for k in [0, 1, 3]])
    else:
      priorities[i][0] -= (h[site_nbr][i%N] - nn_energy) / 2
      priorities[i][1] += sum([abs(J[k,(i//N)%N,i%N]) for k in [0, 1, 3]])
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.1657708333333336}
#island_id: 1
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.15434922839506193}
#island_id: 3
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013396604938271603}
#island_id: 3
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]

  # Sort the sites based on their priority
  sorted_indices = np.argsort(priorities[:, 0])

  # Return a list of tuples where each tuple contains the index and the two possible spin values
  return [(i, -1) if j == 0 else (i, 1) for i, j in zip(sorted_indices, priorities[sorted_indices, 1])]




#score: {'data2D.txt': -0.0021995370370370367}
#island_id: 3
#version_generated: 2
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06933348765432097}
#island_id: 0
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(4))
    if neighbor_sum > 0:
      priorities[i][0] = np.sign(h[site_nbr][i%N])
      priorities[i][1] = -np.sign(h[site_nbr][i%N])
    elif neighbor_sum < 0:
      priorities[i][0] = -np.sign(h[site_nbr][i%N])
      priorities[i][1] = np.sign(h[site_nbr][i%N])
  return(priorities)




#score: {'data2D.txt': 0.0770875}
#island_id: 0
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    neighbor_sum = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][0] = -1
      priorities[i][1] = 1
    elif total_energy < 0:
      priorities[i][0] = 1
      priorities[i][1] = -1
    else:
      if neighbor_sum > 0:
        priorities[i][0] = np.sign(h[site_nbr][i%N])
        priorities[i][1] = -np.sign(h[site_nbr][i%N])
      elif neighbor_sum < 0:
        priorities[i][0] = -np.sign(h[site_nbr][i%N])
        priorities[i][1] = np.sign(h[site_nbr][i%N])
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 2] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if total_energy > 0:
      priorities[i][1] -= 1
    elif total_energy < 0:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.009023611111111112}
#island_id: 0
#version_generated: 2
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -np.tanh((neighbor_sum + h[site_nbr][i%N]) / J[0, i//N, i%N])
      priorities[i][1] = 1
    else:
      priorities[i][0] = 1
      priorities[i][1] = -np.tanh((neighbor_sum + h[site_nbr][i%N]) / J[0, i//N, i%N])
  return(priorities)




#score: {'data2D.txt': -0.0019449074074074078}
#island_id: 0
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = 0
    total_spin_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
      if J[:,site_nbr,i%N].sum() > 0:
        priorities[i][0] -= np.sum(J[:,site_nbr,i%N])
        priorities[i][1] += np.sum(J[:,site_nbr,i%N])
      else:
        priorities[i][0] += np.sum(J[:,site_nbr,i%N])
        priorities[i][1] -= np.sum(J[:,site_nbr,i%N])
    if site_nbr_sum > 0:
      priorities[i][0] -= 3 * total_spin_sum
      priorities[i][1] += 3 * total_spin_sum
    else:
      priorities[i][0] += 2.5 * total_spin_sum
      priorities[i][1] -= 2.5 * total_spin_sum
  return(priorities)




#score: {'data2D.txt': 0.01572577160493827}
#island_id: 0
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = 0
    total_spin_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      total_spin_sum = site_nbr_sum
    else:
      total_spin_sum = -site_nbr_sum
    for k in range(4):
      site = (i % N + ((k)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
    site_nbr_sum /= abs(site_nbr_sum)
    total_spin_sum /= abs(total_spin_sum)
    if site_nbr_sum > 0:
      priorities[i][0] -= 3 * total_spin_sum
      priorities[i][1] += 3 * total_spin_sum
    else:
      priorities[i][0] += 2.5 * total_spin_sum
      priorities[i][1] -= 2.5 * total_spin_sum
  return(priorities)




#score: {'data2D.txt': 0.016608487654320988}
#island_id: 0
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = 0
    total_spin_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      total_spin_sum = site_nbr_sum
    else:
      total_spin_sum = -site_nbr_sum
    for k in range(4):
      site = (i % N + ((k)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= 3.5 * np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] -= 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += 2.5 * np.sum(J[:,site,i%N])*h[site][i%N]
    if site_nbr_sum > 0:
      priorities[i][0] -= 3 * total_spin_sum
      priorities[i][1] += 3 * total_spin_sum
    else:
      priorities[i][0] += 2.5 * total_spin_sum
      priorities[i][1] -= 2.5 * total_spin_sum
  return(priorities)




#score: {'data2D.txt': 0.019107870370370372}
#island_id: 0
#version_generated: 2
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_sum = 0
    total_spin_sum = 0
    for j in range(4):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      site_nbr_sum += h[site_nbr][i%N]
    if np.sum(h[i//N]) > 0:
      total_spin_sum = site_nbr_sum
    else:
      total_spin_sum = -site_nbr_sum
    for k in range(4):
      site = (i % N + ((k)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] -= np.sum(J[:,site,i%N])*h[site][i%N]
      else:
        priorities[i][0] -= np.sum(J[:,site,i%N])*h[site][i%N]
        priorities[i][1] += np.sum(J[:,site,i%N])*h[site][i%N]
    if site_nbr_sum > 0:
      priorities[i][0] -= total_spin_sum
      priorities[i][1] += total_spin_sum
    else:
      priorities[i][0] += total_spin_sum
      priorities[i][1] -= total_spin_sum
  return(priorities)




#score: {'data2D.txt': -0.005827314814814814}
#island_id: 0
#version_generated: 2
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site = ((i//N + (k-1)%2 - 1)) % N*N
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
    
    # Apply a heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]
    else:
      # In case of tie, assign the spin with the least priority
      if priorities[i][0] > 0:
        priorities[i] = [priorities[i][0], -1]
      elif priorities[i][0] < 0:
        priorities[i] = [-1, priorities[i][0]]
  
  return(priorities)




#score: {'data2D.txt': -0.005827314814814814}
#island_id: 0
#version_generated: 2
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N*N
    
    total_spin = np.sum(J[:, i//N, i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site = (i // N + ((k-1)%2 - 1)) % N*N
      
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k, i//N, i%N]
        priorities[i][1] -= 2*J[k, i//N, i%N]
      else:
        priorities[i][0] -= J[k, i//N, i%N]
        priorities[i][1] += 2*J[k, i//N, i%N]
    
    # Apply a simple heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.005827314814814814}
#island_id: 0
#version_generated: 2
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = np.sum(J[:,i//N,i%N])*h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    # Calculate the priority for each of the four neighbors
    for k in range(4):
      site = ((i//N + (k-1)%2 - 1)) % N*N
      if h[site//N][site%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]
        priorities[i][1] -= 2*J[k,i//N,i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]
        priorities[i][1] += 2*J[k,i//N,i%N]
    
    # Apply a heuristic to reduce the computation
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], -1]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [-1, priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11632608024691372}
#island_id: 1
#version_generated: 2
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    # New algorithm
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.21091219135802486}
#island_id: 1
#version_generated: 2
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    priorities[i,0] = total_spin * (h[i//N][i%N] > 0) - (total_spin > 0)
    priorities[i,1] = -priorities[i,0]

  return(priorities)




#score: {'data2D.txt': 0.08858811728395066}
#island_id: 1
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i%N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N]
    
    if J[0,i//N,i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
      
    if J[1,i//N,i%N] > 0:
      total_spin += h[site_nbr2][i%N]
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      total_spin -= h[site_nbr2][i%N]
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
      
    if J[2,i//N,i%N] > 0:
      total_spin += h[site_nbr3][i%N]
      priorities[i][0] += h[site_nbr3][i%N]
      priorities[i][1] -= h[site_nbr3][i%N]
    else:
      total_spin -= h[site_nbr3][i%N]
      priorities[i][0] -= h[site_nbr3][i%N]
      priorities[i][1] += h[site_nbr3][i%N]
      
    if J[3,i//N,i%N] > 0:
      total_spin += h[site_nbr4][i%N]
      priorities[i][0] += h[site_nbr4][i%N]
      priorities[i][1] -= h[site_nbr4][i%N]
    else:
      total_spin -= h[site_nbr4][i%N]
      priorities[i][0] -= h[site_nbr4][i%N]
      priorities[i][1] += h[site_nbr4][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Compute the magnetism at this site
    total_spin += h[site_nbr][i%N]
    
    # Iterate over all neighboring sites
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Determine the spin assignment based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return priorities




#score: {'data2D.txt': 0.15434922839506193}
#island_id: 3
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (2*h[site_nbr][i%N]-1)
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06511188271604942}
#island_id: 3
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += J[j,i%N,i//N] * (2*h[(i+N*j-1)%N][i%N]-1)
      else:
        total_spin -= J[j,i%N,i//N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1524263888888891}
#island_id: 3
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if j == 0:
        total_spin += J[0,i%N,i//N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
      elif j == 1 or j == 3:
        total_spin += J[j,N-1-i%N,i//N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin += J[j,i%N,N-1-(i//N)%N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1370075617283952}
#island_id: 3
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      total_spin += J[j, i % N, i // N] * (2*h[(i+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16209706790123474}
#island_id: 0
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    total_energy = site_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      total_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.022014043209876544}
#island_id: 0
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    total_energy = site_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      total_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_energy
    if sum(h[i//N]) > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16209706790123474}
#island_id: 0
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    total_energy = site_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      total_energy += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.12151250000000016}
#island_id: 0
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    for j in range(4):
      k = (j+1)%4
      if J[j,i//N,(site_nbr+(j-1)%2-N)%N] > 0:
        total_energy += J[k,i//N,(site_nbr+(k-1)%2-N)%N]*h[(site_nbr+(k-1)%2-N)%N][i%N]
    priorities[i][0] = total_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1524263888888891}
#island_id: 3
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if j == 0:
        total_spin += J[0,i%N,i//N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
      elif j == 1 or j == 3:
        total_spin += J[j,N-1-i%N,i//N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin += J[j,i%N,N-1-(i//N)%N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1524263888888891}
#island_id: 3
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if j == 0:
        total_spin += J[0,i%N,i//N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
      elif j == 1 or j == 3:
        total_spin += J[j,N-1-i%N,i//N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin += J[j,i%N,N-1-(i//N)%N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005212499999999998}
#island_id: 3
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if j == 0:
        total_spin += J[0,i%N,i//N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
      elif j == 1 or j == 3:
        total_spin += J[j,N-1-i%N,i//N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin += J[j,i%N,N-1-(i//N)%N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin + np.sum(priorities[:i,0])
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = total_spin - np.sum(priorities[:i,0])
  return(priorities)




#score: {'data2D.txt': 0.1524263888888891}
#island_id: 3
#version_generated: 2
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if j == 0:
        total_spin += J[0,i%N,i//N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
      elif j == 1 or j == 3:
        total_spin += J[j,N-1-i%N,i//N] * (2*h[site_nbr][i%N]-1)
      else:
        total_spin += J[j,i%N,N-1-(i//N)%N] * (2*h[(site_nbr+N*j-1)%N][i%N]-1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011483024691358022}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N != (i+N)//N and i%N != (i+1)%N:
        nns.append(J[j][i//N,i//N]*h[nn_site][i%N])
      else:
        nns.append(0)

    J_up = np.sum(nns)
    J_down = -np.sum([J[j][i//N,i//N]*h[(site_nbr+1)%N][i%N] for j in range(4) if i//N != (i+N)//N and i%N != (i+1)%N])
    
    # Calculate the priority using a more efficient approach
    priorities[i][0] = J_up + np.sum([J[j][i//N,i//N]*h[site_nbr][i%N] for j in range(4) if j==0 or j==3]) - J_down
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 5.1388888888889317e-05}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N != (i+N)//N and i%N != (i+1)%N:
        nns.append(J[j][i//N,i//N]*h[nn_site][i%N])
      else:
        nns.append(0)

    J_up = np.sum(nns)
    J_down = -np.sum([J[j][i//N,i//N]*h[(site_nbr+1)%N][i%N] for j in range(4) if i//N != (i+N)//N and i%N != (i+1)%N])
    priorities[i][0] = h_site * J_up + 2 * np.sum([J[j][i//N,i//N]*h[site_nbr][i%N] for j in range(4) if j==0 or j==3]) - J_down
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.1388888888889317e-05}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N != (i+N)//N and i%N != (i+1)%N:
        nns.append(J[j][i//N,i//N]*h[nn_site][i%N])
      else:
        nns.append(0)

    J_up = np.sum(nns)
    J_down = -np.sum([J[j][i//N,i//N]*h[(site_nbr+1)%N][i%N] for j in range(4) if i//N != (i+N)//N and i%N != (i+1)%N])
    priorities[i][0] = h_site * J_up + 2 * np.sum([J[j][i//N,i//N]*h[site_nbr][i%N] for j in range(4) if j==0 or j==3]) - J_down
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.032555092592592594}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
        
    # Add a term that favors -1 when the site is close to an edge or has a strong magnetism
    if (i % N) == 0 or (i % N) == N-1 or ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      priorities[i][1] += abs(h_site)
      
  return(priorities)




#score: {'data2D.txt': 0.1963816358024692}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,site_nbr])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1

    # Add more terms to the priority function based on J
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,site_nbr] > 0:
        priorities[i][0] += J[j,i//N,site_nbr]
        priorities[i][1] -= J[j,i//N,site_nbr]
      else:
        priorities[i][0] -= J[j,i//N,site_nbr]
        priorities[i][1] += J[j,i//N,site_nbr]

    # Add a term that favors -1 when the site is close to an edge
    if (i % N) == 0 or (i % N) == N-1:
      priorities[i][1] += 1
    elif ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.1525121913580247}
#island_id: 0
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(4):
      if j < 2:
        nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((j-2)%2 - 1)) % N
      nns.append(J[j, i//N, site_nbr])
      
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([n for n in nns]) - abs(sum([n for n in nns]))/2 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([n for n in nns]) + abs(sum([n for n in nns]))/2
      if np.sum(nns) == 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
    
    # Add more terms to the priority function based on J
    for j in range(4):
      if j < 2:
        nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      else:
        nn_site = (i // N + ((j-2)%2 - 1)) % N
      if J[j, i//N, site_nbr] > 0:
        priorities[i][0] += J[j, i//N, site_nbr]
        priorities[i][1] -= J[j, i//N, site_nbr]
      else:
        priorities[i][0] -= J[j, i//N, site_nbr]
        priorities[i][1] += J[j, i//N, site_nbr]
    
    # Add a term that favors -1 when the site is close to an edge
    if (i % N) == 0 or (i % N) == N-1:
      priorities[i][1] += 1
    elif ((i//N)%N) == 0 or ((i//N)%N) == N-1:
      priorities[i][1] -= 1
      
  return(priorities)




#score: {'data2D.txt': -0.000772067901234568}
#island_id: 2
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if abs(h_site) > 0:
      priorities[i][0] = -abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = neighbor_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = np.sqrt(h_site**2 + neighbor_spin**2) - abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sqrt(h_site**2 + neighbor_spin**2) + abs(h_site)
      priorities[i][1] = -priorities[i][0]
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += 2
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 2
      priorities[i][1] += 2
      
  return(priorities)




#score: {'data2D.txt': 0.0020899691358024696}
#island_id: 2
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h_site > 0:
      priorities[i][0] = -abs(h_site) + np.sqrt((neighbor_spin - abs(h_site))**2)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = abs(h_site) + np.sqrt((neighbor_spin + abs(h_site))**2)
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.00027206790123456795}
#island_id: 2
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbor_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if neighbor_spin > 0:
      priorities[i][0] = np.sqrt(h_site**2 + neighbor_spin**2) - abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sqrt(h_site**2 + neighbor_spin**2) + abs(h_site)
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.1580223765432101}
#island_id: 0
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4))
    priorities[i][0] = total_energy + site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.003345216049382715}
#island_id: 0
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    site_energy = sum(J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] if J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[(j+1)%4,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    neighbors_energy = sum(J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] if J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N]>0 else -J[j,i//N,((i+N-1)%N+(j-1)%2-N)%N] for j in range(4)) * h[(i+1)%N][i%N]
    total_energy += site_energy + neighbors_energy
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    nnbr_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        nnbr_spin += 1
      else:
        nnbr_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + nnbr_spin, -total_spin - nnbr_spin]
    else:
      priorities[i] = [-total_spin - nnbr_spin, total_spin + nnbr_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.02780540123456791}
#island_id: 1
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,(i+1)%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
    if J[2,i//N,(i+N)%N] > 0:
      priorities[i][0] += h[site_nbr1][i//N]
      priorities[i][1] -= h[site_nbr1][i//N]
    else:
      priorities[i][0] -= h[site_nbr1][i//N]
      priorities[i][1] += h[site_nbr1][i//N]
    
    if J[3,i//N,(i+1)%N] > 0:
      priorities[i][0] += h[site_nbr2][i//N]
      priorities[i][1] -= h[site_nbr2][i//N]
    else:
      priorities[i][0] -= h[site_nbr2][i//N]
      priorities[i][1] += h[site_nbr2][i//N]
    
  return(priorities)




#score: {'data2D.txt': -0.0011208333333333333}
#island_id: 1
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    return(priorities)




#score: {'data2D.txt': 0.0018924382716049377}
#island_id: 0
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i // N + ((3 - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i // N + ((3 - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += J[:, i // N, i % N].sum()
      total_spin[i][1] -= J[:, i // N, i % N].sum()
    else:
      total_spin[i][0] -= J[:, i // N, i % N].sum()
      total_spin[i][1] += J[:, i // N, i % N].sum()

  return total_spin




#score: {'data2D.txt': -0.014334722222222223}
#island_id: 0
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i // N + ((3 - 1) % 2 - 1)) % N
    total_spin = J[:, i // N, i % N].sum()
    if h[site_nbr][i % N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin + 1
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin - 1
  return priorities




#score: {'data2D.txt': 0.16224706790123458}
#island_id: 0
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i // N + ((3 - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      up_spin = J[:, i // N, i % N].sum()
      down_spin = J[:, (i // N), ((i % N)+N-1)%N].sum() + J[:, (i // N)-1, i % N].sum()
      priorities[i][0] += up_spin
      priorities[i][1] -= down_spin
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = 0
    for k in range(3):
      site = (i // N + ((k-1) % 2 - 1)) % N
      if h[site][i % N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 3
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004214660493827161}
#island_id: 3
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + nn_sum
    if J[1,i%N,i//N] > 0:
      h_site_left = h[(site_nbr+1)%N][i%N]
    else:
      h_site_left = -h[(site_nbr+1)%N][i%N]

    if J[2,i%N,i//N] > 0:
      h_site_up = h[site_nbr][(i+N-1)%N]
    else:
      h_site_up = -h[site_nbr][(i+N-1)%N]

    priorities[i][1] = -(2*h_site + nn_sum) + (2*h_site_left) + (2*h_site_up)
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + 4*nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities = np.zeros((N*N,2))
    for j in range(N**2):
      if total_spin[j][0] > 0:
        h_site = 1
      elif total_spin[j][0] < 0:
        h_site = -1
      else:
        h_site = 0
      priorities[j][0] = 2*h_site + nn_sum
      priorities[j][1] = -priorities[j][0]
    return(priorities)




#score: {'data2D.txt': -0.0005915123456790123}
#island_id: 2
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_spin = -1
    else:
      priority_spin = 1

    for k in range(4): # consider all neighbors, including the one on the other side of the grid
      if k == 0: # top neighbor
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1: # right neighbor
        site_nbr = (i % N + (i//N)) % N
      elif k == 2: # bottom neighbor
        site_nbr = (i % N + ((i//N+1)%N - 1)) % N
      else: # left neighbor
        site_nbr = (i % N + (i//N-1)) % N

      if J[k,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] += h_site
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.00144891975308642}
#island_id: 2
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = np.sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.04249706790123459}
#island_id: 0
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i//N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + nn_sum) / (abs(h_site + nn_sum) + 1e-9)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - nn_sum) / (abs(-h_site - nn_sum) + 1e-9)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005665123456790129}
#island_id: 0
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[k,i//N,i//N]*h[site_nbr][j] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -nn_sum
      priorities[i][1] = nn_sum + sum([J[k,i//N,i//N]*h[site_nbr][j] for j,k in zip(range(4),range(4))])
    else:
      priorities[i][0] = -priorities[i][1]
      priorities[i][1] = -nn_sum
      
  return(priorities)




#score: {'data2D.txt': -0.2932535493827155}
#island_id: 0
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = sum([J[k,i//N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (nn_sum + abs(h_site))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(nn_sum + abs(h_site))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04249706790123459}
#island_id: 0
#version_generated: 2
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i//N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + 4*nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001936882716049383}
#island_id: 3
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = 2*h[site_nbr][i%N] + 4*total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h[site_nbr][i%N] - 4*total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + 4*nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0028890432098765432}
#island_id: 3
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site *= -1
    priorities[i][0] = 2*h_site + 4*nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    magnetism = h[i//N][i%N]
    if magnetism > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.003522685185185185}
#island_id: 1
#version_generated: 2
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0, 1, 2]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.12178441358024707}
#island_id: 1
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][i%N] * J[k,i//N,i//N] for k in range(3)]) + h[site_nbr][i%N] * J[3,i//N,i//N]
      priorities[i][0] = -total_spin
      priorities[i][1] = 1 - total_spin
    else:
      total_spin = sum([h[k][i%N] * J[k,i//N,i//N] for k in range(3)]) + h[site_nbr][i%N] * J[3,i//N,i//N]
      priorities[i][0] = 1 - total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0005915123456790123}
#island_id: 2
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024186728395061722}
#island_id: 2
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_energy = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
    else:
      total_energy = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]*h[site_nbr][i%N]
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': 0.0017603395061728388}
#island_id: 2
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i//N]*h[site_nbr][i%N]
      neighbors_spin = sum([J[k,i//N,i//N]*int(h[(k+N-1)%N][i%N]>0) for k in range(3)])
      priorities[i][1] = -priorities[i][0] - neighbors_spin
    else:
      priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i//N]*h[site_nbr][i%N]
      neighbors_spin = sum([J[k,i//N,i//N]*int(h[(k+N-1)%N][i%N]<0) for k in range(3)])
      priorities[i][1] = -priorities[i][0] + neighbors_spin

  return(priorities)




#score: {'data2D.txt': -0.008318364197530863}
#island_id: 1
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((3)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Process nearest neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 7.7623456790123e-05}
#island_id: 1
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][k]
      else:
        total_spin -= h[site_nbr][k]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 3
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + h_site
    priorities[i][0] = total + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 3
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004096141975308643}
#island_id: 3
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[k][i%N] * J[k,i//N,i//N] for k in range(3)]) + h[site_nbr][i%N] * J[3,i//N,i//N]
    if total_spin > 0:
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] += -2*total_spin
  return(priorities)




#score: {'data2D.txt': -0.005110956790123457}
#island_id: 3
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    priorities[i][0] = h_site + sum(h[site_nbr_k][i%N] for k in range(3))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006936574074074073}
#island_id: 3
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    priorities[i][0] = np.sum(h[:site_nbr+1])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.00022793209876543225}
#island_id: 0
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.0783621913580247}
#island_id: 0
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_energy += 1
    else:
      total_energy -= 1
    for k in range(-1, 2):
      x = i+k*N
      y = (i%N)+k
      if 0 <= x < N**2 and 0 <= y < N:
        total_energy += J[abs(k), i//N, x%N] * h[x%N][y]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006677006172839507}
#island_id: 0
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += 2*total_spin

    # Add a correction term to avoid flipping spins unnecessarily
    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] -= np.abs(np.sum(J[:,i//N,i%N]))/2
        priorities[i][1] += np.abs(np.sum(J[:,i//N,i%N]))
      else:
        priorities[i][0] += np.abs(np.sum(J[:,i//N,i%N]))/2
        priorities[i][1] -= np.abs(np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': -0.07387021604938272}
#island_id: 0
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += 2*total_spin

  # Add a correction term to avoid flipping spins unnecessarily
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if np.sum(J[:,i//N,i%N]) > 0:
      priorities[i][0] -= np.abs(np.sum(J[:,i//N,i%N]))/2
      priorities[i][1] += np.abs(np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] += np.abs(np.sum(J[:,i//N,i%N]))/2
      priorities[i][1] -= np.abs(np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': -0.12032793209876542}
#island_id: 0
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N])*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin*(np.sum(J[:,i//N,i%N]) > 0)
      priorities[i][1] -= 2*total_spin
    else:
      priorities[i][0] -= total_spin*(np.sum(J[:,i//N,i%N]) < 0)
      priorities[i][1] += 2*total_spin

  # Add a correction term to avoid flipping spins unnecessarily
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if np.sum(J[:,i//N,i%N]) > 0:
      priorities[i][0] -= np.abs(np.sum(J[:,i//N,i%N]))/2
      priorities[i][1] += np.abs(np.sum(J[:,i//N,i%N]))
    else:
      priorities[i][0] += np.abs(np.sum(J[:,i//N,i%N]))/2
      priorities[i][1] -= np.abs(np.sum(J[:,i//N,i%N]))

  return(priorities)




#score: {'data2D.txt': 0.0014603395061728393}
#island_id: 0
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Add some new spin prioritization based on the site's interaction with its neighbors.
    for j in range(3):
      if J[j,i//N,(i%N)%N] > 0:
        priorities[i][0] += h[(i%N)%N][i//N]
      else:
        priorities[i][0] -= h[(i%N)%N][i//N]

    # Additional improvement: prioritize spins that agree with the majority of neighbors
    nn_spin = np.mean(nns)
    if nn_spin > 0:
      priorities[i][1] += 1
    elif nn_spin < 0:
      priorities[i][1] -= 1
    
    # Prioritize spins that align with their neighbors' majority spin
    neighbor_spins = [nns[0], nns[1]]
    if np.mean(neighbor_spins) > 0:
      priorities[i][0] += 1
    elif np.mean(neighbor_spins) < 0:
      priorities[i][0] -= 1
    
  return(priorities)




#score: {'data2D.txt': 0.0077023148148148155}
#island_id: 0
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Additional improvement: prioritize spins that agree with the majority of neighbors
    nn_spin = np.mean(nns)
    if nn_spin > 0:
      priorities[i][1] += 1
    elif nn_spin < 0:
      priorities[i][1] -= 1

    # New spin prioritization based on the site's interaction with its neighbors
    for j in range(3):
      if J[j,i//N,(i%N)%N] > 0:
        if h[(i%N)%N][i//N] > 0:
          priorities[i][1] += 1
        else:
          priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.0024010802469135806}
#island_id: 0
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns)
    
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = 2*h_site + total_energy
    
    # Additional improvement: prioritize spins that agree with the majority of neighbors and add more spin prioritization based on site's interaction with its neighbors.
    nn_spin = np.mean(nns)
    if nn_spin > 0:
      priorities[i][0] += h[(i%N)%N][i//N]
      priorities[i][1] -= h[(i%N)%N][i//N]
    elif nn_spin < 0:
      priorities[i][0] -= h[(i%N)%N][i//N]
      priorities[i][1] += h[(i%N)%N][i//N]

  return(priorities)




#score: {'data2D.txt': -0.006936574074074073}
#island_id: 3
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_opp = (site_nbr + 1) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if k == 2 and i % N != site_nbr_opp:
      site_nbr_opp_opp = (site_nbr_opp + 1) % N
      for l in range(3):
        site_nbr_k = (l+N-1)%N
        if J[l,site_nbr_opp,i//N] > 0:
          h_site += h[site_nbr_opp_opp][i%N]
        else:
          h_site -= h[site_nbr_opp_opp][i%N]

    priorities[i][0] = np.sum(h[:site_nbr+1])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.053275154320987665}
#island_id: 3
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(k+N-1)%N for k in range(3)]
    h_site += np.sum([h[s][i%N] if J[k,i%N,i//N]>0 else -h[s][i%N] for s,k in zip(site_nbrs,range(3))])

    priorities[i][0] = np.sum([h[j][i%N] for j in range(N)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010254475308641977}
#island_id: 3
#version_generated: 2
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    for k in range(3):
      site_nbr_k = (k + N-1) % N
      if J[k, i % N, i // N] > 0:
        h_site += h[site_nbr_k][i % N]
      else:
        h_site -= h[site_nbr_k][i % N]

    priorities[i][0] = np.sum(h[:site_nbr+1])
    priorities[i][1] = -priorities[i][0]
    
  for i in range(N2):
    if J[0, i % N, i // N] > 0:
      h_site = h[(i-1)%N][i%N]
    else:
      h_site = -h[(i-1)%N][i%N]

    for k in range(3):
      site_nbr_k = (k + N-1) % N
      if J[k, i % N, i // N] > 0:
        h_site += h[site_nbr_k][i % N]
      else:
        h_site -= h[site_nbr_k][i % N]

    priorities[i][0] = np.sum(h[:site_nbr+1])
    priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -0.0004797839506172836}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N] for k in range(3))
    total_energy = nn_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_energy
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(3))
    else:
      priorities[i][0] -= total_energy
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(3))
  return(priorities)




#score: {'data2D.txt': -0.027738117283950616}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N] for k in range(3))
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += nn_energy + abs(h[site_nbr][i%N])
      priorities[i][1] -= 2 - sum(J[k,i//N,(i%N+N)%N] for k in range(3)) - h[site_nbr][i%N]
    else:
      priorities[i][0] -= nn_energy - abs(h[site_nbr][i%N])
      priorities[i][1] += 2 + sum(J[k,i//N,(i%N+N)%N] for k in range(3)) + h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.0004797839506172836}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_energy = sum(J[k,i//N,(i%N+N)%N] * h[site_nbr][(i%N+N)%N] for k in range(3))
    total_energy = nn_energy + h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_energy - sum(J[k,i//N,(i%N+N)%N] for k in range(3))
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= total_energy + sum(J[k,i//N,(i%N+N)%N] for k in range(3))
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': 0.0035387345679012356}
#island_id: 0
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    site_nbrs = list(set(site_nbrs))
    h_neighbors = [h[site][i%N] for site in site_nbrs]
    total_spin = sum(h_neighbors)
    priority_total = np.array([0,0])
    if sum(h_neighbors) > 0:
      priority_total += np.sum([(1 if h[j][i%N] > 0 else -1) for j in range(N)], axis=0)
    else:
      priority_total -= np.sum([(1 if h[j][i%N] > 0 else -1) for j in range(N)], axis=0)
    priorities[i] = (priority_total[0],-priority_total[1])
  return(priorities)




#score: {'data2D.txt': 0.08258163580246924}
#island_id: 1
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.0010257716049382718}
#island_id: 1
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_total = h[site_nbr][i%N]
    else:
      h_total = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_total += h[site_nbr_nbr][i%N]
      else:
        h_total -= h[site_nbr_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i] = [h_total, -h_total]
    else:
      priorities[i] = [-h_total, h_total]

  return(priorities)




#score: {'data2D.txt': 0.2806344135802465}
#island_id: 2
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    if i//N > 0:
      total_energy += J[0,i//N,i//N]*h[(i-1)//N][i%N]
    if i//N < N-1:
      total_energy += J[2,(i+1)//N,i//N]*h[(i+1)//N][i%N]
    
    if i%N > 0:
      total_energy += J[1,(i//N)%N,i//N]*h[i//N][i%N-1]
    if i%N < N-1:
      total_energy += J[3,i//N,(i+1)%N]*h[i//N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
    
  return(priorities)




#score: {'data2D.txt': 0.2806344135802465}
#island_id: 2
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    if i//N > 0:
      total_energy += J[0,i//N,i//N]*h[(i-1)//N][i%N]
    if i//N < N-1:
      total_energy += J[2,(i+1)//N,i//N]*h[(i+1)//N][i%N]
    
    if i%N > 0:
      total_energy += J[1,(i//N)%N,i//N]*h[i//N][i%N-1]
    if i%N < N-1:
      total_energy += J[3,i//N,(i+1)%N]*h[i//N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
    
  return(priorities)




#score: {'data2D.txt': 0.06532947530864208}
#island_id: 2
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    if i//N > 0:
      total_energy += J[0,i//N,i//N]*h[(i-1)//N][i%N]
    if i//N < N-1:
      total_energy += J[2,(i+1)//N,i//N]*h[(i+1)//N][i%N]
    
    if i%N > 0:
      total_energy += J[1,(i//N)%N,i//N]*h[i//N][i%N-1]
    if i%N < N-1:
      total_energy += J[3,i//N,(i+1)%N]*h[i//N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
    
    for k in range(3):
     site = (i + ((k-1)%2 - 1)) % N
     if h[site][i%N] > 0:
       priorities[i][0] += J[k,i//N,i%N]
       priorities[i][1] -= 1
     else:
       priorities[i][0] -= J[k,i//N,i%N]
  
  return(priorities)




#score: {'data2D.txt': -0.2811026234567897}
#island_id: 2
#version_generated: 2
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    if i//N > 0:
      total_energy += J[0,i//N,i//N]*h[(i-1)//N][i%N]
    if i//N < N-1:
      total_energy += J[2,(i+1)//N,i//N]*h[(i+1)//N][i%N]
    
    if i%N > 0:
      total_energy += J[1,(i//N)%N,i//N]*h[i//N][i%N-1]
    if i%N < N-1:
      total_energy += J[3,i//N,(i+1)%N]*h[i//N][(i+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = -1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = 1
      
  return(priorities)




#score: {'data2D.txt': -0.34225601851851745}
#island_id: 3
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if h_site > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 2
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 2

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] -= priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.288872067901234}
#island_id: 3
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[k,N-1-i%N]%N for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[k,N-1-i%N]%N for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 3
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighborhood_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004518364197530865}
#island_id: 3
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + h_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - h_sum
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h_site - h_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + h_sum
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.04258842592592593}
#island_id: 2
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[i//N][i%N] * (h[i//N][i%N] if J[0, i//N, i//N] > 0 else -h[i//N][i%N])
    
    for j in range(3):
      if i//N != 0 and (i-1)%N == j:
        total_energy += h[(i-1)//N][j] * J[2,(i-1)//N,i//N]
      elif i//N == N-1 and (i-N)%N == j:
        total_energy += h[(i-N)//N][j] * J[3,(i-N)//N,i//N]
      elif i%N != 0 and (i-1)%N == j:
        total_energy += h[(i-1)//N][j] * J[1,(i-1)//N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
    
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[0, i, j]
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= J[0, i, j]
        priorities[i*N+j][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.009753858024691357}
#island_id: 2
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0]=-sum(J[0,k,i//N] for k in range(3) if (k+((k-1)%2-1))%N==site_nbr)
      priorities[i][1]=1
    else:
      priorities[i][0]=sum(J[0,k,i//N] for k in range(3) if (k+((k-1)%2-1))%N==site_nbr)
      priorities[i][1]=-1
  
  return(priorities)




#score: {'data2D.txt': 0.34246805555555454}
#island_id: 2
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = h[i//N][i%N] * (h[i//N][i%N] if J[0, i//N, i//N] > 0 else -h[i//N][i%N])
    
    for j in range(N):
      if i//N != 0 and j == (i-1)%N:
        total_energy += h[(i-1)//N][j] * J[2,(i-1)//N,i//N]
      elif i//N == N-1 and j == (i-N)%N:
        total_energy += h[(i-N)//N][j] * J[3,(i-N)//N,i//N]
      elif i%N != 0 and j == (i-1)%N:
        total_energy += h[(i-1)//N][j] * J[1,(i-1)//N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.3300146604938262}
#island_id: 2
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [(i+1)%N, (i+N-1)%N]:
     total_energy += J[0,i//N,k-N//N]*h[k][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.004333487654320988}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
    
    if J[3,i//N,i%N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_spin = h[i//N][i%N]

    if site_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': 0.1893251543209879}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # calculate the magnetism at this site
    for j in range(4):
      if J[j,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.009984413580246914}
#island_id: 2
#version_generated: 2
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
    
    for j in range(3):
      if i//N != 0 and (i-1)%N == j:
        total_spin += h[(i-1)//N][j] * J[2,(i-1)//N,i//N]
      elif i//N == N-1 and (i-N)%N == j:
        total_spin += h[(i-N)//N][j] * J[3,(i-N)//N,i//N]
      elif i%N != 0 and (i-1)%N == j:
        total_spin += h[(i-1)//N][j] * J[1,(i-1)//N,i//N]

    priorities[i][0] += -total_spin
    priorities[i][1] = 1 if total_spin > 0 else -1

  return(priorities)




#score: {'data2D.txt': 0.2701751543209873}
#island_id: 2
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if i // N > 0:
      total_spin += J[0, i//N, i//N] * h[(i//N-1)%N][i%N]
    if i % N > 0:
      total_spin += J[1, i//N, i//N] * h[i//N][(i+1)%N]
    if i // N < N - 1:
      total_spin += J[2, i//N, i//N] * h[(i//N+1)%N][i%N]
    if i % N < N - 1 and i // N > 0:
      total_spin += J[3, i//N, i//N] * h[(i//N-1)%N][(i+1)%N]

    site_energy = total_spin + h[i//N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.2730057098765428}
#island_id: 2
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[site_nbr][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.26976095679012313}
#island_id: 2
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.26976095679012313}
#island_id: 2
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.006309413580246915}
#island_id: 3
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[i//N][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[i//N][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.016133179012345678}
#island_id: 3
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = -sum(h[i//N]) + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum(h[i//N]) + h_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.2524856481481479}
#island_id: 2
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy / np.abs(site_energy)
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy / np.abs(site_energy)
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.05726682098765435}
#island_id: 2
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1
    
    # Add priority based on number of nearest neighbors with same spin
    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
  
  return(priorities)




#score: {'data2D.txt': 0.27647824074074046}
#island_id: 2
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    energy_diffs = [0, 0, 0, 0]
    if i // N > 0:
      energy_diffs[0] += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      energy_diffs[1] += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      energy_diffs[2] += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      energy_diffs[3] += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy + np.sum(energy_diffs)
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy - np.sum(energy_diffs)
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.26976095679012313}
#island_id: 2
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1
    
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0023072530864197537}
#island_id: 3
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  # Sort sites based on the total spin and re-order the priorities
  indices = np.argsort(total_spin)
  for i, idx in enumerate(indices):
    if h[idx//N][idx%N] > 0:
      priorities[idx][0], priorities[idx][1] = priorities[idx][1], -priorities[idx][0]
    else:
      priorities[idx][0], priorities[idx][1] = -priorities[idx][1], priorities[idx][0]

  return(priorities)




#score: {'data2D.txt': 0.0022146604938271604}
#island_id: 3
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N,N))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += sum([J[k,i][j]*h[site_nbr][k%N] for k in range(3)])

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i//N][i%N]
      priorities[i][1] = -total_spin[i//N][i%N]
    else:
      priorities[i][0] = -total_spin[i//N][i%N]
      priorities[i][1] = total_spin[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 3
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.3301353395061719}
#island_id: 2
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0, 1]:
      site = (i + ((k-1)%2 - 1)) % N
      total_energy += J[k,i//N,i//N]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.2902782407407402}
#island_id: 2
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in range(4): # include all neighbors
      if k == 0:
        site = (i % N)
      elif k == 1:
        site = ((i%N)+1) % N
      elif k == 2:
        site = (i//N + ((i%N-1)%2 - 1)) % N
      else:
        site = (i//N + ((i%N+1)%N - 1)) % N
        
      total_energy += J[k,i//N,i//N]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.27647824074074046}
#island_id: 2
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    energy_diffs = [0, 0, 0, 0]
    if i // N > 0:
      energy_diffs[0] += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      energy_diffs[1] += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      energy_diffs[2] += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      energy_diffs[3] += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy + np.sum(energy_diffs)
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy - np.sum(energy_diffs)
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.07553101851851857}
#island_id: 2
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    energy_diffs = [0, 0, 0, 0]
    if i // N > 0:
      energy_diffs[0] += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      energy_diffs[1] += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      energy_diffs[2] += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      energy_diffs[3] += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if site_energy > 0:
      priorities[i][0] = -site_energy + np.sum(energy_diffs)
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy - np.sum(energy_diffs)
      priorities[i][1] = -1
  
  # Use a more efficient way to calculate the priority for each spin configuration
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  
  return(priorities)




#score: {'data2D.txt': 0.13850324074074094}
#island_id: 2
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    energy_diffs = [0, 0, 0, 0]
    for j in range(4):
      if i // N > 0 and (j == 0 or i % N == 0):
        energy_diffs[0] += J[j, i//N, i//N] * (h[(i//N-1)%N][i%N])
      if i % N > 0:
        energy_diffs[1] += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
      if i // N < N - 1 and i % N == N-1:
        energy_diffs[2] += J[2, i//N, i//N] * (h[(i//N+1)%N][0])
      if i % N > 0 and i // N > 0:
        energy_diffs[3] += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    site_energy += np.sum(energy_diffs)
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.27647824074074046}
#island_id: 2
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    energy_diffs = [0, 0, 0, 0]
    if i // N > 0:
      energy_diffs[0] += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      energy_diffs[1] += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      energy_diffs[2] += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      energy_diffs[3] += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if site_energy > 0:
      priorities[i][0] = -site_energy + np.sum(energy_diffs)
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy - np.sum(energy_diffs)
      priorities[i][1] = -1
    
  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 3
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_bias
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0001470679012345684}
#island_id: 3
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i//N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009921296296296293}
#island_id: 3
#version_generated: 2
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[0,i%N,j]*h[j][i%N] for j in range(N)])
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      total_spin = sum([-J[0,i%N,j]*h[j][i%N] for j in range(N)])
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  return(priorities)




#score: {'data2D.txt': 0.0035214506172839507}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    if J[2,i//N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0023884259259259267}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += J[3,i%N,i//N]
      priorities[i][1] -= J[3,i%N,i//N]
    else:
      priorities[i][0] -= J[3,i%N,i//N]
      priorities[i][1] += J[3,i%N,i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.11584243827160508}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr2][j]
      else:
        total_spin -= h[site_nbr2][j]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0013800925925925927}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sites = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nn_sites.append(h[nn_site][i%N])
    priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*n for k,n in zip(range(4),[h[site_nbr][i%N]] + nn_sites)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00280324074074074}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [J[k,i%N,(i+N)%N] for k in range(3)]
    priorities[i][0] = h_site + sum(nns)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  return(priorities)




#score: {'data2D.txt': 0.11231373456790136}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N//2] > 0:
      priorities[i][0] += sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] -= sum(h[site_nbr][j] for j in range(N))
    else:
      priorities[i][0] -= sum(h[site_nbr][j] for j in range(N))
      priorities[i][1] += sum(h[site_nbr][j] for j in range(N))
  return(priorities)




#score: {'data2D.txt': 0.057431327160493865}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,(i+1)%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[3,i//N,(i+N)%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.00234212962962963}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])

    if sum(nns) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03796929012345681}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(h[nn_site][i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)])
      priorities[i][1] = -priorities[i][0]

  # Additional optimization
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*n for k,n in zip(range(4),h[site_nbr])])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*n for k,n in zip(range(4),h[site_nbr])])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.32179614197530776}
#island_id: 2
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0, 1]:
      site = (i + ((k-1)%2 - 1)) % N
      if k == 0:
        if i%N == 0 or h[i//N][i%N] < 0:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
      elif k == 1 and i%N != N-1:
        if h[i//N][i%N] < 0:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.05656682098765434}
#island_id: 2
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0, 1]:
      site = (i + ((k-1)%2 - 1)) % N
      total_energy += J[k,i//N,i//N]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = -sum(priorities[i//N*N:(i//N+1)*N].flatten())
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = sum(priorities[i//N*N:(i//N+1)*N].flatten())
  
  return(priorities)




#score: {'data2D.txt': -0.008717746913580246}
#island_id: 2
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      if k == h[site_nbr][i%N]:
        total_energy += J[k,i//N,i//N]
      else:
        total_energy -= J[1-k,i//N,i//N]
    
    priorities[i][0] = -total_energy
    priorities[i][1] = 1
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.006161265432098764}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * h[i//N][i%N]
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.030639969135802466}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.030639969135802466}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005132561728395061}
#island_id: 0
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021776234567901236}
#island_id: 3
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*h[site_nbr][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*h[site_nbr][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006513734567901235}
#island_id: 3
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_sum = sum([J[k,i//N%N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + h_sum
    if i//N % 2 == 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010717592592592588}
#island_id: 2
#version_generated: 2
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    spin = np.sign(h[i//N][i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = -spin
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = spin

  return(priorities)




#score: {'data2D.txt': 0.2272195987654323}
#island_id: 2
#version_generated: 2
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    for k in [(0, 1), (1, 0)]:
      if i // N > k[0]:
        site_energy += J[k[0], i//N, i//N] * (h[(i//N-k[0]-1)%N][i%N])
      if i % N > k[1]:
        site_energy += J[k[1], i//N, i//N] * (h[i//N][(i+k[1]-1)%N])
      if i // N < N - 1:
        site_energy += J[k[0], (i//N+1)%N, i//N] * (h[(i//N-k[0]-1)%N][i%N])
      if i % N < N - 1 and i // N > k[0]:
        site_energy += J[k[1], i//N, (i+k[1]-1)%N] * (h[i//N][(i+k[1]-1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.26976095679012313}
#island_id: 2
#version_generated: 2
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

    # Add more interactions with diagonally neighboring sites
    if i % N < N // 2 and (i + N) % N > N // 2:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    if i % N < N // 2 and i // N < N // 2:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > N // 2 and (i - N) % N < N // 2:
      site_energy += J[3, i//N, i//N] * (h[(i//N+1)%N][(i-1)%N])
    if i % N > N // 2 and i // N > N // 2:
      site_energy += J[0, i//N, i//N] * (h[(i//N+1)%N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.0012513888888888887}
#island_id: 1
#version_generated: 2
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    total_spin1 = h[site_nbr1][i%N]
    total_spin2 = h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin1 += 1
        total_spin2 -= 1
      else:
        total_spin1 -= 1
        total_spin2 += 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin1, -total_spin2]
    else:
      priorities[i] = [-total_spin1, total_spin2]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.16593101851851874}
#island_id: 1
#version_generated: 2
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -total_spin - h[site_nbr][i%N]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = total_spin + h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[i//N][i%N] * (h[i//N][i%N] if J[0, i//N, i//N] > 0 else -h[i//N][i%N])

    for j in range(3):
      if i//N != 0 and (i-1)%N == j:
        site_energy += h[(i-1)//N][j] * J[2,(i-1)//N,i//N]
      elif i//N == N-1 and (i-N)%N == j:
        site_energy += h[(i-N)//N][j] * J[3,(i-N)//N,i//N]
      elif i%N != 0 and (i-1)%N == j:
        site_energy += h[(i-1)//N][j] * J[1,(i-1)//N,i//N]

    # Add a bias term to the priority based on the current spin
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy + 2
      priorities[i][1] = -1
    else:
      priorities[i][0] = site_energy - 2
      priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.1658615740740743}
#island_id: 1
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    total_spin += h[site_nbr][i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  for i in range(N**2):
    site_nbr = (i % N + ((1-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.004464660493827161}
#island_id: 3
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin + np.sum(J[:, i//N, i%N])
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin - np.sum(J[:, i//N, i%N])

  # Sort sites based on the total spin and re-order the priorities
  indices = np.argsort(total_spin)
  for i, idx in enumerate(indices):
    if h[idx//N][idx%N] > 0:
      priorities[idx][0], priorities[idx][1] = priorities[idx][1], -priorities[idx][0]
    else:
      priorities[idx][0], priorities[idx][1] = -priorities[idx][1], priorities[idx][0]

  return(priorities)




#score: {'data2D.txt': 0.0009365740740740744}
#island_id: 3
#version_generated: 2
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
    else:
      priorities[i][0] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = neighbors_spin
      priorities[i][1] = -neighbors_spin
    else:
      neighbors_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -neighbors_spin
      priorities[i][1] = neighbors_spin
  
  # Sort sites based on the total spin and re-order the priorities
  indices = np.argsort(priorities[:, 0])
  for i, idx in enumerate(indices):
    if h[idx//N][idx%N] > 0:
      priorities[idx][0], priorities[idx][1] = priorities[idx][1], -priorities[idx][0]
    else:
      priorities[idx][0], priorities[idx][1] = -priorities[idx][1], priorities[idx][0]

  return(priorities)




#score: {'data2D.txt': -0.000545216049382716}
#island_id: 0
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = sum_up - sum_down
      priorities[i][1] = -priorities[i][0]
    else:
      sum_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = sum_up - sum_down
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.000545216049382716}
#island_id: 0
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      sum_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010607870370370372}
#island_id: 0
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = 0
    sum_down = 0
    for j in range(4):
      if h[site_nbr][j] > 0:
        sum_up += J[j,i//N,i%N]
        sum_down -= J[j,(i+1)%N,i//N]
      else:
        sum_up -= J[j,i//N,i%N]
        sum_down += J[j,(i+1)%N,i//N]
    priorities[i][0] = sum_up - sum_down
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.32179614197530776}
#island_id: 2
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      site = (i + ((k-1)%2 - 1)) % N
      if k == 0:
        if i%N == 0 or h[i//N][i%N] < 0:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
      elif k == 1 and i%N != N-1:
        if h[i//N][i%N] < 0:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.32100354938271525}
#island_id: 2
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    if h[i//N][i%N] > 0:
      energy_plus = 0
      energy_minus = 0
      for k in [0,1]:
        site = (i + ((k-1)%2 - 1)) % N
        if i%N == 0 or h[i//N][i%N] < 0:
          energy_plus += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          energy_minus -= J[k,i//N,i//N]*h[site_nbr][i%N]
      total_energy = -energy_plus + energy_minus
    elif h[i//N][i%N] < 0:
      energy_plus = 0
      energy_minus = 0
      for k in [0,1]:
        site = (i + ((k-1)%2 - 1)) % N
        if i%N == 0 or h[i//N][i%N] > 0:
          energy_plus -= J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          energy_minus += J[k,i//N,i//N]*h[site_nbr][i%N]
      total_energy = -energy_plus + energy_minus
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.009621759259259259}
#island_id: 2
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    if h[site_nbr][i%N] > 0:
      total_energy += J[0,i//N,i//N]*h[site_nbr][i%N]
      total_energy -= J[1,i//N,i//N]*h[i//N][i%N]
    else:
      total_energy -= J[0,i//N,i//N]*h[site_nbr][i%N]
      total_energy += J[1,i//N,i//N]*h[i//N][i%N]
    
    priorities[i][0] = -total_energy
    priorities[i][1] = 1 if h[site_nbr][i%N] > 0 else -1
 
  return(priorities)




#score: {'data2D.txt': -0.0014770061728395067}
#island_id: 2
#version_generated: 2
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0, 1]:
      site = (i + ((k-1)%2 - 1)) % N
      
      if h[i//N][site%N] > 0:
        if k == 0:
          total_energy -= J[k,i//N,site//N]
        elif k == 1 and site%N != N-1:
          total_energy += J[k,i//N,site//N]
      else:
        if k == 0:
          total_energy += J[k,i//N,site//N]
        elif k == 1 and site%N != N-1:
          total_energy -= J[k,i//N,site//N]
    
    priorities[i][0] = -total_energy
    priorities[i][1] = 1
    
  return(priorities)




#score: {'data2D.txt': -0.000277006172839506}
#island_id: 3
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sum = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(4),[0,1,2,3])])
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = -np.sum(h[i//N]) - h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum(h[i//N]) + h_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0019461419753086405}
#island_id: 3
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      if sum([J[k,i//N,i%N]*int(h[site_nbr][i%N]) for k, site_nbr in enumerate(site_nbrs)]) > 0:
        priorities[i][0] = total_spin
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -total_spin
        priorities[i][1] = -priorities[i][0]
    else:
      if sum([J[k,i//N,i%N]*int(h[site_nbr][i%N]) for k, site_nbr in enumerate(site_nbrs)]) > 0:
        priorities[i][0] = -total_spin
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = total_spin
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -9.614197530864115e-05}
#island_id: 0
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = 0
    sum_down = 0
    for k in range(4):
      if k == 0 and i%N > 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][(k+(i-1)-N)//N]
      elif k == 1 and i%N < N-1:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
      elif k == 2 and (i//N - 1) >= 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][((k+i-N)//N)]
      else:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (sum_up + sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006507716049382719}
#island_id: 0
#version_generated: 2
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_up = np.sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(4)])
      sum_down = np.sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      sum_up = -np.sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(4)])
      sum_down = -np.sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005541666666666662}
#island_id: 0
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbors = [(k, (k+i-N)//N) for k in range(4)]
      down_neighbors = [(k, (k+(i+1)-N)//N) for k in range(2)]
      neighbors = up_neighbors + down_neighbors
      total_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in neighbors])
      total_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbors = [(k, (k+i-N)//N) for k in range(4)]
      down_neighbors = [(k, (k+(i+1)-N)//N) for k in range(2)]
      neighbors = up_neighbors + down_neighbors
      total_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in neighbors])
      total_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.11796280864197542}
#island_id: 1
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    
    total_spin = h[site_nbr1][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
      
    if J[1,i%N,i//N] > 0:
      total_spin += h[site_nbr2][i%N]
      priorities[i] = [total_spin, -total_spin]
    elif J[3,i%N,i//N] > 0:
      total_spin -= h[site_nbr2][i%N]
      priorities[i] = [-total_spin, total_spin]
    else:
      if h[i//N][i%N] > 0:
        priorities[i] = [total_spin+1, -(total_spin+1)]
      else:
        priorities[i] = [(total_spin-1), -((total_spin-1))]
        
  return(priorities)




#score: {'data2D.txt': 0.11504675925925939}
#island_id: 1
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)*N + (i%N) + ((site_nbr1-N//2-1)%N)) % N
    
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[site_nbr1][k]
        priorities[i][1] -= h[site_nbr1][k]
      else:
        priorities[i][0] -= h[site_nbr1][k]
        priorities[i][1] += h[site_nbr1][k]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [priorities[i][0], -priorities[i][1]]
    else:
      priorities[i] = [-priorities[i][0], priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.0006856481481481483}
#island_id: 1
#version_generated: 2
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((k-1)%2 - 1)) % N for k in [0,1,3]]
    site_spin = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k,site_nbr in zip(range(4),site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [site_spin, -site_spin]
    else:
      priorities[i] = [-site_spin, site_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.1520399691358027}
#island_id: 2
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      site = (i + ((k-1)%2 - 1)) % N
      
      if h[i//N][site] * J[k,i//N,i//N] > 0:
        total_energy -= J[k,i//N,i//N]
      else:
        total_energy += J[k,i//N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.30515015432098697}
#island_id: 2
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [-1,0,1]:
      if k == 0:
        total_energy += h[site_nbr][i%N]
      else:
        site = (i + k) % N
        if site != i//N or k == -1 and i%N == 0 or k == 1 and i%N == N-1:
          total_energy += J[k,i//N,site_nbr]*h[site][k]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.32993348765432007}
#island_id: 2
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      if k == 0:
        site = (i + ((k-1)%2 - 1)) % N
      elif k == 1 and i%N != N-1:
        site = (i + ((k-1)%2 - 1)) % N
      else:
        site = (i + ((k-1)%2 - 1)) % N
        
      if h[i//N][site%N] > 0:
        total_energy += J[k,i//N,site//N]*h[site_nbr][site%N]
      else:
        total_energy -= J[k,i//N,site//N]*h[site_nbr][site%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': 0.32146929012345593}
#island_id: 2
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i//N] > 0:
        if h[site_nbr][i%N] < 0 or i%N == 0 or i%N == N-1:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
      else:
        if h[site_nbr][i%N] < 0 or i%N == 0 or i%N == N-1:
          total_energy += J[k,i//N,i//N]*h[site_nbr][i%N]
        else:
          total_energy -= J[k,i//N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1
 
  return(priorities)




#score: {'data2D.txt': -0.006688734567901236}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in [0,1]:
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      if J[2,i//N,k] > 0:
        total_spin += h[i//N,k]
      else:
        total_spin -= h[i//N,k]
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.16525632716049407}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.1613686728395064}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    site_nbr = (i % N + ((N-1)%2 - 1)) % N
    if J[3,i%N,N-1] > 0:
      priorities[i][0] += h[site_nbr][N-1]
      priorities[i][1] -= h[site_nbr][N-1]
    else:
      priorities[i][0] -= h[site_nbr][N-1]
      priorities[i][1] += h[site_nbr][N-1]
    
  return(priorities)




#score: {'data2D.txt': -0.0004557098765432103}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.011097993827160493}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007174382716049388}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*neighborhood_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighborhood_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010665123456790118}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighborhood_sum
    if i % (N*N) < N:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i-1][1]
  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 3
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighborhood_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighborhood_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if j == 3 or i%N == site_nbr:
        continue
      nns.append(h[nn_site][i%N])

    J_up = np.sum([J[k,i//N,i%N]*n for k,n in zip(range(4),nns)]) + J[1,i//N,i//N]
    J_down = -np.sum([J[k,i//N,i%N]*n for k,n in zip(range(4),nns)]) - J[1,i//N,i//N]

    if h[i//N][i%N] > 0:
      spin_energy_up = J_up
      spin_energy_down = J_down
    else:
      spin_energy_up = -J_up
      spin_energy_down = -J_down

    priorities[i][0] = spin_energy_up * h_site
    priorities[i][1] = spin_energy_down * (-h_site)
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sum([h[site_nbr][j] for j in range(N)]) / N
    
    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(np.sum([J[k,nn_site,j]*1 for k in range(4)]) / 4)
    
    J_up = np.sum([J[k,i//N,j]*n for k,n in zip(range(4),[h_site]+nns)]) + J[1,i//N,i%N]
    J_down = -np.sum([J[k,i//N,j]*n for k,n in zip(range(4),[h_site]+nns)]) - J[1,i//N,i%N]

    if h[i//N][i%N] > 0:
      spin_energy_up = J_up
      spin_energy_down = J_down
    else:
      spin_energy_up = -J_up
      spin_energy_down = -J_down

    priorities[i][0] = (spin_energy_up + spin_energy_down) * h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = [h[(k+N*i//N+((k-1)%2 - 1)) % N, i%N] for k in range(4)]
    J_up = np.sum([J[k,i//N,i%N]*n for k,n in zip(range(4),nns)]) + J[1,i//N,i//N]
    J_down = -np.sum([J[k,i//N,i%N]*n for k,n in zip(range(4),nns)]) - J[1,i//N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J_up
      priorities[i][1] = -J_down
    else:
      priorities[i][0] = J_down
      priorities[i][1] = -J_up

  return(priorities)




#score: {'data2D.txt': 0.19110231481481507}
#island_id: 2
#version_generated: 2
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      if k == 0:
        site = (i + ((k-1)%2 - 1)) % N
      elif k == 1 and i%N != N-1:
        site = (i + ((k-1)%2 - 1)) % N
      else:
        site = (i + ((k-1)%2 - 1)) % N
      
      if h[i//N][site%N] > 0:
        total_energy += J[k,i//N,site//N]
      else:
        total_energy -= J[k,i//N,site//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.027645524691358028}
#island_id: 2
#version_generated: 2
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_energy = 0
    for k in [0,1]:
      if k == 0:
        site = (i + ((k-1)%2 - 1)) % N
      elif k == 1 and i%N != N-1:
        site = (i + ((k-1)%2 - 1)) % N
      else:
        site = (i + ((k-1)%2 - 1)) % N
      
      if h[i//N][site%N] > 0:
        total_energy -= J[k,i//N,site//N]
      else:
        total_energy += J[k,i//N,site//N]
    
    priorities[i][0] = -total_energy
    priorities[i][1] = 1 if np.sum(J[:,i//N,:]) > 0 else -1
  
  return(priorities)




#score: {'data2D.txt': 0.2730057098765428}
#island_id: 2
#version_generated: 2
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[site_nbr][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0:
      site_energy += J[1, i//N, i//N] * (h[i//N][(i+1)%N])
    if i // N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N+1)%N][i%N])
    if i % N < N - 1 and i // N > 0:
      site_energy += J[3, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])

    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priorities[i][0] = total_spin[i][0]
    if h[i//N][i%N] > 0:
      priorities[i][1] = 1 - total_spin[i][1]
    else:
      priorities[i][1] = 1 + total_spin[i][1]

  return(priorities)




#score: {'data2D.txt': 0.28825879629629575}
#island_id: 2
#version_generated: 2
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[site_nbr][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0 and i // N < N - 1:
      site_energy += J[3, i//N, i//N] * (h[(i//N+1)%N][(i+1)%N])
    if i % N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': -0.0002128086419753082}
#island_id: 3
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
    else:
      priorities[i][0] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
  
  # Add a small term to the priority function to encourage spin flips
  priorities += 1e-6 * np.random.uniform(-1, 1, (N*N,2))
  
  return(priorities)




#score: {'data2D.txt': 0.0009365740740740744}
#island_id: 3
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
    else:
      priorities[i][0] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
  return(priorities)




#score: {'data2D.txt': 0.04093256172839506}
#island_id: 3
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,(i+1)%N]*h[(site_nbr1+N-1)%N][(i+1)%N] + J[1,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] -= 2*J[0,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] + J[1,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
    else:
      priorities[i][0] -= J[0,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] + J[1,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] += 2*J[0,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] - J[1,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
  
  return(priorities)




#score: {'data2D.txt': 0.0009365740740740744}
#island_id: 3
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
    else:
      priorities[i][0] -= sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
      priorities[i][1] += sum([J[k,i//N,(i+1)%N]*h[site_nbr1][(i+1)%N] for k in range(3)]) + J[0,i//N,(i+2)%N]*h[(site_nbr1+N-1)%N][(i+2)%N]
  
  return(priorities)




#score: {'data2D.txt': 0.27329984567901194}
#island_id: 2
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate interaction energy with neighbors
    left_energy = 0
    right_energy = 0
    top_energy = 0
    bottom_energy = 0
    
    if i % N > 0:
      left_energy = J[3, i//N, i//N] * (h[(i//N)%N][(i-1)%N])
    if i % N < N - 1:
      right_energy = J[2, i//N, i//N] * (h[(i//N)%N][(i+1)%N])
    if i // N > 0:
      top_energy = J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i // N < N - 1:
      bottom_energy = J[1, i//N, i//N] * (h[(i//N+1)%N][i%N])
    
    # Calculate site energy and adjust based on magnetism
    site_energy = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy - left_energy - right_energy + top_energy + bottom_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy + left_energy + right_energy - top_energy - bottom_energy
      priorities[i][1] = -1
  
  return(priorities)




#score: {'data2D.txt': -0.037166820987654316}
#island_id: 2
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[site_nbr][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0 and i // N < N - 1:
      site_energy += J[3, i//N, i//N] * (h[(i//N+1)%N][(i+1)%N])
    if i % N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = 1
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -1

  # Sort the energies to get a priority list for each site
  sorted_priors = np.zeros((N*N, 2))
  for i in range(N**2):
    if priorities[i][0] > priorities[i][1]:
      sorted_priors[i] = [-priorities[i][0], -1]
    else:
      sorted_priors[i] = [priorities[i][1], 1]

  return(sorted_priors)




#score: {'data2D.txt': -0.3424804012345669}
#island_id: 2
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_energy = h[site_nbr][i%N]
    
    # Add interactions with neighboring sites
    if i // N > 0:
      site_energy += J[0, i//N, i//N] * (h[(i//N-1)%N][i%N])
    if i % N > 0 and i // N < N - 1:
      site_energy += J[3, i//N, i//N] * (h[(i//N+1)%N][(i+1)%N])
    if i % N < N - 1:
      site_energy += J[2, i//N, i//N] * (h[(i//N-1)%N][(i+1)%N])
    
    # Adjust energy based on magnetism
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] -= 2
    else:
      priorities[i][0] = site_energy
      priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': -0.0019458333333333344}
#island_id: 3
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      total_spin += sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0005711419753086417}
#island_id: 0
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    priorities[i][0] = total_energy
    if J[0,i//N,site_nbr] > 0:
      priorities[i][1] -= 1
    elif J[0,i//N,site_nbr] < 0:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.001649228395061728}
#island_id: 0
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy_plus = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    energy_minus = sum(-J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    priorities[i][0] = energy_plus + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4))
    site_energy = total_energy * h[site_nbr][i%N]
    priorities[i][0] = site_energy
    if h[site_nbr][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_total = 1
    else:
      h_total = -1
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      
      if J[k,i%N,i//N] > 0:
        h_total += J[k,i%N,i//N]
      else:
        h_total -= J[k,i%N,i//N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      
      if J[3,i%N,j] > 0:
        h_total += J[3,i%N,j]
      else:
        h_total -= J[3,i%N,j]
    
    priorities[i][0] = h_total
    priorities[i][1] = -h_total
    
  return(priorities)




#score: {'data2D.txt': 0.001407253086419753}
#island_id: 1
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += h[site_nbr][i%N]*J[k,i//N,i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    left_site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    right_site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin += h[left_site_nbr][i%N]
      total_spin -= h[right_site_nbr][i%N]
    else:
      total_spin -= h[left_site_nbr][i%N]
      total_spin += h[right_site_nbr][i%N]
    
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.0012183641975308638}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr][i%N]
    else:
      total_spin = -h[site_nbr][i%N]
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[1,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[2,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if J[3,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    total_spin = 0
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    priorities[i] += [total_spin, -total_spin]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [priorities[i][0], -priorities[i][1]]
    else:
      priorities[i] = [-priorities[i][0], priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': -0.08756157407407408}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr4 = (i // N + ((i%N+1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + J[0,i//N,i%N] * (h[site_nbr2][i%N]-h[i//N][i%N]) + J[1,i//N,i%N] * (h[site_nbr3][i%N]-h[i//N][i%N]) + J[2,i//N,i%N] * (h[site_nbr4][i%N]-h[i//N][i%N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate total spin considering nearest neighbors' interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on magnetism and nearest neighbor's spins
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16572947530864224}
#island_id: 1
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  for j in range(N):
    site_nbr = (j % N + ((2-1)%2 - 1)) % N
    if J[2,j,0] > 0:
      priorities[j*N:(j+1)*N,0] += h[site_nbr][j]
      priorities[j*N:(j+1)*N,1] -= h[site_nbr][j]
    else:
      priorities[j*N:(j+1)*N,0] -= h[site_nbr][j]
      priorities[j*N:(j+1)*N,1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.1155498456790125}
#island_id: 1
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  
  return(priorities)




#score: {'data2D.txt': 0.05844490740740748}
#island_id: 1
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    priorities[i] = [total_spin + magnetism, -total_spin + magnetism]
  
  return(priorities)




#score: {'data2D.txt': 0.0008054012345679007}
#island_id: 2
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      if (k+N-1)%N == i//N and abs((k+N-1)%N-i//N) <= 1:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i % (N*N) < N:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)
    elif i % (N*N) >= N*N - N:
      left = int((i % N*N) - N)
      right = int((i % N*N))
    else:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)

    if i//N < N:
      top = int(i + N*N)
    elif i//N >= N:
      top = int(i - N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009353858024691358}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr1+(j-1)%2-N)%N] if J[j,i//N,(site_nbr1+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr1+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy += sum(J[j,i//N,(site_nbr2+(j-1)%2-N)%N] if J[j,i//N,(site_nbr2+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr2+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004933796296296297}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    energy_diff = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = energy_diff
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006018981481481481}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004933796296296297}
#island_id: 0
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[j,i//N,(site_nbr+(j-1)%2-N)%N] if J[j,i//N,(site_nbr+(j-1)%2-N)%N]>0 else -J[j,i//N,(site_nbr+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr][i%N]
    energy_diff = total_energy
    for k in [(i-1)%N if i!=0 else N-1,(i+1)%N if i!=(N*N)-1 else 0]:
      site_nbr_k = (k % N + ((k//N-1)%2 - 1)) % N
      energy_diff += sum(J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] if J[j,k//N,(site_nbr_k+(j-1)%2-N)%N]>0 else -J[j,k//N,(site_nbr_k+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr_k][k%N]
    priorities[i][0] = energy_diff
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009442901234567897}
#island_id: 3
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**int(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**int(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 2
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018054012345679014}
#island_id: 2
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = h_site
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1527976851851854}
#island_id: 2
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
    right_spin = J[1,i%N,i//N]*h[(i+1)%N][i%N] if i % N != 0 else 0
    top_spin = J[2,i%N,i//N]*h[i//N][(i-1)%N] if i // N > 0 else 0
    bottom_spin = J[3,i%N,i//N]*h[i//N][(i+1)%N] if (i+1)//N < N else 0

    h_site = sum([left_spin, right_spin, top_spin, bottom_spin])

    if i % (N*N) < N:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)
    elif i % (N*N) >= N*N - N:
      left = int((i % N*N) - N)
      right = int((i % N*N))
    else:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)

    if i//N < N:
      top = int(i + N*N)
    elif i//N >= N:
      top = int(i - N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.004843672839506174}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    if h[i%N][i//N] > 0:
      priorities[i][1] += 1
    else:
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.006018981481481481}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.007172685185185186}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    if h[i%N][i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020554012345679034}
#island_id: 3
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014004629629629632}
#island_id: 3
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -priorities[i][0]

  # Sort the sites based on their priority and return it
  return(priorities[priorities[:,0].argsort()])




#score: {'data2D.txt': 0.006137500000000001}
#island_id: 0
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i//N,(site_nbr + ((k-1)%2 - 1)) % N] for k in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002350462962962962}
#island_id: 0
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[j,(site_nbr + ((j-1)%2 - 1)) % N,i//N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
    if i % (N*N) == 0:
      temp = np.copy(priorities)
      priorities.fill(0)
      for j in range(N**2):
        site_nbr = (j % N + ((j//N-1)%2 - 1)) % N
        total_energy = sum([J[0,j%N,j//N] if k == 0 else J[k,(site_nbr + ((k-1)%2 - 1)) % N,j//N] for k in range(4)])
        priorities[j][0] += h[site_nbr][j%N] + total_energy
        priorities[j][1] = -priorities[j][0]
  return(priorities)




#score: {'data2D.txt': 0.009256635802469135}
#island_id: 0
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[1,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    total_magnetism = h[site_nbr][i%N]
    priorities[i][0] = total_energy + total_magnetism
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.07629922839506173}
#island_id: 0
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[1,i//N,(site_nbr + ((j-1)%2 - 1)) % N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = np.exp(-(total_energy + h[site_nbr][i%N]))
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    priorities[i] = [total_spin, -total_spin]

  return(priorities)




#score: {'data2D.txt': -0.0020554012345679034}
#island_id: 3
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004945987654320991}
#island_id: 3
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08581929012345686}
#island_id: 3
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.17994459876543234}
#island_id: 1
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_even = (i % N + ((i//N)%2 - 1)) % N
    site_nbr_odd = (i % N + (((i//N)-1)%2 - 1)) % N
    
    for j in range(N):
      if i % N == 0:
        site_nbr = site_nbr_even
      else:
        site_nbr = (i % N + ((j-1)%2 - 1)) % N
      
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.001312500000000001}
#island_id: 1
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((2)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.07765077160493832}
#island_id: 1
#version_generated: 2
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': -0.001272685185185185}
#island_id: 1
#version_generated: 2
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N) % N
    
    total_spin = h[site_nbr_row][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr_row = (j % N + ((i-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr_row][j]
        priorities[i][1] -= h[site_nbr_row][j]
      else:
        priorities[i][0] -= h[site_nbr_row][j]
        priorities[i][1] += h[site_nbr_row][j]
    
    for k in range(3):
      site_nbr_col = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr_col][i//N]
        priorities[i][1] -= h[site_nbr_col][i//N]
      else:
        priorities[i][0] -= h[site_nbr_col][i//N]
        priorities[i][1] += h[site_nbr_col][i//N]
    
    return(priorities)




#score: {'data2D.txt': 0.0011495370370370368}
#island_id: 2
#version_generated: 2
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.16558811728395084}
#island_id: 1
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.0013794753086419757}
#island_id: 1
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004779320987654324}
#island_id: 3
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001161265432098766}
#island_id: 3
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])

  return(priorities)




#score: {'data2D.txt': 0.024456635802469137}
#island_id: 0
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1417865740740741}
#island_id: 0
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 2*h[site_nbr][i%N] - 1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (h[i//N][i%N] - h_site)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08730416666666675}
#island_id: 0
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (h[i//N][i%N] + h_site)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06976466049382715}
#island_id: 3
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for d, neighbor in enumerate([(i+1)%N, (i-1)%N], start=-1):
        total_spin += J[d][i//N,i%N]*h[neighbor][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for d, neighbor in enumerate([(i+1)%N, (i-1)%N], start=-1):
        total_spin -= J[d][i//N,i%N]*h[neighbor][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1509516975308644}
#island_id: 3
#version_generated: 2
#generate time10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = np.log(np.exp(total_spin) + 1)
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + h[site_nbr][i%N]) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin + h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0019584876543209877}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin=h[site_nbr][i%N]
    for j in range(3):
      if h[(j+N-1)%N][i%N]>0:
        total_spin+=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      else:
        total_spin-=J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N]>0:
      priorities[i][0]=-total_spin
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=total_spin 
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08581929012345686}
#island_id: 3
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.030639969135802466}
#island_id: 0
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.030639969135802466}
#island_id: 0
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns)
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03180324074074074}
#island_id: 0
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_energy=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == (i//N+1)%N or i%N==0: 
        nn_site = (site_nbr + 1) % N  
      elif i//N==(i//N+1)%N and i%N==N-1:
        nn_site = (site_nbr - 1) % N
      nns.append(J[j,i//N,nn_site])

    total_energy[i][0] += h_site + sum(nns)
    if h[i%N][i//N] > 0:
      total_energy[i][0] -= 2
    else:
      total_energy[i][0] += 2

  return(total_energy)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 2
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if abs(k-N) <= 1:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      if abs((k+N-1)%N-i//N) <= 1:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.0003350308641975338}
#island_id: 2
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[[0, 2], i%N, i//N:], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priority_total = [total_spin, -total_spin]
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priority_total[0] += h[site_nbr][i%N]
      priority_total[1] -= h[site_nbr][i%N]
    else:
      priority_total[0] -= h[site_nbr][i%N]
      priority_total[1] += h[site_nbr][i%N]
    
    priorities[i] = np.array(sorted([-x for x in priority_total]))[::-1]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add nearest neighbor interactions
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.2646881172839505}
#island_id: 1
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    if h[i//N][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0012575617283950619}
#island_id: 1
#version_generated: 2
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    for k in range(2):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h[site_nbr][i//N]
        priorities[i][1] -= h[site_nbr][i//N]
      else:
        priorities[i][0] -= h[site_nbr][i//N]
        priorities[i][1] += h[site_nbr][i//N]
    
    return(priorities)




#score: {'data2D.txt': 0.15396404320987675}
#island_id: 2
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
    right_spin = J[1,i%N,i//N]*h[(i+1)%N][i%N] if i % N != 0 else 0
    top_spin = J[2,i//N,i%N]*h[i//N][(i-1)%N] if i // N > 0 else 0
    bottom_spin = J[3,i//N,i%N]*h[i//N][(i+1)%N] if (i+1)//N < N else 0

    h_site = sum([left_spin, right_spin, top_spin, bottom_spin])

    if i % (N*N) < N:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)
    elif i % (N*N) >= N*N - N:
      left = int((i % N*N) - N)
      right = int((i % N*N))
    else:
      left = int((i % N*N) + N)
      right = int((i % N*N) + 2*N)

    if i//N < N:
      top = int(i + N*N)
    elif i//N >= N:
      top = int(i - N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.0006313271604938262}
#island_id: 2
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    left_spin = J[0,i%N,i//N]*h[site_nbr][i%N] if i % N != 0 else 0
    right_spin = J[1,i%N,i//N]*h[(i+1)%N][i%N]
    top_spin = J[2,i//N,i%N]*h[i//N][(i-1)%N] if i // N > 0 else 0
    bottom_spin = J[3,i//N,i%N]*h[i//N][(i+1)%N] if (i+1)//N < N else 0
    
    h_site = sum([left_spin, right_spin, top_spin, bottom_spin])
    
    if i % (N*N) < N:
      left = int((i % N*N) + N)
    elif i % (N*N) >= N*N - N:
      left = int((i % N*N) - N)
    else:
      left = int((i % N*N) + N)
    
    if i//N < N:
      top = int(i + N*N)
    elif i//N >= N:
      top = int(i - N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': 0.15396404320987675}
#island_id: 2
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    left_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
    right_spin = J[1,i%N,i//N]*h[(i+1)%N][i%N] if i % N != 0 else 0
    top_spin = J[2,i//N,i%N]*h[i//N][(i-1)%N] if i // N > 0 else 0
    bottom_spin = J[3,i//N,i%N]*h[i//N][(i+1)%N] if (i+1)//N < N else 0

    h_site = sum([left_spin, right_spin, top_spin, bottom_spin])

    if i % (N*N) < N:
      left = int((i % N*N) + N)
    elif i % (N*N) >= N*N - N:
      left = int((i % N*N) - N)
    else:
      left = int((i % N*N) + N)

    if i//N < N:
      top = int(i + N*N)
    elif i//N >= N:
      top = int(i - N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.020285648148148146}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(4):
      if h[site_nbr][j] > 0:
        total_spin[0] += J[j,i//N,i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[j,i//N,i%N]
        total_spin[1] += 1
    priorities[i][0] = 2 * total_spin[0]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00059891975308642}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
    sum_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2 * (sum_up - sum_down) + sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]]) if i % N == N-1 else 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2 * (sum_up - sum_down) + sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]]) if i % N == N-1 else -2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.000545216049382716}
#island_id: 0
#version_generated: 2
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      sum_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      sum_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.06266064814814815}
#island_id: 0
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.06266064814814815}
#island_id: 0
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if i % N == 0:
      priorities[i][1] += J[1,i//N,i%N]
    elif i % N == N - 1:
      priorities[i][0] -= J[2,i//N-1,i%N]
    else:
      priorities[i][1] += J[1,i//N,i%N]
      priorities[i][0] -= J[2,i//N-1,i%N]
    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.07512422839506172}
#island_id: 0
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy if total_energy > 0 else -total_energy - 2
  return(priorities)




#score: {'data2D.txt': 0.061458796296296296}
#island_id: 0
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    priorities[i][0] = total_energy
    if total_energy > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 2
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0024939814814814807}
#island_id: 2
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i-N-1)%N]*h[site_nbr][k] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+N+1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin_left + total_spin_right
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin_left - total_spin_right
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 2
#version_generated: 2
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr2 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr2][i%N]
        priorities[i][1] -= h[site_nbr2][i%N]
      else:
        priorities[i][0] -= h[site_nbr2][i%N]
        priorities[i][1] += h[site_nbr2][i%N]
    
    for j in range(N):
      site_nbr3 = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr3][j]
        priorities[i][1] -= h[site_nbr3][j]
      else:
        priorities[i][0] -= h[site_nbr3][j]
        priorities[i][1] += h[site_nbr3][j]
  
  return(priorities)




#score: {'data2D.txt': 0.0018273148148148153}
#island_id: 3
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + max(h[site_nbr][j] for j in range(N)) * J[2, i//N, i//N]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + max(h[site_nbr][j] for j in range(N)) * J[2, i//N, i//N]

  return(priorities)




#score: {'data2D.txt': -0.33182453703703607}
#island_id: 3
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(np.square(J[:,i//N,i//N])) + total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(np.square(J[:,i//N,i//N])) - total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017131172839506166}
#island_id: 3
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + J[2, i//N, i//N]*h[site_nbr][i%N]) / (1 + J[2, i//N, i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-total_spin - J[2, i//N, i//N]*h[site_nbr][i%N]) / (1 + J[2, i//N, i//N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008362654320987654}
#island_id: 3
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities based on site interactions
  sorted_priorities = np.sort(priorities, axis=0)

  return(sorted_priorities)




#score: {'data2D.txt': 0.029249537037037036}
#island_id: 3
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.08581929012345686}
#island_id: 3
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] 
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin 
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[i][1] -= 2*total_spin[i][0]
    else:
      total_spin[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[i][1] = -2*total_spin[i][0]

  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = 0
    sum_down = 0
    for k in range(4):
      if k == 0 and i%N > 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][(k+(i-1)-N)//N]
      elif k == 1 and i%N < N-1:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
      elif k == 2 and (i//N - 1) >= 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][((k+i-N)//N)]
      else:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(np.abs(sum_up - sum_down))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum(np.abs(sum_up + sum_down))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -9.614197530864115e-05}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = 0
    sum_down = 0
    for k in range(4):
      if k == 0 and i%N > 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][(k+(i-1)-N)//N]
      elif k == 1 and i%N < N-1:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
      elif k == 2 and (i//N - 1) >= 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][((k+i-N)//N)]
      else:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (sum_up + sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00033379629629629607}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_up = 0
    sum_down = 0
    for k in range(4):
      if k == 0 and i%N > 0:
        sum_up += J[k,i%N,i//N]*h[site_nbr][(k+(i-1)-N)//N]
      elif k == 1 and i%N < N-1:
        sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
      elif k == 2 and (i//N - 1) >= 0:
        if k == 2 and i%N > 0:
          sum_up += J[k,i%N,i//N]*h[site_nbr][((k+i-N)//N)]
        else:
          sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
      else:
        if k == 3 and i%N < N-1:
          sum_up += J[k,i%N,i//N]*h[site_nbr][((k+i-N)//N)]
        else:
          sum_down += J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = 2 * (sum_up - sum_down)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = 2 * (sum_up + sum_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.015217438271604938}
#island_id: 3
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = 2*sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = 2*sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
  
  return(priorities)




#score: {'data2D.txt': 0.01454675925925926}
#island_id: 3
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    
    # Add a trick to improve the algorithm
    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr_up][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr_up][i%N]
      priorities[i][1] = -priorities[i][0]
    
    site_nbr_down = (i % N + ((i//N+1)%2-1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[1,i%N,i//N]*h[site_nbr_down][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= J[1,i%N,i//N]*h[site_nbr_down][i%N]
      priorities[i][1] = -priorities[i][0]
    
    site_nbr_left = (i % N + ((i//N)%2-1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[2,i%N,i//N]*h[site_nbr_left][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= J[2,i%N,i//N]*h[site_nbr_left][i%N]
      priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.006143672839506173}
#island_id: 3
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]

    # Add interactions with neighbors
    site_nbr_left = (i % N + ((i//N-1)%2) - 1) % N
    site_nbr_right = (i % N + ((i//N-1)%2)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr_left][i%N]
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr_right][i%N]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr_left][i%N]
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr_right][i%N]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.002256327160493826}
#island_id: 3
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:,i//N,i//N]) - total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(J[:,i//N,i//N]) - total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001161265432098766}
#island_id: 3
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])
  return(priorities)




#score: {'data2D.txt': -0.001161265432098766}
#island_id: 3
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])

  return(priorities)




#score: {'data2D.txt': 0.0017152777777777787}
#island_id: 3
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + 2*h[site_nbr][i%N]) * N
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])
    else:
      priorities[i][0] = -(total_spin + 2*h[site_nbr][i%N]) * N
      priorities[i][1] = -priorities[i][0] + np.sum(J[:,i//N,i//N])

  return(priorities)




#score: {'data2D.txt': 0.11353842592592606}
#island_id: 1
#version_generated: 2
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin contribution
    total_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust priorities based on magnetism and interactions
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
        
    priorities[i] = [total_spin, -total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.09141064814814823}
#island_id: 1
#version_generated: 2
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] += total_spin
    priorities[i][1] -= total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.11188935185185199}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N) % N
    site_nbr3 = (i % N + ((site_nbr2-1)%2 - 1)) % N
    site_nbr4 = i % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr1 = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr1][i%N]
        priorities[i][1] -= h[site_nbr1][i%N]
      else:
        priorities[i][0] -= h[site_nbr1][i%N]
        priorities[i][1] += h[site_nbr1][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.16525632716049407}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
  return(priorities)




#score: {'data2D.txt': 0.0025905864197530866}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    priorities[i] = [total_spin, -total_spin]
  return(priorities)




#score: {'data2D.txt': 0.11557391975308656}
#island_id: 1
#version_generated: 2
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr1 = (i - 1) % N
    site_nbr2 = ((i+1)%N)
    
    for j in range(N):
      if i==0 or J[3,i%N,j] <= 0:
        total_spin += h[i//N][j]
      elif J[3,i%N,j] > 0 and j==0:
        total_spin -= h[i//N][j]
      else:
        total_spin -= h[i//N][j]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    if priorities[i][0] > priorities[i][1]:
      priorities[i] = [priorities[i][0], 0]
    elif priorities[i][0] < priorities[i][1]:
      priorities[i] = [0, priorities[i][1]]
  
  return(priorities)




#score: {'data2D.txt': 0.0008878086419753089}
#island_id: 1
#version_generated: 2
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)*N+i%N+1)%N
    total_spin = h[site_nbr1][0] if J[3,i//N,i%N]>0 else -h[site_nbr1][0]
    for k in range(4):
      if J[k,i//N,i%N]>0:
        total_spin += 1 if i//N==k or (i//N+1)%N == k else -1
      else:
        total_spin -= 1 if i//N==k or (i//N+1)%N == k else 1
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin if h[site_nbr2][0]>0 else total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    # sum up the interactions with neighbors
    for k in range(4):
      if J[k, i%N, i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    # adjust based on magnetism at site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]

  return(priorities)




#score: {'data2D.txt': -0.0018054012345679014}
#island_id: 2
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = h_site
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = J.sum(axis=0)[i%N,i//N]
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018054012345679014}
#island_id: 2
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = h_site
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -total
  return(priorities)




#score: {'data2D.txt': -0.0013794753086419757}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0012581790123456788}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    return(priorities)




#score: {'data2D.txt': -0.0011393518518518515}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the priority based on the interaction with the current spin
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Adjust the priority based on the magnetism at the site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    return(priorities)




#score: {'data2D.txt': -0.0024464506172839503}
#island_id: 2
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total_spin = np.sum(h, axis=0)
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total_spin -= J[k][i%N,i//N]
      else:
        total_spin += J[k][i%N,i//N]

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.0018054012345679014}
#island_id: 2
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = h_site
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += 2*J[k][i%N,i//N]
      else:
        total -= 2*J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0015233024691358025}
#island_id: 2
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total = h[site_nbr][i%N]
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    # Calculate the priority as the opposite of the sum
    priorities[i][0] = -total
    priorities[i][1] = total
  return(priorities)




#score: {'data2D.txt': -0.01561280864197531}
#island_id: 2
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    total = np.sum(J[:,i//N,i%N]) * h_site
    for k in range(4):
      site_nbr_k = (k % 2 * N + (i//N)%N + ((i+N-1)//N)%N)
      if J[k][i%N,i//N] > 0:
        total += J[k][i%N,i//N]
      else:
        total -= J[k][i%N,i//N]

    priorities[i][0] = total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006665586419753086}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_spin = 1
      else:
        nn_spin = -1

      nns.append(nn_spin * h[nn_site][i%N])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006665586419753086}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_spin = 1
      else:
        nn_spin = -1

      nns.append(nn_spin * h[nn_site][i%N])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006665586419753086}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j, i//N, nn_site] > 0:
        nn_spin = 1
      else:
        nn_spin = -1

      nns.append(nn_spin * h[nn_site][i%N])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = (h_site + total_energy)
    priorities[i][1] = -(h_site + total_energy)

  return(priorities)




#score: {'data2D.txt': -0.16401959876543235}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h_site = 0
    sum_minus_1 = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        sum_h_site += h[site_nbr][i%N]
        if h[i//N][i%N] > 0:
          sum_minus_1 -= 1
        else:
          sum_minus_1 += 1
      else:
        sum_h_site -= h[site_nbr][i%N]
        if h[i//N][i%N] > 0:
          sum_minus_1 += 1
        else:
          sum_minus_1 -= 1

    priorities[i][0] = sum_h_site + sum_minus_1
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004907561728395062}
#island_id: 3
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*nn_h[k] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 3
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
  # Add magnetism term
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16432114197530887}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
  return(priorities)




#score: {'data2D.txt': -0.16589552469135826}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    if priorities[i][0] < priorities[i][1]:
      priorities[i] = [1, -1]
    elif priorities[i][0] > priorities[i][1]:
      priorities[i] = [-1, 1]
    else:
      if np.random.rand() < 0.5:
        priorities[i] = [1, -1]
      else:
        priorities[i] = [-1, 1]
    
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    
    for k in range(2):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr3][i%N]
        total_spin -= h[site_nbr4][i%N]
      else:
        total_spin -= h[site_nbr3][i%N]
        total_spin += h[site_nbr4][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i % N == 0 or (i+1) % N == N:
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.21642885802469153}
#island_id: 0
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(4):  # Changed from 3 to 4
      if j < 2:  # Top and left neighbors
        nn_site = (site_nbr + ((j-1)%2 - 1)) % N
        nn_energy_sum += J[j, i//N, nn_site] * h[nn_site][i%N]
        nn_count += (J[j, i//N, nn_site] > 0).astype(int)
      else:  # Right and bottom neighbors
        nn_site = (site_nbr + ((j-1)%2 - 3)) % N
        nn_energy_sum += J[3-j, i//N, nn_site] * h[nn_site][i%N]
        nn_count += (J[3-j, i//N, nn_site] > 0).astype(int)
    
    if h[i//N][i%N] > 0:
      total_energy = -h[i//N][i%N]
    else:
      total_energy = h[i//N][i%N]
    
    priority_sum = (nn_energy_sum * nn_count + total_energy).astype(int)
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -(priority_sum - 2*h[i//N][i%N])
  
  return(priorities)




#score: {'data2D.txt': 0.06733873456790126}
#island_id: 0
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]

    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.06733873456790126}
#island_id: 0
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    nn_energy_sum = 0
    nn_count = 0
    
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nn_energy_sum += nn_energy
      nn_count += (J[j,i//N,nn_site] > 0).astype(int)
    
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N]
    else:
      total_energy = -h[i//N][i%N]

    priority_sum = nn_energy_sum * nn_count + total_energy
    
    priorities[i][0] = priority_sum
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.0051146604938271615}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0,0]
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    for j in range(4):
      if J[j,i%N,(i%N+(j-1)%2-N)%N] > 0:
        total_spin[0] += h[site_nbr1][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr1][i%N]
    for j in range(4):
      if J[j,i//N,(i//N+(j-1)%2-N)%N] > 0:
        total_spin[0] += h[site_nbr2][i//N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr2][i//N]
    priorities[i][0] = total_spin[0]
    if h[i%N][i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.00800385802469136}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    if h[i%N][i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
    for j in range(4):
      site_nbr3 = (i // N + ((j-1)%2 - 1)) % N
      energy_diff += sum(J[k,site_nbr3,(i//N+(k-1)%2-N)%N] if J[k,site_nbr3,(i//N+(k-1)%2-N)%N]>0 else -J[k,site_nbr3,(i//N+(k-1)%2-N)%N] for k in range(4)) * h[site_nbr3][i//N]
      priorities[i][0] += energy_diff
      if h[i%N][i//N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.00657391975308642}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros(2)
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin[0] += h[site_nbr1][i%N]
    if h[i%N][i//N] > 0:
      total_spin[1] -= 1
    else:
      total_spin[1] += 1
    energy_diff = sum(J[j,site_nbr1,(i%N+(j-1)%2-N)%N] if J[j,site_nbr1,(i%N+(j-1)%2-N)%N]>0 else -J[j,site_nbr1,(i%N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr1][i%N]
    energy_diff += sum(J[j,site_nbr2,(i//N+(j-1)%2-N)%N] if J[j,site_nbr2,(i//N+(j-1)%2-N)%N]>0 else -J[j,site_nbr2,(i//N+(j-1)%2-N)%N] for j in range(4)) * h[site_nbr2][i//N]
    priorities[i][0] = energy_diff
    if total_spin[0] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.004907561728395062}
#island_id: 3
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*nn_h[k] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0012766975308641975}
#island_id: 3
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    priorities[i][0] = 2*h_site + sum([J[k,i//N,i%N]*nn_h[k] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005396604938271606}
#island_id: 3
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    total_spin = sum([J[k,i//N,i%N]*nn_h[k] for k in range(3)]) + h_site
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006397067901234568}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    # Use the fact that J[k,i//N,i//N] = 0 to reduce computation
    nn_h_sum = sum([J[k,i//N,i//N]*nn_h[k] for k in range(3)])
    
    priorities[i][0] = h_site + nn_h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005396604938271606}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    priorities[i][0] = (h_site + sum([J[k,i//N,i%N]*nn_h[k] for k in range(3)])) / 4
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0019859567901234568}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i//N,k//N]*nn_h[k] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00204645061728395}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i%N]*h[(0+N-1)%N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
    
    for k in range(1,3):
     site = (i + ((k-1)%2 - 1)) % N
     h_site = h[site][i%N]
     if h[i//N][i%N] > 0:
       priorities[i][0] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
       priorities[i][1] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
     else:
       priorities[i][0] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
       priorities[i][1] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
    
  # Add magnetism term
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': -0.0077868827160493806}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
    # Add magnetism term
    if i % (N*N) < N:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][i%N]
      priorities[i][0] += h_site2
      priorities[i][1] -= h_site2
    else:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][(i%N)]
      priorities[i][0] -= h_site2
      priorities[i][1] += h_site2
  
  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 3
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
  # Add magnetism term
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': -0.0027041666666666672}
#island_id: 1
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.003050771604938272}
#island_id: 1
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr1][i%N]
      priorities[i][1] -= h[site_nbr1][i%N]
    else:
      priorities[i][0] -= h[site_nbr1][i%N]
      priorities[i][1] += h[site_nbr1][i%N]
    
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[site_nbr2][i%N]
      priorities[i][1] -= h[site_nbr2][i%N]
    else:
      priorities[i][0] -= h[site_nbr2][i%N]
      priorities[i][1] += h[site_nbr2][i%N]
    
    if J[3,i//N,i%N] > 0:
      priorities[i][0] += h[(i+1)%N, i//N]
      priorities[i][1] -= h[(i+1)%N, i//N]
    else:
      priorities[i][0] -= h[(i+1)%N, i//N]
      priorities[i][1] += h[(i+1)%N, i//N]
    
    if J[3,i%N,(i+N-1)%N] > 0:
      priorities[i][0] += h[i//N,(i+N-1)%N]
      priorities[i][1] -= h[i//N,(i+N-1)%N]
    else:
      priorities[i][0] -= h[i//N,(i+N-1)%N]
      priorities[i][1] += h[i//N,(i+N-1)%N]
    
  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 1
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Calculate the total spin for this site
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N] * h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    edge_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h_site + edge_sum
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][0] = h_site + edge_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + edge_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    if i % N == 0 or (i+1) % N == N:
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 2
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    if i % N == 0 or (i+1) % N == N:
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.013764043209876542}
#island_id: 2
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -abs(total_spin)

  return(priorities)




#score: {'data2D.txt': -0.0004905864197530865}
#island_id: 3
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0017890432098765442}
#island_id: 3
#version_generated: 2
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i%N]*h[(0+N-1)%N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
    
    for k in range(1,3):
     site = (i + ((k-1)%2 - 1)) % N
     h_site = h[site][i%N]
     if h[i//N][i%N] > 0:
      priorities[i][0] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
     else:
      priorities[i][0] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      priorities[i][1] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
    
    # Add magnetism term
    if h[i//N][i%N] > 0:
     priorities[i][0] += h_site
     priorities[i][1] -= h_site
    else:
     priorities[i][0] -= h_site
     priorities[i][1] += h_site
  
  return(priorities)




#score: {'data2D.txt': 0.08246188271604947}
#island_id: 1
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(N)]
    total_neighbor_spin = sum([h[site_nbr][i%N] if J[3,i%N,j] > 0 else -h[site_nbr][i%N] for site_nbr, j in zip(site_nbrs,range(N))])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + total_neighbor_spin, -(total_spin + total_neighbor_spin)]
    else:
      priorities[i] = [-total_spin - total_neighbor_spin, total_spin + total_neighbor_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.005215586419753088}
#island_id: 1
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.0034081790123456786}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(J[:, i//N, i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(J[:, i//N, i%N]) * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.007138734567901236}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,site_nbr,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,site_nbr,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021442901234567904}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16367484567901255}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001978858024691358}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

    for j in range(4):
      if J[j,i//N,i%N] > 0:
        priorities[i][0] += J[j,i//N,i%N]
        priorities[i][1] -= J[j,i//N,i%N]
      else:
        priorities[i][0] -= J[j,i//N,i%N]
        priorities[i][1] += J[j,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.04247083333333336}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014029320987654322}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])

    if J[0,i//N,i//N]*h_site + nn_sum > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.04247083333333336}
#island_id: 0
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = sum([J[k,i%N,i//N]*h[(k+((j-1)%2 - 1)) % N][i%N] for j,k in zip(range(4),range(4))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.24322638888888884}
#island_id: 2
#version_generated: 2
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = (1 + np.sum(h[i//N:i//N+2, i%N])) + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -(1 + np.sum(h[i//N:i//N+2, i%N])) - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002215586419753087}
#island_id: 2
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -total_spin
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -2.6080246913577798e-05}
#island_id: 2
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr:site_nbr+2])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr:site_nbr+2])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021442901234567904}
#island_id: 2
#version_generated: 2
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2286729938271605}
#island_id: 3
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
    # Add magnetism term
    if i % (N*N) < N:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][i%N]
      priorities[i][0] += h_site2
      priorities[i][1] -= h_site2
    else:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][(i%N)]
      priorities[i][0] -= h_site2
      priorities[i][1] += h_site2
    
    # Add interaction term with neighboring sites
    for j in range(3):
      k = (i // N + ((j-1)%2 - 1)) % N
      l = i % N
      if J[j,i//N,k]*h[k,l] > 0:
        priorities[i][0] += J[j,i//N,k]
        priorities[i][1] -= J[j,i//N,k]
      else:
        priorities[i][0] -= J[j,i//N,k]
        priorities[i][1] += J[j,i//N,k]
  
  return(priorities)




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 3
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    total_spin = 0
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.06849737654320989}
#island_id: 3
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    
    # Add magnetism term
    if i % (N*N) < N:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][i%N]
      priorities[i][0] += h_site2
      priorities[i][1] -= h_site2
    else:
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      h_site2 = h[site_nbr2][(i%N)]
      priorities[i][0] -= h_site2
      priorities[i][1] += h_site2
    
    # Add interaction term for horizontal and vertical neighbors
    if i % N > 0:
      site_nbr3 = (i - 1) % N + ((i//N-1)%2 - 1)
      h_site3 = h[site_nbr3][i%N]
      priorities[i][0] += h_site3
      priorities[i][1] -= h_site3
    
    if i // N < N:
      site_nbr4 = (i // N + ((i%N-1)%2 - 1)) % N
      h_site4 = h[site_nbr4][i%N]
      priorities[i][0] += h_site4
      priorities[i][1] -= h_site4
  
  return(priorities)




#score: {'data2D.txt': -0.0011328703703703705}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,(site_nbr + ((k-1)%2 - 1)) % N,i//N] for k in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002350462962962962}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[j,(site_nbr + ((j-1)%2 - 1)) % N,i//N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001789043209876543}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,site_nbr,i//N] for k in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002350462962962962}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[0,i%N,i//N] if j == 0 else J[j,(site_nbr + ((j-1)%2 - 1)) % N,i//N] for j in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00016095679012345697}
#island_id: 0
#version_generated: 2
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors = [(k, j) for k in range(4) for j in range(N) if abs(k-(i%N)) <= 1 and abs(j-(i//N)) <= 1]
      total_up = sum([J[k,i%N,j]*h[site_nbr][j] for k, j in neighbors])
      priorities[i][0] = 2 * (total_up)
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors = [(k, j) for k in range(4) for j in range(N) if abs(k-(i%N)) <= 1 and abs(j-(i//N)) <= 1]
      total_down = sum([J[k,(i+1)%N,j]*h[site_nbr][j] for k, j in neighbors])
      priorities[i][0] = 2 * (total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.879629629629624e-05}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      total_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
    else:
      total_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)]])
      total_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005541666666666662}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      up_neighbors = [(k, (k+i-N)//N) for k in range(4)]
      down_neighbors = [(k, (k+(i+1)-N)//N) for k in range(2)]
      neighbors = up_neighbors + down_neighbors
      total_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in neighbors])
      total_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
    else:
      up_neighbors = [(k, (k+i-N)//N) for k in range(4)]
      down_neighbors = [(k, (k+(i+1)-N)//N) for k in range(2)]
      neighbors = up_neighbors + down_neighbors
      total_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in neighbors])
      total_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005038580246913576}
#island_id: 0
#version_generated: 2
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)] + [(k, (k+(i-1)-N)//N) for k in range(2)]])
      total_down = -sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
    else:
      total_up = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k, j in [(k, (k+i-N)//N) for k in range(4)] + [(k, (k+(i-1)-N)//N) for k in range(2)]])
      total_down = sum([J[k,(i+1)%N,i//N]*h[site_nbr][(k+(i+1)-N)//N] for k in range(2)])
      priorities[i][0] = 2 * (total_up - total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.02786929012345679}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    else:
      priorities[i][0] -= np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)

  return(priorities)




#score: {'data2D.txt': 0.024456635802469137}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.024456635802469137}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.242005401234568}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h[i//N][i%N] + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.000279166666666667}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,j]*h[site_nbr][j] for k in range(4) for j in range(N) if abs(k-(i%N)) <= 1 and abs(j-(i//N)) <= 1])
      priorities[i][0] = total_up
      priorities[i][1] = -total_up
    else:
      total_down = sum([J[k,(i+1)%N,j]*h[site_nbr][j] for k in range(4) for j in range(N) if abs(k-(i%N)) <= 1 and abs(j-(i//N)) <= 1])
      priorities[i][0] = -total_down
      priorities[i][1] = total_down
  return(priorities)




#score: {'data2D.txt': -0.0013257716049382715}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      priorities[i][0] = 2 * (total_up)
      priorities[i][1] = -priorities[i][0]
    else:
      total_down = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      priorities[i][0] = 2 * (total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007461419753086422}
#island_id: 0
#version_generated: 2
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,(i+((k-1)%2)-1)%N,j]*h[site_nbr][j] for k, j in [(0, j) for j in range(N)] + [(3, j) for j in range(N)]])
      priorities[i][0] = 2 * (total_up)
      priorities[i][1] = -priorities[i][0]
    else:
      total_down = sum([J[k,(i+((k-1)%2)-1)%N,j]*h[site_nbr][j] for k, j in [(0, j) for j in range(N)] + [(3, j) for j in range(N)]])
      priorities[i][0] = 2 * (total_down)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018479938271604946}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    sum_h = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
        sum_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
        sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*total_spin + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*total_spin - sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.824074074074078e-05}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_sites = [h[s][i%N] for s in site_nbrs]
    else:
      h_sites = [-h[s][i%N] for s in site_nbrs]

    sum_h = sum([J[k,i%N,i//N]*hs for k, hs in enumerate(h_sites)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*np.sum(h_sites) + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*np.sum(h_sites) - sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018304012345679015}
#island_id: 2
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024535493827160487}
#island_id: 2
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -2*h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.010202314814814815}
#island_id: 2
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 2*np.sign(h[i//N][i%N]) - 1
    priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + spin*priority_term
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001854166666666667}
#island_id: 2
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[site_nbr][i%N] + total_spin) / 4
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h[site_nbr][i%N] + total_spin) / 4
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014412037037037054}
#island_id: 2
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum([np.abs(J[k,i%N,i//N]) * (h[site_nbr][i%N] + J[k,i%N,i//N]*h[(k+N-1)%N][i%N]) for k in range(3)]) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = np.sum([np.abs(J[k,i%N,i//N]) * (-h[site_nbr][i%N] + J[k,i%N,i//N]*h[(k+N-1)%N][i%N]) for k in range(3)]) / 2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07456682098765435}
#island_id: 2
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h[site_nbr][i%N] + total_spin) / 2
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.11480632716049397}
#island_id: 1
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Calculate the contribution from horizontal neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate the contribution from vertical neighbors
    site_nbr = (i % N + ((i//N)%2 - 1)) % N
    for j in range(N):
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    # Calculate the contribution from diagonal neighbors
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,(i//N-1)%N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if J[1,i%N,(i//N+1)%N] > 0:
      total_spin += h[site_nbr][i%N]
    else:
      total_spin -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
    
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    if total_spin > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.07824953703703709}
#island_id: 1
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    else:
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    
  return(priorities)




#score: {'data2D.txt': 0.1655828703703706}
#island_id: 1
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.000929475308641976}
#island_id: 0
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
     nn_site = (site_nbr + ((j-1)%2 - 1)) % N
     if i//N==nn_site//N or abs(nn_site//N-i//N) > 1:
       nns.append(h[nn_site][i%N])
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*n for k,n in zip(range(4),nns)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015304012345679012}
#island_id: 0
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == site_nbr // N and i%N != site_nbr % N:
        nn_site = site_nbr
      elif i//N == site_nbr // N and j==0:
        continue
      nns.append(h[nn_site][i%N])

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*n for k,n in zip(range(3),nns)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018047839506172847}
#island_id: 0
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.13627515432098783}
#island_id: 1
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N if i%N==0 else (i % N + ((i//N-1)%2 - 1)) % N if i//N==N-1 else (i % N + ((i//N)%2 - 1)) % N
    total_spin = h[site_nbr1][i%N] + J[0,i//N,i%N]
    
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.0982566358024692}
#island_id: 1
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    if J[1,i//N,i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]
    
    if J[2,i%N,(i+N)%N] > 0:
      priorities[i][0] += h[i//N][(i+N)%N]
      priorities[i][1] -= h[i//N][(i+N)%N]
    else:
      priorities[i][0] -= h[i//N][(i+N)%N]
      priorities[i][1] += h[i//N][(i+N)%N]
    
    if J[3,i%N,(i+1)%N] > 0:
      priorities[i][0] += h[i//N][(i+1)%N]
      priorities[i][1] -= h[i//N][(i+1)%N]
    else:
      priorities[i][0] -= h[i//N][(i+1)%N]
      priorities[i][1] += h[i//N][(i+1)%N]
  
  return(priorities)




#score: {'data2D.txt': -0.011886574074074074}
#island_id: 1
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      total_spin = h[site_nbr1][i%N]
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      total_spin = -h[site_nbr2][i%N]
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      total_spin = h[site_nbr1][i%N]
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      total_spin = -h[site_nbr3][i%N]
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    if J[2,i%N,i//N] > 0:
      total_spin = h[site_nbr2][i%N]
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      total_spin = -h[site_nbr4][i%N]
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
    
    site_nbr5 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin = h[site_nbr3][i%N]
      priorities[i][0] += total_spin
      priorities[i][1] -= total_spin
    else:
      total_spin = -h[site_nbr5][i%N]
      priorities[i][0] -= total_spin
      priorities[i][1] += total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.004622376543209877}
#island_id: 2
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004622376543209877}
#island_id: 2
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0018304012345679015}
#island_id: 2
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.004622376543209877}
#island_id: 2
#version_generated: 2
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    neighbor_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbor_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.16367484567901255}
#island_id: 2
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16367484567901255}
#island_id: 2
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h[site_nbr][i%N], total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000684413580246915}
#island_id: 2
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    edge_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h[site_nbr][i%N] + edge_sum
      priorities[i][1] = -priorities[i][0]
    elif h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + edge_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] + edge_sum
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 4.614197530864217e-05}
#island_id: 2
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    edge_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h_site + edge_sum
      priorities[i][1] = -priorities[i][0]
    else:
      nbsite_nbr = ((i//N)*N + ((i%N-1)%2 - 1)) % N
      if h[nbsite_nbr][i%N] > 0:
        edge_sum += J[1,i//N,i%N]
      else:
        edge_sum -= J[1,i//N,i%N]

      priorities[i][0] = h_site + edge_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008671141975308641}
#island_id: 2
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    elif np.sum([J[k,i//N,k]%N for k in range(3)]) > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + neighbor_h
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - neighbor_h
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + neighbor_h
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - neighbor_h
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (h_site + total_spin) / 2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 3
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 2
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.007879475308641975}
#island_id: 2
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if i % N == 0 or (i+1) % N == N:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    elif np.sum([J[k,i//N,k]%N for k in range(3)]) > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + neighbor_h
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - neighbor_h
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i//N,i%N] > 0:
        priorities[i][0] = h_site + neighbor_h
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - neighbor_h
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0043794753086419756}
#island_id: 0
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if J[0,i//N,i%N]*h[(i+1)%N][i%N] > 0:
      priorities[i][0] = total_energy - (J[0,i//N,i%N]*2 + J[1,i//N,i%N])
    elif J[0,i//N,i%N]*h[(i+1)%N][i%N] < 0:
      priorities[i][0] = total_energy + (J[0,i//N,i%N]*2 - J[1,i//N,i%N])
    else:
      priorities[i][0] = total_energy
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] -= J[k,i//N,i%N]
      else:
        priorities[i][0] += J[k,i//N,i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.006340277777777778}
#island_id: 0
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if J[0,i//N,i%N]*h[(i+1)%N][i%N] > 0:
      priorities[i][0] = total_energy - (J[0,i//N,i%N]*2 + J[1,i//N,i%N])
    elif J[0,i//N,i%N]*h[(i+1)%N][i%N] < 0:
      priorities[i][0] = total_energy + (J[0,i//N,i%N]*2 - J[1,i//N,i%N])
    else:
      priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00021651234567901284}
#island_id: 0
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = h[site_nbr][i%N] + sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if J[0,i//N,i%N]*h[(i+1)%N][i%N] > 0:
      priorities[i][0] = total_energy - (J[0,i//N,i%N]*2 + J[1,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i//N,i%N]*h[(i+1)%N][i%N] < 0:
      priorities[i][0] = total_energy + (J[0,i//N,i%N]*2 - J[1,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = total_energy + 2
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = total_energy - 2
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005971450617283951}
#island_id: 0
#version_generated: 2
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3))
    if sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)) > 0:
      priorities[i][0] = total_energy - (sum(J[k,i//N,i%N] for k in range(3)))
    elif sum(J[k,i//N,i%N] * h[(i+k-1)%N][i%N] for k in range(3)) < 0:
      priorities[i][0] = total_energy + (sum(J[k,i//N,i%N] for k in range(3)))
    else:
      priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002215586419753087}
#island_id: 2
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + np.sum(h[site_nbr:site_nbr+2])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -total_spin
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002215586419753087}
#island_id: 2
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -total_spin
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022628086419753082}
#island_id: 2
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin + np.sum(h[site_nbr:site_nbr+2]) - J[0,i//N,i//N]*h[(0+N-1)%N][i%N]) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -total_spin
      priorities[i][0] = (-total_spin + np.sum(h[site_nbr:site_nbr+2]) - J[0,i//N,i//N]*h[(0+N-1)%N][i%N]) / 2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.008139043209876542}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_up = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
    total_spin_down = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i+1)%N) <= 1])
    priorities[i][0] = total_spin_up + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004772376543209875}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      total_down = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i+1)%N) <= 1])
      priorities[i][0] = total_up - total_down
      priorities[i][1] = -priorities[i][0]
    else:
      total_down = sum([J[k,(i-1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i-1)%N) <= 1])
      total_up = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i+1)%N) <= 1])
      priorities[i][0] = total_down - total_up
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005964506172839499}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_up = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
    total_down = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
    priorities[i][0] = total_up - total_down
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005964506172839499}
#island_id: 0
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_up = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      total_down = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      priorities[i][0] = total_up - total_down
      priorities[i][1] = -priorities[i][0]
    else:
      total_up = sum([J[k,(i+1)%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      total_down = sum([J[k,i%N,(site_nbr+((k-1)%2)-1)%N]*h[(site_nbr+((k-1)%2)-1)%N][(site_nbr+((k-1)%2)-1)%N] for k in range(4) if abs(k-(i%N)) <= 1])
      priorities[i][0] = total_down - total_up
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0016578703703703703}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    spin_energy = h_site + sum([n*n for n in nns])
    if spin_energy > 0:
      priorities[i][0] = max([spin_energy - J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min([spin_energy + J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009825617283950618}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(4)]
    nn_sites.sort()
    nns = [J[j, i//N, nn] for j,nn in zip(range(4), nn_sites)]
    
    spin_energy = h_site + sum([n*n for n in nns])
    if spin_energy > 0:
      priorities[i][0] = max([spin_energy - J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min([spin_energy + J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02914243827160494}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = h_site + sum([n*n for n in nns])
    if J[0,i%N,i//N] > 0:
      priority_total = [total_energy - J[0,i%N,i//N]*sum(nns), -total_energy]
    else:
      priority_total = [-total_energy - J[0,i%N,i//N]*sum(nns), total_energy]

    priorities[i][0] = max([priority_total[1], priority_total[0]])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001048611111111111}
#island_id: 2
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.000924845679012347}
#island_id: 2
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
    # Add interaction with diagonal neighbors
    if i % N != 0 and (i//N) % N != 0:
      site_nbr2 = ((i-1)%N + ((i//N-1)%2 - 1)) % N
      priority_term += sum([J[k,(i-1)%N,i//N]*h[(k+N-1)%N][(i-1)%N] for k in range(3)])
      site_nbr2 = ((i+1)%N + ((i//N-1)%2 - 1)) % N
      priority_term += sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
      site_nbr2 = ((i//N-1)*N + (i%N) + ((i//N-1)%2 - 1)) % N
      priority_term += sum([J[k,i//N,(i-1)%N]*h[(k+N-1)%N][i//N] for k in range(3)])
      site_nbr2 = ((i//N+1)*N + (i%N) + ((i//N-1)%2 - 1)) % N
      priority_term += sum([J[k,i//N,(i+1)%N]*h[(k+N-1)%N][i//N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + priority_term
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005197067901234568}
#island_id: 2
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 0
      for k in range(3):
        if h[(k+N-1)%N][i%N] > 0:
          total_spin += J[k,i//N,i%N]
        else:
          total_spin -= J[k,i//N,i%N]
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = 0
      for k in range(3):
        if h[(k+N-1)%N][i%N] > 0:
          total_spin -= J[k,i//N,i%N]
        else:
          total_spin += J[k,i//N,i%N]
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001048611111111111}
#island_id: 2
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_term = sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + priority_term
      priorities[i][1] = -priorities[i][0]
    else:
      priority_term = sum([J[k,i//N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - priority_term
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.02786929012345679}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
    
    # Add a tweak to improve the priority based on the current magnetism and interactions
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
      nn_sum = np.sum(J[:,i//N, site_nbr])
      if np.abs(nn_sum) > N/2:
        priorities[i][0] += nn_sum
    else:
      priorities[i][0] -= np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
      nn_sum = np.sum(J[:,i//N, site_nbr])
      if np.abs(nn_sum) > N/2:
        priorities[i][0] -= nn_sum
  
  return(priorities)




#score: {'data2D.txt': 0.02786929012345679}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    else:
      priorities[i][0] -= np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)

  return(priorities)




#score: {'data2D.txt': 0.02054182098765432}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum

    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    else:
      priorities[i][0] -= np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)

    # Add a tweak to improve the priority based on the interaction with neighboring sites
    for j in range(N):
      if abs(i % N - j) == 1 or i // N != j:
        continue
      priorities[i][0] += np.sum(J[:, j, site_nbr]) * (2*h[j][i%N] - 1)

  return(priorities)




#score: {'data2D.txt': 0.018629783950617283}
#island_id: 0
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:,i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]

    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      nn_sum_opp = np.sum(J[:,i//N, (site_nbr+1)%N]) * (2*h[(i//N)%N][(i%N+1)%N] - 1)
      priorities[i][0] += nn_sum_opp
    else:
      nn_sum_opp = np.sum(J[:,i//N, (site_nbr+1)%N]) * (2*h[(i//N)%N][(i%N+1)%N] - 1)
      priorities[i][0] -= nn_sum_opp

  return(priorities)




#score: {'data2D.txt': -0.1451013888888889}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr_col = (i % N + ((i//N)%2 - 1)) % N
    total_spin_col = h[site_nbr_col][i%N]
    
    for k in range(4):
      if J[k,i//N,i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.16385601851851875}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    total_spin = [0, 0]
    
    for k in range(4):
      if J[k, i % N, i // N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[0] += 1

    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[i // N][i % N] > 0:
      priorities[i] = [total_spin[0] + h[site_nbr][i % N], -total_spin[1] - h[site_nbr][i % N]]
    else:
      priorities[i] = [-total_spin[0] - h[site_nbr][i % N], total_spin[1] + h[site_nbr][i % N]]

  return(priorities)




#score: {'data2D.txt': 0.11489799382716062}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    # Add interactions with all neighbors
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]
        
    # Add magnetism term
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
      
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.0005396604938271606}
#island_id: 3
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    priorities[i][0] = np.sum([J[k,i//N,i%N]*nn_h[k] for k in range(3)], axis=0) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0005396604938271606}
#island_id: 3
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    nn_h = [h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N] for k in range(3)]
    
    neighbors_sum = sum([J[k,i//N,i%N]*nn_h[k] for k in range(3)])
    
    priorities[i][0] = (h_site + neighbors_sum) / 4
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0386766975308642}
#island_id: 0
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    total_priority = h_site
    for k, v in enumerate(nn_values):
      if v > 0:
        total_priority += v * (1 - np.tanh(v))
      else:
        total_priority -= v * (1 + np.tanh(-v))
    
    priorities[i][0] = total_priority
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0013794753086419744}
#island_id: 0
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    if sum(nn_values) > 0:
      priorities[i][0] = h_site + max([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009336574074074072}
#island_id: 0
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    nn_values = [J[j,i//N,nn_sites[j]] for j in range(3)]
    
    total_spin = np.sum(nn_values)
    if h_site > 0:
      priorities[i][0] = h_site + max([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nn_values])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006491203703703704}
#island_id: 0
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = 1 + nn_sum
    else:
      priorities[i][0] = -1 - nn_sum

  return(priorities)




#score: {'data2D.txt': 0.02054182098765432}
#island_id: 0
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate the total magnetism and interaction for each site
  total_spin = np.zeros((N, N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  # Calculate the priority for each site based on magnetism and interaction
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1
    
    nn_sum = np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum
    
    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    else:
      priorities[i][0] -= np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    
    # Add a tweak to improve the priority based on the interaction with neighboring sites
    for j in range(N):
      if abs(i % N - j) == 1 or i // N != j:
        continue
      priorities[i][0] += np.sum(J[:, j, site_nbr]) * (2*h[j][i%N] - 1)
  
  return(priorities)




#score: {'data2D.txt': 0.02032206790123457}
#island_id: 0
#version_generated: 2
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_sum = np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    priorities[i][0] = h_site + nn_sum

    # Add a tweak to improve the priority based on the current magnetism
    if i % N < N // 2:
      priorities[i][0] += np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)
    else:
      priorities[i][0] -= np.sum(J[:, i//N, site_nbr]) * (2*h[i//N][i%N] - 1)

    # Add a tweak to improve the priority based on the interaction with neighboring sites
    for j in range(N):
      if abs(i % N - j) == 1 or i // N != j:
        continue
      priorities[i][0] += np.sum(J[:, j, site_nbr]) * (2*h[j][i%N] - 1)

    # Add a tweak to improve the priority based on the total magnetism of neighboring sites
    for j in range(N):
      if abs(i % N - j) == 1 or i // N != j:
        continue
      priorities[i][0] += np.sum(J[:, j, site_nbr]) * (2*h[j][i%N] - 1)

  return(priorities)




#score: {'data2D.txt': -0.0004905864197530865}
#island_id: 3
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.010540895061728393}
#island_id: 3
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N])
      priorities[i][1] = -priorities[i][0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] -= np.sum(J[1:,i,j])*np.sum(h[:(i+1),j])
        priorities[i*N+j][1] += np.sum(J[1:,i,j])*np.sum(h[:(i+1),j])
      else:
        priorities[i*N+j][0] += np.sum(J[1:,i,j])*np.sum(h[:(i+1),j])
        priorities[i*N+j][1] -= np.sum(J[1:,i,j])*np.sum(h[:(i+1),j])
  
  return(priorities)




#score: {'data2D.txt': -0.0005307098765432097}
#island_id: 3
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N]) + J[3,i//N,i%N]*(2*h[i//N][i%N]-1)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] += J[0,i//N,i%N]*h[(0+N-1)%N][i%N] + h_site - np.sum(J[1:,i//N,i%N])*np.sum(h[:(i//N+1),i%N]) - J[3,i//N,i%N]*(2*h[i//N][i%N]-1)
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (h_site + total_spin) / 2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002448302469135803}
#island_id: 3
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      total_spin += J[1,i%N,i//N]
    else:
      total_spin -= J[1,i%N,i//N]

    priorities[i][0] = (h_site + total_spin) / 2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009525462962962961}
#island_id: 3
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = (total_spin / 6) + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017881172839506175}
#island_id: 3
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.026347685185185234}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h[site_nbr==h]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h[site_nbr!=h]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0015066358024691353}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [J[j,i//N,nn_site] for j in range(3) for nn_site in [(i+N)%N if i//N == site_nbr // N and abs((i+N)%N % N - site_nbr % N) > 0 else (site_nbr + ((j-1)%2 - 1)) % N] ]
    
    if sum(nns) > 0:
      priorities[i][0] = h_site + max([n for n in nns])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([n for n in nns])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001061574074074074}
#island_id: 0
#version_generated: 2
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    if sum(nns) > 0:
      priorities[i][0] = h_site + max([J[0,i%N,i//N]*n for k,n in zip(range(3),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([J[0,i%N,i//N]*n for k,n in zip(range(3),nns)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    nn_sum = sum(nns)
    if nn_sum > 0:
      priorities[i][0] = h_site + max([n for n in nns])
      priorities[i][1] = -priorities[i][0]
    elif nn_sum < 0:
      priorities[i][0] = -h_site - min([n for n in nns])
      priorities[i][1] = -priorities[i][0]
    else:
      if h_site > 0:
        priorities[i][0] = h_site + max([J[0,i%N,i//N]*n for k,n in zip(range(3),nns)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - min([J[0,i%N,i//N]*n for k,n in zip(range(3),nns)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06697947530864198}
#island_id: 0
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if i//N == nn_site // N and abs(nn_site % N - site_nbr % N) > 0:
        nn_site = (nn_site + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    if sum(nns) > 0:
      priorities[i][0] = h_site + max([J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min([J[0,i%N,i//N]*n for k,n in zip(range(4),nns)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.15587391975308665}
#island_id: 2
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      priorities[i][0] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[j,i%N,i//N]
      else:
        priorities[i][1] += J[j,i%N,i//N]

    priorities[i][0] += h_site
    if h[i//N][i%N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002781018518518519}
#island_id: 2
#version_generated: 2
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin - sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin + sum([J[k,i//N,i//N]*h[(k+N-1)%N][i//N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + total_spin) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11677515432098778}
#island_id: 1
#version_generated: 2
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate total spin based on magnetism and interactions
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    # Calculate priority as difference between spin up and down energies
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
    
  return(priorities)




#score: {'data2D.txt': 0.14533317901234585}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]

    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - sum(J[:, i//N, i%N])
      priorities[i][1] = -total_spin + sum(J[:, i//N, i%N])
    else:
      priorities[i][0] = -total_spin + sum(J[:, i//N, i%N])
      priorities[i][1] = total_spin - sum(J[:, i//N, i%N])

  return priorities




#score: {'data2D.txt': -0.0017834876543209885}
#island_id: 1
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr_row = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_col = (i // N + ((i%N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr_row][i%N] + sum(J[k, i%N, site_nbr_row] for k in range(4))
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.008986265432098765}
#island_id: 2
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  # Check for spin flipping
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += J[2,i//N,i//N]
        priorities[i][1] -= J[2,i//N,i//N]
      else:
        priorities[i][0] -= J[2,i//N,i//N]
        priorities[i][1] += J[2,i//N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00043163580246913556}
#island_id: 2
#version_generated: 2
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.000997993827160494}
#island_id: 3
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    priorities[i][0] = h_site + total_spin_left - total_spin_right
    priorities[i][1] = 2 - priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00552145061728395}
#island_id: 3
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.0021628086419753084}
#island_id: 3
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    if h_site > 0:
      priorities[i][0] = (total_spin_left + total_spin_right) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin_left + total_spin_right) / 2
      priorities[i][1] = priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010742283950617283}
#island_id: 3
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    priorities[i][0] = (h_site + total_spin_left - total_spin_right) / 2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16583904320987677}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    neighbor_spin = 0
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        neighbor_spin += 1
      else:
        neighbor_spin -= 1
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin + neighbor_spin, -total_spin - neighbor_spin]
    else:
      priorities[i] = [-total_spin - neighbor_spin, total_spin + neighbor_spin]
  return(priorities)




#score: {'data2D.txt': 0.08258163580246924}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': -0.0003523148148148152}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    total_spin = 0
    
    # Calculate total spin from nearest neighbors
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]
    
    # Calculate total spin from horizontal neighbors
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      total_spin += h[site_nbr][i//N]
    else:
      total_spin -= h[site_nbr][i//N]
    
    # Calculate magnetism at the current site
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  
  return(priorities)




#score: {'data2D.txt': 0.006137500000000001}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i//N,(site_nbr + ((k-1)%2 - 1)) % N] for k in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0044748456790123445}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i//N,(site_nbr + ((k-1)%2 - 1)) % N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy+1
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -(total_energy+1)
  return(priorities)




#score: {'data2D.txt': -0.011511882716049382}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i//N,(site_nbr + ((k-1)%2 - 1)) % N] for k in range(4)])
    priorities[i][0] = h[site_nbr][i%N] + total_energy
    if priorities[i][0] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.009369290123456789}
#island_id: 0
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = sum([J[k,i//N,(site_nbr + ((k-1)%2 - 1)) % N] for k in range(4)])
    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
  return(priorities)




#score: {'data2D.txt': 0.006232561728395062}
#island_id: 1
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin = sum(J[j,i%N,i//N] for j in range(4))
      priorities[i] = [total_spin, -total_spin]
    else:
      total_spin = -sum(J[j,i%N,i//N] for j in range(4))
      priorities[i] = [-total_spin, total_spin]
    
  return(priorities)




#score: {'data2D.txt': 0.16522577160493854}
#island_id: 1
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    site_nbr_1 = (i % N + ((2)%2 - 1)) % N
    site_nbr_2 = (i % N + ((3)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_1][i//N]
      priorities[i][1] -= h[site_nbr_1][i//N]
    else:
      priorities[i][0] -= h[site_nbr_1][i//N]
      priorities[i][1] += h[site_nbr_1][i//N]
    
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += h[site_nbr_2][i//N]
      priorities[i][1] -= h[site_nbr_2][i//N]
    else:
      priorities[i][0] -= h[site_nbr_2][i//N]
      priorities[i][1] += h[site_nbr_2][i//N]
    
  return(priorities)




#score: {'data2D.txt': 0.13779398148148167}
#island_id: 1
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    total_spin += np.sum(J[:,i//N,i//N])
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
  return(priorities)




#score: {'data2D.txt': -0.0016695987654320988}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * (2*h[i//N][i%N] if J[1,i//N,site_nbr] > 0 else -2*h[i//N][i%N])
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.019899845679012342}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_energy = 0
    for k in range(3):
      if J[k,i//N,site_nbr] > 0:
        energy = h[site_nbr][i%N]
      else:
        energy = -h[site_nbr][i%N]
      total_energy += energy

    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = -total_energy
    priorities[i][1] = 1

  return(priorities)




#score: {'data2D.txt': 0.06100540123456792}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    nn_sum = sum(J[0,i%N,[(site_nbr + k)%N for k in range(3)]])
    if J[1,i//N,site_nbr] > 0:
      total_energy = h[i//N][i%N] * (1 + np.tanh(nn_sum))
    else:
      total_energy = -h[i//N][i%N] * (1 - np.tanh(nn_sum))

    priorities[i][0] = h[site_nbr][i%N] + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06924614197530868}
#island_id: 0
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nn_energy = h[nn_site][i%N]
      else:
        nn_energy = -h[nn_site][i%N]

      nns.append(nn_energy)

    total_energy = sum(nns) * h[i//N][i%N]
    if J[1,i//N,site_nbr] > 0:
      total_energy += h[i//N][i%N]
    else:
      total_energy -= h[i//N][i%N]

    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005215586419753086}
#island_id: 3
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= np.count_nonzero(J[:,i//N,i%N]) // 2
    else:
      priorities[i][1] += np.count_nonzero(J[:,i//N,i%N]) // 2
  return(priorities)




#score: {'data2D.txt': -0.00553503086419753}
#island_id: 3
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 2
    else:
      priorities[i][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.005402932098765432}
#island_id: 3
#version_generated: 2
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_right = (i % N + ((i//N)%2 - 1)) % N
    
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])

    h_site = h[site_nbr_left][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 2
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
      
  return(priorities)




#score: {'data2D.txt': -0.0016094135802469135}
#island_id: 2
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([J[k][i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbrs[1]][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbrs[0]][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00043163580246913556}
#island_id: 2
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.009749537037037037}
#island_id: 2
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += J[3,i//N,i%N]
      priorities[i][0] -= 2
      priorities[i][1] += 2
    else:
      total_spin -= J[3,i//N,i%N]
      priorities[i][0] += 2
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.01584737654320988}
#island_id: 3
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin_left = sum(J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)) if i % N > 0 else 0
    total_spin_right = sum(J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)) if (i+1) % N < N else 0
    
    h_site = h[i//N][i%N]
    
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 2
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
      
  return(priorities)




#score: {'data2D.txt': -0.007731944444444444}
#island_id: 3
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
    site_nbr_up = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr_up][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    elif h[site_nbr_down][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.0054032407407407414}
#island_id: 3
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= np.sum(np.abs(priorities[:i]).sum(axis=1))
    else:
      priorities[i][1] += np.sum(np.abs(priorities[:i]).sum(axis=1))
  return(priorities)




#score: {'data2D.txt': -0.005529166666666667}
#island_id: 3
#version_generated: 2
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_left = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    total_spin_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin_left += 2 * h_site
      total_spin_right -= 2 * h_site
    priorities[i][0] = (h_site + total_spin_left + total_spin_right) / 3
    if J[0,i%N,i//N] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 1
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    total_spin = 0
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.011561265432098766}
#island_id: 1
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priorities[i] = [total_spin, -total_spin]
  
  return(priorities)




#score: {'data2D.txt': -0.002460030864197531}
#island_id: 1
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(3):
     site_nbr = (i % N + ((k-1)%2 - 1)) % N
     if J[k,i%N,i//N] > 0:
      total_spin += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
     else:
      total_spin -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
     site_nbr = (i % N + ((j-1)%2 - 1)) % N
     if J[3,i%N,j] > 0:
      total_spin += h[site_nbr][j]
      priorities[i][1] -= h[site_nbr][j]
     else:
      total_spin -= h[site_nbr][j]
      priorities[i][1] += h[site_nbr][j]
    
    if J[3,i%N,i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  
  return(priorities)




#score: {'data2D.txt': 0.11361651234567914}
#island_id: 1
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    if h[i//N][i%N] > 0:
      priorities[i] = [total_spin, -total_spin]
    else:
      priorities[i] = [-total_spin, total_spin]
    
    for k in range(3):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
        priorities[i][1] -= h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
        priorities[i][1] += h[site_nbr][i%N]
    
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[3,i%N,j] > 0:
        priorities[i][0] += h[site_nbr][j]
        priorities[i][1] -= h[site_nbr][j]
      else:
        priorities[i][0] -= h[site_nbr][j]
        priorities[i][1] += h[site_nbr][j]
  
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 1 if h[site_nbr][i%N] > 0 else -1

    nn_sites = [(site_nbr + ((j-1)%2 - 1)) % N for j in range(3)]
    total_energy = sum([J[j,i//N,nn_site] * (h[nn_site][i%N] if h[nn_site][i%N] == h_site else 0) for j, nn_site in enumerate(nn_sites)])

    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.10143503086419757}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(4):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,nn_site] > 0:
        nns.append(1)
      else:
        nns.append(-1)

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j,i//N,nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    if np.sum(nns) > 0:
      priorities[i][0] = h_site + total_energy/abs(np.sum(nns))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006618981481481482}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nns = []
    for j in range(3):
      nn_site = (site_nbr + ((j-1)%2 - 1)) % N
      nns.append(J[j, i//N, nn_site])

    total_energy = sum(nns) * h[i//N][i%N]
    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  # Add an additional term to the priority function that depends on the magnetization of the site's nearest neighbors
  for i in range(N**2):
    nns = []
    for j in range(4):
      nn_site = (i % N + ((i//N-1)%2 - 1)) % N
      if j == 0:
        nns.append(J[3, i//N, nn_site])
      else:
        nns.append(J[j-1, i//N, nn_site])

    magnetization = sum(nns)
    priorities[i][0] += magnetization
    priorities[i][1] -= magnetization

  return(priorities)




#score: {'data2D.txt': -0.002346450617283951}
#island_id: 2
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h[site_nbr][i%N] + total_spin)**2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + total_spin)**2
      priorities[i][1] = -priorities[i][0]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += J[3,i//N,i%N]
      priorities[i][0] -= 4*(h[site_nbr][i%N] + total_spin)
      priorities[i][1] += 4*(h[site_nbr][i%N] + total_spin)
    else:
      total_spin -= J[3,i//N,i%N]
      priorities[i][0] += 4*(h[site_nbr][i%N] + total_spin)
      priorities[i][1] -= 4*(h[site_nbr][i%N] + total_spin)

  return(priorities)




#score: {'data2D.txt': -0.00045262345679012393}
#island_id: 2
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

    site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[3,i//N,i%N]
      priorities[i][1] -= J[3,i//N,i%N]
    else:
      priorities[i][0] -= J[3,i//N,i%N]
      priorities[i][1] += J[3,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




