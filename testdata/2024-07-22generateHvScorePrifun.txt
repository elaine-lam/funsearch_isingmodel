#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001649845679012345}
#island_id: 1
#version_generated: 2
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,site_nbr2,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,site_nbr2,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    for k in range(3):
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000977932098765432}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N] * J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N] * J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002633487654320987}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000539043209876543}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i//N)%2,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i//N)%2,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018194444444444584}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * np.sign(h[i//N][i%N])
    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013939814814814817}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_J = np.sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2768124999999996}
#island_id: 2
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_fields = 0
    for k in range(3):
      sum_neighbor_fields += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum_neighbor_fields
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum_neighbor_fields
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 1
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+2)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+2)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006115740740740747}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      priorities = np.zeros((N*N,2))
      for k in range(N**2):
        site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
        if J[0,k%N,k//N] > 0:
          h_site = h[site_nbr][k%N]
        else:
          h_site = -h[site_nbr][k%N]

        if h[k//N][k%N] > 0:
          priorities[k][0] = h_site + sum([J[m,k%N,k//N]*h[(m+N-1)%N][k%N] for m in range(3)])
          priorities[k][1] = -priorities[k][0]
        else:
          priorities[k][0] = -h_site - sum([J[m,k%N,k//N]*h[(m+N-1)%N][k%N] for m in range(3)])
          priorities[k][1] = -priorities[k][0]

      return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00524922839506173}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if h[i//N][i%N] > 0:
      biases = [h[j][i%N] for j in site_nbrs]
    else:
      biases = [-x for x in [h[j][i%N] for j in site_nbrs]]
    
    for k in range(2):
      if J[0,i%N,i//N]*h[(k+N-1)%N][i%N] > 0:
        interactions = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]
      else:
        interactions = [-x for x in [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(biases) + sum(interactions)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(biases) - sum(interactions)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020637345679012345}
#island_id: 0
#version_generated: 2
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*(h[site_nbr][i%N]-2*h[i//N][i%N]) for k in range(1,3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*(h[site_nbr][i%N]-2*h[i//N][i%N]) for k in range(1,3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 1
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(3))]
    priorities[i][0] = sum(h_sites)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009371450617283951}
#island_id: 1
#version_generated: 2
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_neighbor = (k+N-1)%N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr_neighbor][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr_neighbor][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011949074074074071}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_neighbors_spin = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*site_neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*site_neighbors_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16035663580246914}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]
    neighbor_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priority = h_site + site_energy + neighbor_energy
    priorities[i][0] = -priority
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h = h[i//N][i%N]
    if site_h > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003657561728395062}
#island_id: 1
#version_generated: 2
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0065763888888888886}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    for k in range(3):
      if (J[k,i%N,i//N] > 0) == (h[i//N][i%N] > 0):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00041280864197530963}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([abs(J[k,i%N,k]-J[k-1,i%N,k-1])*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([abs(J[k,i%N,k]-J[k-1,i%N,k-1])*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for k in range(3):
      total_spin[1 if J[k,i%N,i//N] > 0 else 0] += h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009452160493827146}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000433179012345679}
#island_id: 0
#version_generated: 2
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N, (i//N-1)%N]]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(2)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(2)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 3
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k+N-1)%N
      if J[k, i % N, i // N] > 0:
        h_site += J[k, i % N, i // N] * h[site_k][i % N]
      else:
        h_site -= J[k, i % N, i // N] * h[site_k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.022902314814814813}
#island_id: 1
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (i % N + ((i//N-1+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 1
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00027021604938271584}
#island_id: 0
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 and i % N != 0: # left neighbor
        h_site += J[k,i//N,i//N]*h[(i//N-1)%N][(i+1)%N]
      elif k == 1 and i // N != 0: # top neighbor
        h_site += J[k,i//N,i%N]*h[i//N-1][(i+N-1)%N]
      elif k == 2 and (i % N == 0 or i // N == 0): # right and top neighbors
        if i // N > 0:
          h_site -= J[k,i//N,i//N]*h[i//N-1][i%N]
        if i % N > 0:
          h_site -= J[k,i//N,i//N]*h[(i+N-1)%N][(i+1)%N]
      elif k == 3 and (i // N < N-1 or i % N < N): # left, right, bottom neighbors
        if i // N > 0:
          h_site -= J[k,i//N,i//N]*h[i//N-1][i%N]
        if i // N < N-1:
          h_site += J[k,i//N,i//N]*h[(i+N)%N][(i+1)%N]
        if i % N > 0:
          h_site -= J[k,i//N,i//N]*h[(i+N-1)%N][(i+1)%N]
        if i % N < N:
          h_site += J[k,i//N,i//N]*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.31650725308641897}
#island_id: 0
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[k,i%N,(k+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[k,i%N,(k+N-1)%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008998611111111112}
#island_id: 0
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] * 2.0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    priorities[i][0] = -total_spin
    priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 1
#version_generated: 2
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.04316774691358025}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0 and j == 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif h[i//N][i%N] < 0 and j == 0:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = J[j,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013657407407407482}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for j in range(4):
      site_nbr_j = (i % N + ((i//N+j-1)%2 - 1)) % N
      h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0021300925925925927}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([abs(J[k,i%N,i//N])*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([abs(J[k,i%N,i//N])*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011405864197530863}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term2 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003655864197530847}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site += h[site_nbr][j]
      else:
        h_site -= h[site_nbr][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_term
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_term
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006726851851851851}
#island_id: 0
#version_generated: 2
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  total_spin_influence = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin_influence[i][0] += 1
      total_spin_influence[i][1] -= 1
    else:
      total_spin_influence[i][0] -= 1
      total_spin_influence[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin_influence[(k+N-1)%N*N+i%N][0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(i + j) % N for j in [-1,1]] 
    sum_h_nb = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nb
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nb
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 0
#version_generated: 2
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbrs[j]][i%N] * J[j,i//N,i%N] for j in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001563117283950617}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + J[0,i%N,i//N]) * h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004973765432098769}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0 and i % N < N//2:
        priorities[i][0] += h_site
      elif J[0,i%N,i//N] < 0 and i % N >= N//2:
        priorities[i][0] -= h_site
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] < 0 and i % N < N//2:
        priorities[i][0] -= h_site
      elif J[0,i%N,i//N] > 0 and i % N >= N//2:
        priorities[i][0] += h_site

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = spin_bias
      priorities[i][1] = -spin_bias
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = spin_bias
      priorities[i][1] = -spin_bias

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 2
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] * (1 if j == 0 else -1) > 0:
        priorities[i][j] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.006098302469135802}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (1,0)]:
      neighbor_i = (i // N + direction[0]) % N
      neighbor_j = (i % N + direction[1]) % N
      if J[direction[0],neighbor_i,neighbor_j] > 0:
        h_neighbor = h[neighbor_i][neighbor_j]
      else:
        h_neighbor = -h[neighbor_i][neighbor_j]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J[direction[0],neighbor_i,neighbor_j]*h_neighbor
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[direction[0],neighbor_i,neighbor_j]*h_neighbor
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = -priorities[i][1]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012887345679012346}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr_j][i%N]
      else:
        total_spin -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004188425925925926}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[0,i%N,i//N]*h[site_nbr][i%N]) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]+h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[0,i%N,i//N]*h[site_nbr][i%N]) - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007106481481481476}
#island_id: 2
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14070354938271623}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*(-1)**(k+N-1)//2 for k in range(4)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*(-1)**((k+N-1)//2) for k in range(4)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002644290123456791}
#island_id: 1
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,(i%N),i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J_sum > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0 and h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 0 and h[i//N][i%N] < 0:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 1 and h[i//N][i%N] > 0:
        priorities[i][j] = -priorities[i][0]
      elif j == 1 and h[i//N][i%N] < 0:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003328858024691361}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_site = h_site
    for j in range(N):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N if i == j*N else (i % N + ((j-1)%2 - 1)) % N
      sum_h_site += J[0,i%N,j]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if i//N != (i+N-1)//N and i % N == (i+N-1)%N:
        J_val = J[j,i//N,(i+N-1)//N]
      else:
        J_val = 0

      h_site += J_val*h[(i+j-2)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002849537037037037}
#island_id: 1
#version_generated: 2
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000708796296296297}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[0,site_nbrs[j],i//N] > 0 for j in range(4)]) > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(4)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,site_nbrs[j],i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(4),range(4))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,site_nbrs[j],i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(4),range(4))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018979938271604935}
#island_id: 3
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(3):
      if h[site_nbr][j] > 0:
        total_spin += J[j, i%N, i//N]
      else:
        total_spin -= J[j, i%N, i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    spin = (total_spin[i][0] >= total_spin[i][1])
    if h[int(i/N)][i%N] > 0:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0]
    else:
      priorities[i][0] = -total_spin[i][1]
      priorities[i][1] = total_spin[i][1]
  
  return(priorities)




#score: {'data2D.txt': -0.0022748456790123465}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      h_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_neighbor = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h_neighbor
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00011280864197530849}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N:
        continue
      elif k == 1 and (i % N == 0 or i % N == N-1):
        continue
      elif k == 2 and (i // N == 0 or i // N == N-1):
        continue
      h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + h_sum
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - h_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 1
#version_generated: 2
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002960648148148148}
#island_id: 1
#version_generated: 2
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[site_nbr][i%N] > 0:
      total_energy += J[0,i%N,i//N]
    else:
      total_energy -= J[0,i%N,i//N]

    priorities[i][0] = spin * (total_energy - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008190277777777777}
#island_id: 2
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and J[3,i%N,i//N] > 0:
        priorities[i][0] = sum([h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] > 0 and J[3,i%N,i//N] < 0:
        priorities[i][0] = sum([h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = 2*sum([J[k,i%N,i//N]*h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0 and J[3,i%N,i//N] < 0:
        priorities[i][0] = sum([h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] < 0 and J[3,i%N,i//N] > 0:
        priorities[i][0] = sum([h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = 2*sum([J[k,i%N,i//N]*h[j][k] for j in range(N) for k in range(4) if (j==i//N and k==i%N)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011615740740740738}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site_nbr2 = (k + i % N + ((i//N-1)%2 - 1)) % N
      total_spin += J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006444907407407408}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.053272376543209904}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = 2*h[i//N][i%N] - 1
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004334876543209879}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = (h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 4
    if magnetism > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020918209876543215}
#island_id: 1
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k == 0 else J[k-1,i%N,i//N]*h[(k-1+N-1)%N][i%N] for k in range(4)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003741820987654321}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [h[site_nbr][i%N], 1]
    else:
      total_spin = [-h[site_nbr][i%N], -1]

    for k in range(4):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr2][i%N]
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.2768124999999996}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (i-1) % (N*N)
    site_nbr_2 = ((i+N)%N*N) + (i//N-1)
    site_nbr_3 = (i+1) % N*N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009893518518518509}
#island_id: 1
#version_generated: 2
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.15619552469135822}
#island_id: 0
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_total = np.zeros(4)
    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site2 = h[site_nbr2][i%N]
      else:
        h_site2 = -h[site_nbr2][i%N]
      priority_total += h_site + h_site2

    if h[i//N][i%N] > 0:
      priorities[i][0] = priority_total[0]
      priorities[i][1] = -priority_total[0]
    else:
      priorities[i][0] = -priority_total[0]
      priorities[i][1] = -priority_total[0]

  return(priorities)




#score: {'data2D.txt': -0.0002871913580246919}
#island_id: 0
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0: 
        x = i % N
        y = (i//N)
      elif k == 1: 
        x = ((i+N-1)%N)
        y = (i//N)
      elif k == 2: 
        x = (i % N)
        y = (i//N+1) if i // N < N - 1 else 0
      else: 
        x = ((i-N+1)%N)
        y = (i//N)

      if h[y][x] > 0:
        h_site += J[k,i%N,i//N]
      else:
        h_site -= J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    spin_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + spin_total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 + np.tanh(-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026589506172839495}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00015540123456790072}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3,k,i//N]*h[k%N,i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3,k,i//N]*h[k%N,i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010837962962962965}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_top = (i // N - 1) % N
    site_nbr_bot = (i // N + 1) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr_top][i%N] for k in range(4)]) - J[3,i//N,i%N]*2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr_bot][i%N] for k in range(4)]) + J[3,i//N,i%N]*2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -2.9166666666667117e-05}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.24448657407407398}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_site = 1
    else:
      spin_site = -1
    
    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0 and h[i//N][i%N] == h[site_nbr_k][i%N]:
        spin_site += 1
      elif J[k,i%N,i//N] < 0 and h[i//N][i%N] != h[site_nbr_k][i%N]:
        spin_site -= 1
    
    priorities[i][0] = spin_site
    priorities[i][1] = -spin_site
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 3
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if i > 0 and (i % N == 0 or i % N == N - 1):
      h_sum = sum(h[i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([0, 0])
    for k in range(3):
      if J[k, i%N, i//N] > 0:
        total_spin[1] -= h[(k+N-1)%N][i%N]
      else:
        total_spin[0] += h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020140432098765437}
#island_id: 3
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00021280864197530713}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, h[i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, h[i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.001620833333333334}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a bonus term to favor sites with the same spin as their neighbors
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([h[site_nbr][k]*J[k,i%N,i//N] for k in range(3)])
      priorities[i][1] -= sum([h[site_nbr][k]*J[k,i%N,i//N] for k in range(3)])
    else:
      priorities[i][0] -= sum([h[site_nbr][k]*J[k,i%N,i//N] for k in range(3)])
      priorities[i][1] += sum([h[site_nbr][k]*J[k,i%N,i//N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0011544753086419758}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N+1, i//N, i//N-1]]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(h_sites) > 0:
      priorities[i][0] = sum([h_site + sum([J[k,site_nbr,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for h_site, site_nbr in zip(h_sites, site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_site + sum([J[k,site_nbr,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for h_site, site_nbr in zip(h_sites, site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006594135802469136}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = 0
    for k in range(3):
      sum_J += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008204783950617259}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site interactions
  site_interactions = np.sum(J[1:3].reshape(-1, N, N), axis=0)
  
  # Add magnetism and site interactions to priorities
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(h) + np.sum(site_interactions)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(h) - np.sum(site_interactions)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010915123456790123}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_energy = -2*h[i//N][i%N]*J[0,i//N,i//N]
    
    if J[1,i%N,i//N] > 0 and J[2,i//N,i//N] > 0:
      if h_site > 0:
        priorities[i][0] = sum_energy
        priorities[i][1] = -sum_energy
      else:
        priorities[i][0] = -sum_energy
        priorities[i][1] = sum_energy
    elif J[1,i%N,i//N] < 0 and J[2,i//N,i//N] > 0:
      if h_site > 0:
        priorities[i][0] = sum_energy + 2*h_site
        priorities[i][1] = -sum_energy
      else:
        priorities[i][0] = -sum_energy - 2*h_site
        priorities[i][1] = sum_energy
    elif J[1,i%N,i//N] > 0 and J[2,i//N,i//N] < 0:
      if h_site > 0:
        priorities[i][0] = sum_energy + 2*h_site
        priorities[i][1] = -sum_energy
      else:
        priorities[i][0] = -sum_energy - 2*h_site
        priorities[i][1] = sum_energy
    elif J[1,i%N,i//N] < 0 and J[2,i//N,i//N] < 0:
      if h_site > 0:
        priorities[i][0] = sum_energy
        priorities[i][1] = -sum_energy - 4*h_site
      else:
        priorities[i][0] = -sum_energy + 4*h_site
        priorities[i][1] = sum_energy

  return(priorities)




#score: {'data2D.txt': 0.00021373456790123435}
#island_id: 1
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i//N, (i%N+1)%N]*h[(2+i//N)%N][(i%N+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i//N, (i%N+1)%N]*h[(2+i//N)%N][(i%N+1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016032407407407408}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      site_sum = sum([J[k, i % N, (i // N + k) % N] * (h[(k + 1) % N][i % N] if ((i // N + k) % N < i // N and k % 2 == j) else -h[(k + 1) % N][i % N]) for k in range(4)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + site_sum
      else:
        priorities[i][j] = -h_site - site_sum

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3061933641975302}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    priority_sum = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = max(priority_sum, -priority_sum)
      priorities[i][1] = min(priority_sum, -priority_sum)
    else:
      priorities[i][0] = min(priority_sum, -priority_sum)
      priorities[i][1] = max(priority_sum, -priority_sum)

  return(priorities)




#score: {'data2D.txt': -0.0006523148148148147}
#island_id: 1
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N-1) % (N*N)
    site_down = max(0, i-N) if i != 0 else 0
    site_left = (i%N + (i//N)*N) if i<N else N*(i//N)+N-1
    site_right = (i%N + (i//N+1)*N) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_up % N][i%N] + J[3,i%N,i//N]*h[site_down % N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site + J[0,i%N,i//N]*h[site_up % N][i%N] - J[3,i%N,i//N]*h[site_down % N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006498456790123464}
#island_id: 1
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*(-1)**((k+N-1)%2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00014861111111111103}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017422839506172865}
#island_id: 1
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_H = h[i//N][i%N]
    for k in range(3):
      sum_H += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_H
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_H
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07005077160493832}
#island_id: 1
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[site_nbr][i%N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03281435185185185}
#island_id: 1
#version_generated: 2
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + J[2,i//N,i%N]*h[(i//N+1)%N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[i//N][i%N] - J[2,i//N,i%N]*h[(i//N+1)%N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16151959876543237}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019347222222222207}
#island_id: 2
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
        priorities[i][j] = h_site + sum(neighbors)
      else:
        priorities[i][1-j] = -priorities[i][j]

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 0
#version_generated: 2
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 1
#version_generated: 2
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023828703703703703}
#island_id: 1
#version_generated: 2
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*J[2,i//N,i%N]*(h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J[1,i//N,i%N]*J[2,i//N,i%N]*(-h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 3
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy
    else:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037700617283950653}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i%N, i//N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, i%N, i//N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(-1, 2):
        if i % N + k >= 0 and i % N + k < N:
          total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][j] = h_site + total_spin
  return(priorities)




#score: {'data2D.txt': 0.026622376543209883}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (np.sign(h[i//N][i%N]) + np.sign(h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (np.sign(h[i//N][i%N]) + np.sign(h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005896759259259259}
#island_id: 2
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j, i%N, i//N] * h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017359567901234572}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = h[site_nbr][i%N]
      for k in range(4):
        site_k = ((k+((i//N+N-1)%2 - 1)) % N)
        priorities[i][0] += J[k,i//N,i%N]*h[site_k][i%N]
        priorities[i][1] -= J[k,i//N,i%N]*h[site_k][i%N]
    else:
      spin_bias = -h[site_nbr][i%N]
      for k in range(4):
        site_k = ((k+((i//N+N-1)%2 - 1)) % N)
        priorities[i][0] -= J[k,i//N,i%N]*h[site_k][i%N]
        priorities[i][1] += J[k,i//N,i%N]*h[site_k][i%N]

    priorities[i][0] += spin_bias
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022424382716049376}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_site = (i-N-1) % (N*N)
    right_site = (i+1)%N
    top_site = (i//N)*N + ((i%N+N-1)%N)
    bottom_site = (i//N)*N + ((i%N+1)%N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - J[3,i%N,i//N]*h[top_site % N][top_site // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + J[3,i%N,i//N]*h[top_site % N][top_site // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026712962962962975}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006507716049382711}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(1,3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009481327160493826}
#island_id: 1
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[j,i%N,i//N]*h[site_nbr_j][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[j,i%N,i//N]*h[site_nbr_j][i%N]
        priorities[i][1] += 1
  
  return(priorities)




#score: {'data2D.txt': 0.0007131172839506196}
#island_id: 1
#version_generated: 2
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_left = sum([J[k,i%N,(i-1)%N]*h[(k+N-1)%N][(i-1)%N] for k in range(3) if i % N != 0])
    sum_right = sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][i%N] for k in range(3) if i % N + 1 < N])
    sum_up = sum([J[k,(i//N)%N,((i//N)-1)%N]*h[k%(N-1)][i%N] for k in range(3) if i // N > 0])
    sum_down = sum([J[k,(i//N)%N,(i//N+1)%N]*h[k%N][i%N] for k in range(3) if i // N + 1 < N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_left + sum_up
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_left - sum_up
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000591820987654321}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003094135802469136}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N] if k%2==0 else -h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00014706790123456814}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+2*h[i//N][i%N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+2*h[i//N][i%N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00018935185185185187}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - 2*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018811728395061643}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_priority = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_priority += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_priority -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002054475308641977}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[j][i%N] for j in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004939043209876544}
#island_id: 2
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 1
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.02222052469135802}
#island_id: 1
#version_generated: 2
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      for j in range(3):
        priorities[i][0] += J[j,i//N,i%N]
        priorities[i][1] -= J[j,i//N,i%N]
    else:
      for j in range(3):
        priorities[i][0] -= J[j,i//N,i%N]
        priorities[i][1] += J[j,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': -0.0005844135802469132}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001227006172839506}
#island_id: 3
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,k] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012155864197530863}
#island_id: 3
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum(J[:, i//N, i%N])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00029429012345679064}
#island_id: 0
#version_generated: 2
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*np.sum([J[k,i%N,i//N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*np.sum([J[k,i%N,i//N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005733024691358027}
#island_id: 0
#version_generated: 2
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_total = h[i//N][i%N]
    priorities[i][0] = h_site + J[0,i//N,i%N]*h_total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018304012345679015}
#island_id: 0
#version_generated: 2
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      total_spin = sum([J[k,i//N,i%N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 2
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007893518518518521}
#island_id: 0
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023581790123456785}
#island_id: 0
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    
    if J[0,i%N,i//N] > 0 and spin == 1:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] > 0 and spin == -1:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0 and spin == 1:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0 and spin == -1:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1, i%N, i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1, i%N, i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14112083333333353}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005174382716049384}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10656250000000006}
#island_id: 2
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N,i%N]>0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]-2*h[i//N][i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i//N,i%N]>0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]-2*h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.001777932098765432}
#island_id: 1
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(i+N-1)%N][i%N]
    right_spin = h[(i+N+1)%N][i%N]
    top_spin = h[i//N][(i%N+3)%N]
    bottom_spin = h[i//N][(i%N+1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*s for k,s in [(0,left_spin),(1,right_spin),(2,top_spin),(3,bottom_spin)]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*s for k,s in [(0,left_spin),(1,right_spin),(2,top_spin),(3,bottom_spin)]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011915123456790124}
#island_id: 1
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]
    total_spin = np.sum([h_site], axis=0)
    if total_spin > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_priority
      priorities[i][1] = -total_priority
    else:
      priorities[i][0] = -total_priority
      priorities[i][1] = total_priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021563271604938274}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.996913580246945e-05}
#island_id: 3
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [((i//N-1)%N,i%N),(i//N,(i%N+1)%N),(i//N,(i%N-1)%N),((i//N+1)%N,i%N)]
    nn_h = sum([h[nn[0]][nn[1]]*J[0,nn[1],nn[0]] for nn in nns])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000779166666666667}
#island_id: 3
#version_generated: 2
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j in range(3):
      site_nbrs.append((site_nbrs[-1] + ((j-1)%2 - 1)) % N)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,site_nbrs[j]]*h[site_nbrs[j],i%N] for j,k in zip(range(3),range(4))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,site_nbrs[j]]*h[site_nbrs[j],i%N] for j,k in zip(range(3),range(4))])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin[i][0] += h[i//N][i%N]
    total_spin[i][1] -= 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028168209876543223}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
      for k in range(3):
        if J[k, i%N, i//N] > 0 and i // N != (k + N - 1) % N:
          total_spin += h[(k + N - 1) % N][i%N]
        elif J[k, i%N, i//N] < 0 and i // N == (k + N - 1) % N:
          total_spin -= h[(k + N - 1) % N][i%N]
      priorities[i][0] = sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -1
      for k in range(3):
        if J[k, i%N, i//N] > 0 and i // N != (k + N - 1) % N:
          total_spin -= h[(k + N - 1) % N][i%N]
        elif J[k, i%N, i//N] < 0 and i // N == (k + N - 1) % N:
          total_spin += h[(k + N - 1) % N][i%N]
      priorities[i][0] = -sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contributions = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    total_neighbor_contribution = sum(neighbor_contributions)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_neighbor_contribution
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_neighbor_contribution
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.005027314814814815}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i+N*k)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017837962962962966}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0,0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin = sum([J[k,i,j]*h[(k+N-1)%N][j] for k in [0,2]]) + J[3,i,j]
        priorities[i*N+j][0] = total_spin
        priorities[i*N+j][1] = -total_spin
      else:
        total_spin = sum([J[k,i,j]*h[(k+N-1)%N][j] for k in [0,2]]) + J[3,i,j]
        priorities[i*N+j][0] = -total_spin
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if j == 0 else -priorities[i][0]
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if j == 0 else -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00276929012345679}
#island_id: 1
#version_generated: 2
#generate time10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%2]][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%2]][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009362654320987655}
#island_id: 2
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*(-1)**(k+N) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*(-1)**(k+N) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017245370370370379}
#island_id: 3
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.15052885802469157}
#island_id: 3
#version_generated: 3
#generate time10:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr2 = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, [1, -1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, [1, -1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11457484567901247}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    sum_h = 0
    sum_J = 0
    for j in range(4):
      if h[i//N][site_nbrs[j]%N] > 0:
        sum_h += J[0,i%N,site_nbrs[j]]
      else:
        sum_h -= J[0,i%N,site_nbrs[j]]

    priorities[i][0] = -h[i//N][i%N] + sum_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001002932098765433}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0),(-1,0),(0,1),(0,-1)]:
      site_nbr2 = (i % N + ((i//N+d[0])%2 - 1)) % N
      if J[d[0],i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    neighbors_h = [h[(k+N-1)%N][i%N]*J[k,i%N,i//N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    site_nbr3 = ((i-N-1)%N)
    site_nbr4 = (i // N + ((i % N-1) % 2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_spin_1 = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_spin_2 = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = min(abs(priority_spin_1), abs(priority_spin_2))
    priorities[i][1] = 1 if priority_spin_1 < -priority_spin_2 else -1

  return(priorities)




#score: {'data2D.txt': -0.0012770061728395064}
#island_id: 0
#version_generated: 2
#generate time10:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17711651234567927}
#island_id: 3
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] < 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] < 0:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
          priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0 and J[1,(i+1)%N,i//N] > 0 and J[2,i%N,(i+N-1)%N] > 0:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      elif J[0,i%N,i//N] < 0 and J[1,(i+1)%N,i//N] < 0 and J[2,i%N,(i+N-1)%N] < 0:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
          priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004510802469135793}
#island_id: 2
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip([0,1,2],[1,2,0])]) > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip([0,1,2],[1,2,0])])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip([0,1,2],[1,2,0])])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007186728395061731}
#island_id: 2
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if i//N == (k+N-1)%N or i%N == (k+2)%3:
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
        priorities[i][1] -= 2*J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 2
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006479938271604929}
#island_id: 2
#version_generated: 3
#generate time10:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k + i % N) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470216049382717}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0,0]
    for j in range(4):
      if j == 0:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif j == 1:
        site_nbr = ((i+N-1)%N + ((i//N)%2 - 1)) % N
      elif j == 2:
        site_nbr = ((i+1)%N + ((i//N)%2 - 1)) % N
      else:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr][i%N]
        total_spin[1] += 1
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.018103240740740743}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      if J[0, i%N, j] > 0:
        total_spin += h[site_nbr_j][i%N]
      else:
        total_spin -= h[site_nbr_j][i%N]

    priorities[i][0] = h_site + total_spin[1]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005899691358024689}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = np.sum(J[:,:,i//N]*h[:,i%N], axis=0)
      priorities[i][0] = np.dot(total_spin, J[0,:,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = np.sum(-J[:,:,i//N]*-h[:,i%N], axis=0)
      priorities[i][0] = -np.dot(total_spin, J[0,:,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016479938271604933}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + J[3, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - J[3, i%N, i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009183641975308642}
#island_id: 1
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == k and i%N == 0: continue
      if J[k,i%N,i//N] > 0:
        h_site += sum([J[m,i%N,(k+N-1)%N]*h[(m+N-1)%N][i%N] for m in range(3) if (m+k) % N != i//N])
      else:
        h_site -= sum([J[m,i%N,(k+N-1)%N]*h[(m+N-1)%N][i%N] for m in range(3) if (m+k) % N != i//N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.006298611111111112}
#island_id: 1
#version_generated: 2
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i-N-1) % (N*N)
    site_nbr_down = (i+N+1) % (N*N)
    site_nbr_left = (i-1) % (N*N)
    if i%N == 0:
      site_nbr_right = (i+N+2) % (N*N)
    else:
      site_nbr_right = (i+N+1) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00305108024691358}
#island_id: 0
#version_generated: 2
#generate time10:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        total_spin += h[site_nbr_k][i%N]
      else:
        total_spin -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -9.212962962962934e-05}
#island_id: 2
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (site_nbr + (N-1)%N) % N
    site_nbr_right = (site_nbr + 1)%N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,site_nbr,i//N]*h[site_nbr_left][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,site_nbr,i//N]*h[site_nbr_right][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013939814814814817}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i % (N * N) < N // 2:
      top_neighbor = (i + N) % (N * N)
    else:
      top_neighbor = ((i - N) % (N * N)) + N

    if i % N == 0 or J[1,i%N,i//N] < 0:
      left_neighbor = i
    elif i % N == N - 1:
      left_neighbor = (i - 1) % (N * N)
    else:
      left_neighbor = ((i - 1) % N) + i // N * N

    if i >= N and i % N != N - 1 or J[2,i%N,i//N] < 0:
      right_neighbor = (i - N) % (N * N)
    else:
      right_neighbor = ((i - N) % N) + i // N * N

    if i < N or J[3,i%N,i//N] < 0:
      bottom_neighbor = i
    elif i >= N * (N - 1):
      bottom_neighbor = (i - N * (N - 1)) % (N * N)
    else:
      bottom_neighbor = ((i - N) % N) + i // N * N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,(i-1)%N,i//N]*h[(k+N-1)%N][(i-1)%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,(i-1)%N,i//N]*h[(k+N-1)%N][(i-1)%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19674459876543207}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([h[site_nbrs[j]][i%N] for j in range(3)]) > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 1
#version_generated: 2
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.12064398148148155}
#island_id: 2
#version_generated: 3
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      k = (j + i // N) % N
      if J[j,i%N,k] > 0:
        h_site += J[j,i%N,k]*h[k][i%N]
      else:
        h_site -= J[j,i%N,k]*h[k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013225308641975363}
#island_id: 2
#version_generated: 3
#generate time10:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        term = h[i//N][i%N]
      elif j == 1:
        term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + term
      else:
        priorities[i][j] = -h_site - term

  return(priorities)




#score: {'data2D.txt': -3.904320987654297e-05}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010905864197530877}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04395293209876544}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or h[i//N][i%N] * J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = max(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or h[i//N][i%N] * J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = min(-priorities[i][0],-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003216512345679013}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N], axis=0)[i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N], axis=0)[i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006258487654320987}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(4):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_j][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_j][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007504629629629631}
#island_id: 2
#version_generated: 3
#generate time10:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004660956790123458}
#island_id: 2
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 2
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007902777777777772}
#island_id: 2
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if d == 0:
        site_nbr_1 = (i % N + ((i//N-1)%2 - 1)) % N
        site_nbr_2 = (i % N) 
      elif d == 1:
        site_nbr_1 = (i % N) 
        site_nbr_2 = (i // N)
      elif d == 2:
        site_nbr_1 = (i % N + ((i//N+1)%N - 1)) % N
        site_nbr_2 = (i // N)
      else:
        site_nbr_1 = (i % N) 
        site_nbr_2 = ((i // N + 1) % N)

      if J[0,site_nbr_1,i//N] > 0:
        h_site += J[d,i%N,i//N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[d,i%N,i//N]*h[site_nbr_2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00017762345679012302}
#island_id: 1
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+N-1)%N, (i-N)%N if i % N == 0 else (i-1)%N, (i+1)%N if i % N == N-1 else (i+2)%N]
    sum_neighbor = sum([J[k,i%N,i//N]*h[neighbor][i%N] for k, neighbor in enumerate(neighbors)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 1
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_terms = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*sum_terms
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 1
#version_generated: 2
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007748456790123457}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - \
               sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + \
               sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009075617283950619}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i+N*k) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020384259259259257}
#island_id: 2
#version_generated: 3
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + J[0,i%N,i//N]*(h[(i+N-1)%N][i%N] - h[site_nbr][i%N])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + J[0,i%N,i//N]*(h[(i+N-1)%N][i%N] - h[site_nbr][i%N])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 2
#version_generated: 3
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003976697530864198}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sum = sum([h[site_nbrs[j]][i%N] for j in range(4)])
    if J[0,i%N,i//N]*h_sum > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)]) + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)]) - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001177006172839507}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if (J[0,i%N,i//N]*h[i//N][i%N] > 0) or (J[1,i%N,i//N] > 0):
      priorities[i][0] = h_site + sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018226851851851843}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(-1,2):
      sitenbr = (i % N + ((i//N+j)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site_nbr = h[sitenbr][i%N]
      else:
        h_site_nbr = -h[sitenbr][i%N]
      total_spin += [h[i//N][i%N], h_site, h_site_nbr, h_site+h_site_nbr]

    priorities[i][0] = np.dot(total_spin[:2], total_spin[2:])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014223765432098765}
#island_id: 1
#version_generated: 2
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-k,i%N,i//N]*h[(3-k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-k,i%N,i//N]*h[(3-k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 0
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002236882716049383}
#island_id: 0
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      neighbor_spin = (J[j, i%N, i//N]*h[(j+N-1)%N][i%N])
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + neighbor_spin
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - neighbor_spin
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008868827160493828}
#island_id: 3
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2, i%N, i//N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2, i%N, i//N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = 2 * (h[i//N][i%N] > 0) - 1
    interaction = sum([J[k,i%N,i//N]*magnetism*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + interaction
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009495370370370368}
#island_id: 3
#version_generated: 3
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_h_site = 0
      for k in range(N):
        if (k == i % N and ((j-1)%2 - 1) != 0) or k == site_nbr:
          continue
        sum_h_site += J[0,k,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum_h_site
      else:
        priorities[i][j] = -h_site - sum_h_site

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N + i % N) % N + (i // N * N) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0003692901234567896}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs]
    total_spin = sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001318672839506173}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = total_energy + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001680555555555554}
#island_id: 1
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i//N-1)%N if i//N>0 else N-1
    site_nbr_down = (i//N+1)%N if i//N<N-1 else 0
    site_nbr_left = (i%N-1)%N if i%N>0 else N-1
    site_nbr_right = (i%N+1)%N if i%N<N-1 else 0

    h_up = h[site_nbr_up][i%N]
    h_down = h[site_nbr_down][i%N]
    h_left = h[i//N][site_nbr_left]
    h_right = h[i//N][site_nbr_right]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + J[1,i%N,i//N]*h_up + J[2,i%N,i//N]*h_down
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - J[1,i%N,i//N]*h_up - J[2,i//N,i%N]*h_down
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003948302469135802}
#island_id: 0
#version_generated: 2
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.638888888888917e-05}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= J[3,i//N,i%N]*h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += J[3,i//N,i%N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.008163425925925926}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      neighbor_spin = h[(k+N-1)%N][i%N] if J[k,i%N,i//N] > 0 else -h[(k+N-1)%N][i%N]
      priorities[i][0] += J[k,i%N,i//N]*neighbor_spin
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0] - h_site
    else:
      priorities[i][1] = -priorities[i][0] + h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1667816358024694}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = total_spin[i][0] + h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][1] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004518364197530865}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010942901234567892}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(i+1)%N,(i+N-1)%N,(i+N)%N,(i+N//2)%N] 
    for nb in nbs:
      if J[0,i%N,nb] > 0:
        h_site += sum([J[k,i%N,nb]*h[nb][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,nb]*h[nb][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015165123456790121}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_total = h[i//N][i%N]
    if h_total > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003235030864197531}
#island_id: 1
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr2 = (k+N*(i%N)+((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    priorities[i][0] = h_site + J[3,i//N,i%N]*h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011359567901234571}
#island_id: 1
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[1,(i+N-1)%N,i//N], J[2,(i+N-1)%N,i//N], J[3,(i+1)%N,i//N]]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(3):
      sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 0
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_sum = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    h_site = h[i//N][i%N]
    
    priorities[i][0] = h_site + site_nbr_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008273148148148144}
#island_id: 0
#version_generated: 2
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J_sum > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013856481481481478}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site_j = h[site_nbr][j]
      else:
        h_site_j = -h[site_nbr][j]

      total_spin[0] += h_site + sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      total_spin[1] -= 2*h_site

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j - 1) % 2 - 1)) % N for j in range(3)]
    h_site = sum([h[s][i % N] * J[k, i % N, i // N] for k, s in enumerate(site_nbrs)])
    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10960725308641987}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = total_spin[i][1]
    else:
      h_site = -total_spin[i][1]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_hamiltonian = h[site_nbr][i%N]
      neighbor_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_hamiltonian = -h[site_nbr][i%N]
      neighbor_spin_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = spin_hamiltonian + neighbor_spin_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017334876543209869}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0] + h_site
    priorities[i][1] = -total_spin[0] - h_site

  return(priorities)




#score: {'data2D.txt': 0.0004998456790123459}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_neighbors = [(i+N-1)%N, (i-1)%N, (i+1)%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][site_neighbors[k]] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][site_neighbors[k]] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[i//N:i//N+1],axis=0)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002036574074074074}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr2 = (i % N + ((i//N-j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020143518518518527}
#island_id: 1
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sites = [h[(k+N-1)%N][i%N] for k in range(3)]
    
    if all([J[k,i%N,i//N]*neighbor_h_site > 0 for k, neighbor_h_site in zip(range(3), neighbor_h_sites)]):
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007743981481481484}
#island_id: 1
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 1
#version_generated: 2
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.16151959876543237}
#island_id: 0
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008791666666666669}
#island_id: 0
#version_generated: 2
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_site += J[2,i%N,i//N]*h[site_nbr2][i%N]
    else:
      h_site -= J[2,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007586882716049381}
#island_id: 2
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N and abs(i%N-k) <= N//2:
        J_term = 0.5 * J[k,i%N,i//N]
      else:
        J_term = J[k,i%N,i//N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J_term*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J_term*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if total > 0:
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      direction = [(0,1),(1,0),(-1,0),(0,-1)][d]
      if (direction[0]+i//N)%N == i//N and (direction[1]+i%N)%N == i%N:
        site_nbr = ((i//N+direction[0])%N + ((i%N+direction[1]-1)%2 - 1)) % N
        if J[d,i%N,i//N] > 0:
          h_site += h[site_nbr][i%N]
        else:
          h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026712962962962975}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = 0
    for k in range(3):
      spin_sum += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001109722222222222}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(j)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(j)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) % N + (i % N - 1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03710385802469136}
#island_id: 1
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      k = (j + i%N) % N
      if J[j,i//N,k] > 0:
        h_site += h[k][i%N]
      else:
        h_site -= h[k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.33946003086419646}
#island_id: 1
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i//N]*h[i//N][i%N] + sum([J[k,i%N,k-2]%N for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i//N]*h[i//N][i%N] - sum([J[k,i%N,k-2]%N for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007618827160493823}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1, i % N, i // N] > 0 and J[2, i % N, i // N] > 0:
        priorities[i][0] += sum([J[k, (k + 1) % N, i // N]*h[(k+1)%N][i%N] for k in range(3)])
      elif J[1, i % N, i // N] < 0 and J[2, i % N, i // N] < 0:
        priorities[i][0] -= sum([J[k, (k + 1) % N, i // N]*h[(k+1)%N][i%N] for k in range(3)])

      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1, i % N, i // N] < 0 and J[2, i % N, i // N] < 0:
        priorities[i][0] -= sum([J[k, (k + 1) % N, i // N]*h[(k+1)%N][i%N] for k in range(3)])
      elif J[1, i % N, i // N] > 0 and J[2, i % N, i // N] > 0:
        priorities[i][0] += sum([J[k, (k + 1) % N, i // N]*h[(k+1)%N][i%N] for k in range(3)])

      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014155864197530868}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = 0
    for k in range(3):
      site_nn = (i % N + ((i//N-1)%2 - 1) + k-1) % N
      if J[k,i%N,i//N] > 0:
        sum_nn += h[site_nn][i%N]
      else:
        sum_nn -= h[site_nn][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time10:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001358179012345679}
#island_id: 3
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    site_nbr_mag = h[site_nbr][i%N]
    site_nbr_spin = J[0, i%N, i//N] * spin

    priorities[i][0] = site_nbr_mag + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_nbr_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003492746913580248}
#island_id: 3
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[site_nbr_k][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00030046296296296266}
#island_id: 1
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i%N,i//N]*h[site_nbr2][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023334876543209876}
#island_id: 1
#version_generated: 2
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] < 0 or J[2,i%N,i//N] < 0:
        priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] > 0 or J[2,i%N,i//N] > 0:
        priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) < 0:
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  # Sort sites by priority and assign spins based on the most likely spin
  sorted_indices = np.argsort(priorities, axis=1)
  priorities_sorted = priorities[np.arange(N*N)[:,None], sorted_indices]
  for i in range(N**2):
    if priorities_sorted[i][0] > 0:
      priorities[i] = [1, -1]
    else:
      priorities[i] = [-1, 1]

  return(priorities)




#score: {'data2D.txt': -0.0024208333333333334}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h[i//N][i%N] + sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N) % N + ((i//N)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009288425925925927}
#island_id: 1
#version_generated: 2
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if i == 0 or i == N-1 or (i % N) == 0 or (i % N) == N-1: 
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03545262345679012}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[2,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[3,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[3,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003459104938271605}
#island_id: 0
#version_generated: 2
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i//N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i//N]

    priorities[i][0] = h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31269583333333256}
#island_id: 2
#version_generated: 3
#generate time10:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      priorities[i][0] = -(1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = 1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]

  return(priorities)




#score: {'data2D.txt': -0.3176615740740732}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [sum([J[k,i//N,i%N]*h[(k+N-1)%N][j] for k in range(3)]) for j in range(N)]
      priorities[i][0] = max(total_spin) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = [sum([J[k,i//N,i%N]*h[(k+N-1)%N][j] for k in range(3)]) for j in range(N)]
      priorities[i][0] = -max(total_spin) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 3
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i%N, i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.009427932098765399}
#island_id: 3
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(h)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -7.916666666666716e-05}
#island_id: 3
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (site_nbr + N - 1) % N
    site_nbr_down = (site_nbr + N + 1) % N
    site_nbr_left = (site_nbr + i//N - 1) % N if i % N != 0 else site_nbr
    site_nbr_right = (site_nbr + i//N + 1) % N if i % N != N-1 else site_nbr

    total_spin = h_site + sum([J[k, i%N, i//N]*h[site_nbr_up][i%N] for k in range(3)]) - \
          J[0, i%N, i//N]*h[site_nbr_down][i%N] + \
          J[1, i%N, i//N]*h[site_nbr_left][i%N] - \
          J[2, i%N, i//N]*h[site_nbr_right][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': 0.0013921296296296292}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    h_site = h[site_nbr2][i % N] * J[0,i % N,site_nbr2]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008134259259259248}
#island_id: 1
#version_generated: 2
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[3,i//N,i%N] > 0:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[3,i//N,i%N] > 0:
        priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002849537037037037}
#island_id: 1
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0038297839506172843}
#island_id: 0
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs]
    
    priorities[i][0] = sum([h_site for h_site in h_sites])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.00029799382716049443}
#island_id: 0
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities and update them
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0], priorities[i][1] = sorted([priorities[i][0], priorities[i][1]])
    else:
      priorities[i][0], priorities[i][1] = sorted([-x for x in [priorities[i][0], priorities[i][1]]])

  return(priorities)




#score: {'data2D.txt': 0.0003868827160493824}
#island_id: 0
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if i//N==j and i%N==(j+1)%3:
        J_val = J[j,i%N,i//N]
      elif i//N==j and i%N==(2-j)%3:
        J_val = -J[1-(i//N),i%N,i//N]
      else:
        J_val = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J_val for j in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J_val for j in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 0
#version_generated: 2
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002260956790123458}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00023873456790123515}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if J[k, i%N, i//N] > 0:
        h_neighbor = h[(k+N-1)%N][i%N]
      else:
        h_neighbor = -h[(k+N-1)%N][i%N]
      priorities[i][0] += h_site + h_neighbor
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0021103395061728395}
#island_id: 1
#version_generated: 2
#generate time11:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    h_site = h[site_nbr1][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr1][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0037878086419753086}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N]*J[0,i%N,i//N] + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[i//N][i%N]*J[0,i%N,i//N] + J[1,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2807476851851848}
#island_id: 0
#version_generated: 2
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - 2 * np.sum(np.square(h))
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + 2 * np.sum(np.square(h))
  return(priorities)




#score: {'data2D.txt': 0.004678240740740741}
#island_id: 0
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr1][i%N] + J[3,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr1][i%N] - J[3,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010509259259259221}
#island_id: 0
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    neighbors = [J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)]
    
    if np.sum(neighbors) > 0:
      priorities[i][0] = sum([neighbors[j]*(1 + h[i//N][i%N]) for j in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([neighbors[j]*(1 - h[i//N][i%N]) for j in range(4)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002135030864197531}
#island_id: 2
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = 0
    for j in site_nbrs:
      h_site += J[0,i%N,j] * h[j][i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.898148148148176e-05}
#island_id: 2
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+1)%N,i//N]*h[(k+N-1)%N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.716049382713308e-07}
#island_id: 3
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or ((i//N+k-N) % N == site_nbr):
        continue
      h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate the priority based on the site interactions and magnetism
    total_priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_priority
    priorities[i][1] = -total_priority

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time11:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012989197530864198}
#island_id: 0
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k+1)%2 == 0: # consider all neighbors
        site_nbr_k = ((i//N + k % N) % N + ((i%N + (k-1)%2 - 1)) % N) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else: # consider only nearest neighbors
        site_nbr_k = (i // N + k) % N
        if i % N < k:
          site_nbr_k = (i // N + k - 1) % N
        elif i % N > k:
          site_nbr_k = (i // N + k + 1) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 0
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_neighbor_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002609413580246915}
#island_id: 1
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1,i//N]]
    h_site = sum([h[j][i%N] if J[0,j,i//N]>0 else -h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left = (i-1) % N
    right = (i+1) % N
    up   = (i-N) % (N*N)
    down  = (i+N) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022979938271604937}
#island_id: 1
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    for k in range(3):
      if abs(h[(k+N-1)%N][i%N])>abs(h[i//N][i%N]):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[i//N][i%N]

    if h[i//N][i%N]>0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011637345679012348}
#island_id: 1
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,k,i//N]*(h[k%N][i%N]-h[k%N][site_nbr]) for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[2,k,i//N]*(h[k%N][i%N]-h[k%N][site_nbr]) for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020509259259259287}
#island_id: 1
#version_generated: 2
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    total_h_site = sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site
      priorities[i][1] = -total_h_site
    else:
      priorities[i][0] = -total_h_site
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': 0.0009384259259259255}
#island_id: 1
#version_generated: 2
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(3):
      if i%N+d > N-1 or i//N+d > N-1: continue
      site_nbr = (i % N + ((i//N-d)%2 - 1)) % N
      h_site += J[d,i%N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011952160493827156}
#island_id: 3
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      site_nbr_dir = ((i//N+direction[0]) % N*N + ((i%N+direction[1])%2-1)) % N
      h_site += J[direction[0], i%N, i//N]*h[site_nbr_dir][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003742283950617276}
#island_id: 3
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if site_sum > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002022993827160494}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.003823611111111111}
#island_id: 0
#version_generated: 2
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[3,i//N,i%N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[3,i//N,i%N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0043087962962962975}
#island_id: 0
#version_generated: 2
#generate time11:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  # Calculate site neighbors
  site_nbrs = ((i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N * N))

  # Calculate site interactions
  site_interactions = J[0, :, :] * h[:, :]

  # Calculate priorities
  for i in range(N**2):
    if h[i // N][i % N] > 0:
      priorities[i][0] = np.sum(site_interactions[i % N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(site_interactions[i % N])
      priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0037998456790123464}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.32907299382715954}
#island_id: 0
#version_generated: 2
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = [1, -1]
    else:
      total_spin = [-1, 1]

    for k in range(2):
      site_neighbors = []
      for j in range(N):
        if (j == i % N) or ((j + (i//N-1)%2 - 1)) % N != i % N: 
          continue
        for l in range(N):
          if (l == i % N) or ((l + (i//N-1)%2 - 1)) % N != i % N:
            continue
          site_neighbors.append(J[k,l,i//N]*h[(k+N-1)%N][i%N])
      total_spin[k] += sum(site_neighbors)

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010200617283950719}
#island_id: 1
#version_generated: 2
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%N - N//2)) % N
      total_spin += h[j][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038566358024691356}
#island_id: 1
#version_generated: 2
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      total_spin = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.001719907407407407}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_h_site += J[k,i%N,i//N]
      else:
        total_h_site -= J[k,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00043225308641975336}
#island_id: 2
#version_generated: 3
#generate time11:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    site_nbr_values = [h[site_nbrs[j]][i%N] if J[0,i%N,i//N]>0 else -h[site_nbrs[j]][i%N] for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([site_nbr_values[j] for j in range(2)]) + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([site_nbr_values[j] for j in range(2)]) - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018998456790123442}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 2
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N] * h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k, i%N, i//N] * h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_contrib = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_contrib
      priorities[i][1] = -priorities[i][0]
    else:
      spin_contrib = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_contrib
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010766975308641974}
#island_id: 2
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k, i % N, (i // N + k) % N]*h[(i // N + k) % N][i % N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00012453703703703723}
#island_id: 3
#version_generated: 3
#generate time11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 3
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_h + total_J
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 8.040123456790132e-05}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.11426404320987654}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [((i + (j-1)%2 - 1)) % N]
      site_nbrs.extend([(i + ((k-1)%2 - 1)) % N for k in [(j-1), (j+1)] if k >= 0 and k < N])
      site_nbrs = [site_nbrs[0]]
      for site_nbr in site_nbrs:
        h_site = J[0,i][j] * (h[site_nbr][j] if J[0,i][j] > 0 else -h[site_nbr][j])
        priorities[i*N+j][0] += h_site
        priorities[i*N+j][1] -= h_site

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 3
#version_generated: 3
#generate time11:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 0
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if (h[i//N][i%N] > 0).all():
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009893518518518509}
#island_id: 0
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.011664969135802469}
#island_id: 1
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = 2 * sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 1
#version_generated: 2
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0099375}
#island_id: 1
#version_generated: 2
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 1
#version_generated: 2
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])*priorities[i][1] - h_site
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+2*N-1)%N][i%N])*priorities[i][1] - h_site

    priorities[i][1] = np.sqrt(-priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -0.0039609567901234604}
#island_id: 1
#version_generated: 2
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - np.sum(J[:, i//N, :])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) + np.sum(J[:, i//N, :])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021035493827160487}
#island_id: 1
#version_generated: 2
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate the interaction energies between each site and its nearest neighbors
  J_nn = []
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N for _ in range(4)]
    j_nn = [J[0,site_nbrs[j],i//N] for j in range(4)]
    J_nn.append(sum([j_nn[j] * h[site_nbrs[j]][i%N] for j in range(4)]))
  J_nn = np.array(J_nn)
  
  # Calculate the magnetism at each site
  h_site = []
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N for _ in range(4)]
    h_site.append(sum([h[site_nbrs[j]][i%N] * J_nn[i] for j in range(4)]))
  h_site = np.array(h_site)
  
  # Calculate the priorities
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site[i]
      priorities[i][1] = -h_site[i]
    else:
      priorities[i][0] = -h_site[i]
      priorities[i][1] = h_site[i]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007729938271604939}
#island_id: 2
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
    else:
      priorities[i][0] = (1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (-h_site)
      priorities[i][1] = -(1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (-h_site)

  return(priorities)




#score: {'data2D.txt': -0.0050918209876543215}
#island_id: 0
#version_generated: 2
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = np.sign(h[site_nbr][i%N])
    interaction_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = h_site + interaction_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003993364197530864}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0: # top row
        site_nbr = (N-1)
      elif i % N == N-1: # bottom row
        site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
      else: # middle rows
        if h[i//N][i%N] > 0:
          site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
        else:
          site_nbr = (i//N + ((i%N+1)%2 - 1)) % N

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0037405864197530866}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[0,i%N,i//N] > 0 and (i % N == 0 or i % N == N-1):
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    elif J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05864645061728398}
#island_id: 2
#version_generated: 3
#generate time11:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate priority based on the site's neighbors
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] += h_site
    priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.29951805555555494}
#island_id: 2
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0]
    else:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016665123456790119}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = 2*h[i//N][i%N] - 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*magnetism for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001788117283950617}
#island_id: 3
#version_generated: 3
#generate time11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(N):
      site_nbr2 = (j + ((i-1)%2 - 1)) % N
      if J[0,i//N,j] > 0:
        h_site2 = h[site_nbr2][i//N]
      else:
        h_site2 = -h[site_nbr2][i//N]

      total_spin[0] += h_site + h_site2
      total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0003007716049382719}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%N-1)%2 - 1) % N
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006279320987654325}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for k in range(3):
      if J[k, i%N, i//N] > 0:
        total_spin[0] += h[(k+N-1)%N][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[(k+N-1)%N][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001909104938271604}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      else:
        energy = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

      total_energy += energy

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': -0.0001368827160493819}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j,i%N,i//N] > 0 and i//N % 2 == (j+1)%2:
        h_site += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      elif J[j,i%N,i//N] < 0 and i//N % 2 != (j+1)%2:
        h_site -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if h[i//N][site_nbr_k] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(h[k][j] for j in range(N)) for k in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007109567901234564}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      if (k % N) == i % N or abs(k//N-i//N) > 1:
        continue
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004705246913580244}
#island_id: 1
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[i//N][i%N]
    total_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_energy > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
      
  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00011990740740740686}
#island_id: 3
#version_generated: 3
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1),(1,0),(0,-1),(-1,0)]:
      neighbor_i, neighbor_j = (i//N + direction[0], i%N + direction[1])
      if 0 <= neighbor_i < N and 0 <= neighbor_j < N:
        h_neighbor = h[neighbor_i][neighbor_j]
        if J[direction[0],i%N,i//N] > 0:
          h_site += h_neighbor
        else:
          h_site -= h_neighbor

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0030575617283950625}
#island_id: 3
#version_generated: 3
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014964506172839508}
#island_id: 1
#version_generated: 2
#generate time11:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if i < N_half:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010026234567901235}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    site_spin = (total_spin[i%N] + total_spin[(i//N)%N]) if i < N**2/2 else -(total_spin[i%N] + total_spin[(i//N)%N])
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*site_spin for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2774757716049379}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004109722222222222}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014285493827160493}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min(k+N-1,N-1),i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[min(k+N-1,N-1),i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for j in range(4):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j, i%N, i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]
      total_spin[0] += h_site
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i//N*N+i%N][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010316358024691356}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0014378086419753087}
#island_id: 1
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 1
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if sum(neighbors) > 0:
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0029316358024691356}
#island_id: 1
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N) + (i % N)) % N
    h_site = h[site_nbr1][i%N]
    
    if J[0,i%N,i//N] > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 2
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = -h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036084876543209876}
#island_id: 1
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J[0,i//N,i%N]*h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010581790123456779}
#island_id: 0
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016162037037037041}
#island_id: 0
#version_generated: 2
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N] if J[0,i%N,i//N]>0 else -J[j,i%N,i//N]*h[site_nbr_j][i%N]
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contributions = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbor_contributions)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbor_contributions)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010174382716049398}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[min(k+N-1,N-1)][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00036342592592592644}
#island_id: 3
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[3,i%N,i//N]*h[N-1][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[3,i%N,i//N]*h[N-1][i%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003649691358024685}
#island_id: 0
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.019273919753086417}
#island_id: 0
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    site_nbrs += [max(0, min(i // N, (i % N + k) % N)) for k in [-1, 1]]
    site_nbrs += [max(0, min((i // N + k) % N, N-1)) for k in [-N+1, N-2]]

    h_site = sum([h[site][i%N] * J[k,i//N,i%N] for site, k in zip(site_nbrs, range(4))])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 0
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008060185185185192}
#island_id: 3
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019023148148148144}
#island_id: 3
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    
    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*magnetism
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,i//N]
      else:
        priorities[i][1] += J[k,i%N,i//N]

    if h_site > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 2*h_site

  return(priorities)




#score: {'data2D.txt': -0.0009560185185185183}
#island_id: 3
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - spin_bias
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2720859567901231}
#island_id: 3
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.002260956790123458}
#island_id: 3
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012307098765432106}
#island_id: 3
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_site = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.0011384259259259255}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N] * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007760802469135797}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k+N-1)%N or (i % N) == ((k+N-1)%N):
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000766820987654321}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [i-N, i+1]:
      if 0 <= j < N**2:
        site_nbr_2 = (j % N + ((j//N-1)%2 - 1)) % N
        if J[0,j%N,j//N] > 0:
          h_site += h[site_nbr_2][j%N]
        else:
          h_site -= h[site_nbr_2][j%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017174382716049386}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_neighbor = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site_neighbor = h[site_neighbor][j]
      else:
        h_site_neighbor = -h[site_neighbor][j]

      total_spin[0] += h_site + sum([J[k,i%N,j]*h_site_neighbor for k in range(4)])
      if J[0,i%N,j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.1567933641975309}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]
    for j in range(N):
      for k in range(4):
        if k == 0: site = (i // N, i % N)
        elif k == 1: site = ((i // N + 1) % N, i % N)
        elif k == 2: site = (i // N, (i % N + 1) % N)
        else: site = ((i // N + 1) % N, (i % N + 1) % N)
        if J[k,i%N,i//N] > 0:
          total_energy += J[k,i%N,i//N]*h[site[0]][site[1]]
        else:
          total_energy -= J[k,i%N,i//N]*h[site[0]][site[1]]

    priorities[i][0] = h_site + total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001390432098765429}
#island_id: 1
#version_generated: 2
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002289351851851852}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
      else:
        total_spin -= h[site_nbr][i%N]

    priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007853395061728392}
#island_id: 1
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for k in [(i//N-1)%N, (i//N+1)%N]:
        if k == i//N: continue
        j_nbr = ((i+N*k)%N)
        J_site = J[d,i//N,k]
        h_nbr = h[k][j_nbr]
        if J_site > 0:
          h_site += J_site*h_nbr
        else:
          h_site -= J_site*h_nbr

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013152777777777774}
#island_id: 1
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] += h[site_nbr][i%N]
      else:
        priorities[i][0] -= h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] -= h[site_nbr][i%N]
      else:
        priorities[i][0] += h[site_nbr][i%N]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.2984378086419747}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + k)%N for k in [-1,0,1]] + [(j + k)%N for k in [-1,0,1]]
      site_nbrs.remove(i) and site_nbrs.remove(j)
      h_site = np.sum([h[site_nbrs[k]][min((k+1)%3,j)]*J[min(k,2),i%N,j//N] for k in range(4)])
      if h[i][j] > 0:
        priorities[i*N+j][0] = h_site + 1
        priorities[i*N+j][1] = -h_site - 1
      else:
        priorities[i*N+j][0] = -h_site - 1
        priorities[i*N+j][1] = h_site + 1
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016489197530864196}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      dir_x, dir_y = ((d+1)%2-1), ((d+1)%2-1)
      site_nbr_dir = (i % N + dir_x, i // N + dir_y)
      if site_nbr_dir[0] >= 0 and site_nbr_dir[0] < N and site_nbr_dir[1] >= 0 and site_nbr_dir[1] < N:
        h_site += J[d,i%N,i//N]*h[site_nbr_dir[0]][site_nbr_dir[1]]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.016427623456790122}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_neighbor = (j + ((i-1)%N - N//2)) % N
      if J[0,j,i//N] > 0:
        total_spin[0] += h[site_nbr_neighbor][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_neighbor][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = -h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006662037037037037}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]) + h_site
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]) - h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      sum_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + sum_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      sum_interactions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - sum_interactions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016699074074074077}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1 if k!=2 else 1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1 if k!=2 else 1)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.011761574074074074}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if all([h[site_nbrs[j]][i%N]>0 for j in range(3)]):
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    elif all([h[site_nbrs[j]][i%N]<0 for j in range(3)]):
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      site_nbrs.sort(key=lambda x: abs(h[x][i%N]), reverse=True)
      site_nbr = site_nbrs[0]
      if h[site_nbr][i%N]>0:
        h_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      else:
        h_site = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])

    if h[i//N][i%N]>0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02021466049382717}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      h_site = h[site_nbr][j] if J[0,i,j]%2 == 0 else -h[site_nbr][j]
      priorities[i*N+j,0] = h_site + np.sum(J[:,i,j]*h[np.arange(4)%N,j], axis=0)
      priorities[i*N+j,1] = -priorities[i*N+j,0]
  return priorities




#score: {'data2D.txt': 0.005591820987654321}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N - 1) % N - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    if J[2, i % N, i // N] > 0:
      h_site_nbr2 = h[site_nbr2][i % N]
    else:
      h_site_nbr2 = -h[site_nbr2][i % N]

    priorities[i][0] = h_site + h_site_nbr2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = J[0, i%N, i//N]*h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -J[0, i%N, i//N]*h_site - sum([J[k, i%N, i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010140432098765433}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * (2*h[(k+N-1)%N][i%N]-h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * (2*h[(k+N-1)%N][i%N]-h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    site_nbr3 = (site_nbr1 + N - 1) % (N*N)
    
    h_site = h[site_nbr1][i%N]
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003395524691358025}
#island_id: 0
#version_generated: 2
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.zeros((N*N,2))
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

      priorities[i][1] = -priorities[i][0] + np.sum(total_spin)
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.zeros((N*N,2))
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

      priorities[i][1] = -priorities[i][0] + np.sum(total_spin)

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012714506172839509}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)%N + (i%N - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,site_nbr2,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,site_nbr2,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009008487654320987}
#island_id: 0
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:, i//N, :].T @ J[:, i%N, :])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:, i//N, :].T @ J[:, i%N, :])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time11:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020884259259259263}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[j,i%N,i//N]*h[(j+N-1)%N][i%N] for j in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[j,i%N,i//N]*h[(j+N-1)%N][i%N] for j in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028300925925925924}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 + j) % N)
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr1 = (i % N + ((i // N - 1) % 2 - 1)) % N
    site_nbr2 = (i % N + ((i // N + 1) % 2 - 1)) % N
    
    h_site = 0.5 * (h[site_nbr1][i % N] + h[site_nbr2][i % N])
    
    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.00023564814814814783}
#island_id: 1
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-i%2,i//N,(i-1)%N]*h[i//N,(i-1)%N] for i in range(i+1,N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-i%2,i//N,(i-1)%N]*h[i//N,(i-1)%N] for i in range(i+1,N)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 3
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005924845679012346}
#island_id: 3
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 1 and i % N < 2) or (k == 2 and i % N > N-3):
        J_k = 0
      elif (k == 1 and i % N > N//2) or (k == 2 and i % N < N//2):
        J_k = -J[k,i%N,i//N]
      else:
        J_k = J[k,i%N,i//N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J_k*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J_k*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008582253086419753}
#island_id: 3
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.002305401234567902}
#island_id: 1
#version_generated: 2
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (2*h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (2*h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 3
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1623770061728395}
#island_id: 3
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_up_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    spin_down_energy = -(h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

    priorities[i][0] = h_site + spin_up_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[0, i, j]*h[site_nbr, j]
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= J[0, i, j]*h[site_nbr, j]
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total
    priorities[i][1] = -total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.13525447530864215}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i//N,i%N]*h[(i+N-1)%N][i%N] + J[2,(i+N-2)%N,i%N]*h[(i+N-2)%N][i%N]) - h_site
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(J[1,i//N,i%N]*h[(i+N-1)%N][i%N] + J[2,(i+N-2)%N,i%N]*h[(i+N-2)%N][i%N]) - h_site
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002501543209876547}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == N - 1: 
        priorities[i][1] = priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == N - 1: 
        priorities[i][1] = priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.089506172839547e-05}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs,range(3))])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00037422839506172866}
#island_id: 2
#version_generated: 3
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_N = (i % N + ((i//N-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site_N = h[site_nbr_N][(i+N-1)%N]
    else:
      h_site_N = -h[site_nbr_N][(i+N-1)%N]

    site_nbr_E = (i % N + ((i//N+1)%2)) % N
    if J[2,i%N,i//N] > 0:
      h_site_E = h[site_nbr_E][i%N]
    else:
      h_site_E = -h[site_nbr_E][i%N]

    site_nbr_NE = (i % N + ((i//N-1)%2)) % N
    if J[3,i%N,i//N] > 0:
      h_site_NE = h[site_nbr_NE][(i+N-1)%N]
    else:
      h_site_NE = -h[site_nbr_NE][(i+N-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site_N + h_site_E + h_site_NE
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site_N - h_site_E - h_site_NE
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site_nbr_1 = (k + ((i//N-1)%2 - 1)) % N
      if h[k][i%N] > 0:
        total_spin[0] += J[0,k,i//N]*h[site_nbr_1][i%N]
        total_spin[1] -= J[0,k,i//N]
      else:
        total_spin[0] -= J[0,k,i//N]*-h[site_nbr_1][i%N]
        total_spin[1] += J[0,k,i//N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_priority
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_priority
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[h[i][j], -h[i][j]] for i in range(N) for j in range(N)]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 4
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / 4
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N**2):
        site = (j % N + ((j//N-1)%2 - 1)) % N
        if h[i//N][i%N] > 0:
          total_spin[j][0] += J[0,j%N,i//N]
          total_spin[j][1] -= J[0,j%N,i//N]
        else:
          total_spin[j][0] -= J[0,j%N,i//N]
          total_spin[j][1] += J[0,j%N,i//N]

      if h[i//N][i%N] > 0:
        priority_total[i][0] = np.sum(total_spin)
        priority_total[i][1] = -np.sum(total_spin)
      else:
        priority_total[i][0] = -np.sum(total_spin)
        priority_total[i][1] = -priority_total[i][0]

      return(priority_total)




#score: {'data2D.txt': 0.004096141975308643}
#island_id: 1
#version_generated: 2
#generate time12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += h[(k+N-1)%N][i%N]
      else:
        h_site -= h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 1
#version_generated: 2
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3): 
      site_nbr_2 = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 3
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008010802469135805}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sum = sum([h[j][i%N] for j in site_nbrs])
    J_sum = sum([J[k,i%N,i//N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sum + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.058683796296296324}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N]*h[i//N][i%N] > 0 else -J[0,i%N,i//N]*h[i//N][i%N]
    for j in range(3):
      h_site += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.645061728395038e-05}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-2)%N][i%N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-2)%N][i%N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    J_sites = [J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(2), site_nbrs)]
    
    if sum(h_sites) > 0:
      priorities[i][0] = sum(h_sites) + sum(J_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - sum(J_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007816358024691361}
#island_id: 1
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0:  # left neighbor
        site_nbr_left = (i % N + ((i//N-1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += h[site_nbr][i%N]
        else:
          h_site -= h[site_nbr][i%N]
      elif k == 1:  # right neighbor
        site_nbr_right = (i % N + ((i//N+1)%2 - 1)) % N
        if J[k,i%N,i//N] > 0:
          h_site += h[site_nbr_right][i%N]
        else:
          h_site -= h[site_nbr_right][i%N]
      elif k == 2:  # top neighbor
        site_nbr_top = (i % N + ((i//N-1)%2 - 1)) % N
        if J[k,i//N,i%N] > 0:
          h_site += h[i//N][i%N]
        else:
          h_site -= h[i//N][i%N]
      elif k == 3:  # bottom neighbor
        site_nbr_bottom = (i % N + ((i//N+1)%2 - 1)) % N
        if J[k,i//N,i%N] > 0:
          h_site += h[i//N][i%N]
        else:
          h_site -= h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010165123456790117}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 and i % N != 0:
        site_nbr_1 = (i % N - 1 + ((i//N-1)%2 - 1)) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_1][i%N]
      elif k == 1 and i % N != N-1:
        site_nbr_1 = (i % N + 1 + ((i//N-1)%2 - 1)) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_1][i%N]
      elif k == 2 and i // N != 0:
        site_nbr_1 = (i // N - 1 + ((i-1)%N - 1)) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_1][i%N]
      elif k == 3 and i // N != N-1:
        site_nbr_1 = (i // N + 1 + ((i-1)%N - 1)) % N
        h_site += J[k,i%N,i//N]*h[site_nbr_1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nbrs = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_nbrs
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][1] = -h_site if h[i//N][i%N] > 0 else h_site
    priorities[i][0] = -priorities[i][1]
  return(priorities)




#score: {'data2D.txt': -0.003372993827160494}
#island_id: 2
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j, i%N, i//N] > 0:
        priorities[i][0] += h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.11609706790123463}
#island_id: 2
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = 2*(h[i//N][i%N]-priorities[i][0])
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004330709876543209}
#island_id: 3
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site = ((k-2)%4)*N + (i % N) + ((i//N-1)%2 - 1)
      if J[k, i % N, i // N] > 0:
        h_site += sum([J[k, j % N, j // N]*h[(j+N-1)%N][j%N] for j in range(N)])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0015640432098765436}
#island_id: 3
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [0, 1]:
      spin_product = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if (k+N-1)%N == i//N else 0 for k in range(3)]) + h_site
      if j == 0:
        priorities[i][j] = spin_product
      else:
        priorities[i][j] = -spin_product

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 3
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0040936728395061725}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_hamiltonian = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_hamiltonian
      priorities[i][1] = -priorities[i][0]
    else:
      spin_hamiltonian = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_hamiltonian
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 3
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add some magic here
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] += h_site
    else:
      priorities[i][0] += h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001438734567901235}
#island_id: 0
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*((h[(k+N-1)%N][i%N]>0)*(1) + (h[(k+N-1)%N][i%N]<0)*(-1)) for k in range(3)]) - 2*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*((h[(k+N-1)%N][i%N]>0)*(1) + (h[(k+N-1)%N][i%N]<0)*(-1)) for k in range(3)]) + 2*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021356481481481482}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_k = ((k-1)%2 + i % N) % N
      if k % 2 == 0:
        site_k_nbr = (site_k + ((i//N-1)%2 - 1)) % N
      else:
        site_k_nbr = (site_k + ((i//N+1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016072530864197525}
#island_id: 3
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h[i//N][i%N]
      if total > 0:
        priorities[i][1] = -priorities[i][0] - 2*h_site
      else:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h[i//N][i%N]
      if total < 0:
        priorities[i][1] = -priorities[i][0] + 2*h_site
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019424382716049383}
#island_id: 1
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    for k in range(3):
      if i%N != k and i//N != (k+N-1)%N:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 1
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00046743827160493833}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_magnetism += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_magnetism -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009307098765432104}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i % (N*N // 4) < N//2:
      spin_left = np.sign(np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      spin_right = -spin_left
    else:
      spin_left = np.sign(np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      spin_right = -spin_left

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_left * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_right * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_site_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    site_sum_J = sum([J[k,i%N,i//N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate energy for both spin states (1 and -1)
    energy_1 = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    energy_2 = -h[i//N][i%N] + sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # Calculate priorities based on energy differences
    priorities[i][0] = np.exp(-energy_2) if J[0,i%N,i//N] > 0 else np.exp(-energy_1)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009112654320987659}
#island_id: 1
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][0] = h_site + nn_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0024245370370370367}
#island_id: 1
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1,i%N-1,(i//N-1)%N+i%N,(i//N+1)%N+i%N]]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003033179012345679}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006444907407407408}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 2
#version_generated: 3
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N])*h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N])*h_site
      priorities[i][1] = (1 - J[0,i%N,i//N])*h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      h_site = -h[site_nbr][i%N]
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.019527006172839506}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if i == k % N + (k//N - 1) % 2 * N:
          priorities[i][0] += J[0,k//N,i%N]%N
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if i == k % N + (k//N - 1) % 2 * N:
          priorities[i][0] -= J[0,k//N,i%N]%N

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.10394182098765442}
#island_id: 3
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h_site + h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site - h[site_nbr][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = np.dot(total_spin, np.array([1, -1]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.dot(total_spin, np.array([1, -1]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011050925925925928}
#island_id: 3
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k+N-1)%N
      if J[k+1,i//N,i%N] > 0:
        h_site += J[k+1,i//N,i%N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k+1,i//N,i%N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008057098765432094}
#island_id: 3
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i-N)%N if i-N>=0 else N-1
    site_down = (i+N)%N
    site_left = (i%N + ((i//N-1)%2 - 1)) % N
    site_right = (i%N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[k%(N),k//N] for k in range(3)]) - J[2,site_up,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[k%(N),k//N] for k in range(3)]) + J[2,site_up,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_h = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = h_site + sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_h = [-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = -h_site - sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.012957561728395062}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001702160493827156}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    for j in range(3):
      h_site += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][0]
    else:
      priorities[i][0] = -total_spin[i][1]
      priorities[i][1] = total_spin[i][1]
  return(priorities)




#score: {'data2D.txt': 0.0019304012345679016}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if (j==0 and k<2) or (j==1 and k>1) else -h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][j] = priority
  return(priorities)




#score: {'data2D.txt': -0.22449706790123442}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = 2*h[i//N][i%N] + h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19955725308641972}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priority_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      priority_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + priority_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 3
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00029799382716049443}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = -total_spin if total_spin > 0 else total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000859722222222223}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if all([J[0,i%N,i//N]*h[s][i%N] > 0 for s in site_nbrs]):
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.052418672839506214}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      if (J[j,i%N,i//N] > 0) == (h[(j+N-1)%N][i%N] > 0):
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018862654320987654}
#island_id: 0
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%N - 1)) % N]
    h_site = sum([h[site][i%N] for site in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00236929012345679}
#island_id: 0
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = abs(h_site) - sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = abs(-h_site) + sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001978549382716049}
#island_id: 0
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*(h[site_nbr2][i%N] - 2*h[i//N][i%N])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_magnetism = sum([h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_magnetism + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_magnetism - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012915123456790126}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        priority_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priority_sum = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if h[i//N][i%N] > 0:
        priorities[i][j] = priority_sum + h_site
      else:
        priorities[i][j] = -priority_sum - h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.29662453703703645}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      total = h[i][j]
      for k in range(3):
        site_k = (i + ((k-1)%2 - 1)) % N
        if J[k,i,j] > 0:
          total += J[k,i,j]*h[site_k][j]
        else:
          total -= J[k,i,j]*h[site_k][j]

      priorities[i*N+j][0] = total + h_site
      priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.1514791666666669}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0 and j == 1:
        priorities[i][j] = -priorities[i][1-j]
      elif h[i//N][i%N] < 0 and j == 1:
        priorities[i][j] = priorities[i][1-j]
      else:
        if J[0,i%N,i//N] > 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07299459876543213}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return priorities




#score: {'data2D.txt': 0.0012989197530864193}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][1] -= sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])
    else:
      priorities[i][0] -= sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][1] += sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 1
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if (h[i//N][i%N] > 0).all():
      h_site = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.011651388888888888}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total + h[site_nbr][i%N]
      priorities[i][1] = -total
    else:
      total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i-1)%N, (i+1)%N, ((i+N-1)%N)]
    for j in range(2):
      if J[0,i%N,i//N] > 0:
        priorities[i][j] += h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(len(site_nbrs))])
      else:
        priorities[i][j] -= h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(len(site_nbrs))])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00260108024691358}
#island_id: 0
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, (i//N)*N+i%N]]
    
    h_sum = sum([h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012214506172839518}
#island_id: 0
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    for j in range(3):
      site_nbrs.append((site_nbrs[0] + ((j-1)%N - N//2)) % N)
    h_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sum + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004248302469135802}
#island_id: 0
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i%N,i//N]*h[i//N][i%N] + J[2,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i%N,i//N]*h[i//N][i%N] - J[2,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019146604938271613}
#island_id: 0
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005856481481481486}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 3
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = J[0,i%N,i//N]*-h[site_nbr][i%N]
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000810956790123457}
#island_id: 3
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        sign = 1
      else:
        sign = -1

      spin_energy = (J[0,i%N,i//N]*h[site_nbr][i%N] + J[1,(i-1)%N,i//N]*h[i//N,i%N-1] + J[2,(i+1)%N,i//N]*h[i//N,(i+1)%N] + J[3,((i+N-1)%N),i//N]*h[site_nbr,(i+1)%N]) * sign
      priorities[i][j] = h_site + spin_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06076959876543212}
#island_id: 0
#version_generated: 2
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    h_total = h[i//N][i%N] if J[0,i%N,i//N]>0 else -h[i//N][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007387345679012345}
#island_id: 0
#version_generated: 2
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_2 = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr_2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006297376543209877}
#island_id: 0
#version_generated: 2
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for j in range(3):
      total_energy += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_energy + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_energy - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 1
#version_generated: 2
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18813564814814815}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    priorities[i][0] = h_site + h[i//N][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.23076342592592597}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]>0) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]<0) for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16190817901234592}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*(-h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008111574074074077}
#island_id: 1
#version_generated: 2
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_spin = h[(i-1+N)%N][i%N] if i % N != 0 else J[3,i//N,i%N]*h[(i-2+N)%N][i%N]
    right_spin = h[(i+1+N)%N][i%N] if i % N != N-1 else J[1,i//N,i%N]*h[(i-1+N)%N][i%N]
    up_spin = h[i//N,(i-1)%N] if i % N != 0 else J[2,i//N,i%N]*h[i//N,N-1]
    down_spin = h[i//N,(i+1)%N] if i % N != N-1 else J[3,i//N,i//N]*h[i//N,0]

    priorities[i][0] = h_site + left_spin + right_spin + up_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 7.39197530864199e-05}
#island_id: 0
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + priority_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - priority_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.21516651234567905}
#island_id: 0
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h_sum = sum([h[site_nbr][i%N] if J[k,i//N,i%N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    priorities[i][0] = h[i//N][i%N] + site_h_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.08671805555555562}
#island_id: 0
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_site2
      priorities[i][1] = -(h_site + h_site2)
    else:
      priorities[i][0] = -h_site - h_site2
      priorities[i][1] = -(h_site + h_site2)

  return(priorities)




#score: {'data2D.txt': 0.0007449074074074076}
#island_id: 0
#version_generated: 2
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * (2*h[(k+N-1)%N][i % N] - h[site_nbr2][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * (2*h[(k+N-1)%N][i % N] - h[site_nbr2][i % N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1

  return total_spin




#score: {'data2D.txt': -0.003802314814814815}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[site_nbrs[(k+1)%3]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02031527777777778}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010861574074074074}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priority_up = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + priority_up
      priorities[i][1] = -priorities[i][0] + priority_down
      
    else:
      priority_up = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = -sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site + priority_up
      priorities[i][1] = -priorities[i][0] - priority_down

  return(priorities)




#score: {'data2D.txt': 0.07459367283950619}
#island_id: 1
#version_generated: 2
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1
    h_site = spin*h[site_nbr][i%N]
    for j in range(4):
      k = (j-2) % 4
      site_nbr_k = ((i//N + k)%N*N + i%N)
      priorities[i][0] += J[k,i//N,i%N]*h_site*h[(site_nbr_k//N)][site_nbr_k%N]
    if spin > 0:
      priorities[i][1] -= 2*np.sum(J[:,i//N,i%N])
    else:
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012915123456790148}
#island_id: 3
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,(k+N-1)%N]*h[k%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,(k+N-1)%N]*h[k%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 3
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005405864197530834}
#island_id: 0
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nbs = [(i+1)%N, (i+N-1)%N, (i+N)%N, (i+N//2)%N] # define the neighboring sites
    for nb in nbs:
      if J[0,i%N,nb//N] > 0: 
        h_site += sum([J[k,i%N,nb%N]*h[k][nb%N] for k in range(4)])
      else:
        h_site -= sum([J[k,i%N,nb%N]*h[k][nb%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0001782407407407401}
#island_id: 3
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] -= J[k, i%N, i//N]
      else:
        priorities[i][0] += J[k, i%N, i//N]

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000481327160493827}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i//N,i%N]*h[site_nbr][i%N]
    else:
      h_site = -J[0,i//N,i%N]*h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
    if h[i//N][i%N] > 0:
      h_site += J[1,i//N,i%N]*h[site_nbr2][i%N]
    else:
      h_site -= J[1,i//N,i%N]*h[site_nbr2][i%N]

    site_nbr3 = (site_nbr + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site += J[2,i//N,i%N]*h[site_nbr3][i%N]
    else:
      h_site -= J[2,i//N,i%N]*h[site_nbr3][i%N]

    site_nbr4 = (site_nbr + ((i//N-1)%2 + 1)) % N
    if h[i//N][i%N] > 0:
      h_site += J[3,i//N,i%N]*h[site_nbr4][i%N]
    else:
      h_site -= J[3,i//N,i%N]*h[site_nbr4][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020782407407407403}
#island_id: 0
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[1,i%N,i//N] > 0:
      h_site = h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr2][i%N]

    priorities[i][1] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=0)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + term1
      priorities[i][1] = -priorities[i][0]
    else:
      term1 = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - term1
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = 2*h_site
    else:
      priorities[i][0] = 2*h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -4.1203703703703854e-05}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / sum([abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0020893518518518522}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_up = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priority_down = -h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + min(priority_up, priority_down)
    priorities[i][1] = max(-priorities[i][0], 0)

  return(priorities)




#score: {'data2D.txt': -0.0007202160493827152}
#island_id: 1
#version_generated: 2
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.17071959876543236}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      neighbor_spin = 2*(J[k%4,i//N,i%N]*h[(k+N-1)%N][i%N] > 0) - 1
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([neighbor_spin for _ in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([neighbor_spin for _ in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009908950617283948}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[0,k,i//N]*h[k][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.20038101851851864}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003800925925925924}
#island_id: 2
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(-1,2):
      site = (k + ((i-1)%2 - 1)) % N
      if h[i//N][site] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(-1,2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[0] for k in range(-1,2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007677469135802466}
#island_id: 2
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      dx,dy = [(0,1),(1,0),(0,-1),(-1,0)][d]
      if i//N+dx>=0 and i//N+dx<N and i%N+dy>=0 and i%N+dy<N:
        site_nbr2 = (i // N + dx) * N + i % N + dy
        h_site += J[0,i%N,i//N]*h[site_nbr2//N][site_nbr2%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site 
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 1
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(3))]
    sum_h_sites = np.sum(h_sites)
    
    priorities[i][0] = sum_h_sites
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_bias
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_bias
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006266975308641974}
#island_id: 1
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,i%N,i//N]*h[j%N][i%N] for j in range(N)]) + J[1,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[0,i%N,i//N]*-h[j%N][i%N] for j in range(N)]) + J[1,i%N,i//N]*(-h[site_nbr1][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if (j == 0 and h[i//N][i%N] > 0) or (j == 1 and h[i//N][i%N] < 0):
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.20123070987654318}
#island_id: 2
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_interactions = [J[k][site_nbrs[0]][i//N] if k == 0 else J[k][site_nbrs[1]][i//N] for k in range(3)]
    h_site = sum([h[site_nbr][i%N] * interaction for site_nbr, interaction in zip(site_nbrs, site_interactions)])
    
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004470524691358025}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site=(i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities=total_spin
  return(priorities)




#score: {'data2D.txt': -0.18460015432098767}
#island_id: 3
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    for k in range(3):
      site_nbr_k = (i % N + ((k+N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        site_mag += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        site_mag -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site + site_mag
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004396604938271599}
#island_id: 1
#version_generated: 2
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sites = [k for k in range(3) if abs(k-i%N) + abs(k//N-i//N) == 1]
    total_neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbor_sites])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.36728395061724e-05}
#island_id: 1
#version_generated: 2
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013371913580246906}
#island_id: 1
#version_generated: 2
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] + 2*J[0,(i+1)%N,i//N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] + 2*J[0,(i+1)%N,i//N]

  return(priorities)




#score: {'data2D.txt': -0.0006782407407407413}
#island_id: 1
#version_generated: 2
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]*2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if i == 0 or J[0,(i-1)%N,i//N]>0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05033040123456791}
#island_id: 3
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0 and h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 1 and h[i//N][i%N] < 0:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        if J[0,i%N,i//N] > 0:
          priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        else:
          priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.101130401234568}
#island_id: 0
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] += priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01239212962962963}
#island_id: 0
#version_generated: 2
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr_k][i%N]

  return(priorities)




#score: {'data2D.txt': 0.060805401234567895}
#island_id: 0
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 2*h[i//N][i%N]
    for k in range(3):
      if (J[k,i%N,i//N] > 0) == (h[(k+N-1)%N][i%N] > 0):
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008245524691358025}
#island_id: 0
#version_generated: 2
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if np.sum(h_sites) > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h_sites[k] for k in range(len(h_sites))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h_sites[k] for k in range(len(h_sites))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003152006172839505}
#island_id: 2
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0:
        neighbor_h = h[(site_nbr+N-1)%N][i%N]
      elif k == 1:
        neighbor_h = h[site_nbr][(i+1)%N]
      elif k == 2:
        neighbor_h = h[(site_nbr-N-1)%N][i%N]
      else:
        neighbor_h = h[site_nbr][(i+N-1)%N]

      if J[k,i//N,i%N] > 0:
        h_site += neighbor_h
      else:
        h_site -= neighbor_h

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.904320987654297e-05}
#island_id: 2
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009522376543209877}
#island_id: 3
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = [0,0]
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[(k+N-1)%N][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[(k+N-1)%N][i%N]
        total_spin[1] += 1
    priorities[i][0] = -total_spin[0]
    priorities[i][1] = total_spin[1]

  return(priorities)




#score: {'data2D.txt': 0.00026435185185185215}
#island_id: 3
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016905864197530867}
#island_id: 3
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(-1,2):
      if i+N*k < N**2:
        total_spin += J[k,i%N,i//N]*np.array([h[(i+N*k)%N][i%N],-1*h_site])
    priorities[i][0] = h_site + np.dot(total_spin,[1,-1])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [(i-1)%N, (i+1)%N]:
      if j == i: continue
      h_nbr = J[0,j,i//N]*h[j%N][i%N] 
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_nbr
        priorities[i][1] -= h_site - h_nbr
      else:
        priorities[i][0] -= h_site - h_nbr
        priorities[i][1] += h_site + h_nbr

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1891266975308642}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[site_nbr][k%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007078858024691358}
#island_id: 0
#version_generated: 2
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N) % N + (i % N) // N - 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -h[site_nbr1][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008027006172839506}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = 2*h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0012322530864197524}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i == k*N + (k+1)%2:
        continue
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.007833796296296297}
#island_id: 3
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%N-1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr2][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr2][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16557824074074073}
#island_id: 3
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priority_sum = h[i//N][i%N]
      if J[0,i%N,i//N] > 0:
        priority_sum += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priority_sum -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      if j == 0:
        priorities[i][j] = h_site + priority_sum
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002788580246913582}
#island_id: 1
#version_generated: 2
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i//N,i%N]*h[site_nbr][i%N] + J[2,i//N,i%N]*h[(site_nbr+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i//N,i%N]*h[site_nbr][i%N] + J[2,i//N,i%N]*h[(site_nbr+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009797839506172836}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      for k in range(3):
        priorities[i][0] += J[k,i%N,i//N]
        priorities[i][1] -= J[k,i%N,i//N]
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
    else:
      for k in range(3):
        priorities[i][0] -= J[k,i%N,i//N]
        priorities[i][1] += J[k,i%N,i//N]
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]
    priorities[i][0] += h_site
    priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.0005276234567901236}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N if j == i%N else (i % N + ((j-1)%2 - 1)) % N
           for j in range(N)]
    h_site = np.sum([h[j][i%N] * J[0, i//N, j//N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k, i//N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k, i//N, i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001575617283950617}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i % N == (k+1)%N or ((i // N + 1) % N == k and i % N == 0): 
        continue
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.189749228395062}
#island_id: 1
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Compute the total magnetic field at the site
    h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = np.inf
    else:
      priorities[i][0] = h_site
      priorities[i][1] = 0
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1596445987654321}
#island_id: 1
#version_generated: 2
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the magnetism term to the priority
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] -= h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.004718981481481482}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += h[site_nbr_j][i%N]
      else:
        h_site -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0134016975308642}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate priority by subtracting the site with opposite spin
  for i in range(N**2):
    for j in range(4):
      if j == 0:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif j == 1:
        site_nbr = (i // N + ((i%N-1)%2 - 1)) % N
      elif j == 2:
        site_nbr = ((i % N + N-1) % N)
      else:
        site_nbr = ((i//N + N-1) % N)

      if J[j,i//N,i%N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] += h_site
      priorities[i][1] -= h_site

  return(priorities)




#score: {'data2D.txt': 0.0013723765432098758}
#island_id: 0
#version_generated: 2
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if J[j,i%N,i//N] > 0:
        h_neigh = h[(j+N-1)%N][i%N]
      else:
        h_neigh = -h[(j+N-1)%N][i%N]

      site_nbr = (i % N + ((i//N-j-1)%2 - 1)) % N
      if J[0,site_nbr,i//N] > 0:
        h_site_nbr = h[site_nbr][i%N]
      else:
        h_site_nbr = -h[site_nbr][i%N]

      if J[j,i%N,i//N] > 0:
        h_neigh_site = h_neigh + h_site_nbr
      else:
        h_neigh_site = -h_neigh - h_site_nbr

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h_neigh for k in range(3)]) + J[j,i%N,i//N]*h_neigh_site
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= -h_site - sum([J[k,i%N,i//N]*h_neigh for k in range(3)]) - J[j,i%N,i//N]*h_neigh_site
        priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00030570987654320996}
#island_id: 0
#version_generated: 2
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), [0,1,2,-1])]) > 0:
      h_site = sum(h[i//N][i%N] for i in range(N))
    else:
      h_site = -sum(h[i//N][i%N] for i in range(N))

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k, j in zip(range(4), [0,1,2,-1])])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + sum_J_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.487654320987553e-06}
#island_id: 0
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      jnbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_jnb = h[jnbr][i%N]
      else:
        h_jnb = -h[jnbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_jnb
        priorities[i][1] -= h_site + h_jnb
      else:
        priorities[i][0] -= h_site + h_jnb
        priorities[i][1] += h_site + h_jnb

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 0
#version_generated: 2
#generate time13:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N) % 2)
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023325617283950603}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0029344135802469133}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*total_h
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), J[0,i%N,i//N]*h[site_nbr][i%N]]
    else:
      total_spin = [-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]),-J[0,i%N,i//N]*h[site_nbr][i%N]]

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_h = [h[(k+N-1)%N][i%N] for k in range(3)]
    interaction_sum = sum([J[k,i%N,i//N]*neighbor_h for k, neighbor_h in enumerate(neighbors_h)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 1
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3296455246913571}
#island_id: 0
#version_generated: 2
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.exp(h_site)) * sum([np.abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.exp(-h_site)) * sum([np.abs(J[k,i%N,i//N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 2
#version_generated: 2
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 2
#version_generated: 2
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 2
#version_generated: 2
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00702145061728395}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - J[1, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0004794753086419752}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      site_k = (k + i % N) % N
      if J[k, i % N, i // N] > 0 and h[i//N][site_k] > 0:
        total_spin += 1
      elif J[k, i % N, i // N] < 0 and h[i//N][site_k] < 0:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16485138888888912}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = max(h[site_nbr][i%N], -h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = min(-h[site_nbr][i%N], -h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      for j in range(2):
        priorities[i][j] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h[i//N][i%N]
    else:
      for j in range(2):
        priorities[i][j] = -((h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if J[0,i%N,i//N] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]

  return [[-x for x in y] for y in total_spin.tolist()]




#score: {'data2D.txt': -0.00212206790123457}
#island_id: 3
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr_j = (j + ((i-1)%2 - 1)) % N
      if J[1,i%N,j] > 0:
        h_site += J[1,i%N,j]*h[site_nbr_j][i%N]
      else:
        h_site -= J[1,i%N,j]*h[site_nbr_j][i%N]

    for k in range(N):
      site_nbr_k = (k + ((i-1)%2 - 1)) % N
      if J[2,i//N,k] > 0:
        h_site += J[2,i//N,k]*h[i//N][site_nbr_k]
      else:
        h_site -= J[2,i//N,k]*h[i//N][site_nbr_k]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.608024691357984e-05}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002406635802469136}
#island_id: 1
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J[0, i%N, i//N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site + J[0, i%N, i//N] * h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3169760802469128}
#island_id: 1
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_offset = ((k-1)%2, (k+1)%2)
      if k == 3:  # special case for top edge
        site_nbr = i % N
      else:
        site_nbr = (i + site_offset[0] + ((i//N+site_offset[1]%2 - 1)) % N) % N

      h_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_sum
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] -= h_site - h_sum

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09289521604938278}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] > 0:
        priorities[i][0] += J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] > 0:
        priorities[i][0] -= J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004044753086419757}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[2,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k+N-1)%N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k+N-1)%N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016415123456790127}
#island_id: 0
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k==j+1 else 0 for k in range(4)])
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005744290123456789}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i // N + ((i % N + k) % N)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += h_site + J[k,i//N,i%N]*h[site_nbr_k][i%N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[k,i//N,i%N]*h[site_nbr_k][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002706327160493827}
#island_id: 1
#version_generated: 2
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      k = (j-1)%2
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] -= J[k,i//N,i%N]*h[site_nbr][i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]*-h[site_nbr][i%N]
        priorities[i][1] += J[k,i//N,i%N]*-h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.000604475308641975}
#island_id: 0
#version_generated: 2
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2807476851851848}
#island_id: 0
#version_generated: 2
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum([abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum([abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k==0 and (j==0 or j==1) else -J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.0010304012345679011}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += J[0,i%N,i//N]*h[site_nbr][i%N]
      for k in range(3):
        priorities[i][0] += J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= J[0,i%N,i//N]*h[site_nbr][i%N]
      for k in range(3):
        priorities[i][0] -= J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 0
#version_generated: 2
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.021467438271604942}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(8):
      site_spin = (i // N) % 2
      site_nbr_spin = ((site_nbr // N) + ((site_nbr % N-1)%2 - 1)) % N
      site_spin_energy = h[i//N][i%N] * site_spin
      site_nbr_spin_energy = h[site_nbr//N][site_nbr%N] * site_nbr_spin

      total_energy = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - site_spin_energy - site_nbr_spin_energy
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = total_energy
        priorities[i][1] = -total_energy
      else:
        priorities[i][0] = -total_energy
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018140432098765443}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([abs(J[2,k,i//N])*h[(k+1)%3,N-1-(i%N)] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([abs(J[2,k,i//N])*h[(k+1)%3,N-1-(i%N)] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010060185185185192}
#island_id: 3
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_priority = 0
    if h[i//N][i%N] > 0:
      total_priority += h[site_nbr][i%N]
    else:
      total_priority -= h[site_nbr][i%N]

    for k in range(3):
      total_priority += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = total_priority
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008149691358024689}
#island_id: 3
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 1
#version_generated: 2
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013936728395061728}
#island_id: 1
#version_generated: 2
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    site_nbr3 = (i % N + (i//N+1) % N)
    site_nbr4 = (i // N + (i%N+1) % N)

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k, min(i%N,k), max(i//N,(k+N-1)%N)] * 
                      (2*h[max((i//N+1)%N,min(i//N,k)),min(i%N,k)]) - 
                      J[k, min(k,i%N), max(k,i//N)] * h[min(i//N,k),max(i%N,k)]
                      for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005047839506172842}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(N):
      if i//N == k or (i//N+1)%N == k or i%N == k:
        J_sum = sum([J[l,k,i//N] * h[(l+N-1)%N][i%N] for l in range(4)])
        break
    else:
      J_sum = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 2.4537037037037468e-05}
#island_id: 3
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (k + ((i % N + (i // N - 1)) % N - 1)) % N
      if h[i//N][site] > 0:
        h_site += J[k, i%N, i//N]*h[site_nbr][site]
      else:
        h_site -= J[k, i%N, i//N]*h[site_nbr][site]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -8.487654320987553e-06}
#island_id: 3
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_k = h[site_k][i%N]
      else:
        h_k = -h[site_k][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_k
        priorities[i][1] -= h_site + h_k
      else:
        priorities[i][0] -= h_site + h_k
        priorities[i][1] += h_site + h_k

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 3
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0030458333333333336}
#island_id: 0
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N] + h_site) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N] + h_site) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013168209876543216}
#island_id: 0
#version_generated: 2
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i-1)%N][i%N] + J[2,i%N,i//N]*h[(i+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i-1)%N][i%N] + J[2,i%N,i//N]*h[(i+1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N] for k in range(3)]) - J[0,i%N,i//N]
    else:
      total_spin = sum([J[k,i%N,i//N] for k in range(3)]) + J[0,i%N,i//N]

    priorities[i][1] = total_spin
    if h_site := -h[site_nbr][i%N]:
      priorities[i][0] = total_spin - 2*h_site
    else:
      priorities[i][0] = total_spin + 2*h_site

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i%N, i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.012782870370370368}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    magnetism = h[i//N][i%N] if h[i//N][i%N] > 0 else -1
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008270061728395055}
#island_id: 0
#version_generated: 2
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(J[[0,1,2],i%N,i//N]*h[[i//N,N-1,(i//N+N-1)%N],[i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(J[[0,1,2],i%N,i//N]*h[[i//N,N-1,(i//N+N-1)%N],[i%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 2
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00845046296296297}
#island_id: 2
#version_generated: 3
#generate time13:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+N-1)%N,(i+N/2-1)%N]
    for j in range(N):
      if J[0,j,i//N] > 0:
        h_site += sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])
      else:
        h_site -= sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 2
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010381172839506174}
#island_id: 0
#version_generated: 2
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,k,i//N]*h[site_nbr][k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[2,k,i//N]*h[site_nbr][k] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17838194444444447}
#island_id: 0
#version_generated: 2
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site = (i+N*j) % N**2
      if J[j,i//N,i%N] > 0:
        priorities[i][0] += h_site + h[site_nbr][site%N]
        priorities[i][1] -= 2
      else:
        priorities[i][0] -= h_site - h[site_nbr][site%N]
        priorities[i][1] += 2

  return(priorities)




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 0
#version_generated: 2
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N]
      priorities[i][1] -= h[site_nbr][i%N]
    else:
      priorities[i][0] -= h[site_nbr][i%N]
      priorities[i][1] += h[site_nbr][i%N]

  return [priority for priority in priorities]




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(spin_neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004787191358024693}
#island_id: 1
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i//N,i%N]
    else:
      h_site = -J[0,i//N,i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k+1,i//N,i%N] > 0:
        h_site += J[k+1,i//N,i%N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k+1,i//N,i%N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008217592592592592}
#island_id: 1
#version_generated: 2
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -abs(h_site)
    priorities[i][1] = abs(h_site)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 2
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(h[i//N]), sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)) if J[0,i%N,i//N]>0 else -sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3))])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 2
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003921296296296298}
#island_id: 0
#version_generated: 2
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[j,i//N,i%N]
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[j,i//N,i%N]

  return(priorities)




#score: {'data2D.txt': 0.0004223765432098773}
#island_id: 0
#version_generated: 2
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004272685185185186}
#island_id: 0
#version_generated: 2
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else 2*h_site
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008201080246913583}
#island_id: 1
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i + ((j-1)%N - N//2)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 1
#version_generated: 2
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 3
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      biases = [h[j][i%N] for j in site_nbrs]
    else:
      biases = [-h[j][i%N] for j in site_nbrs]

    priorities[i][0] = sum([J[k,i%N,i//N]*biases[k] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005970679012345679}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00036898148148148136}
#island_id: 1
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012299537037037038}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(4):
      site_nbr_j = (j+i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        total_spin[0] += h[site_nbr_j][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_j][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00036219135802469115}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.16849429012345704}
#island_id: 2
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum(h[:i//N].flatten()) > N/2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] + 1
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if sum(h[:i//N].flatten()) > N/2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0] - 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.02756003086419753}
#island_id: 0
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = (i % N + ((i//N-1)%2 + 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001310648148148148}
#island_id: 1
#version_generated: 2
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N*N,2))
    for k in range(N):
      site = (k + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,k] > 0:
        h_site += h[site][i%N]
      else:
        h_site -= h[site][i%N]

    total_spin[i//N*N+i%N][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    total_spin[i//N*N+i%N][1] = -total_spin[i//N*N+i%N][0]

  return(total_spin)




#score: {'data2D.txt': 0.004105401234567901}
#island_id: 1
#version_generated: 2
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    
    if sum(h_sites) > 0:
      priorities[i][0] = sum([hs*J[k,i%N,i//N] for k, hs in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([hs*J[k,i%N,i//N] for k, hs in enumerate(h_sites)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023356481481481483}
#island_id: 1
#version_generated: 2
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[0,i%N,i//N] > 0 and i % N > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0 and i % N > 0:
      priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] > 0 and i % N < N-1:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0 and i % N < N-1:
      priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    elif J[0,i%N,i//N] < 0:
      priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009560185185185183}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010347222222222214}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, (i+N-1)%N, i%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17951589506172838}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N])
    
    priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00996836419753087}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      site_nbr = (i % N + ((i//N-j)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site += sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 2
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site=h[site_nbr][i%N]
    else:
      h_site=-h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0]=h_site+site_sum
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-h_site-site_sum
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283954}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i // N - 1) % 2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k, i%N, i//N] * h[site_k][i%N]
      else:
        h_site -= J[k, i%N, i//N] * h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002074537037037039}
#island_id: 0
#version_generated: 2
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_j = np.sum([J[k,i%N,(i+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_j
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_j
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002874999999999999}
#island_id: 1
#version_generated: 2
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N+1-1) % N - 1)) % N

    if J[0, i%N, i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016720679012345674}
#island_id: 1
#version_generated: 2
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    if sum(h_sites)>0:
      priorities[i][0] = sum([h_sites[j] + h[i//N][i%N]*J[k,i%N,i//N] for k,j in zip(range(4),range(N))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_sites[j] + h[i//N][i%N]*J[k,i%N,i//N] for k,j in zip(range(4),range(N))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time13:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028331790123456786}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1798078703703706}
#island_id: 3
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (1-h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.07794706790123462}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N < N // 2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N < N // 2:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002445524691358025}
#island_id: 0
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      J_site = J[0,i%N,i//N]*h[i//N][i%N]
    else:
      J_site = -J[0,i%N,i//N]*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010896604938271603}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[0,i%N,i//N] + J[1,(i+1)%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[0,i%N,i//N] + J[1,(i+1)%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009433641975308635}
#island_id: 2
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = h[site_nbr][i%N]
      else:
        priorities[i][0] = -h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -h[site_nbr][i%N]
      else:
        priorities[i][0] = h[site_nbr][i%N]

    for j in range(N**2):
      site_nbr = (j % N + ((j//N-1)%2 - 1)) % N
      if i != j and abs(i-j) == 1:
        if J[1,i//N,j//N] > 0:
          priorities[i][1] += J[1,i//N,j//N]*h[site_nbr][j%N]
        else:
          priorities[i][1] -= J[1,i//N,j//N]*h[site_nbr][j%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024853395061728394}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010905864197530877}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001995216049382717}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_knbr = (i % N + ((i//N-k)%N - N//2)) % N
      if h[i//N][site_knbr] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin,[1, -1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin,[1, -1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015066358024691388}
#island_id: 1
#version_generated: 2
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [(i+1)%N, (i+N-1)%N, ((i+N-1)%N + ((i//N-1)%2 - 1)) % N]:
      if J[0,i%N,j] > 0:
        h_site += sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N/2) % N)
    h_site = h[site_nbr1][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000762808641975309}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(-1,2):
        if i//N+k < N and J[k,i//N,i%N]*h[(k+N-1)%N][i%N] > 0:
          total_spin += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      priorities[i][j] = -total_spin if j == 0 else total_spin
  return(priorities)




#score: {'data2D.txt': -0.005372993827160494}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_neighbor = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site_neighbor = h[site_nbr_neighbor][i%N]
      else:
        h_site_neighbor = -h[site_nbr_neighbor][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h_site_neighbor for k in range(4)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h_site_neighbor for k in range(4)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005507716049382719}
#island_id: 1
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i // N + ((i % N - 1) % N - 1)) % N, (i // N + ((i % N + 1) % N - 1)) % N]
    h_site_sum = sum([h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018766975308641975}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site_up = h[site_nbr_up][i%N]
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]
      h_site_down = -h[site_nbr_down][i%N]

    priorities[i][0] = h_site + J[1,i//N,i%N]*h_site_up + J[2,i//N,i%N]*h_site_down
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.007161265432098766}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if (J[1,i%N,i//N]+J[2,i%N,i//N]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004072993827160493}
#island_id: 0
#version_generated: 2
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04321620370370374}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    if J[0, i%N, i//N] > 0:
      J_value = 1
    else:
      J_value = -1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001401697530864198}
#island_id: 3
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_1 = (i % N + ((i//N-j-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_1][j]
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_1][j]
        if h[i//N][j] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0] + h_site
    priorities[i][1] = -total_spin[0] - h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16938935185185186}
#island_id: 0
#version_generated: 2
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1
    
    for j in range(3): # Only consider nearest neighbors
      if J[j,i%N,i//N] > 0:
        total_spin += h[(j+N-1)%N][i%N]
    
    priorities[i][0] = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 7.02160493827163e-05}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) >= 0 else -1
    priorities[i][int(h_site == -1)] = max(sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]), -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]))
    priorities[i][1-int(h_site == -1)] = -priorities[i][int(h_site == -1)]
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(np.square(h))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(np.square(h))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i%N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3418788580246903}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
      x, y = i % N + d[0], i // N + d[1]
      if 0 <= x < N and 0 <= y < N:
        h_neigh = J[d[0]+2,i%N,i//N]*h[y][x]
        if h[i//N][i%N] > 0:
          priorities[i][0] += h_site + h_neigh
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site - h_neigh
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006717592592592588}
#island_id: 3
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003260802469135808}
#island_id: 1
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[s][i%N] if J[0,s,i//N] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0030726851851851852}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] if J[2,i%N,i//N]>0 else -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] if J[2,i%N,i//N]<0 else -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00049645061728395}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0 and h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 0 and h[i//N][i%N] < 0:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      elif j == 1 and h[i//N][i%N] > 0:
        priorities[i][j] = -priorities[i][0]
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sites_sum = sum([h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = sites_sum + sum([J[k,i%N,i//N]*h[s][i%N] for k, s in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sites_sum - sum([J[k,i%N,i//N]*h[s][i%N] for k, s in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008457253086419753}
#island_id: 0
#version_generated: 2
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priority_site = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = -priority_site
      priorities[i][1] = priority_site
    else:
      priorities[i][0] = priority_site
      priorities[i][1] = -priority_site

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.002183179012345679}
#island_id: 3
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J,axis=1)
    magnetism = h[i//N][i%N]
    
    if magnetism > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*magnetism for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time14:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006106481481481487}
#island_id: 3
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -3.904320987654297e-05}
#island_id: 3
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h_site = h[i//N][i%N] + h_site
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.274691358024644e-05}
#island_id: 1
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_sum = h[i//N][i%N] * h_site
    for j in range(3):
      site_sum += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N - 1) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i % N, i // N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 0
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_total = np.zeros((1,2))
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin = np.array([h[i//N][i%N], -1 if h[i//N][i%N] > 0 else 1])

      priority_total[0][0] += h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priority_total[0][1] -= priority_total[0][0]

    priorities[i][0] = priority_total[0][0]
    priorities[i][1] = -priority_total[0][0]

  return(priorities)




#score: {'data2D.txt': 0.0014418209876543209}
#island_id: 0
#version_generated: 2
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012427469135802465}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N]*J[k,i%N,s//N] for k,s in enumerate(site_nbrs)])
    else:
      h_site = -sum([h[s][i%N]*J[k,i%N,s//N] for k,s in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017199074074074074}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if ((k+1)%2) == 0:
        h_site += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010936728395061735}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + J[0,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - J[0,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3377847222222212}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        total_spin[i*N+site_nbr1][0] += J[0,i%N,i//N]*h[site_nbr1][i%N]
        total_spin[i*N+site_nbr2][0] += J[2,i%N,i//N]*h[site_nbr2][i%N]
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        total_spin[i*N+site_nbr1][0] -= J[0,i%N,i//N]*h[site_nbr1][i%N]
        total_spin[i*N+site_nbr2][0] -= J[2,i%N,i//N]*h[site_nbr2][i%N]

  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))*1.5
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))*1.5
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002036574074074074}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][1] = -priorities[i][0]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
    else:
      priorities[i][0] = -h_site

  return(priorities)




#score: {'data2D.txt': 9.058641975308635e-05}
#island_id: 1
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a small penalty to the priority of sites with zero magnetism
  for i in range(N**2):
    if h[i//N][i%N] == 0:
      priorities[i][0] += 0.01
      priorities[i][1] -= 0.01

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010584876543209881}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002573611111111111}
#island_id: 2
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_spin = sum([J[k,i%N,i//N]*(-1 if k==0 else 1) for k in range(4)])
    priorities[i][0] = h_site + neighbors_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h[i//N][i%N]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023970679012345723}
#island_id: 2
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if i != j and abs((i-j) % N) == 1:
          site_nbr_j = (j % N + ((j//N-1)%2 - 1)) % N
          if J[0,j%N,j//N] > 0:
            h_site_j = h[site_nbr_j][j%N]
          else:
            h_site_j = -h[site_nbr_j][j%N]
          priorities[i][0] += h_site_j
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if i != j and abs((i-j) % N) == 1:
          site_nbr_j = (j % N + ((j//N-1)%2 - 1)) % N
          if J[0,j%N,j//N] > 0:
            h_site_j = h[site_nbr_j][j%N]
          else:
            h_site_j = -h[site_nbr_j][j%N]
          priorities[i][0] -= h_site_j

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.030087191358024696}
#island_id: 3
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    if J[1,i%N,i//N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i % N + ((i//N+1)%2)) % N
    if J[2,i%N,i//N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N)%2)) % N
    if J[3,i%N,i//N] > 0:
      h_site_left = h[i//N,site_nbr_left]
    else:
      h_site_left = -h[i//N,site_nbr_left]

    priorities[i][0] = h_site + h_site_up + h_site_down + h_site_left
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010356481481481475}
#island_id: 3
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = 0
    for j in range(3):
      k = (i+N*j)%N*N
      if J[j,i%N,i//N] > 0:
        sum_J += h[(k+N-1)//N][(k+N-1)%N]
      else:
        sum_J -= h[(k+N-1)//N][(k+N-1)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029236111111111108}
#island_id: 3
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + (i % N - N//2)) % N]
    for j, site_nbr in enumerate(site_nbrs):
      if J[j,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbors_h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005426388888888889}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_site = h[site_nbr][i%N]
      for k in range(3):
        priority_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = priority_site
      priorities[i][1] = -priority_site
    else:
      priority_site = -h[site_nbr][i%N]
      for k in range(3):
        priority_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -priority_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.13296188271604958}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    for j in range(3):
      if i % N != (i % N + j) % N:
        site_nbrs.append((i // N + ((i % N + j) % 2 - 1)) % N)
      else:
        continue
    h_site += sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + max(0,sum([1 if J[k,i%N,i//N]>0 else -1 for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - max(0,-sum([1 if J[k,i%N,i//N]>0 else -1 for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.898148148148176e-05}
#island_id: 0
#version_generated: 2
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+1)%N,(i//N)]*h[(k+N-1)%N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+1)%N,(i//N)]*h[(k+N-1)%N][(i+1)%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00040879629629629523}
#island_id: 2
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009960956790123422}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    magnetism = np.sum(total_spin)

    if h[i//N][i%N] > 0:
      priorities[i][0] = (magnetism + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(magnetism + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015967592592592594}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[k] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0057143518518518515}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_product = (h[i//N][i%N] + h[site_nbr][i%N]) * J[1,i//N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_product
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_product
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005844135802469132}
#island_id: 0
#version_generated: 2
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.23466249999999997}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    for k in range(3):
      if (i // N + ((k-1)%2 - 1)) % N == site_nbr and J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif (i // N + ((k-1)%2 - 1)) % N != site_nbr and J[k,i%N,i//N] > 0:
        h_site -= J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010618827160493827}
#island_id: 1
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i < N**2 - N:
        priorities[i][0] += J[3,N-1,i//N]*h[N-1,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i < N**2 - N:
        priorities[i][0] -= J[3,N-1,i//N]*h[N-1,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011452314814814816}
#island_id: 1
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_plus = h[site_nbr][i%N]
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          priority_plus += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = priority_plus
      priorities[i][1] = -priority_plus
    else:
      priority_minus = -h[site_nbr][i%N]
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          priority_minus -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -priority_minus
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0030143518518518527}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + J[2, i//N, i%N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin + J[2, i//N, i%N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0010939814814814807}
#island_id: 2
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (-1,0), (1,0)]:
      if i % N + direction[0] < 0 or i % N + direction[0] >= N or i // N + direction[1] < 0 or i // N + direction[1] >= N:
        continue
      site_nbr_direction = (i % N + direction[0], i // N + direction[1])
      if J[0,site_nbr_direction[0],site_nbr_direction[1]] > 0:
        h_site += J[0,site_nbr_direction[0],site_nbr_direction[1]]*h[i//N][i%N]
      else:
        h_site -= J[0,site_nbr_direction[0],site_nbr_direction[1]]*h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015893518518518522}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]) > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      total_spin[1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -total_h
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': -0.011885956790123458}
#island_id: 3
#version_generated: 3
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr_2][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h[site_nbr_2][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0011554012345679013}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_sum = 0
    for j in range(3):
      k = (j + i//N) % N
      if J[j,i%N,k]:
        priority_sum += J[j,i%N,k] * h[k,i%N]
    
    priorities[i][0] = h_site + priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.706790123456717e-05}
#island_id: 2
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (j + i % N + ((i//N-1)%2 - 1)) % N
      if J[0,site_nbr_j,i//N] > 0:
        h_site += J[j,i//N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i//N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 2
#version_generated: 3
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        spin = 1
      else:
        spin = -1

      priority = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site*spin
      priorities[i][j] = priority
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      sum_nbrs = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + sum_nbrs
      priorities[i][1] = -priorities[i][0]
    else:
      sum_nbrs = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - sum_nbrs
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026961419753086416}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if (j == 0 and i % N != 0) or (j == 1 and i//N != 0):
        if J[3-j,i%N,(i+1)%N] > 0:
          h_site += J[3-j,i%N,(i+1)%N]*h[(site_nbr+i-2*i//N)%N][(i+1)%N]
        else:
          h_site -= J[3-j,i%N,(i+1)%N]*h[(site_nbr+i-2*i//N)%N][(i+1)%N]
      if (j == 0 and i % N != N-1) or (j == 1 and i//N != N//N-1):
        if J[j,i%N,(i+N-1)%N] > 0:
          h_site += J[j,i%N,(i+N-1)%N]*h[(site_nbr+i-N*i//N)%N][(i+N-1)%N]
        else:
          h_site -= J[j,i%N,(i+N-1)%N]*h[(site_nbr+i-N*i//N)%N][(i+N-1)%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009489197530864191}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (i+N-1)%N, (j+1)%N, (j+N-1)%N]
      h_site = sum([J[k,i,j]*h[site_nbrs[k],j] for k in range(4)])
      if h[i][j] > 0:
        priorities[i*N+j][0] = h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': -0.000439969135802469}
#island_id: 3
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N + i%N) % N + ((i//N+N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) + sum([J[k,site_nbr2,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) - sum([J[k,site_nbr2,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14757268518518538}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = max(spin_bias,0) - abs(spin_bias)
    else:
      spin_bias = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = min(spin_bias,0) + abs(spin_bias)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004699074074074078}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,(i//N+N-1)%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008007716049382713}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N: continue
      site_nbr_k = ((k+i//N-1)%2 - 1) % N
      h_site += J[k, i%N, i//N] * h[site_nbr_k][(k+i%N)%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.002796450617283951}
#island_id: 3
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total = h_site
      for k in range(3):
        total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total
      priorities[i][1] = -total
    else:
      total = -h_site
      for k in range(3):
        total -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total
      priorities[i][1] = total

  return(priorities)




#score: {'data2D.txt': -0.0009955246913580249}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      energies = [h[site_nbr][i%N]]
    else:
      energies = [-h[site_nbr][i%N]]
    for k in range(3):
      if i // N == k and i % N != N - 1:
        energies.append(J[k,i//N,k%N]*h[(k+N-1)%N][i%N])
      elif i % N == N - 1 and i // N == k:
        energies.append(J[k,N-1,k%N]*h[(k+N-1)%N][0])
      else:
        energies.append(J[k,(i//N)%N,i%N]*h[(k+N-1)%N][(i%N)%N])
    priorities[i][0] = -sum(energies)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036084876543209876}
#island_id: 1
#version_generated: 2
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = J[0,i//N,i%N]*h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 1
#version_generated: 2
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14760570987654337}
#island_id: 1
#version_generated: 2
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (1 + sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))

  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0019757716049382716}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i+N-1)%N
    right_nbr = (i+N+1)%N

    if i % N == 0: # top row
      priorities[i][0] = h_site + J[3,i//N,i%N]*h[(left_nbr+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    elif i % N == N-1: # bottom row
      priorities[i][0] = h_site + J[2,i//N,i%N]*h[left_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003353395061728406}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = h_site + sum(neighbors)
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors = [-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = -h_site - sum(neighbors)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007686728395061726}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + (j - 1) % 2 - 1) % N for j in range(4)]
    if any(J[k][site_nbrs[0], i//N] > 0 for k in [0, 1]):
      h_site = sum(h[j][i%N] for j in site_nbrs)
    else:
      h_site = -sum(h[j][i%N] for j in site_nbrs)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k][site_nbrs[1], i//N]*h[(k+3-1)%4][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k][site_nbrs[1], i//N]*h[(k+3-1)%4][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010856481481481483}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    site_nbr3 = (site_nbr1 - 1) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[min(max((k+N-2)%N, site_nbr1), (site_nbr3+1)%N)][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010439814814814808}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i // N) % N if i % N == 0 else (i % N - 1),
           (i // N) % N if i % N == N-1 else (i % N + 1)]
    for j in site_nbrs:
      h_site = J[site_nbrs.index(j), i//N, i%N]*h[j][i%N]
    priorities[i][0] = sum([h_site if J[0,i%N,i//N]>0 else -h_site for h_site in [h_site for j in site_nbrs]])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006609567901234563}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + ((i//N)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283954}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      sitenbr = (k+N-1)%N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[sitenbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[sitenbr][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006804012345679013}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1),(1,0),(-1,0),(0,-1)]:
      site_dir = (i % N + ((i//N+dir[0])%2 + dir[1]%N) - 1) % N
      h_site += J[dir[0], i%N, i//N] * h[site_dir][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004669598765432081}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    nearest_neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(nearest_neighbors) + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(nearest_neighbors) - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013671296296296294}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_magnetism = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_magnetism -= J[k,i%N,i//N]
      else:
        total_magnetism += J[k,i%N,i//N]
    priorities[i][0] = total_spin + h[site_nbr][i%N] * total_magnetism
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -h_site - total_spin

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if (J[k,i%N,i//N] != 0)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009140432098765437}
#island_id: 3
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h[i//N][i%N]) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+h[i//N][i%N]) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012263888888888895}
#island_id: 3
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_k = ((k+2)%4)*(i//N) + (k-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 1
#version_generated: 2
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 1
#version_generated: 2
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0):
      priorities[i][0] = h_site + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023158950617283955}
#island_id: 1
#version_generated: 2
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (site_nbr + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015285493827160497}
#island_id: 3
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0, i%N, i//N] * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - J[0, i%N, i//N] * (h[site_nbr][i%N] - h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008637345679012346}
#island_id: 3
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[1,k,i//N]*h[k%(N-1),i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[1,k,i//N]*h[k%(N-1),i%N] for k in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.030142746913580248}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N):
      if i < N and (i==j or (j-1)%N == site_nbr):
        J_site = J[0,i//N,j]
      elif i >= N and (i-j) % N == 0:
        J_site = J[3,i//N,j]
      else:
        J_site = J[1,(i+j)//2%N,j]

      if h[i//N][j] > 0:
        priorities[i][0] += h_site + J_site
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J_site
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if J[0,i,j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005356481481481487}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)]) if h[i//N].sum() > 0 else -sum([h[site_nbr][j] for j in range(N)])
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_spin + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.07140077160493827}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = J[0,i//N,i%N] + 2*h[i//N][i%N]*h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003692901234567896}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009671296296296294}
#island_id: 0
#version_generated: 2
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for j, site_nbr in enumerate(site_nbrs):
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += J[j,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= J[j,i%N,i//N]*h[site_nbr][i%N]
      else:
        priorities[i][0] -= J[j,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] += J[j,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010084876543209886}
#island_id: 0
#version_generated: 2
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,i//N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002359413580246914}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      if J[0,j,i//N] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin[0] += h_site + sum([J[k,j,i//N]*h_site_j for k in range(3)])
      if J[0,j,i//N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005426388888888889}
#island_id: 1
#version_generated: 2
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      for k in range(3):
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.012184722222222227}
#island_id: 1
#version_generated: 2
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i//N,i//N]*total_spin[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i//N,i//N]*total_spin[k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.18968595679012343}
#island_id: 1
#version_generated: 2
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site += h[i//N][i%N]
    
    priorities[i][0] = 2*h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013748456790123457}
#island_id: 1
#version_generated: 2
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbr][i%N] * J[k,i//N,i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004270061728395067}
#island_id: 1
#version_generated: 2
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N, (i//N-1)%N, (i+N-1)%N]]
    h_site = sum([h[s][i%N] if J[k,i%N,s] > 0 else -h[s][i%N] for k,s in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003134259259259265}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      else:
        total_spin = -total_spin
      priorities[i][j] = h_site + total_spin

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_energy = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_energy = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': 0.00020169753086419806}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[2,i//N,i%N] > 0:
      priorities[i][0] += sum([J[2,k,N*(k//N)+(k%N)]*h[k//N][k%N] for k in range(N)])
    else:
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020288580246913576}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N*2+i%2, (i//N*2+1)%N]]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    total_h = sum(h_sites)
    priorities[i][0] = total_h
    priorities[i][1] = -total_h
  return(priorities)




#score: {'data2D.txt': 0.001052623456790123}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nearest_neighbors = [(i+N-1)%N, (i+N//2)%N]
    for neighbor in nearest_neighbors:
      if J[1,i%N,i//N]*h[(neighbor-N-1)%N][i%N] > 0:
        h_site += J[1,i%N,i//N]*h[(neighbor-N-1)%N][i%N]
      else:
        h_site -= J[1,i%N,i//N]*h[(neighbor-N-1)%N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00030540123456790146}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - J[0, i % N, i // N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + J[0, i % N, i // N]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(nns)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(nns)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18408256172839504}
#island_id: 1
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = h[i//N][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          priorities[i][0] += sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
          priorities[i][1] -= sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
        else:
          priorities[i][0] -= sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
          priorities[i][1] += sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
    else:
      h_site = -h[i//N][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
      for k in range(3):
        if J[k,i%N,i//N] > 0:
          priorities[i][0] -= sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
          priorities[i][1] += sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
        else:
          priorities[i][0] += sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])
          priorities[i][1] -= sum([J[l,i%N,site_nbrs[j]]*h[site_nbrs[j]][i%N] for l,j in zip(range(2),range(1,3))])

  return(priorities)




#score: {'data2D.txt': 0.0014871913580246916}
#island_id: 0
#version_generated: 2
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    neighbors = [(i-1)%N if i % N != 0 else (N-1), (i-1)//N if i // N > 0 else (N-1)]
    priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,neighbors[0]]*h[neighbors[0]][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': -0.1998859567901236}
#island_id: 0
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = abs(h_site) + sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -abs(h_site) - sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031466049382716}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k, i%N, i//N] * h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - 2*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  return priorities




#score: {'data2D.txt': 0.0009995370370370375}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
      site = ((i//N + d[0]) % N)*N + (i % N + d[1])
      if J[0,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011470679012345686}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+J[2,i//N,i%N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+J[2,i//N,i%N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 1
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 1
#version_generated: 2
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_energy = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -total_energy
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00024027777777777738}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += h[(k+N-1)%N][i%N]
      else:
        total_spin -= h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 2
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011743055555555555}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[j,i%N,i//N]*h[site_nbr_j][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[j,i%N,i//N]*h[site_nbr_j][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    total = sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][0] = h_site + total
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0022479938271604944}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:, i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] - total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin[0] - total_spin[1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021060185185185184}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00023070987654321044}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr = [site_nbrs[j] if (j+1)%2 == 0 else site_nbrs[2-j] for j in range(2)][::-1][0]
    h_site = h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 0
#version_generated: 2
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008513888888888883}
#island_id: 2
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002905864197530863}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if ((j % N) == (i % N)) or (((j//N) == (i//N))):
          priorities[i][0] += 2 * J[0,i%N,j//N]*h[(j+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if ((j % N) == (i % N)) or (((j//N) == (i//N))):
          priorities[i][0] -= 2 * J[0,i%N,j//N]*h[(j+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.013306944444444444}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    total_spin += h[site_nbr][i%N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.10115447530864198}
#island_id: 1
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[1,i//N,i%N]*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[1,i//N,i%N]*h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012359567901234565}
#island_id: 0
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001747067901234568}
#island_id: 0
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 0
#version_generated: 2
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005460339506172839}
#island_id: 3
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (k + ((i+N-1)%N - N//2)) % N
      if J[0,k,i//N] > 0:
        total_spin[0] += h_site
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.00016929012345679017}
#island_id: 3
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k+1)%2 == ((i // N) % 2):
        J_k = -J[k,i%N,i//N]
      else:
        J_k = J[k,i%N,i//N]
      h_site += J_k * h[(k + i // N) % N][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.020229166666666663}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      site_nbr2 = (k + i % N) % N
      if J[k,i//N,i%N] > 0:
        total_spin[1] -= h[site_nbr2][i%N]
      else:
        total_spin[0] += h[site_nbr2][i%N]

    priorities[i][0] = h_site + sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00014552469135802436}
#island_id: 1
#version_generated: 2
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a correction term based on the total magnetism at each site
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    priorities[i][0] += total_spin[i][0]
    priorities[i][1] -= total_spin[i][1]

  return(priorities)




#score: {'data2D.txt': -0.0004970679012345676}
#island_id: 1
#version_generated: 2
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012427469135802467}
#island_id: 1
#version_generated: 2
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (site_nbr + ((i//N-1)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[2,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[2,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003236111111111117}
#island_id: 2
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2)) % N
    if J[1,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    site_nbr3 = (i % N + ((i//N+1)%2)) % N
    if J[2,i%N,i//N] > 0:
      h_site3 = h[site_nbr3][i%N]
    else:
      h_site3 = -h[site_nbr3][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2768124999999996}
#island_id: 2
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1+h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1-h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = 1-h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0008149691358024689}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      priority_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000547376543209877}
#island_id: 1
#version_generated: 2
#generate time14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([priorities[j][0] for j in range(i)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([priorities[j][0] for j in range(i)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004122376543209876}
#island_id: 1
#version_generated: 2
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - J[1,i//N,i%N]*(sum(h[i//N]) + h[i//N][i%N])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + J[1,i//N,i%N]*(sum(h[i//N]) + h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2855942901234563}
#island_id: 1
#version_generated: 2
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the magnetism at each site
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    if h[i//N][i%N] > 0:
      total_spin[0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] -= 1
    else:
      total_spin[0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] += 1
    
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
    
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009692901234567894}
#island_id: 3
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00027731481481481503}
#island_id: 0
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+N-1)%N,i//N]*h[(k+N-1)%N][(i+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007581790123456783}
#island_id: 0
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0:
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        site_nbr = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
      elif k == 2:
        site_nbr = (i % N + ((i//N+1)%N - 1)) % N
      else:
        site_nbr = ((i+N-1)%N + ((i//N+1)%N - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 0
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_energy = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.25464675925925906}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([abs(J[k,i%N,i//N])*abs(h[(k+N-1)%N][i%N]) for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      term1 = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + term1
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - term1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.2191358024691456e-05}
#island_id: 2
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] - (2*h[i//N][i%N])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0] + (2*h[i//N][i%N])

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 0
#version_generated: 2
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_energy = sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(3))])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_i = h[i//N][i%N]
    if h_i > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001679475308641976}
#island_id: 3
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in enumerate([0,1,2])]) > 0:
      h_site = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    else:
      h_site = -sum(h[site_nbr][i%N] for site_nbr in site_nbrs)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002661882716049383}
#island_id: 3
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    priorities[i][0] = J[0,i//N][i%N] * h[site_nbr][i%N] + sum([J[k,i%N,(k+N-1)%N]*h[(k+N-1)//N][(k+N-1)%N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00030632716049382733}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if d == 0:
        neighbor = (i+N-1)%N
      elif d == 1:
        neighbor = (i+1)%N
      elif d == 2:
        neighbor = i-N-1
      else:
        neighbor = i-1

      if J[d,neighbor//N,neighbor%N] > 0:
        h_site += J[d,neighbor//N,neighbor%N]*h[neighbor//N][neighbor%N]
      else:
        h_site -= J[d,neighbor//N,neighbor%N]*h[neighbor//N][neighbor%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09719243827160502}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = -h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 2.36111111111158e-05}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i+N-1)%N if i < N else (i+1) % N
    site_nbr_down = (i-N)%N if i >= N else (i-1) % N
    site_nbr_left = (i % N - 1) % N if i%N > 0 else (i % N + N - 1) % N
    site_nbr_right = (i % N + 1) % N if i%N < N-1 else (i % N - N + 1) % N

    total_spin = sum([h[site_nbr_up][j] for j in range(N)]) + sum([-h[site_nbr_down][j] for j in range(N)]) + h[site_nbr_left][i%N] + h[site_nbr_right][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033507716049382724}
#island_id: 2
#version_generated: 3
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum(h[j]) for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)) - total_spin[site_nbr]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)) + total_spin[site_nbr]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000802623456790124}
#island_id: 2
#version_generated: 3
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([h[k][i%N]*J[l,k,i//N] for k in range(N) for l in [0,1,2]])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([h[k][i%N]*J[l,k,i//N] for k in range(N) for l in [0,1,2]])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([h[k][i%N]*J[l,k,i//N] for k in range(N) for l in [0,1,2]])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([h[k][i%N]*J[l,k,i//N] for k in range(N) for l in [0,1,2]])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time14:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0061171296296296295}
#island_id: 0
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) + sum([J[k,i%N,i//N]*(1-h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site+1) + sum([J[k,i%N,i//N]*(-h[(k+N-1)%N][i%N]+1) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003297839506172848}
#island_id: 1
#version_generated: 2
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_spin_magnitude = 0
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin += h[site_nbr][i%N]
        total_spin_magnitude += abs(h[site_nbr][i%N])
      else:
        total_spin -= h[site_nbr][i%N]
        total_spin_magnitude -= abs(h[site_nbr][i%N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2113421296296296}
#island_id: 3
#version_generated: 3
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * (1 + np.sum(J[:, i//N, i%N]))
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.1474479938271607}
#island_id: 3
#version_generated: 3
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin,[1,-1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin,[1,-1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005739197530864188}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (-1,0), (1,0)]:
      j_site = i//N*N + (i%N+direction[1]) % N
      if j_site < 0 or j_site >= N*N: continue
      site_nbr_j = (j_site % N + ((j_site//N-1)%2 - 1)) % N
      if J[0,i%N,j_site//N] > 0:
        h_site += J[direction[0],i%N,j_site//N]*h[site_nbr_j][j_site%N]
      else:
        h_site -= J[direction[0],i%N,j_site//N]*h[site_nbr_j][j_site%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0016004629629629626}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) if k % 2 == j else J[k,i%N,i//N]*np.sign(h[k%N][i%N]) for k in range(4)])
      priorities[i][j] = h_site + total_spin
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 0
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      interaction = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + interaction
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00042608024691358025}
#island_id: 0
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the sites by their priority
  sorted_sites = np.argsort(priorities, axis=0)

  return(sorted_sites)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00045169753086419736}
#island_id: 2
#version_generated: 3
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        priorities[i][0] += h_site*h[site_nbr_j][i%N]
      else:
        priorities[i][0] -= h_site*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000604475308641975}
#island_id: 1
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i % N, i // N] * h[(site_nbr + N) % N][i % N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i % N, i // N] * h[(site_nbr + N) % N][i % N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time15:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001134413580246914}
#island_id: 1
#version_generated: 2
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time15:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_J = sum([J[k,(i+N-1)%N,min(i//N,k//N)+(k%N)]*(h[(k+N-1)%N][(i+N-1)%N] if J[0,(i+N-1)%N,min(i//N,k//N)+(k%N)]>0 else -h[(k+N-1)%N][(i+N-1)%N]) for k in range(3)])
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum_J
      else:
        priorities[i][j] = -h_site - sum_J

  return(priorities)




#score: {'data2D.txt': -0.0005554012345679016}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,N//N]*(h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,N//N]*(h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007513888888888888}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]*h[(i-1)%N][i%N] + J[2,i%N,i//N]*h[(i+1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + J[1,i%N,i//N]*-h[(i-1)%N][i%N] + J[2,i%N,i//N]*-h[(i+1)%N][i%N]) * -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021060185185185184}
#island_id: 1
#version_generated: 2
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k%2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k%2)*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007689814814814819}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.1654791666666668}
#island_id: 2
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      jnbr = (i % N + ((k-1)%2 - 1)) % N
      priorities[i][0] += J[k,i%N,jnbr]*h[jnbr][i//N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,jnbr]
      else:
        priorities[i][1] += J[k,i%N,jnbr]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010467592592592592}
#island_id: 3
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k==0 and i//N>0: 
        site_nbr2=(i % N + ((i//N-1)%2 - 1)) % N
      elif k==1 and i%N==0 or (i//N<N-1): 
        site_nbr2=(i % N + ((i//N+1)%2 - 1)) % N
      elif k==2: 
        site_nbr2 = (i // N) % N
      elif k==3 and i%N<N-1: 
        site_nbr2=(i % N + ((i//N+1)%2 - 1)) % N

      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006121913580246914}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if i // N < N // 2:
      edge_effect = J[1,i//N,i%N] * (total_spin[i % N] + total_spin[N-1-i % N])
    else:
      edge_effect = -J[1,i//N,i%N] * (total_spin[i % N] + total_spin[N-1-i % N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + edge_effect
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - edge_effect
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009331790123456792}
#island_id: 3
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k, i%N, i//N]
      else:
        total_spin -= J[k, i%N, i//N]
    priorities[i][0] = (h[site_nbr][i%N] + total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002293672839506174}
#island_id: 3
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0 and J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = -sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if J[0,i%N,i//N] < 0 and J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][0] = sum([abs(J[k,i%N,i//N])*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01148287037037037}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03192916666666666}
#island_id: 0
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if i % N == 0 or h[i//N][i%N] * h[(i+N-1)%N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008208333333333334}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += J[0,i%N,i//N]
      total_spin[i][1] -= J[0,i%N,i//N]
    else:
      total_spin[i][0] -= J[0,i%N,i//N]
      total_spin[i][1] += J[0,i%N,i//N]

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for j in range(2):
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      
      priorities[i][j] = h_site + (2*total_spin if J[0,i%N,i//N] > 0 else -2*total_spin)
    
  return(priorities)




#score: {'data2D.txt': 0.15865231481481482}
#island_id: 1
#version_generated: 2
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + abs(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008939814814814806}
#island_id: 0
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N+1, i//N, i//N-1]]
    if J[0,i%N,i//N] > 0:
      h_sites = [h[site_nbr][i%N] for site_nbr in site_nbrs]
    else:
      h_sites = [-h[site_nbr][i%N] for site_nbr in site_nbrs]

    total_spin = sum(h_sites)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005180092592592592}
#island_id: 0
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_left = (i-N-1) % (N*N)
    site_right = ((i+1)%N + (i//N)*N) % (N*N)
    site_up = (i-N) % (N*N)
    site_down = (i+N+1) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[0,k,i//N]*h[min(k,N-1)][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[0,k,i//N]*h[max(k,0)][i%N] for k in range(-1,2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006104783950617284}
#island_id: 0
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 and i % N != 0: 
        if J[k,i//N,i%N] > 0:
          h_site += J[k,i//N,i%N]*h[(i//N+N-1)%N][(i+1)%N]
        else:
          h_site -= J[k,i//N,i%N]*h[(i//N+N-1)%N][(i+1)%N]
      elif k == 1 and i % N != 0: 
        if J[k,i//N,i%N] > 0:
          h_site += J[k,i//N,i%N]*h[(i//N+N-2)%N][i%N]
        else:
          h_site -= J[k,i//N,i%N]*h[(i//N+N-2)%N][i%N]
      elif k == 2 and i % N != N-1: 
        if J[k,i//N,i%N] > 0:
          h_site += J[k,i//N,i%N]*h[(i//N+1)%N][(i+N-1)%N]
        else:
          h_site -= J[k,i//N,i%N]*h[(i//N+1)%N][(i+N-1)%N]
      elif k == 3 and i % N != N-1: 
        if J[k,i//N,i%N] > 0:
          h_site += J[k,i//N,i%N]*h[i//N][(i+N-2)%N]
        else:
          h_site -= J[k,i//N,i%N]*h[i//N][(i+N-2)%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008158950617283956}
#island_id: 1
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if site_nbr == i // N and J[0, i % N, i // N] > 0:
        priorities[i][0] += h_site
      elif site_nbr != i // N or J[0, i % N, i // N] < 0:
        priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if site_nbr == i // N and J[0, i % N, i // N] < 0:
        priorities[i][0] -= h_site
      elif site_nbr != i // N or J[0, i % N, i // N] > 0:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1596445987654321}
#island_id: 1
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term to account for the magnetism at each site
  for i in range(N**2):
    priorities[i][0] += h[i//N][i%N]
    priorities[i][1] -= h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 1
#version_generated: 2
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr1][i%N]
      J_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.018098302469135803}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j] > 0:
        h_site = h[i][j]
      else:
        h_site = -h[i][j]

      if h[i][j] > 0:
        priorities[i*N+j][0] = h_site + sum([J[k,i,j]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h_site - sum([J[k,i,j]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001390432098765429}
#island_id: 0
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010476851851851851}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sites = [(i+1)%N, (i+N-1)%N, ((i+1)%N + (i//N-1)%2 - 1)%N]
    total_energy = h[i//N][i%N] * h_site
    for site in neighbor_sites:
      total_energy += J[0, i%N, site]*h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      site_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][0] = site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      site_sum = -sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][0] = site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for j in range(3):
      sum_h += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007902777777777778}
#island_id: 3
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006376080246913581}
#island_id: 3
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[site_nbrs[k]][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008378858024691358}
#island_id: 0
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017422839506172865}
#island_id: 2
#version_generated: 3
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(3):
      total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005257716049382712}
#island_id: 2
#version_generated: 3
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-J[2,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-J[2,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009433641975308643}
#island_id: 2
#version_generated: 3
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin += h[site_nbr][j]
      else:
        total_spin -= h[site_nbr][j]

    priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 2.7623456790123623e-05}
#island_id: 1
#version_generated: 2
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i//N,i%N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i//N,i%N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016797839506172837}
#island_id: 1
#version_generated: 2
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[i//N][i%N]
    
    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011914043209876548}
#island_id: 1
#version_generated: 2
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:,i//N], axis=0)
    priority_sum = h[i//N][i%N] + sum([J[k,i//N,i//N]*total_spin[k] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015165123456790121}
#island_id: 0
#version_generated: 2
#generate time15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # sort by priority and update the order
  sorted_indices = np.argsort(priorities, axis=1).flatten()
  priorities = priorities.flatten()[np.arange(len(sorted_indices))].reshape(-1, 2)

  return(priorities)




#score: {'data2D.txt': -0.0006841049382716043}
#island_id: 0
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0035418209876543214}
#island_id: 0
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, range(3))]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(h_sites) + max(h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - min(h_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.922839506172832e-05}
#island_id: 0
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N//2) % N)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) + sum([J[k,i%N,site_nbr2]*h[site_nbr1][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr1][i%N] for k in range(3)]) - sum([J[k,i%N,site_nbr2]*h[site_nbr1][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = h[i//N][i%N]
    for j in range(3):
      total_magnetism += J[j,i//N,i%N]*h[(j+N-1)%N][i%N]
    if total_magnetism > 0:
      priorities[i][0] = total_magnetism
      priorities[i][1] = -total_magnetism
    else:
      priorities[i][0] = -total_magnetism
      priorities[i][1] = total_magnetism
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_magnetism = h[i//N][i%N]
    if site_magnetism > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016001543209876545}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004797839506172843}
#island_id: 0
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002978858024691358}
#island_id: 0
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + ((i % N-1)%2 - 1)) % N,
           (i // N + ((i % N+1)%2 - 1)) % N]
    for j in range(4):
      if J[0,site_nbrs[j],i//N] > 0:
        h_site = h[site_nbrs[j]][i%N]
      else:
        h_site = -h[site_nbrs[j]][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site
    if h[i//N][i%N] > 0:
      priorities[i][1] = -sum([J[k,site_nbrs[j],i//N]*h[site_nbrs[j]][i%N] for k in range(4)])
    else:
      priorities[i][1] = sum([J[k,site_nbrs[j],i//N]*h[site_nbrs[j]][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14498904320987674}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      priorities[i][0] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      else:
        priorities[i][1] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0004797839506172843}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': 0.001002932098765431}
#island_id: 0
#version_generated: 2
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + (i % N + ((i//N-1)%2 - 1)) % N) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 0
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr1][i%N]
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006634259259259254}
#island_id: 1
#version_generated: 2
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[1,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002830401234567901}
#island_id: 1
#version_generated: 2
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(3):
      if h[(site_nbr+N-1)%N][i%N] > 0:
        total_spin[0] += J[j,i%N,i//N]
        total_spin[1] -= J[j,i%N,i//N]
      else:
        total_spin[0] -= J[j,i%N,i//N]
        total_spin[1] += J[j,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h[site_nbr][i%N] + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[site_nbr][i%N] + sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00027854938271604923}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]

      priorities[i*N+j][0] = h_site + sum([J[k,(i+N-1)%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i*N+j][1] = -priorities[i*N+j][0]
  
  return(priorities)




#score: {'data2D.txt': -0.20652175925925945}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005227932098765433}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]) > 0:
      h_site = np.sum(h[i//N])
    else:
      h_site = -np.sum(h[i//N])

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015643518518518521}
#island_id: 3
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[2,i%N,i//N])*h_site
      priorities[i][1] = -(1 + J[2,i%N,i//N])*h_site
    else:
      priorities[i][0] = -(1 - J[2,i%N,i//N])*h_site
      priorities[i][1] = (1 - J[2,i%N,i//N])*h_site

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 3
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total
    priorities[i][1] = -total

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009091049382716057}
#island_id: 2
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 0]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([2*J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([2*J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0027933641975308645}
#island_id: 2
#version_generated: 3
#generate time15:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(-1,2):
      site_nbr = (i % N + ((i//N+j)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin += J[j,i%N,i//N]
      else:
        total_spin -= J[j,i%N,i//N]
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in [0,1]])
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006371913580246914}
#island_id: 3
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      dx, dy = [0,1,-1,0][d], [1,0,0,-1][d]
      site_nbr_d = ((i//N+dy)%N*N+(i%N+dx)) % N
      if J[d,i%N,i//N] > 0:
        h_site += h[site_nbr_d][i%N]
      else:
        h_site -= h[site_nbr_d][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004979938271604938}
#island_id: 3
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for k in range(3):
      total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_j = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_j
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_j
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.270965895061728}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - abs(sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]-1) for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + abs(sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]-1) for k in range(4)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1 - h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = (1 - h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0006075617283950611}
#island_id: 1
#version_generated: 2
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or (i % N) == ((k+N-1)%N):
        J_term = 2 * J[k,i%N,i//N] * h[(k+N-1)%N][i%N]
      else:
        J_term = J[k,i%N,i//N] * h[(k+N-1)%N][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J_term for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= h_site + sum([J_term for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      spin_bias = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + spin_bias
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = spin_bias + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      spin_bias = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -spin_bias - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009494598765432098}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[site_nbr][j] for j in range(N)])*2 + h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin/3
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin/3
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0001452160493827159}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_interaction = 0
      for k in range(4):
        if k == 1 and ((i//N) + (j-1)%2 - 1) % N != i//N:
          continue
        elif k == 3 and ((i//N) + (j+1)%2 - 1) % N != i//N:
          continue
        else:
          sum_interaction += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum_interaction
      else:
        priorities[i][j] = -h_site - sum_interaction
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002140432098765432}
#island_id: 3
#version_generated: 3
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    site_nbr_values = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k,site_nbr in zip(range(4),site_nbrs)]
    h_site = sum(site_nbr_values)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00340138888888889}
#island_id: 3
#version_generated: 3
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[j][i%N]*J[k,i//N,j] for k,j in zip(range(3),[site_nbr,(i+N-1)%N,(i+N+N-1)%N])])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.004657561728395061}
#island_id: 3
#version_generated: 3
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
      for direction in directions:
        neighbor_i = (i // N + direction[0]) % N
        neighbor_j = (i % N + direction[1]) % N
        if h[neighbor_i][neighbor_j] > 0:
          priorities[i][0] += J[d, i%N, i//N]*h_site
          priorities[i][1] -= J[d, i%N, i//N]*h_site
        else:
          priorities[i][0] -= J[d, i%N, i//N]*-h_site
          priorities[i][1] += J[d, i%N, i//N]*-h_site

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019671296296296303}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] = total_spin[i*N+j][0]
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -total_spin[i*N+j][0]
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000696141975308642}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin_site = total_spin[site_nbr]
        priorities[i*N+j][0] = sum([J[k,i,j]*total_spin_site[k%2] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        total_spin_site = total_spin[site_nbr]
        priorities[i*N+j][0] = -sum([J[k,i,j]*total_spin_site[k%2] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.0022612654320987658}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] -= J[k,i//N,i%N]*h[site][i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]*h[site][i%N]
        priorities[i][1] += J[k,i//N,i%N]*h[site][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002625000000000005}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[site_nbr][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07077700617283955}
#island_id: 1
#version_generated: 2
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      spin = j*2-1
      energy = h[i//N][i%N]*spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*spin for k in range(3)])
      priorities[i][j] = -energy if J[0,i%N,i//N] > 0 else energy

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([True for j in range(N) if J[0,j,i//N] > 0])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * len([True for j in range(N) if J[0,j,i//N] > 0])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.005022067901234568}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or J[0,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or J[0,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028902777777777776}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    total_h_field = 0
    if h[i//N][i%N] > 0:
      total_spin += 1
      total_h_field -= 1
    else:
      total_spin -= 1
      total_h_field += 1
    
    for k in range(3):
      total_spin += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = total_spin + total_h_field
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00030663580246913626}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]*(h[(i//N+1)%N][i%N]+h[(i//N+1)%N][(i+N-1)%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]*(h[(i//N+1)%N][i%N]+h[(i//N+1)%N][(i+N-1)%N])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.045640895061728394}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sum_h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = sum_h_site + sum([J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if spin_energy > 0:
      priorities[i][0] = spin_energy
      priorities[i][1] = -spin_energy
    else:
      priorities[i][0] = -spin_energy
      priorities[i][1] = spin_energy

  return(priorities)




#score: {'data2D.txt': 0.0003310185185185186}
#island_id: 3
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for j in range(N):
      total_h += h[j][i%N] * J[(j+1)%2,i//N,i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00022916666666666653}
#island_id: 3
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%N-1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.dot(total_spin, [1, -1])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.dot(total_spin, [1, -1])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_1 = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_1][j]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1

    priorities[i][0] = h_site + np.sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017128086419753088}
#island_id: 1
#version_generated: 2
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k+1,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004921296296296298}
#island_id: 1
#version_generated: 2
#generate time15:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    interaction_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k]%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + interaction_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0026979938271604934}
#island_id: 1
#version_generated: 2
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-2)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+N-2)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.86728395061712e-05}
#island_id: 1
#version_generated: 2
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, i%N-1, (i//N-1)*N+i%N, (i//N+1)*N+i%N]]
    h_site = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005952160493827163}
#island_id: 1
#version_generated: 2
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_1 = (i % N + ((i//N-1)%2)) % N
    site_nbr_2 = (i % N + ((i//N+1)%2)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr_1][i%N] for k in range(3)]) + sum([J[k,i%N,i//N]*h[site_nbr_2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr_1][i%N] for k in range(3)]) - sum([J[k,i%N,i//N]*h[site_nbr_2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002027623456790123}
#island_id: 0
#version_generated: 2
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr1][i % N]
    else:
      h_site = -h[site_nbr1][i % N]

    priorities[i][0] = h_site + sum([J[k, i % N, i // N]*h[min((k+N-1)%N, site_nbr2), i % N] for k in range(4)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006890432098765438}
#island_id: 0
#version_generated: 2
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[0,i%N,k]*h[k][i%N] for k in range(N) if (k == i%N or k == (i+N-1)%N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[0,i%N,k]*h[k][i%N] for k in range(N) if (k == i%N or k == (i+N-1)%N)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0008217592592592592}
#island_id: 0
#version_generated: 2
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -abs(h_site)
    priorities[i][1] = abs(h_site)

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012606481481481481}
#island_id: 1
#version_generated: 2
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = max(-J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 0)
    else:
      priorities[i][1] = min(J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 0)

  return(priorities)




#score: {'data2D.txt': -0.0014896604938271607}
#island_id: 1
#version_generated: 2
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * J[0,i%N,i//N]
    total_h = h[i//N][i%N] * J[0,i%N,i//N]
    
    priorities[i][0] = h_site + total_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.14498904320987674}
#island_id: 1
#version_generated: 2
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 5.2932098765434254e-05}
#island_id: 0
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbrs.insert(0, (i % N + (i//N-1)%2) % N)
    h_site = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010012808641975308}
#island_id: 0
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i % N + ((i//N-1)%2)) % N
    if J[1,i//N,i%N] > 0:
      h_site_up = h[site_nbr_up][i%N]
    else:
      h_site_up = -h[site_nbr_up][i%N]

    site_nbr_down = (i % N + ((i//N+1)%2 - 1)) % N
    if J[2,i//N,i%N] > 0:
      h_site_down = h[site_nbr_down][i%N]
    else:
      h_site_down = -h[site_nbr_down][i%N]

    site_nbr_left = (i % N + ((i//N)%2 - 1)) % N
    if J[3,i//N-1,i%N] > 0:
      h_site_left = h[site_nbr_left][i%N]
    else:
      h_site_left = -h[site_nbr_left][i%N]

    priorities[i][0] = h_site + h_site_up + h_site_down + h_site_left
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 0
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0020004629629629634}
#island_id: 0
#version_generated: 2
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a correction term to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011087962962962963}
#island_id: 1
#version_generated: 2
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  J_flat = J.flatten()
  h_flatten = h.flatten()
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + np.sum(J_flat[J[:,i%N,i//N].flatten().nonzero()[0]])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002797993827160494}
#island_id: 1
#version_generated: 2
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[j]][i%N] for k,j in zip(range(3),range(4))]) > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00016867283950617275}
#island_id: 1
#version_generated: 2
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002532253086419753}
#island_id: 2
#version_generated: 3
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 - 2*h[i//N][i%N])*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1 - 2*h[i//N][i%N])*sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h_site > 0:
      priorities[i][1] = (1 - 2*h[i//N][i%N])*priorities[i][0]
    else:
      priorities[i][1] = -(1 - 2*h[i//N][i%N])*priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities=2*np.arcsinh(np.tanh(total_spin))
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00010817901234567873}
#island_id: 0
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = h[site_nbr][i%N]
      total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin + total_energy
      priorities[i][1] = priorities[i][0]
    else:
      total_spin = -h[site_nbr][i%N]
      total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + total_energy
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.2952075617283944}
#island_id: 0
#version_generated: 2
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -abs(h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = abs(h_site) - priorities[i][0]
    else:
      priorities[i][0] = abs(h_site) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -abs(h_site) + priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010717592592592588}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_row = (j + ((i-N-1)%N - N//2)) % N
      total_spin += h[j][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,j]*h[site_nbr_row][j] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,j]*h[site_nbr_row][j] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021643518518518513}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (k + ((i//N-1)%2 - 1)) % N
      if h[k][i%N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, -1]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*s for k, s in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*s for k, s in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0029461419753086435}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (i % N + ((i//N-j)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr_j][j]
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_j][j]
        if h[i//N][j] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.16979212962962964}
#island_id: 3
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_priority = h[i//N][i%N] + h_site
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_priority += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_priority -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = total_priority
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.18808132716049394}
#island_id: 3
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1

    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i//N][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022396604938271594}
#island_id: 3
#version_generated: 3
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005597376543209876}
#island_id: 0
#version_generated: 2
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*-h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time15:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_1 = (k+N-1)%N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr_1][i%N]
        total_spin[1] -= J[k,i%N,i//N]*h[site_nbr_1][i%N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr_1][i%N]
        total_spin[1] += J[k,i%N,i//N]*h[site_nbr_1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000591820987654321}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004223765432098773}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N] + h[site_nbr2][i//N]
    else:
      h_site = -h[site_nbr1][i%N] - h[site_nbr2][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010596759259259259}
#island_id: 0
#version_generated: 2
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*total_h for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*total_h for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=1)
    site_magnetism = total_spin[i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023356481481481475}
#island_id: 0
#version_generated: 2
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    
    if np.sum(h[i//N]) > 0:
      priorities[i][0] = sum([h_sites[j]*J[j,i%N,i//N] for j in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_sites[j]*J[j,i%N,i//N] for j in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.054028549382716055}
#island_id: 3
#version_generated: 3
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_energy - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if priorities[i][0] < -10:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = 0
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if priorities[i][0] > 10:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = 0

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    neighbors_h = [h[(k+N-1)%N][i%N] for k in range(3)]
    J_sum = sum([J[k,i%N,i//N]*n for k, n in enumerate(neighbors_h)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012263888888888895}
#island_id: 1
#version_generated: 2
#generate time15:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      site_nbr_d = (i % N + ((i//N-1)%2 - 1) if d==0 or d==3 else 
             (i % N + ((i//N+1)%2 - 1)) if d==1 else 
             (i % N + ((i//N-1)%2 - 1)) if d==2 else i%N)
      if J[d,i%N,i//N] > 0:
        h_site += J[d,i%N,i//N]*h[site_nbr_d][i%N]
      else:
        h_site -= J[d,i%N,i//N]*h[site_nbr_d][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000616512345679012}
#island_id: 2
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if J[0,i%N,i//N] > 0:
      if h[i//N][i%N] > 0:
        priorities[i][0] = -h_site
        priorities[i][1] = h_site
      else:
        priorities[i][0] = h_site
        priorities[i][1] = -h_site
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site
        priorities[i][1] = -h_site
      else:
        priorities[i][0] = -h_site
        priorities[i][1] = h_site
        
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = 1
    elif total_spin[i][1] > total_spin[i][0]:
      priorities[i][0] = 1
      priorities[i][1] = -total_spin[i][1]
    else:
      if np.random.rand() < 0.5:
        priorities[i][0] = -1
        priorities[i][1] = 1
      else:
        priorities[i][0] = 1
        priorities[i][1] = -1

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003702160493827165}
#island_id: 2
#version_generated: 3
#generate time15:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -7.978395061728261e-05}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if ((j % N + ((j//N-1)%2 - 1)) % N) == site_nbr:
          priorities[i][0] += J[0,i%N,j%N]*h[j//N][j%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if ((j % N + ((j//N-1)%2 - 1)) % N) == site_nbr:
          priorities[i][0] -= J[0,i%N,j%N]*h[j//N][j%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003981944444444444}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0, i%N, i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[0, i%N, i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i//N, i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2768124999999996}
#island_id: 3
#version_generated: 3
#generate time16:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site)-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002518055555555558}
#island_id: 3
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[j][i%N] * J[0,i%N,j] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00010694444444444423}
#island_id: 3
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = np.sum([J[k, i%N, (i//N + k)%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for k in range(3):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if J[0,i%N,i//N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0030557098765432097}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      if J[j,i%N,i//N] > 0 and h[(j+N-1)%N][i%N] > 0:
        total_spin += 1
      elif J[j,i%N,i//N] < 0 and h[(j+N-1)%N][i%N] < 0:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00024089506172839532}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for j in range(N):
      if i % N == (j + ((i//N-1)%2 - 1)) % N:
        sum_h += J[0,i%N,i//N]*h[j][i//N]
    
    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00028348765432098744}
#island_id: 1
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022408950617283934}
#island_id: 1
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i+1)%N, (i-1+N*N)%N, ((i-N)//N)*N + i%N]
    sum_neighbors = 0
    for j in neighbors:
      sum_neighbors += J[0,j//N,j%N]*h[j//N][j%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0180766975308642}
#island_id: 1
#version_generated: 2
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        priorities[i][1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 2*h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0034600308641975315}
#island_id: 0
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0 and J[0,i%N,i//N] > 0) or (h[i//N][i%N] < 0 and J[0,i%N,i//N] < 0):
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    elif (h[i//N][i%N] > 0 and J[0,i%N,i//N] < 0) or (h[i//N][i%N] < 0 and J[0,i%N,i//N] > 0):
      priorities[i][0] = -h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h_site1
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2662492283950614}
#island_id: 0
#version_generated: 2
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum([J[j,i%N,i//N]*h[site_nbrs[j]][i%N] for j in range(3)]) > 0:
      h_site = sum([J[j,i%N,i//N]*h[site_nbrs[j]][i%N] for j in range(3)])
    else:
      h_site = -sum([J[j,i%N,i//N]*h[site_nbrs[j]][i%N] for j in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002933179012345678}
#island_id: 0
#version_generated: 2
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]
    
    site_nbr_top = (i % N + ((i//N-1)%2 - 1)) % N
    if J[3,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -0.0005516975308641975}
#island_id: 0
#version_generated: 2
#generate time16:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i+N) % (N*N)
    site_nbr_down = (i-N) % (N*N)
    site_nbr_left = (i-1)%N*N + i//N
    site_nbr_right = (i+1)%N*N + i//N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[i//N][(i+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[i//N][(i+1)%N]
      priorities[i][1] = -priorities[i][0]

    if i % N > 0:
      site_nbr_left_spin = h[(i-1)//N][(i-1)%N]
      priorities[i][0] += J[2,i%N,i//N]*site_nbr_left_spin
      priorities[i][1] -= J[2,i%N,i//N]*site_nbr_left_spin

    if i % N < N-1:
      site_nbr_right_spin = h[(i+1)//N][(i+1)%N]
      priorities[i][0] += J[3,i%N,i//N]*site_nbr_right_spin
      priorities[i][1] -= J[3,i%N,i//N]*site_nbr_right_spin

    if i < N:
      site_nbr_up_spin = h[(i+N)//N][(i+N)%N]
      priorities[i][0] += J[0,i%N,i//N]*site_nbr_up_spin
      priorities[i][1] -= J[0,i%N,i//N]*site_nbr_up_spin

    if i >= N:
      site_nbr_down_spin = h[(i-N)//N][(i-N)%N]
      priorities[i][0] += J[1,i%N,i//N]*site_nbr_down_spin
      priorities[i][1] -= J[1,i%N,i//N]*site_nbr_down_spin

  return(priorities)




#score: {'data2D.txt': 0.0013084876543209881}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1,i//N,i%N]*h[(i+N-2)%N][i%N]+
                 J[2,i//N,i%N]*h[(i+1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(J[1,i//N,i%N]*h[(i+N-2)%N][i%N]+
                  J[2,i//N,i%N]*h[(i+1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005797839506172837}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_J
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[i//N][i%N] > 0:
      for k in range(3):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    else:
      for k in range(3):
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h[site_nbr][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0007229938271604938}
#island_id: 0
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    left_nbr = (i % N + ((i//N-1)%2)) % N
    if J[1,i%N,i//N] > 0:
      h_left = h[left_nbr][i%N]
    else:
      h_left = -h[left_nbr][i%N]

    up_nbr = (i // N + ((i % N-1)%2)) % N
    if J[3,i//N,i%N] > 0:
      h_up = h[i//N][up_nbr]
    else:
      h_up = -h[i//N][up_nbr]

    priorities[i][0] = h_site + h_left + h_up
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018441358024691356}
#island_id: 0
#version_generated: 2
#generate time16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(h_site)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0017584876543209878}
#island_id: 3
#version_generated: 2
#generate time16:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_site += J[2,i//N,i%N]*h[site_nbr2][i%N]
    elif J[2,i//N,i%N] < 0:
      h_site -= J[2,i//N,i%N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.025895833333333333}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i // N + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += h[site_nbr_k][i%N]
      else:
        h_site -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00023256172839506185}
#island_id: 3
#version_generated: 3
#generate time16:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([h[j][i%N] if J[0,i%N,j] > 0 else -h[j][i%N] for j in range(N)])
    total_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + total_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - total_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k, i%N, i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.01368966049382716}
#island_id: 2
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term to the priority based on the magnetization of neighboring sites
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.00025200617283950577}
#island_id: 2
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(3):
      site_nbrs.append(((i // N + ((j-1)%2 - 1)) % N) * N + (i % N))
    
    if h[i//N][i%N] > 0:
      if len([k for k in site_nbrs if J[0,k//N,k%N]>0]) > len([k for k in site_nbrs if J[0,k//N,k%N]<0]):
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if len([k for k in site_nbrs if J[0,k//N,k%N]>0]) < len([k for k in site_nbrs if J[0,k//N,k%N]<0]):
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19955725308641972}
#island_id: 2
#version_generated: 2
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008134259259259256}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*sum([abs(J[k,i%N,i//N]) for k in range(4)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*sum([abs(J[k,i%N,i//N]) for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.01107577160493827}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Improved priority calculation
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] -= priorities[i][1]
    else:
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] += priorities[i][1]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(3):
      total_spin[0] += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3265131172839499}
#island_id: 2
#version_generated: 3
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + J[1,i//N,i%N]*h[site_nbr][i%N]) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (2*h[i//N][i%N] + J[1,i//N,i%N]*h[site_nbr][i%N]) * np.sign(-h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 2
#version_generated: 3
#generate time16:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 0
#version_generated: 2
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000783179012345679}
#island_id: 0
#version_generated: 2
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a term based on the magnetism at each site
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 0
#version_generated: 2
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004695216049382716}
#island_id: 0
#version_generated: 2
#generate time16:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) + J.sum(axis=0)[i//N,i%N]
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) - J.sum(axis=0)[i//N,i%N]
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 2
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0075748456790123465}
#island_id: 2
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if sum([J[k,i%N,i//N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003371913580246908}
#island_id: 2
#version_generated: 3
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = max(-total_spin, -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = min(total_spin, sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = min(-total_spin, sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = max(total_spin, -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_j = h[(j-1)%2][i%N]
      else:
        h_j = -h[(j-1)%2][i%N]

      priorities[i][0] += h_site + h_j
      priorities[i][1] -= 2

  return(priorities)




#score: {'data2D.txt': -0.00015046296296296303}
#island_id: 0
#version_generated: 2
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if i//N < N-1 and J[j,i%N,i//N]%N == i//N+1:
        site_nbr2 = (i % N + ((i//N+1-1)%2 - 1)) % N
      elif i//N > 0 and J[j,i%N,i//N]%N == i//N-1:
        site_nbr2 = (i % N + ((i//N-1-1)%2 - 1)) % N
      else:
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N

      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00018811728395061667}
#island_id: 0
#version_generated: 2
#generate time16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, i//N] * h[(site_nbr+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, i//N] * h[(site_nbr+1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006106481481481487}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      sitenbr_nbr = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[sitenbr_nbr][i%N]
      else:
        h_site -= h[sitenbr_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018643518518518516}
#island_id: 3
#version_generated: 3
#generate time16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = -total_energy
    priorities[i][1] = total_energy

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0, i%N, i//N]*h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0, i%N, i//N]*h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009174382716049379}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_neighbor
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_neighbor
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 0
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 0
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0028547839506172837}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -total_h
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': -0.000401388888888889}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      total_spin[0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002260956790123458}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 0
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.33876712962962857}
#island_id: 0
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    for dir_, site_nbr in enumerate(site_nbrs):
      if J[dir_][i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J[dir_][i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[dir_][i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.008286882716049384}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      total_h += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_h -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = -total_h
    priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00016620370370370362}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1) * (1 - 2*(np.sign(np.sum(h, axis=1)) == 1))
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1) * (1 - 2*(np.sign(np.sum(h, axis=1)) == 1))
      priorities[i][1] = -priorities[i][0] - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00038996913580246844}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(3):
      site_nbrs.append((i % N + ((i//N-1)%2 - 1)) % N)
    
    if h[i//N][i%N] > 0:
      for k in range(4):
        priorities[i][0] += J[k,i%N,i//N]
        priorities[i][1] -= J[k,i%N,i//N]
    else:
      for k in range(4):
        priorities[i][0] -= J[k,i%N,i//N]
        priorities[i][1] += J[k,i%N,i//N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (N*N) < N:
        site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
      elif i % (N*N) < 2*N:
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      else:
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site2 = h[site_nbr2][i%N]
      else:
        h_site2 = -h[site_nbr2][i%N]

      priorities[i][0] = -h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012350308641975308}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0 or j == 2:  # Up and Down
        priorities[i][0] += J[j,i//N,i%N]*h[(i+N-1)%N][i%N]
        priorities[i][1] -= J[j,i//N,i%N]*h[(i+N-1)%N][i%N]
      elif j == 1:  # Left
        priorities[i][0] += J[j,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] -= J[j,i//N,i%N]*h[site_nbr][i%N]
      else:  # Right
        if i % N == N-1:
          site_nbr = (0 + ((i-N+2)%2 - 1)) % N
        else:
          site_nbr = (i % N + 1)
        priorities[i][0] += J[j,i//N,i%N]*h[site_nbr][i%N]
        priorities[i][1] -= J[j,i//N,i%N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0002745370370370368}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a correction term to account for the border effects
  for i in range(N):
    for j in range(N):
      if (i == 0 or i == N-1) or (j == 0 or j == N-1):
        priorities[i*N+j] += np.random.rand(2)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.014856327160493827}
#island_id: 2
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      if i % (N*N) + j >= N*N:
        site_nbr = (site_nbr + ((j-1)%2 - 1)) % N
      else:
        site_nbr = site_nbr

      h_site += J[j,i//N,i%N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003791666666666673}
#island_id: 2
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(1,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 2
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 2
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_up = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = sum([J[k,i%N,(i//N+1)%N]*h[(k+N-1)%N][(i//N+1)%N] for k in range(3)])
    else:
      priority_up = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priority_down = -sum([J[k,i%N,(i//N+1)%N]*h[(k+N-1)%N][(i//N+1)%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + priority_up
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002439969135802469}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]*2*h_site + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy
    else:
      priorities[i][0] = -site_energy
      priorities[i][1] = site_energy

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      site_h = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + site_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - site_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -total_h
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = total_h

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0029134259259259265}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = 0 if h[i//N][i%N] == 0 else 1
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*magnetism*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0022347222222222234}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site
    else:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site

  return(priorities)




#score: {'data2D.txt': -0.014029475308641976}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N+k)%N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
      else:
        total_spin[1] -= h[site_nbr_k][i%N]

    priorities[i][0] = h_site + np.dot(total_spin, [1,-1])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if j == 0:
        priorities[i][j] = total_priority
      else:
        priorities[i][j] = -total_priority

  return(priorities)




#score: {'data2D.txt': 0.003260956790123456}
#island_id: 0
#version_generated: 2
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002849537037037037}
#island_id: 0
#version_generated: 2
#generate time16:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += h[site_nbr][j]

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > 0:
      if total_spin[i][1] < 0:
        priorities[i][0] = -total_spin[i][0]
        priorities[i][1] = total_spin[i][1]
      else:
        priorities[i][0] = total_spin[i][0]
        priorities[i][1] = -total_spin[i][1]
    elif total_spin[i][0] < 0:
      if total_spin[i][1] > 0:
        priorities[i][0] = total_spin[i][0]
        priorities[i][1] = -total_spin[i][1]
      else:
        priorities[i][0] = -total_spin[i][0]
        priorities[i][1] = total_spin[i][1]

  return(priorities)




#score: {'data2D.txt': 0.009422376543209878}
#island_id: 3
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      for k in range(4):
        site = ((i//N + k)%N, i%N)
        priorities[i][0] += J[k,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][0] += h_site
    else:
      for k in range(4):
        site = ((i//N + k)%N, i%N)
        priorities[i][0] -= J[k,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02844398148148148}
#island_id: 3
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(2):
      if h[(i+N-1)%N][i%N] > 0 or (J[d,i//N,i%N] > 0 and J[d,(i+N-1)%N,i%N] > 0):
        priorities[i][0] += h_site
        priorities[i][1] -= h_site
      elif h[(i+N-1)%N][i%N] < 0 or (J[d,i//N,i%N] < 0 and J[d,(i+N-1)%N,i%N] < 0):
        priorities[i][0] -= h_site
        priorities[i][1] += h_site
      else:
        if h[(i+N-1)%N][i%N] > 0 or J[d,i//N,i%N] > 0:
          priorities[i][0] += h_site
          priorities[i][1] -= h_site
        else:
          priorities[i][0] -= h_site
          priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.006126388888888889}
#island_id: 0
#version_generated: 2
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % (2*N) < N:
        site_nbr_left = (site_nbr + 1) % N
        site_nbr_right = (site_nbr + N-1) % N
      elif i % (2*N) < 2*N:
        site_nbr_left = (site_nbr - 1) % N
        site_nbr_right = (site_nbr + N//2) % N
      else:
        site_nbr_left = (site_nbr - 1) % N
        site_nbr_right = (site_nbr + N-1) % N

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr_left][i%N] for k in range(2)]) - sum([J[k,i%N,i//N]*h[site_nbr_right][i%N] for k in range(1)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012359567901234565}
#island_id: 0
#version_generated: 2
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001977623456790124}
#island_id: 0
#version_generated: 2
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        spin = -1
      else:
        spin = 1
      
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][j] = total_spin * spin

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_energy = h[site_nbr][i%N]
    else:
      site_energy = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + site_energy
    priorities[i][0] = total_energy
    priorities[i][1] = -total_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -5.5092592592592585e-05}
#island_id: 0
#version_generated: 2
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply symmetry
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if J[0,j,i] > 0:
        h_site = h[site_nbr][i]
      else:
        h_site = -h[site_nbr][i]

      if h[i][j] > 0:
        priorities[i*N+j][0] += h_site + sum([J[k,j,i]*h[(k+N-1)%N][i] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] -= h_site - sum([J[k,j,i]*h[(k+N-1)%N][i] for k in range(3)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': -0.0009655864197530864}
#island_id: 0
#version_generated: 2
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_nbr = 0
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        sum_h_nbr += h[(k+N-1)%N][i%N]
      else:
        sum_h_nbr -= h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -3.040123456790056e-05}
#island_id: 0
#version_generated: 2
#generate time16:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1 if h[(k+N-1)%N][i%N]>0 else 1) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1 if h[(k+N-1)%N][i%N]>0 else 1) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036983024691358032}
#island_id: 1
#version_generated: 2
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    site_interactions = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + site_interactions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - site_interactions
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0039609567901234604}
#island_id: 1
#version_generated: 2
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[:,i//N,:])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[:,i//N,:])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002464506172839496}
#island_id: 1
#version_generated: 2
#generate time16:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site interactions
  site_interactions = (J[1, :, :] + J[3, :, :]) * h.T
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.sum(site_interactions[i//N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.sum(site_interactions[i//N])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001333487654320988}
#island_id: 2
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    site_energy += 2*h_site * h[i//N][i%N]

    priorities[i][0] = site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009084722222222221}
#island_id: 2
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0,0])
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr][i%N]
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 2
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3032640432098759}
#island_id: 2
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    site_nbr_values = [J[0,site_nbrs[j]][i//N] if J[0,site_nbrs[j]][i//N] > 0 else -J[0,site_nbrs[j]][i//N] for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([h_site + value for h_site, value in zip(h[i//N], site_nbr_values)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([h_site + value for h_site, value in zip(h[i//N], site_nbr_values)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009106327160493827}
#island_id: 3
#version_generated: 3
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1) + k) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006699074074074074}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors = [(i-1)%N, (i+1)%N, ((i+N-1)%N)%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][j] for k,j in zip(range(3),neighbors)])
    else:
      neighbors = [(i-1)%N, (i+1)%N, ((i+N-1)%N)%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][j] for k,j in zip(range(3),neighbors)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00043472222222222154}
#island_id: 1
#version_generated: 2
#generate time16:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    for k in range(3):
      site_nbrs.append((i % N + ((k+N-1)%2 - 1)) % N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][i%N] for site_nbr in site_nbrs])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00101712962962963}
#island_id: 1
#version_generated: 2
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(1,0),(-1,0),(0,1),(0,-1)]:
      neighbor_site = (i // N + d[0], i % N + d[1])
      if 0 <= neighbor_site[0] < N and 0 <= neighbor_site[1] < N:
        h_neighbor = h[neighbor_site[0]][neighbor_site[1]]
        if J[0,neighbor_site[1],neighbor_site[0]] > 0:
          h_site += h_neighbor
        else:
          h_site -= h_neighbor

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0002859567901234563}
#island_id: 1
#version_generated: 2
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00048317901234567806}
#island_id: 1
#version_generated: 2
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i%N,(k-2)%N]*h[(k-2)//N][(k-2)%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i%N,(k-2)%N]*h[(k-2)//N][(k-2)%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    priorities[i][0] = (total_spin + h_site if J[0,i%N,i//N] > 0 else -total_spin - h_site)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3291356481481472}
#island_id: 1
#version_generated: 2
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k == 0 and i % N == 0) or (k == 1 and i // N == N-1) or (k == 2 and i % N == N-1) or (k == 3 and i // N == 0):
        continue
      else:
        if J[k,i%N,i//N] > 0:
          h_nbr = h[(i+N*k-N)%N][i%N]
        else:
          h_nbr = -h[(i+N*k-N)%N][i%N]

        if h[i//N][i%N] > 0:
          priorities[i][0] += h_site + h_nbr
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= h_site + h_nbr
          priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007152777777777782}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    for k in range(4):
      site_nbr2 = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_h += h[site_nbr2][i%N]
      else:
        total_h -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i//N,i%N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 5.3240740740740256e-05}
#island_id: 1
#version_generated: 2
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a trick to improve the algorithm
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # If the site is on an edge, add a penalty term to discourage flipping
    if i % N == 0 or i % N == N-1 or (i // N) % N == 0 or (i // N) % N == N-1:
      priorities[i][0] += -1
      priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 0.0013921296296296292}
#island_id: 1
#version_generated: 2
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    
    total_energy = h[i//N][i%N] * J[0,i%N,i//N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_energy + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_energy - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.1574074074073514e-05}
#island_id: 2
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001972993827160494}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N])*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 1
#version_generated: 2
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008325617283950617}
#island_id: 1
#version_generated: 2
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time16:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_term
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_term
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nb = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nb
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nb
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021439814814814824}
#island_id: 2
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(1 - h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1 + h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = (1 - h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006856481481481479}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbrs[j]][i%N] * J[j,i//N,i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = np.sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10340293209876543}
#island_id: 3
#version_generated: 3
#generate time16:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_mag = h[i//N][i%N]
    
    for k in range(4):
      if k == 0:
        site_nbr_k = (i % N + ((i//N-1)%2)) % N
      elif k == 1:
        site_nbr_k = (i % N + ((i//N+1)%2 - 1)) % N
      elif k == 2:
        site_nbr_k = (i // N + ((i%N-1)%2 - 1)) % N
      else:
        site_nbr_k = (i // N + ((i%N+1)%2 - 1)) % N
      
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= h_site - h[site_nbr_k][i%N]

    if site_mag > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site) + sum([J[k,i%N,i//N]*(2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site) - sum([J[k,i%N,i//N]*(-2*h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 0
#version_generated: 2
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time16:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17589490740740768}
#island_id: 0
#version_generated: 2
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (1 + np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)]))
    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011655864197530864}
#island_id: 0
#version_generated: 2
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [(i-1)%N, (i+1)%N, ((i+N-1)%N)]
    neighbor_h_sum = sum([J[k,i%N,i//N]*h[n][i%N] for k,n in zip([0,1,2],neighbors)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 0
#version_generated: 2
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011885956790123458}
#island_id: 3
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr_2][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h[site_nbr_2][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 9.058641975308646e-05}
#island_id: 3
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if (d == 0 and i % N != 0) or (d == 1 and i // N != 0) or (d == 2 and i % N == N-1) or (d == 3 and i // N == N-1):
        continue
      for offset in [(0,1), (-1,0), (0,-1)]:
        site = ((i//N + offset[0]) % N)*N + (i%N + offset[1])
        if J[0,site%N,site//N] > 0:
          h_site += J[d,i//N,i%N]*h[site//N][site%N]
        else:
          h_site -= J[d,i//N,i%N]*h[site//N][site%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001127932098765432}
#island_id: 3
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or abs((i//N)-(k+N-1)%N) == N:
        continue
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0034770061728395065}
#island_id: 3
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, (i+N-1)%N if k==0 else i//N, i%N]*h[(k+N-1)%N if k==2 else site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, (i+N-1)%N if k==0 else i//N, i%N]*h[(k+N-1)%N if k==2 else site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      site_h = h[site_nbr][i%N]
    else:
      site_h = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 or k == 1: 
        site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
      elif k == 2:
        site_nbr_k = (i//N + (i%N-1)%N) % N
      else:
        site_nbr_k = (i//N + (i%N+1)%N) % N

      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k, i%N, i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= J[k, i%N, i//N]
      else:
        priorities[i][0] -= J[k, i%N, i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += J[k, i%N, i//N]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0002245370370370374}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate the priority for each site based on its neighbors
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site_nbr = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site_nbr = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site_nbr
      priorities[i][1] -= h_site_nbr
    else:
      priorities[i][0] -= h_site_nbr
      priorities[i][1] += h_site_nbr

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004868827160493834}
#island_id: 3
#version_generated: 3
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      if k == i % N: continue
      site = (k + ((i//N-1)%2 - 1)) % N
      if h[k][i%N] > 0:
        total_spin[0] += J[0,i%N,k]
        total_spin[1] -= J[1,i%N,k]
      else:
        total_spin[0] -= J[0,i%N,k]
        total_spin[1] += J[1,i%N,k]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
        total_spin[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities.append([h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])])
    else:
      priorities.append([-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])])

  return(np.array(priorities))




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012677469135802468}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[j][(i+j)%N] for j in range(N)])
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[j][(i+j)%N] for j in range(N)])
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00022916666666666653}
#island_id: 3
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (i+N*k) % N*N
      if h[i//N][i%N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, -1]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009371450617283951}
#island_id: 3
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [h[site_nbr][i%N], 1]
    else:
      total_spin = [-h[site_nbr][i%N], -1]

    for j in range(2):
      for k in range(3):
        if J[k, i//N, i%N] > 0:
          total_spin[j] += J[k, i//N, i%N]*h[(k+N-1)%N][i%N]
        else:
          total_spin[j] -= J[k, i//N, i%N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return priorities




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = 0
    for k in range(3):
      sum_J += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001195833333333334}
#island_id: 2
#version_generated: 3
#generate time17:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(N):
      for offset in range(-1,2):
        k = (site_nbr + N*d + offset) % N
        if k != site_nbr:
          if J[offset,d,i//N] > 0:
            h_site += J[offset,d,i//N]*h[k][i%N]
          else:
            h_site -= J[offset,d,i//N]*h[k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007893518518518521}
#island_id: 3
#version_generated: 2
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010294753086419752}
#island_id: 3
#version_generated: 2
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0):
     priorities[i][0] = h_site1 + h_site2
     priorities[i][1] = -priorities[i][0]
    else:
     priorities[i][0] = -h_site1 - h_site2
     priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011523148148148152}
#island_id: 3
#version_generated: 2
#generate time17:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr=i%N
    if h[i//N][i%N] > 0:
      priorities[i][0]=sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.014647067901234568}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    if i % N > 0:
      site_nbrs.append(i-1)
    if i % N < N - 1:
      site_nbrs.append(i+1)
    if i // N > 0:
      site_nbrs.append(i-N)
    if i // N < N - 1:
      site_nbrs.append(i+N)
    
    for site_nbr in site_nbrs:
      h_site = J[0,site_nbr%N,i//N]*h[site_nbr//N][site_nbr%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
        priorities[i][1] -= h_site
      else:
        priorities[i][0] -= h_site
        priorities[i][1] += h_site
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 2
#version_generated: 3
#generate time17:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 3
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = np.sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neigh = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neigh
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neigh
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.23293348765432095}
#island_id: 1
#version_generated: 2
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if sum(h[j][i%N] for j in site_nbrs) > 0:
      h_site = np.sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -np.sum([h[j][i%N] for j in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001122993827160494}
#island_id: 1
#version_generated: 2
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = 0
    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr1][i%N]
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    else:
      h_site -= h[site_nbr1][i%N]
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001649537037037037}
#island_id: 1
#version_generated: 2
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19119058641975317}
#island_id: 1
#version_generated: 2
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(4), site_nbrs)])
    
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001058487654320988}
#island_id: 1
#version_generated: 2
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h[i//N][i%N] * h_site
    for j in range(3):
      total_energy += J[j,i//N,i%N] * h[(j+N-1)%N][i%N]
    priorities[i][0] = -total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020949074074074073}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (2 * J[1,i//N,i%N] * h[(i//N+1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (2 * J[1,i//N,i%N] * h[(i//N+1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006195987654320983}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[k][i%N] for k in range(N)]) * J[0,i%N,i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 3
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[site_nbr][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00024398148148148128}
#island_id: 1
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    priorities[i][0] = J[0,i%N,i//N]*spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*spin for k in range(1,4)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004245370370370366}
#island_id: 1
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    for d in [(0,1),(1,0),(-1,0),(0,-1)]:
      site_nbr2 = (i % N + ((i//N+d[0])%2 - d[1])) % N
      h_site += J[d[0],i%N,i//N]*h[site_nbr2][i%N]
    
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012674382716049383}
#island_id: 0
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    else:
      h_site = -J[0,i%N,i//N]*h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005137345679012344}
#island_id: 0
#version_generated: 2
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
      h_site_nbr = h[site_nbr2][i%N]
    else:
      h_site = -h[site_nbr1][i%N]
      h_site_nbr = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*h_site_nbr
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*h_site_nbr
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.24703719135802452}
#island_id: 3
#version_generated: 3
#generate time17:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0,0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        neighbor_site = (i + ((j-1)%N - N//2)) % N
        if k < 2:
          total_spin[0] += h[neighbor_site][j]
        else:
          total_spin[1] -= 1 if k == 3 and h[i][j] > 0 else 1
      priorities[i*N+j][0] = total_spin[0]
      priorities[i*N+j][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.0011532407407407405}
#island_id: 3
#version_generated: 3
#generate time17:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([0, 0])
    for k in range(3):
      if J[k, i%N, i//N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, 1]

    priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004553240740740742}
#island_id: 2
#version_generated: 3
#generate time17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum(h[i//N]), sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N] > 0 else -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0]
      priorities[i][1] = -total_spin[0]
    else:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 2
#version_generated: 3
#generate time17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0032010802469135805}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_site = sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(4)])
        priorities[i*N+j][0] = h[site_nbr][j] + priority_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priority_site = sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(4)])
        priorities[i*N+j][0] = -h[site_nbr][j] - priority_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.2191358024691456e-05}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002715895061728395}
#island_id: 2
#version_generated: 3
#generate time17:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (-1,0), (1,0)]:
      neighbor_i = (i//N + direction[0]) % N
      neighbor_j = (i%N + direction[1]) % N
      h_neighbor = h[neighbor_i][neighbor_j]
      if J[direction[0],i%N,i//N] > 0 and h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_neighbor
        priorities[i][1] -= (h_site + h_neighbor)
      elif J[direction[0],i%N,i//N] < 0 and h[i//N][i%N] < 0:
        priorities[i][0] += -h_site - h_neighbor
        priorities[i][1] -= (-h_site - h_neighbor)
      else:
        if J[direction[0],i%N,i//N] > 0:
          priorities[i][0] += (h_site + h_neighbor) / abs(J[direction[0],i%N,i//N])
          priorities[i][1] -= (h_site + h_neighbor) / abs(J[direction[0],i%N,i//N])
        else:
          priorities[i][0] += (-h_site - h_neighbor) / abs(J[direction[0],i%N,i//N])
          priorities[i][1] -= (-h_site - h_neighbor) / abs(J[direction[0],i%N,i//N])

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008884259259259262}
#island_id: 1
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    n_up = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3) if J[k,i%N,i//N]>0])
    n_down = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3) if J[k,i%N,i//N]<0])

    priorities[i][0] = h_site + 2*n_up
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.1143328703703705}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%2 - 1)) % N, (i + ((j+1)%2 - 1)) % N]
      h_site = sum([h[k][j] if k == i else 0 for k in site_nbrs]) + h[i][j]

      if J[0,i%N,i//N] > 0:
        priorities[i*N+j][0] = h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = -h_site
        priorities[i*N+j][1] = -priorities[i*N+j][0]

  return(priorities)




#score: {'data2D.txt': 0.0008149691358024689}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0011464506172839503}
#island_id: 0
#version_generated: 2
#generate time17:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-1+k)%2 - 1)) % N
      if J[k+1,i%N,i//N] > 0:
        h_site += J[k+1,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k+1,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009174382716049379}
#island_id: 0
#version_generated: 2
#generate time17:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(J[1:,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00448101851851852}
#island_id: 0
#version_generated: 2
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    nearest_neighbors = [(j, k) for j in site_nbrs for k in range(N) if (k == i%N or k == (i//N+N-1)%N or k == (site_nbrs.index(j)+1)%N)]

    for neighbor in nearest_neighbors:
      h_sum = 0
      for s in [h[neighbor[0]][neighbor[1]], h[site_nbr][i%N]]:
        if J[0,neighbor[1],neighbor[0]] > 0:
          h_sum += s
        else:
          h_sum -= s

      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004921296296296298}
#island_id: 0
#version_generated: 2
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    sites = [h[n][i%N] for n in site_nbrs]
    
    if h[i//N][i%N] > 0:
      priority_spin = sum([J[k,i%N,i//N]*sites[k] for k in range(3)])
      priorities[i][0] = h[i//N][i%N] + priority_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priority_spin = -sum([J[k,i%N,i//N]*sites[k] for k in range(3)])
      priorities[i][0] = -(h[i//N][i%N] + priority_spin)
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 0
#version_generated: 2
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 0
#version_generated: 2
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
  return(priorities)




#score: {'data2D.txt': 0.0008575617283950619}
#island_id: 3
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 0 and i % N != 0) or (k == 1 and i % N == 0) or (k == 2 and ((i//N)%2 - 1)):
        continue
      else:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001642129629629629}
#island_id: 1
#version_generated: 2
#generate time17:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum([J[k,i%N,(k+N-1)%N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum([J[k,i%N,(k+N-1)%N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001589660493827161}
#island_id: 0
#version_generated: 2
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    # Calculate Manhattan distance
    manhattan_dist = np.sum(np.abs(np.array([i//N, i%N]) - np.array([site_nbr//N, site_nbr%N])))
    # Adjust the priority based on the distance from the boundary
    if manhattan_dist < 3:
      priorities[i][0] += 2 * (1 - manhattan_dist/3)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= manhattan_dist/6
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011449074074074072}
#island_id: 0
#version_generated: 2
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N-1+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    site_nbr3 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    site_nbr4 = ((i+N-1)%N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
      h_site3 = h[site_nbr3][i%N]
      h_site4 = h[site_nbr4][i%N]

    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]
      h_site3 = -h[site_nbr3][i%N]
      h_site4 = -h[site_nbr4][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005619598765432103}
#island_id: 0
#version_generated: 2
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[3-i%N,i%N,i//N]*h[(3-i%N+N-1)%N][i%N] for i in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[3-i%N,i%N,i//N]*h[(3-i%N+N-1)%N][i%N] for i in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008628086419753096}
#island_id: 0
#version_generated: 2
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 2
#version_generated: 3
#generate time17:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001862808641975309}
#island_id: 2
#version_generated: 3
#generate time17:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr = (i % N + ((j-1)%2 - 1)) % N
        priorities[i][0] += J[1,j,i//N]*h[site_nbr][j]
        priorities[i][0] += J[2,(i+1)%N,j]*h[site_nbr][(i+1)%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N):
        site_nbr = (i % N + ((j-1)%2 - 1)) % N
        priorities[i][0] -= J[1,j,i//N]*h[site_nbr][j]
        priorities[i][0] -= J[2,(i+1)%N,j]*h[site_nbr][(i+1)%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time17:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time17:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 8.533950617283934e-05}
#island_id: 0
#version_generated: 2
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,(i+1)%N,(i//N+N-1)%N]*h[(k+2)%N,(i+1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,(i+1)%N,(i//N+N-1)%N]*h[(k+2)%N,(i+1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009763888888888889}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a small bias to the priorities
  priorities += np.random.normal(size=(N*N, 2), scale=0.01)

  return(priorities)




#score: {'data2D.txt': 0.1739729938271601}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0]
      priorities[i][1] = -total_spin[0]
    else:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.array([sum([J[k,j,i//N]*h[(k+N-1)%N][j] for k in range(3)]) for j in range(N)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + (i//N-1)%2) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -0.006076388888888888}
#island_id: 1
#version_generated: 2
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002552932098765432}
#island_id: 1
#version_generated: 2
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002415586419753087}
#island_id: 1
#version_generated: 2
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    priorities[i][0] = site_h
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_nn
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.009757253086419752}
#island_id: 1
#version_generated: 2
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0 and (i % N == 0 or i % N == N-1) or k == 2 and (i//N == 0 or i//N == N-1):
        continue
      elif k == 1 and (i % N == 0 or i % N == N-1) or k == 3 and (i//N == 0 or i//N == N-1):
        if J[k,i%N,i//N] > 0:
          h_site += sum([J[l,(i+N)%N,i//N]*h[(l+2)%4][((i+N)%N)//N]%N for l in range(3)])
        else:
          h_site -= sum([J[l,(i+N)%N,i//N]*h[(l+2)%4][((i+N)%N)//N]%N for l in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003177469135802473}
#island_id: 1
#version_generated: 2
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N] * h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 2
#version_generated: 3
#generate time17:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.16614274691358047}
#island_id: 1
#version_generated: 2
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.where(h[(k+N-1)%N][i%N]>0, 1, -1) for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -(h_site + total_spin)
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -(h_site + total_spin)

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(3):
      sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    priorities[i][0] = h_site + sum_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004875}
#island_id: 0
#version_generated: 2
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k],i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0018618827160493834}
#island_id: 0
#version_generated: 2
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + J[0,i%N,i//N]*h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr2][i%N] - J[2,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 0
#version_generated: 2
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004820524691358025}
#island_id: 2
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1,j),(i-1,j),(i,j-1),(i,j+1)]
      total_spin = [0,0]
      for site_nrb in site_nbrs:
        if 0 <= site_nrb[0] < N and 0 <= site_nrb[1] < N:
          total_spin[0] += h[site_nrb[0]][site_nrb[1]]
          if J[0,site_nrb[0],site_nrb[1]] > 0:
            total_spin[1] -= 1
          else:
            total_spin[1] += 1
      if sum(h[i][j] for i in range(N) for j in range(N)) > 0:
        priorities[i*N+j][0] = -sum([J[k,i,j]*total_spin[0] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        priorities[i*N+j][0] = sum([J[k,i,j]*total_spin[0] for k in range(4)])
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  return(priorities)




#score: {'data2D.txt': 0.0006702160493827161}
#island_id: 2
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,(k+i//N)%N]*h[(k+i//N)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03192762345679012}
#island_id: 2
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site = (k+N-1)%N
      if J[k,i%N,i//N] > 0 and h[i//N][i%N] > 0 or J[k,i%N,i//N] < 0 and h[i//N][i%N] < 0:
        h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
      elif J[k,i%N,i//N] > 0 and h[i//N][i%N] < 0 or J[k,i%N,i//N] < 0 and h[i//N][i%N] > 0:
        h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012387345679012345}
#island_id: 3
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    nn_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + nn_h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 3
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total_h > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 1
#version_generated: 2
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priority_value = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_value = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h[site_nbr][i%N] + priority_value
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if magnetism > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023804012345679014}
#island_id: 1
#version_generated: 2
#generate time18:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    if i % N < N - 1:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])

  return(priorities)




#score: {'data2D.txt': -0.20652175925925945}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 3
#version_generated: 3
#generate time18:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31494953703703654}
#island_id: 3
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = 2*h[i//N][i%N]
    for k in range(3):
      site = (k+N-1)%N
      if i // N == site or i % N == site:
        magnetism += J[k,i%N,i//N]*h[site][i%N]

    priorities[i][0] = h_site + magnetism
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.exp(-sum([J[k,i%N,i//N]**2 for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.exp(-sum([J[k,i%N,i//N]**2 for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time18:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + priority
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0002865740740740739}
#island_id: 3
#version_generated: 3
#generate time18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (i % N == k % N and i // N != k // N) or ((i//N-1)%2==(k//N-1)%2 and abs(i-N//2-abs(k-N//2)) <= 1):
          priorities[i][0] += J[3,k//N,i%N]*h[k//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (i % N == k % N and i // N != k // N) or ((i//N-1)%2==(k//N-1)%2 and abs(i-N//2-abs(k-N//2)) <= 1):
          priorities[i][0] += J[3,k//N,i%N]*h[k//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 3
#version_generated: 3
#generate time18:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283954}
#island_id: 3
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_h = h[i//N][i%N]
    for k in range(3):
      site_nbr_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if spin_h > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3408350308641965}
#island_id: 3
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k==2: 
        site_nbr_k = (site_nbr + N) % N
      elif k==3: 
        site_nbr_k = ((site_nbr+N//2)%N+((site_nbr-1)%2 - 1)) % N
      else:
        site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005052314814814815}
#island_id: 0
#version_generated: 2
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for j in range(3):
      site = (i + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += h[site][i%N]
      else:
        h_site -= h[site][i%N]

      if h[i//N][i%N] > 0:
        total_spin[0] += h_site + J[j,i%N,i//N]*h[site][i%N]
        total_spin[1] -= 2*h_site
      else:
        total_spin[0] -= 2*h_site - J[j,i%N,i//N]*h[site][i%N]
        total_spin[1] += h_site

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0014239197530864203}
#island_id: 0
#version_generated: 2
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_h = h[i//N][i%N]
    for k in range(3):
      if i % N == 0: 
        site_nbr_k = (k+N-1)%N
      elif i % N == N-1:
        site_nbr_k = (k+2)%N
      else:
        site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,k,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if site_h > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001534413580246914}
#island_id: 0
#version_generated: 2
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1), (0,-1), (1,0), (-1,0)]:
      if i//N+direction[0] >= 0 and i//N+direction[0] < N and i%N+direction[1] >= 0 and i%N+direction[1] < N:
        site_nbr_direction = (i % N + direction[1], i//N + direction[0])
        if J[0,site_nbr_direction[1],site_nbr_direction[0]] > 0:
          h_site += h[site_nbr][i%N]
        else:
          h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    
    h_total = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + h_total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004318364197530866}
#island_id: 0
#version_generated: 2
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0002445987654320991}
#island_id: 0
#version_generated: 2
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in [(i//N-1)%N, (i//N+1)%N, (i % N - 1) % N, (i % N + 1) % N]:
      if J[0,j,i//N] > 0:
        h_site += sum([J[k,i%N,j]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        h_site -= sum([J[k,i%N,j]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008513888888888885}
#island_id: 0
#version_generated: 2
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i < N_half:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      site_nbr_opp = (i % N + ((i//N+1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site_opp = h[site_nbr_opp][i%N]
      else:
        h_site_opp = -h[site_nbr_opp][i%N]

      priorities[i][0] = h_site + h_site_opp
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006896604938271616}
#island_id: 3
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = 0
    for k in range(4):
      site_nbr_k = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_energy += h[site_nbr_k][i%N]
      else:
        total_energy -= h[site_nbr_k][i%N]

    priorities[i][0] = total_energy + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001441512345679011}
#island_id: 3
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0: 
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      elif j == 1: 
        site_nbr2 = (i % N + ((i//N-1)%2 + 1)) % N
      elif j == 2: 
        site_nbr2 = ((i+N-1)%N)
      else: 
        site_nbr2 = ((i+N-1)%N + ((i%N-1)%2 - 1)) % N

      if J[j,i//N,i%N] > 0:
        h_site += J[j,i//N,i%N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i//N,i%N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002259104938271605}
#island_id: 1
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N, (i//N + 1)%N, (i//N+N-1)%N]]
    h_sites = [h[s][i%N] if J[0,i%N,s//N]>0 else -h[s][i%N] for s in site_nbrs]
    total_h_site = sum(h_sites)
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,s//N]*h[s][i%N] for k,s in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,s//N]*h[s][i%N] for k,s in zip(range(3), site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.27918070987654275}
#island_id: 1
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    priorities[i][0] = total_spin[i][0] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007918209876543201}
#island_id: 0
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28835817901234545}
#island_id: 0
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
    priorities[i][0] = 2*h[i//N][i%N] + h_site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time18:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003260802469135808}
#island_id: 0
#version_generated: 2
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sites = [h[s][i%N] if J[0,s,i//N] > 0 else -h[s][i%N] for s in site_nbrs]
    sum_h_sites = np.sum(h_sites)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum_h_sites
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum_h_sites
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.006756635802469136}
#island_id: 0
#version_generated: 2
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[j][i%N]*J[k,i//N,j] for k, j in enumerate(site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 0
#version_generated: 2
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_contributions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_contributions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_contributions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 3
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009307098765432098}
#island_id: 3
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      total_spin += J[k, i % N, i // N] * h[(k + (i // N) % 2 - 1) % N, (i + k - 2) % N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.09808811728395068}
#island_id: 3
#version_generated: 3
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = (h[i//N][i%N] + h_site) / 2 + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0008649691358024685}
#island_id: 2
#version_generated: 2
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009893518518518509}
#island_id: 2
#version_generated: 2
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 2
#version_generated: 2
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0, 0]
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h_site + h[site_nbr][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site - h[site_nbr][i%N]
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.05055540123456789}
#island_id: 0
#version_generated: 2
#generate time18:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += h[site][i%N]
      else:
        h_site -= h[site][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007273148148148148}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.608024691357984e-05}
#island_id: 3
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_left = (i-N-1) % (N*N)
    site_right = (i+1) % (N*N)
    site_up = (i//N*N + i%N-1) % (N*N)
    site_down = ((i+N)//N*N + i%N) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010915123456790123}
#island_id: 0
#version_generated: 2
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_product_sum = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = -spin_product_sum
      priorities[i][1] = -priorities[i][0]
    else:
      spin_product_sum = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][0] = spin_product_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005791666666666662}
#island_id: 0
#version_generated: 2
#generate time18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.26533719135802436}
#island_id: 3
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_h_site
      priorities[i][1] = 1 + total_h_site
    else:
      priorities[i][0] = 1 - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00044675925925925943}
#island_id: 3
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]
        total_spin[i*N+j][1] += 1
  
  priorities = [[total_spin[i*N+j][0], -total_spin[i*N+j][0]] for i in range(N) for j in range(N)]
  
  return(priorities)




#score: {'data2D.txt': 0.0007516975308641975}
#island_id: 3
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * sum([h[k][i%N] if k == site_nbr else h[k][i%N]*J[3*i%4,k,i//N] for k in range(N)])
    priorities[i][0] = h_site if h[i//N][i%N] > 0 else -h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.exp(sum([J[k,i%N,i//N]*h[site_nbr][max((k+N-1)%N, 0)] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.exp(sum([J[k,i%N,i//N]*h[site_nbr][max((k+N-1)%N, 0)] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum([J[k][site_nbr][j]*h[k][j] for k in range(3)])
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= sum([J[k][site_nbr][j]*h[k][j] for k in range(3)])
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.008736574074074074}
#island_id: 2
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += sum([J[0,i,j]*h[k][j] for k in range(4)])
        priorities[i*N+j][1] -= sum([J[0,i,j]*h[k][j] for k in range(4)])
      else:
        priorities[i*N+j][0] -= sum([J[0,i,j]*h[k][j] for k in range(4)])
        priorities[i*N+j][1] += sum([J[0,i,j]*h[k][j] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': -0.001843364197530864}
#island_id: 2
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h[i//N][i%N] + J[1,i%N,i//N]*h[(i+N-1)%N][i%N]) - h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-2*h[i//N][i%N] - J[1,i%N,i//N]*h[(i+N-1)%N][i%N]) + h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0037044753086419744}
#island_id: 2
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N,i%N] > 0 and J[2,i//N,i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i//N,i%N] < 0 and J[2,i//N,i%N] < 0:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i//N,i%N] < 0 and J[2,i//N,i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i//N,i%N] > 0 and J[2,i//N,i%N] < 0:
        priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.13809182098765435}
#island_id: 2
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N]
    for j in range(3):
      if J[j, i%N, i//N] > 0:
        site_energy += h[(j+N-1)%N][i%N]
      else:
        site_energy -= h[(j+N-1)%N][i%N]

    priorities[i][0] = site_energy + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002240895061728396}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      J_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1482152777777778}
#island_id: 2
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(4):
      if (k == 1 and i % N == 0) or (k == 3 and i % N == N-1):
        continue
      total += J[k,i%N,i//N]*h[(k+N-2)%4][i%N]
    priorities[i][0] = h_site + total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00032299382716049384}
#island_id: 0
#version_generated: 2
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities
  sorted_priorities = priorities.argsort(axis=1)

  return(sorted_priorities)




#score: {'data2D.txt': 0.0003313271604938273}
#island_id: 0
#version_generated: 2
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[2,i//N,site_nbr2]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[2,i//N,site_nbr2]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003162037037037035}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_magnetism = h[i//N][i%N] * (J[1,i//N,i//N]*h[(i+N-1)%N][i%N] + J[2,i//N,i//N]*h[(i+1)%N][i%N])

    priorities[i][0] = h_site - spin_magnetism
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.2191358024691456e-05}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1)
      site_magnetism = h[i//N][i%N]
      priorities[i][0] += site_magnetism
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(h, axis=1)
      site_magnetism = h[i//N][i%N]
      priorities[i][0] -= site_magnetism

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0015658950617283957}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = 0
    for k in range(4):
      site_nbr_neighbor = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        total += h[site_nbr_neighbor][i%N]
      else:
        total -= h[site_nbr_neighbor][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009156018518518518}
#island_id: 1
#version_generated: 2
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      neighbors = [(k, i%N) for k in range(3) if abs((k-i)//N) == 1 or (k+i)//N % N == ((i+N-1)%N)//N]
      total_spin = sum([J[k,i//N,k//N]*h[site_nbr][i%N] for k, _ in neighbors])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      neighbors = [(k, i%N) for k in range(3) if abs((k-i)//N) == 1 or (k+i)//N % N == ((i+N-1)%N)//N]
      total_spin = sum([J[k,i//N,k//N]*h[site_nbr][i%N] for k, _ in neighbors])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin = np.sign(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004421296296296297}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      spin = 1 if j == 0 else -1
      interaction = sum([J[k,i%N,i//N]*spin*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][j] = h_site + interaction

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return np.array([total_spin[:,0], total_spin[:,1]]).T




#score: {'data2D.txt': -0.0024797839506172843}
#island_id: 0
#version_generated: 2
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities based on the sum of the two values
  sorted_priorities = np.sort(priorities, axis=1)
  
  # Assign the spin assignments as the one with higher priority
  for i in range(N**2):
    if sorted_priorities[i][0] > 0:
      priorities[i][1] -= 1
    else:
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0011733024691358029}
#island_id: 0
#version_generated: 2
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[j][i%N] for j in site_nbrs])
    else:
      h_site = -sum([h[j][i%N] for j in site_nbrs])

    J_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004893518518518504}
#island_id: 3
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][i%N] for k in range(max(0, i//N-N+1), min(i//N+1, N))]) + sum([J[3*i%4, (k-1)%N, i//N]*h[(k-1)//N][(k-1)%N] if 0 <= (k-1)%N <= N and k//N < N else 0 for k in range(1, max(i//N+2, N)+1)])
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][i%N] for k in range(max(0, i//N-N+1), min(i//N+1, N))]) + sum([J[3*i%4, (k-1)%N, i//N]*h[(k-1)//N][(k-1)%N] if 0 <= (k-1)%N <= N and k//N < N else 0 for k in range(1, max(i//N+2, N)+1)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0, i % N, i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i % N, i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return (priorities)




#score: {'data2D.txt': 0.0015353395061728393}
#island_id: 0
#version_generated: 2
#generate time18:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_nb = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_nb][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_nb][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016060185185185186}
#island_id: 1
#version_generated: 2
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbrs[j]][i%N] * (J[(j+1)%4,i//N,i%N] if J[(j+1)%4,i//N,i%N] > 0 else -J[(j+1)%4,i//N,i%N]) for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007893518518518516}
#island_id: 1
#version_generated: 2
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 3
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00035354938271604954}
#island_id: 3
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (abs(i-k) == 1 or abs((i//N)-k//N) == 1):
          priorities[i][0] += J[abs((i//N)-k//N),i%N,k%N]*h[k//N][k%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for k in range(N**2):
        if (abs(i-k) == 1 or abs((i//N)-k//N) == 1):
          priorities[i][0] -= J[abs((i//N)-k//N),i%N,k%N]*h[k//N][k%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0058125}
#island_id: 3
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N) % N
      if J[k,i%N,i//N] > 0:
        h_sum = h[site_k][i//N]
      else:
        h_sum = -h[site_k][i//N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_sum
        priorities[i][1] -= 2 * (priorities[i][0])
      else:
        priorities[i][0] -= h_site - h_sum
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time18:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00016095679012345676}
#island_id: 2
#version_generated: 3
#generate time18:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      k = (j + i // N) % N
      if J[j, i % N, k] > 0:
        h_site += h[k][i % N]
      else:
        h_site -= h[k][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      total_spin += h[i//N][j] * J[0,i%N,j]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00019027777777777798}
#island_id: 2
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if k == 0: 
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
      elif k == 2:
        site_nbr2 = (i % N) and ((i//N-1)%N)
      else:
        site_nbr2 = (i % N) or ((i//N+1)%N)

      if J[k, i%N, i//N] > 0:
        h_site += sum([J[3,site_nbr2,i//N]*h[site_nbr][site_nbr2] for site_nbr2 in range(N)])
      else:
        h_site -= sum([J[3,site_nbr2,i//N]*h[site_nbr][site_nbr2] for site_nbr2 in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 3
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + (i//N - 1)) % N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + site_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + site_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004479783950617284}
#island_id: 1
#version_generated: 2
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i//N,i%N])*h_site
      priorities[i][1] = -(1 + J[2,i//N,i%N])*h_site
    else:
      priorities[i][0] = -(1 - J[1,i//N,i%N])*h_site
      priorities[i][1] = (1 - J[2,i//N,i%N])*h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009152623456790092}
#island_id: 3
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(h)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(h)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005831790123456786}
#island_id: 3
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.cos(2*np.pi*i/N)) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.cos(2*np.pi*i/N)) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 3
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * N
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00015138888888888846}
#island_id: 3
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0020547839506172847}
#island_id: 3
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      site = (i + N*d[0] + d[1]) % N
      if i//N == site//N and abs(d[0]) + abs(d[1]) != 2:
        h_site += J[abs(d[0]), i%N, site%N]*h[site//N][site%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.05998379629629632}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_h = [h[(k+N-1)%N][i%N] for k in range(3)]
      neighbors_J = [J[k,i%N,i//N] for k in range(3)]
      h_site = sum([n * j for n, j in zip(neighbors_h, neighbors_J)])
    else:
      neighbors_h = [-h[(k+N-1)%N][i%N] for k in range(3)]
      neighbors_J = [J[k,i%N,i//N] for k in range(3)]
      h_site = -sum([n * j for n, j in zip(neighbors_h, neighbors_J)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -(h[i//N][i%N] + h_site)
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -(h[i//N][i%N] - h_site)

  return(priorities)




#score: {'data2D.txt': -0.000794907407407407}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[0,k,i//N]*h[k%N][i%N] for k in range(N)])
    else:
      h_site = -sum([J[0,k,i//N]*h[k%N][i%N] for k in range(N)])

    if J[1,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[2,k,i//N]*h[(k-1)%N][i%N] for k in range(1,N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[2,k,i//N]*h[(k-1)%N][i%N] for k in range(1,N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006936728395061721}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] * (J[1,i//N,i//N] + J[2,i//N,i//N]) + J[3,i//N,i//N] * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    if h[i//N][i%N] > 0:
      total_spin[0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + 2*h[site_nbr][i%N]
    else:
      total_spin[0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2*h[site_nbr][i%N]
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 0
#version_generated: 2
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.009457561728395066}
#island_id: 0
#version_generated: 2
#generate time18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    # calculate energy difference
    d_energy_up = 2*h[i//N][i%N] - 4*h[site_nbr][i%N]
    d_energy_down = -d_energy_up

    priorities[i][0] = total_energy + d_energy_up if h[i//N][i%N] > 0 else total_energy + d_energy_down
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time18:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 0
#version_generated: 2
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    if h[i//N][i%N] > 0:
      total_spin[0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] -= total_spin[0]
    else:
      total_spin[0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin[1] += total_spin[0]

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 0
#version_generated: 2
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    h_site = sum([h[site_nbr][i%N] for site_nbr in [site_nbr1, site_nbr2]])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018013888888888884}
#island_id: 0
#version_generated: 2
#generate time18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006195987654320983}
#island_id: 1
#version_generated: 2
#generate time18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    h_site = sum([J[0,i%N,i//N]*h[j][i%N] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
#generate time18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010473765432098773}
#island_id: 0
#version_generated: 2
#generate time19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.1574074074073514e-05}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for _ in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.0002387345679012345}
#island_id: 1
#version_generated: 2
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]
    priorities[i][0] = total_spin + sum([J[0,i%N,i//N]*h_site for h_site in [h[site_nbr][i%N], -h[site_nbr][i%N]]])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1-h_site) * sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + (i//N+1)%N) if i < N*N else i%N
    site_nbr3 = (i % N + (i//N+N-1)%N) if i >= N else i%N
    site_nbr4 = ((i // N - 1) % N + (i % N + N - 1) % N) % N if i < N*N else i%N
    
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 2
#version_generated: 3
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006662037037037039}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_magnetism = h[i//N][i%N]
    site_energy = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if spin_magnetism > 0:
      priorities[i][0] = -site_energy
      priorities[i][1] = site_energy
    else:
      priorities[i][0] = site_energy
      priorities[i][1] = -site_energy

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if j == 0:
        total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][j] = h_site + total_spin
      else:
        priorities[i][j] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total > 0:
      priorities[i][0] = total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007683487654320987}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k==0 and i % N == 0) or (k==1 and i % N == N-1) or (k==2 and i//N==0):
        J_val = 0
      else:
        J_val = J[k,i%N,i//N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + sum([J_val*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J_val*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00011496913580246892}
#island_id: 2
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[2,site_nbr,i//N]*h[site_nbr][i%N]])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[2,site_nbr,i//N]*h[site_nbr][i%N]])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019646604938271628}
#island_id: 2
#version_generated: 3
#generate time19:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(N):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      total_spin += np.array([J[k, i%N, j]*h[(k+N-1)%N][j] for k in range(4)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0038498456790123444}
#island_id: 1
#version_generated: 2
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [(x,y) for x in range(max(0,i//N-1),min(N,i//N+2)) for y in range(max(0,i%N-1),min(N,i%N+2)) if (x,y)!=(i//N,i%N)]
    nn_sum = sum([J[0,x,y]*h[x][y] for x,y in nns])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.011885956790123458}
#island_id: 2
#version_generated: 3
#generate time19:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr2][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - h[site_nbr2][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time19:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = total_spin - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0021538580246913577}
#island_id: 2
#version_generated: 3
#generate time19:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if i % N < 2 or i % N > N - 3:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      if J[0,i//N,i%N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3182884259259251}
#island_id: 1
#version_generated: 2
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      if (d == 0 and i % N != 0) or (d == 1 and i // N != 0) or (d == 2 and i % N == N-1) or (d == 3 and i // N == N-1):
        continue
      if J[d,i%N,i//N] > 0:
        h_nbr = h[(i+N*d-N)%N][i%N]
      else:
        h_nbr = -h[(i+N*d-N)%N][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site + h_nbr
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site + h_nbr
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0005606481481481456}
#island_id: 1
#version_generated: 2
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if J[k,i//N,i%N]*h[(k+N-1)%N][i%N] > 0:
        if h[i//N][i%N] > 0:
          priorities[i][0] += J[k,i//N,i%N]
          priorities[i][1] -= J[k,i//N,i%N]
        else:
          priorities[i][0] -= J[k,i//N,i%N]
          priorities[i][1] += J[k,i//N,i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 2*h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 2*h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])

  return(priorities)




#score: {'data2D.txt': 0.0007023148148148149}
#island_id: 1
#version_generated: 2
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0,1),(1,0),(1,-1),(-1,1)]:
      if i % N + direction[0] >= 0 and i // N + direction[1] < N:
        site_nbr2 = (i + direction[0] + ((i//N+direction[1]-1)%2 - 1)) % N
        h_site += J[direction[0],i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + spin_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      priority_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = priority_site
    priorities[i][1] = -priority_site

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(3):
      site_nbr = (i % N + ((i//N+k)%N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr][i%N]
      else:
        h_site -= h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[1]
      priorities[i][1] = total_spin[0]
    else:
      priorities[i][0] = total_spin[1]
      priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.15232021604938292}
#island_id: 1
#version_generated: 2
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = 1
    else:
      total_spin = -1

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += 2 * h[(j+site_nbr)%N][i%N]
      else:
        total_spin -= 2 * h[(j+site_nbr)%N][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19119058641975317}
#island_id: 1
#version_generated: 2
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_site = sum([h[site_nbr][i%N] if J[k,i//N,i%N]>0 else -h[site_nbr][i%N] for site_nbr,k in zip(site_nbrs,range(4))])
    
    priorities[i][0] = h[i//N][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00189429012345679}
#island_id: 1
#version_generated: 2
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_h = sum([h[site_nbrs[j]][i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*total_h for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*total_h for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001891820987654321}
#island_id: 1
#version_generated: 2
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    for j in range(N**2):
      if i != j and abs(i-j) <= 1:
        site_nbrs.append((j % N + ((j//N-1)%2 - 1)) % N)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.048989351851851895}
#island_id: 1
#version_generated: 2
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N,
           (i // N + ((i%N-1)%2 - 1)) % N,
           (i // N + ((i%N+1)%2 - 1)) % N]
    h_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_sum + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -5.97222222222229e-05}
#island_id: 1
#version_generated: 2
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-total_spin[k]%2) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-total_spin[k]%2) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002393055555555556}
#island_id: 1
#version_generated: 2
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - 2 * J[j,i//N,i%N]
  return(priorities)




#score: {'data2D.txt': 0.0016381172839506181}
#island_id: 1
#version_generated: 2
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  # Calculate site interactions
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      # Calculate priority for +1 spin and -1 spin
      priorities[i*N+j,0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i*N+j,1] = -priorities[i*N+j,0]
  
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005020061728395067}
#island_id: 1
#version_generated: 2
#generate time19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == 0 and k == 0: 
        h_nbr = J[k,i//N,i%N]*h[i//N+1,k%2]
      elif i//N == N-1 and k == 0:
        h_nbr = J[k,i//N,i%N]*h[0,k%2]
      elif i%N == 0: 
        h_nbr = J[k,0,i//N]*h[(i//N+N-1)%N,k%2]
      elif i%N == N-1:
        h_nbr = J[k,N-1,i//N]*h[(i//N+N-1)%N,k%2]
      else: 
        if k == 0 and (i//N+1)%N == i//N: h_nbr = J[1,i//N,i//N]*h[i//N,(i%N+1)%N]
        elif k == 0 and (i//N+1)%N != i//N: h_nbr = J[2,i//N,i//N]*h[(i//N+N-1)%N,(i%N+1)%N]
        else: 
          if k%2 == 0:
            h_nbr = J[k,i//N,i//N]*h[i//N,k%2]
          else: 
            h_nbr = J[3-k,N-i%N-1,i//N]*h[(i//N+N-1)%N,(k+1)%2]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h_nbr for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h_nbr for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004970679012345676}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N + (i%N+1)%N - N) % N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002631172839506175}
#island_id: 1
#version_generated: 2
#generate time19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, 
           (i % N + ((i//N+1)%N - 1)) % N,
           (i // N + ((i%N-1)%N - 1)) % N, 
           (i // N + ((i%N+1)%N - 1)) % N]
    site_nbrs = [j for j in set(site_nbrs) if j != i//N and j != i%N]
    
    h_site_sum = sum([h[j][i%N] for j in site_nbrs])
    J_site_sum = sum([J[k,i%N,j] for k, j in zip(range(4),site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site_sum + J_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site_sum - J_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003159722222222222}
#island_id: 1
#version_generated: 2
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0,i%N,i//N]*h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -1.1574074074073514e-05}
#island_id: 1
#version_generated: 2
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N+N/2)%N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09607330246913587}
#island_id: 1
#version_generated: 2
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_sum = 0
    for k in range(3):
      site_k = (i//N + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        priority_sum += h[site_k][i%N]
      else:
        priority_sum -= h[site_k][i%N]

    priorities[i][0] = h_site + priority_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.030727006172839508}
#island_id: 1
#version_generated: 2
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N] * h[site_nbr1][i%N] + J[1,i%N,i//N] * h[site_nbr2][i%N]
    else:
      priorities[i][0] = -J[0,i%N,i//N] * h[site_nbr1][i%N] - J[1,i%N,i//N] * h[site_nbr2][i%N]

    if J[2,i//N,i%N] > 0:
      priorities[i][0] += J[2,i//N,i%N] * h[i//N][site_nbr1]
    else:
      priorities[i][0] -= J[2,i//N,i//N] * h[i//N][site_nbr1]

    if J[3,i//N,i%N] > 0:
      priorities[i][0] += J[3,i//N,i//N] * h[i//N][site_nbr2]
    else:
      priorities[i][0] -= J[3,i//N,i//N] * h[i//N][site_nbr2]

    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17357175925925952}
#island_id: 1
#version_generated: 2
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = abs(total_h) + sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -abs(total_h) - sum([J[k,i%N,i//N]*(h[(k+N-1)%N][i%N]-h[i//N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018023148148148148}
#island_id: 1
#version_generated: 2
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**(k+1)*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003859567901234575}
#island_id: 1
#version_generated: 2
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(8):
      k = (i + ((j-1)%N - N//2)) % N
      if J[j//2,i%N,k] > 0:
        priorities[i][0] += h[k][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h[k][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.0025782407407407408}
#island_id: 1
#version_generated: 2
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)]) > 0:
      h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    else:
      h_site = -sum([h[site_nbr][i%N] for site_nbr in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.21293657407407407}
#island_id: 3
#version_generated: 2
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[1,i//N,i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009642129629629629}
#island_id: 3
#version_generated: 2
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      site_nbr_d = (i % N + ((i//N+d-1)%2 - 1)) % N
      if J[d,i%N,i//N] > 0:
        h_site += J[d,i%N,i//N]*h[site_nbr_d][i%N]
      else:
        h_site -= J[d,i%N,i//N]*h[site_nbr_d][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0016236111111111106}
#island_id: 3
#version_generated: 3
#generate time19:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if abs(i-j) == 1 or (abs(i//N - j//N) == 1 and i//N + j//N != N): # check if the site is a neighbor
          priorities[i][0] += J[1, i%N, i//N]*h[j//N][i%N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      for j in range(N**2):
        if abs(i-j) == 1 or (abs(i//N - j//N) == 1 and i//N + j//N != N): # check if the site is a neighbor
          priorities[i][0] += J[1, i%N, i//N]*h[j//N][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time19:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if total > 0:
      priorities[i][0] = total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012155864197530863}
#island_id: 1
#version_generated: 2
#generate time19:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(J[:, i//N, i%N], axis=0)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.08362978395061733}
#island_id: 3
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        h_site += h[site_nbr][j]
      else:
        h_site -= h[site_nbr][j]
      total_spin += np.array([h_site, h[i//N][i%N]])

    priorities[i][0] = -np.sum(total_spin)
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003720679012345671}
#island_id: 2
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) / len(site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038751543209876544}
#island_id: 2
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    priorities[i][0] = total_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 2
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = spin_energy
      priorities[i][1] = -spin_energy
    else:
      spin_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = -spin_energy
      priorities[i][1] = spin_energy
  
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_spin += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if total_spin > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0020266975308641973}
#island_id: 0
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0,1),(1,0)]:
      site_nbr2 = (site_nbr + d[0]) % N
      if J[0,site_nbr,d[1]] > 0:
        h_site += J[0,site_nbr,d[1]]*h[site_nbr2][i%N]
      else:
        h_site -= J[0,site_nbr,d[1]]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0002625000000000005}
#island_id: 0
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + (sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) if h[site_nbr][i%N]>0 else - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - (sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]) if h[site_nbr][i%N]>0 else - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008791666666666669}
#island_id: 1
#version_generated: 2
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if J[1,i%N,i//N] > 0:
      h_site += J[2,i%N,i//N]*h[site_nbr2][i%N]
    else:
      h_site -= J[2,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016983024691358025}
#island_id: 1
#version_generated: 2
#generate time19:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (0,-1), (-1,0), (1,0)]:
      if i % N + dir[0] >= 0 and i % N + dir[0] < N and i//N + dir[1] >= 0 and i//N + dir[1] < N:
        site_nbr_dir = (i % N + dir[0], i//N + dir[1])
        if J[0,site_nbr_dir[0],site_nbr_dir[1]] > 0:
          h_site += h[i//N][i%N]
        else:
          h_site -= h[i//N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007260802469135795}
#island_id: 1
#version_generated: 2
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.13973564814814834}
#island_id: 1
#version_generated: 2
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(4)])
        total_spin[i*N+j][1] -= 2*total_spin[i*N+j][0]
      else:
        total_spin[i*N+j][0] -= sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(4)])
        total_spin[i*N+j][1] += 2*total_spin[i*N+j][0]
  
  return(total_spin)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 1
#version_generated: 2
#generate time19:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011949074074074084}
#island_id: 3
#version_generated: 3
#generate time19:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,site_nbr]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time19:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018445987654320984}
#island_id: 3
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add a small random perturbation to avoid getting stuck in local minima
  np.random.seed(0)
  noise = np.random.normal(0, 0.01, (N*N, 2))
  return priorities + noise




#score: {'data2D.txt': 0.0008603395061728387}
#island_id: 3
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[k][i%N] * J[(k+1)%4,i//N,N*i%N+i%N] if k == i%N else 0 for k in range(N)])
    
    priorities[i][0] = h_site + sum([J[(k+1)%4,i//N,N*i%N+i%N]*h[(k+N-1)%N][i%N] for k in range(N) if k != i%N])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.00021682098765432145}
#island_id: 3
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if i%N == 0 and k != 3:
        priorities[i][0] += h_site
      elif i%N == N-1 and k != 2:
        priorities[i][0] -= h_site

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 0
#version_generated: 2
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_spin = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = h_site + sum(neighbors_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_spin = [-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
      priorities[i][0] = -h_site - sum(neighbors_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019165123456790117}
#island_id: 0
#version_generated: 2
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = h[i//N][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*neighbor_h for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002218364197530864}
#island_id: 0
#version_generated: 2
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        jnbr = ((i // N) + (k % 2 - 1)) % N
        if i % N == 0 and k == 2:
          continue
        priorities[i][0] += J[k, i%N, i//N] * h[jnbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N]) * h_site
      for k in range(3):
        jnbr = ((i // N) + (k % 2 - 1)) % N
        if i % N == 0 and k == 2:
          continue
        priorities[i][0] += J[k, i%N, i//N] * h[jnbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if (h[i//N][i%N] > 0):
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010751543209876542}
#island_id: 2
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([h[site_nbr][j] * J[k,i%N,i//N] for k,j in [(0,0),(1,N-1)]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 2
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.008709104938271605}
#island_id: 1
#version_generated: 2
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if h[i//N][i%N] > 0:
      site_nbrs.append((i % N + (i//N-1)%2) % N)
      site_nbrs.append((i % N + ((i//N+1)%N-1)) % N)
    else:
      site_nbrs.append((i % N + (i//N-1)%2 - 1) % N)
      site_nbrs.append((i % N + ((i//N+1)%N-1)) % N)

    for j in range(3):
      priorities[i][0] += J[j,i%N,i//N]*h[site_nbrs[j]][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[j,i%N,i//N]*h[site_nbrs[j]][i%N]
      else:
        priorities[i][1] += J[j,i%N,i//N]*h[site_nbrs[j]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0005668209876543204}
#island_id: 1
#version_generated: 2
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    site_h = [h[site_nbr][i%N] if J[k,i//N,i%N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    
    site_sum = sum(site_h)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002456944444444444}
#island_id: 1
#version_generated: 2
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i//N,i//N]*h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i//N,i//N]*h[i//N][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]*h[(i+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]*h[(i+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002800925925925928}
#island_id: 1
#version_generated: 2
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N)%N + ((i%N-1)%N - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017084876543209872}
#island_id: 1
#version_generated: 2
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[min((k+N-1)%N,i//N),i%N] for k in range(3)]) + h[site_nbr][i%N]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[min((k+N-1)%N,i//N),i%N] for k in range(3)]) - h[site_nbr][i%N]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[min((k+N-1)%N,i//N),i%N] for k in range(3)]) + h[site_nbr][i%N]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[min((k+N-1)%N,i//N),i%N] for k in range(3)]) - h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008915123456790122}
#island_id: 1
#version_generated: 2
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+J[1,i%N,i//N])*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+J[1,i%N,i//N])*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2,4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001922685185185185}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k+1,i%N,i//N] > 0:
        h_site += J[k+1,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k+1,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001191203703703704}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += h[site_nbr_j][i%N]
      else:
        h_site -= h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002235648148148148}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      neighbor_spin = J[k,i//N,(k+N-1)%N]*h[(k+N-1)%N][i%N]
      if k % 2 == 0 and h[i//N][i%N] > 0:
        priorities[i][0] += h_site + neighbor_spin
        priorities[i][1] -= priorities[i][0]
      elif k % 2 == 1 and h[i//N][i%N] < 0:
        priorities[i][0] -= h_site - neighbor_spin
        priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14259305555555576}
#island_id: 0
#version_generated: 2
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) >= 0:
        priorities[i][0] = sum([J[0,i%N,i//N]*h[site_nbr][i%N]])
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) >= 0:
        priorities[i][0] = -sum([J[0,i%N,i//N]*h[site_nbr][i%N]])
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 0
#version_generated: 2
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00560354938271605}
#island_id: 0
#version_generated: 2
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    h_site1, h_site2 = h[site_nbr1][i%N], h[site_nbr2][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site = h_site1 + h_site2
    else:
      h_site = -h_site1 - h_site2
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
    
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    sum_j = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_j
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_j
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002310185185185186}
#island_id: 3
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      priorities[i][0] += J[k, i % N, i // N] * h[(k + i // N) % N][i % N]
      if h[i // N][i % N] > 0:
        priorities[i][1] -= J[k, i % N, i // N]
      else:
        priorities[i][1] += J[k, i % N, i // N]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = 0
    for k in range(3):
      total += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018998456790123442}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if J[0,i%N,j] > 0:
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[0] + sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0] - sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.06371188271604941}
#island_id: 3
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])

    if J[0,i%N,i//N] > 0:
      h_site += h[i//N][i%N]
    else:
      h_site -= h[i//N][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00029459876543209865}
#island_id: 0
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + sum([J[3,i//N,i%N]*(2*h[i//N][i%N]-1) if (k+N-1)%N==i//N else 0 for k in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - sum([J[3,i//N,i%N]*(2*h[i//N][i%N]-1) if (k+N-1)%N==i//N else 0 for k in range(N)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + nn_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    sum_h = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001972993827160494}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + J[0,i%N,i//N]*h_site2) * N
      priorities[i][1] = -(priorities[i][0])
    else:
      priorities[i][0] = -(h_site1 + J[0,i%N,i//N]*h_site2)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00018811728395061643}
#island_id: 1
#version_generated: 2
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    total_h = h[i//N][i%N]
    if J[0,i%N,i//N] > 0:
      total_h += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_h -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013871913580246913}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    magnetism = total_spin[i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + magnetism
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - magnetism
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004010802469135802}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[1,i%N,i//N] < 0 and J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      elif J[1,i%N,i//N] > 0 and J[2,i%N,i//N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) < 0:
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][1] = priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    # The priority of the opposite spin is always the negative of the current one
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002385030864197532}
#island_id: 1
#version_generated: 2
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.012713734567901234}
#island_id: 1
#version_generated: 2
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:
        priorities[i][1] = priorities[i][0]
      else:
        priorities[i][1] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0:
        priorities[i][1] = -priorities[i][0]
      elif i % N == N-1:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2229412037037038}
#island_id: 1
#version_generated: 2
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = abs(h_site) + (h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(abs(h_site) + (h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004238425925925927}
#island_id: 1
#version_generated: 2
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.00035385802469135814}
#island_id: 0
#version_generated: 2
#generate time19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbrs[0]][i%N]
    else:
      h_site = -h[site_nbrs[0]][i%N]

    for neighbor in site_nbrs:
      if i // N == neighbor // N and abs(i % N - neighbor % N) == 1:
        h_site += J[0,i//N,neighbor//N] * h[i//N][min(i % N, neighbor % N)]
      elif (i % N + ((i//N-1)%2 - 1)) % N == neighbor and i // N == neighbor // N:
        h_site += J[1,i//N,neighbor//N] * h[i//N][min(i % N, neighbor % N)]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023217592592592613}
#island_id: 0
#version_generated: 2
#generate time19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time19:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013155864197530861}
#island_id: 2
#version_generated: 3
#generate time19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (i % N + ((k+N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_k][i%N]
        total_spin[1] -= J[k,i%N,i//N]*h[site_k][i%N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*-h[site_k][i%N]
        total_spin[1] += J[k,i%N,i//N]*-h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003241512345679012}
#island_id: 2
#version_generated: 3
#generate time19:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      site_k = (k + i % N) % N
      if h[i//N][site_k] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr][site_k]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr][site_k]
        total_spin[1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 3
#version_generated: 3
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00022700617283950698}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr_j][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + J[0,i%N,i//N]*h[(site_nbr+N-1)%N][i%N]) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0007214506172839505}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[s][i%N] if J[0,i%N,s//N] > 0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.003138117283950617}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 1.929012345678971e-05}
#island_id: 0
#version_generated: 2
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbrs = [(i % N + (j-1) % 2 - 1) % N for j in range(3)]
    if sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)]) > 0:
      priorities[i][0] = sum([abs(h[site_nbrs[k]][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([abs(h[site_nbrs[k]][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038566358024691356}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(3):
      k = (i % N + ((i//N-1)%2 - 1)) % N
      site_nbrs.append(k)
    h_site = np.sum([h[k][i%N] * J[site_nbrs.index(k), i%N, i//N] for k in site_nbrs])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0021995370370370367}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site1 + J[1,i//N,i%N]*h_site2
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2165510802469135}
#island_id: 0
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = ((i//N + (k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 3
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007260802469135795}
#island_id: 3
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0016106481481481477}
#island_id: 2
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 2
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': 0.001762500000000002}
#island_id: 2
#version_generated: 3
#generate time20:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_2 = (k+N-1)%N
      if J[k+1,i%N,i//N] > 0:
        h_site += J[k+1,i%N,i//N]*h[site_nbr_2][i%N]
      else:
        h_site -= J[k+1,i%N,i//N]*h[site_nbr_2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * 2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return(total_spin)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 1
#version_generated: 2
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_h = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 2.0216049382716013e-05}
#island_id: 1
#version_generated: 2
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01978287037037038}
#island_id: 0
#version_generated: 2
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i // N - (i % N) // N)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    if np.prod([spin > 0 for spin in h_sites]) > 0:
      priorities[i][0] = sum(h_sites) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(h_sites) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0045995370370370365}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_magnet = h[i//N][i%N]
    for k in range(3):
      if J[k,i//N,i%N] > 0:
        site_magnet += h[(k+N-1)%N][i%N]
      else:
        site_magnet -= h[(k+N-1)%N][i%N]

    if site_magnet > 0:
      priorities[i][0] = h_site + sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008803858024691358}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014837962962962966}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = total_spin

  return(priorities)




#score: {'data2D.txt': 6.003086419753051e-05}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_h -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if total_h > 0:
      priorities[i][0] = 2*total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -2*total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006076388888888888}
#island_id: 3
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 2
#generate time20:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 1
#version_generated: 2
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)], axis=0)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - np.sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036084876543209876}
#island_id: 3
#version_generated: 3
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = term1 + J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      term2 = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -term2 + J[0,i//N,i%N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 3
#version_generated: 3
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_site = h[i//N][i%N] + h_site
    priorities[i][0] = sum_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019146604938271613}
#island_id: 3
#version_generated: 3
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.019814351851851854}
#island_id: 2
#version_generated: 2
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    h_sum = h[i//N][i%N] + h[site_nbr1][i%N] + h[site_nbr2][i%N]
    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J_sum > 0:
      priorities[i][0] = h_sum
      priorities[i][1] = -h_sum
    else:
      priorities[i][0] = -h_sum
      priorities[i][1] = h_sum

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 2
#version_generated: 2
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009266975308641971}
#island_id: 0
#version_generated: 2
#generate time20:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([priorities[j][0] for j in range(i) if (j // N == i // N and abs(j % N - i % N) <= 1)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([priorities[j][0] for j in range(i) if (j // N == i // N and abs(j % N - i % N) <= 1)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010915123456790128}
#island_id: 0
#version_generated: 2
#generate time20:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N]*(2*h[i//N][(i+1)%N]-1) - J[2,(i+N-1)%N,i//N]*(2*h[i//N][(i+N-1)%N]-1)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N]*(2*h[i//N][(i+1)%N]-1) + J[2,(i+N-1)%N,i//N]*(2*h[i//N][(i+N-1)%N]-1)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time20:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time20:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = h[i//N][i%N] + h[site_nbr][i%N]
    if J[1,i%N,i//N] > 0 and i % N != 0:
      sum_h += h[(i-1)//N][(i-1)%N]
    elif J[1,i%N,i//N] < 0 and i % N != N-1:
      sum_h -= h[(i+1)//N][i%N]

    if J[2,i//N,i%N] > 0 and (i // N) != N-1:
      sum_h += h[i//N-1][i%N]
    elif J[2,i//N,i%N] < 0 and (i // N) == 0:
      sum_h -= h[N-1][i%N]

    if J[3,i//N,i%N] > 0 and i % N != 0 and (i // N) != N-1:
      sum_h += h[(i-1)//N][(i-1)%N]
    elif J[3,i//N,i%N] < 0 and i % N != N-1 and (i // N) == 0:
      sum_h -= h[N-1][N-1]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 2
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    h_site += h[site_nbr][i%N]
    priorities[i][0] = 2*h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009125000000000001}
#island_id: 2
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(0, 1), (0, -1), (-1, 0), (1, 0)]:
      if J[direction[0], i % N, i // N] > 0:
        h_site += J[direction[0], i % N, i // N] * h[(i // N + direction[1]) % N][i % N]
      else:
        h_site -= J[direction[0], i % N, i // N] * h[(i // N + direction[1]) % N][i % N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007760802469135797}
#island_id: 2
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i//N == (k+N-1)%N or i%N == (k+N-1)%N:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006297839506172845}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr=i%N
    if J[0,i%N,i//N] > 0:
      h_site=h[site_nbr][i%N]
    else:
      h_site=-h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0]=h_site+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]
    else:
      priorities[i][0]=-h_site-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2621871913580244}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = 2*h[i//N][i%N] + h_site + neighbor_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005856481481481486}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - (priorities[i][0]+priorities[i][1])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (priorities[i][0]+priorities[i][1])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005094135802469128}
#island_id: 1
#version_generated: 2
#generate time20:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      if h[site_nbr][i%N] > 0:
        priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time20:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      J_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005828703703703709}
#island_id: 1
#version_generated: 2
#generate time20:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N]*h[(i//N)%N][((i+1)%N)-1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N]*h[(i//N)%N][((i+1)%N)-1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008615277777777777}
#island_id: 2
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + site_sum) * 2
      priorities[i][1] = -(h_site + site_sum)
    else:
      priorities[i][0] = -(h_site + site_sum) * 2
      priorities[i][1] = h_site + site_sum

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009547839506172842}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site += h[site_nbr][i%N]
    else:
      h_site -= h[site_nbr][i%N]

    priorities[i][0] = -h_site
    priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_cost = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_cost
      priorities[i][1] = -priorities[i][0]
    else:
      spin_cost = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_cost
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001138734567901235}
#island_id: 3
#version_generated: 3
#generate time20:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for k in range(N):
        site_nbr_k = (k + ((i//N-1)%2 - 1)) % N
        if J[0,k,i//N] > 0:
            total_spin += h[site_nbr_k][i%N]
        else:
            total_spin -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin.sum()
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin.sum()
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012970679012345681}
#island_id: 0
#version_generated: 2
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1,i%N,i//N]]
    h_sum = sum([h[s][i%N] if J[0,s,i//N]>0 else -h[s][i%N] for s in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0018149691358024694}
#island_id: 3
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) - sum([J[k,(i+2)%N,i//N]*h[(k+N-1)%N][(i+2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) + sum([J[k,(i+2)%N,i//N]*h[(k+N-1)%N][(i+2)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001218364197530864}
#island_id: 3
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= h_site
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += h_site

  return(priorities)




#score: {'data2D.txt': -0.0006470679012345671}
#island_id: 3
#version_generated: 3
#generate time20:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (0,-1), (-1,0), (1,0)]:
      d_i = i + N*dir[1] + dir[0]
      if 0 <= d_i < N*N and abs(d_i-i) == 1:
        h_nbr = h[d_i//N][d_i%N]
        priorities[i][0] += J[dir[1],i//N,d_i//N]*h_nbr
        if h[i//N][i%N] > 0:
          priorities[i][0] -= J[dir[1],i//N,d_i//N]
        else:
          priorities[i][0] += J[dir[1],i//N,d_i//N]

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002832561728395062}
#island_id: 0
#version_generated: 2
#generate time20:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      total_spin = np.sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) + h[i//N][i%N]
    else:
      total_spin = -np.sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) - h[i//N][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*total_spin for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*total_spin for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.017445833333333334}
#island_id: 2
#version_generated: 3
#generate time20:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      if J[0,i%N,j] > 0:
        h_site_j = h[site_nbr_j][i%N]
      else:
        h_site_j = -h[site_nbr_j][i%N]

      total_spin[0] += h_site_j
      if h[i//N][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001220524691358024}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002479166666666666}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N] * (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    priorities[i][0] = -total
    priorities[i][1] = total
  return(priorities)




#score: {'data2D.txt': 0.0023013888888888897}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_up = (i+N-1)%N
    site_nbr_down = (i-N+2)%N if i!=0 else i
    site_nbr_left = ((i//N)*N + (i%N)-1)%N if i<N else ((i//N)*N + N-1)%N
    site_nbr_right = ((i//N)*N + (i%N)+1)%N if i<N*N-N else i

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00036898148148148136}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[0, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015353395061728393}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      site_nbr2 = (site_nbr + ((j-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[j,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time20:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.3981481481481236e-05}
#island_id: 3
#version_generated: 3
#generate time20:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - J[0,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004771450617283951}
#island_id: 3
#version_generated: 3
#generate time20:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
      if i % N + direction[0] >= 0 and i % N + direction[0] < N and i // N + direction[1] >= 0 and i // N + direction[1] < N:
        site_nbr = ((i % N + direction[0]) + ((i//N+direction[1])%2 - 1)) % N
        if J[0,i%N+direction[0],i//N+direction[1]] > 0:
          h_site += J[0, i%N+direction[0], i//N+direction[1]] * h[site_nbr][i % N + direction[0]]
        else:
          h_site -= J[0, i%N+direction[0], i//N+direction[1]] * h[site_nbr][i % N + direction[0]]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010350308641975305}
#island_id: 3
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr_j = (j + ((i-1)%N - N//2)) % N
      if J[0,i%N,j] > 0:
        total_spin += h[site_nbr_j][j]
      else:
        total_spin -= h[site_nbr_j][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[1] + h_site
      priorities[i][1] = -total_spin[0] - h_site
    else:
      priorities[i][0] = -total_spin[1] - h_site
      priorities[i][1] = total_spin[0] - h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.010202314814814815}
#island_id: 3
#version_generated: 3
#generate time20:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 0
#version_generated: 2
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if h[i//N][i%N] > 0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    spin = -1 if h[i//N][i%N] < 0 else 1
    priorities[i][0] = total_spin + h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.28744737654320945}
#island_id: 0
#version_generated: 2
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neigh = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = 2*h[i//N][i%N] + sum_neigh
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00046095679012345716}
#island_id: 1
#version_generated: 2
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_nn = (site_nbr + np.array([-1,0,1])) % N
    nn_h_site_sum = sum([J[k,i%N,i//N]*h[s][i%N] for k,s in enumerate(site_nbr_nn)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nns = [(k+N-1)%N for k in range(3)]
    nn_h = [h[nn][i%N] if J[0,i%N,k] > 0 else -h[nn][i%N] for k,nn in zip(range(3),nns)]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[nn][i%N] for k,nn in zip(range(3),nns)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017149691358024689}
#island_id: 1
#version_generated: 2
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i//N,(i+N-1)%N), (i//N,(i+1)%N), ((i-1)//N,i),(i//N,(i-1)%N)]
    for j in range(2):
      h_sum = 0
      J_sum = 0
      for k in site_nbrs[j]:
        h_sum += h[k][i%N]
        if J[0,k,i%N] > 0:
          J_sum += J[0,k,i//N]
        else:
          J_sum -= J[0,k,i//N]
      priorities[i][j] = (1-J_sum)*h_site + h_sum

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0005791666666666662}
#island_id: 1
#version_generated: 2
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]*h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 1
#version_generated: 2
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N]
    h_site_sum = sum(h[j][i%N] for j in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469148e-05}
#island_id: 1
#version_generated: 2
#generate time20:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N == (k + i % N) % N and J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      elif i // N == (k + i % N) % N and J[k,i%N,i//N] < 0:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00017546296296296225}
#island_id: 1
#version_generated: 2
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Sort the priorities by the absolute value of the first priority
  sorted_indices = np.argsort(np.abs(priorities[:, 0]))
  return(priorities[sorted_indices])




#score: {'data2D.txt': 0.0017390432098765443}
#island_id: 1
#version_generated: 2
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr1][i%N] + h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr1][i%N] - h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 1
#version_generated: 2
#generate time20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N)
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0019908950617283957}
#island_id: 1
#version_generated: 2
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin_contrib = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + spin_contrib
      priorities[i][1] = -priorities[i][0]
    else:
      spin_contrib = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - spin_contrib
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001109722222222222}
#island_id: 0
#version_generated: 2
#generate time20:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if J[j,i%N,i//N] > 0:
        h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(j)])
      else:
        h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(j)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038566358024691356}
#island_id: 0
#version_generated: 2
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += J[0,i%N,i//N]*h[site_nbr][i%N]
      total_spin[i][1] -= J[0,i%N,i//N]*h[site_nbr][i%N]
    else:
      total_spin[i][0] -= J[0,i%N,i//N]*h[site_nbr][i%N]
      total_spin[i][1] += J[0,i%N,i//N]*h[site_nbr][i%N]
  return(total_spin)




#score: {'data2D.txt': 0.00013472222222222208}
#island_id: 0
#version_generated: 2
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010421296296296294}
#island_id: 2
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      dx, dy = [(1, 0), (-1, 0), (0, 1), (0, -1)][d]
      x, y = i % N, i // N
      site_nbr = ((x + dx) % N) + ((y + dy) % 2 - 1) * N
      h_site += J[d, x, y] * h[site_nbr][x]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 2
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time20:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0011523148148148152}
#island_id: 2
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_term = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_term
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_term
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009649691358024693}
#island_id: 2
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = np.sign(sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.0185185185187565e-06}
#island_id: 2
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0,i,j] > 0:
        h_site = h[site_nbr][j]
      else:
        h_site = -h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin = sum([J[k,i,k%N]*(2*h[(k+N-1)%N][j]) for k in range(4)])
        priorities[i*N+j][0] = h_site + total_spin
        priorities[i*N+j][1] = -priorities[i*N+j][0]
      else:
        total_spin = sum([J[k,i,k%N]*(-2*h[(k+N-1)%N][j]) for k in range(4)])
        priorities[i*N+j][0] = -h_site - total_spin
        priorities[i*N+j][1] = -priorities[i*N+j][0]
  
  return(priorities)




#score: {'data2D.txt': -0.01051033950617284}
#island_id: 2
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + h[site_nbr2][i%N]
        priorities[i][1] -= 2*h_site + 2*h[site_nbr2][i%N]
      else:
        priorities[i][0] -= h_site - h[site_nbr2][i%N]
        priorities[i][1] += 2*h_site - 2*h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': 0.0013282407407407407}
#island_id: 2
#version_generated: 3
#generate time20:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = spin_energy
      priorities[i][1] = -spin_energy
    else:
      priorities[i][0] = -spin_energy
      priorities[i][1] = spin_energy

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015149691358024694}
#island_id: 0
#version_generated: 2
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i+N+((i//N-1)%2 - 1)) % N
    site_down = (i-N+((i//N-1)%2 - 1)) % N
    site_left = ((i-1)%N + ((i//N-1)%2 - 1)) % N
    site_right = ((i+1)%N + ((i//N-1)%2 - 1)) % N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h_site + sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in [1,2,3]]) - J[3,i%N,i//N]*h[site_right][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h_site + sum([J[k,site_nbr,i//N]*h[site_nbr][i%N] for k in [1,2,3]]) + J[3,i%N,i//N]*h[site_right][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.016191203703703708}
#island_id: 2
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      total_spin = 0
      for k in range(N):
        site = (k + ((i//N-1)%2 - 1)) % N
        if J[0,i%N,k] > 0:
          total_spin += h[site][i%N]
        else:
          total_spin -= h[site][i%N]
      priorities[i][j] = (j == 0) * (h_site + total_spin) - ((j+1)%2) * (h_site - total_spin)
  return(priorities)




#score: {'data2D.txt': 0.0005865740740740753}
#island_id: 2
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0, 1), (0, -1), (-1, 0), (1, 0)]:
      if i % N + dir[0] < 0 or i % N + dir[0] >= N or i//N + dir[1] < 0 or i//N + dir[1] >= N:
        continue
      if J[0,i%N,i//N] > 0:
        h_site += J[dir[1],i%N,i//N]*h[(site_nbr + dir[1]) % N][i%N]
      else:
        h_site -= J[dir[1],i%N,i//N]*h[(site_nbr + dir[1]) % N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002262808641975309}
#island_id: 2
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (i % N + ((k-1)%2 - 1)) % N
      if J[0, i%N, k] > 0:
        total_spin[0] += h_site * h[site][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h_site * h[site][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + 2*h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.008147993827160494}
#island_id: 1
#version_generated: 2
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][0] += h_site
      else:
        priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002461882716049383}
#island_id: 1
#version_generated: 2
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N for d in range(4)]
    if all([J[k,i%N,i//N]*h[nn_nbr][i%N] > 0 for k,nn_nbr in enumerate(nn_nbrs)]):
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[nn_nbr][i%N] for k,nn_nbr in zip(range(4),nn_nbrs)])
      priorities[i][1] = -priorities[i][0]
    elif all([J[k,i%N,i//N]*h[nn_nbr][i%N] < 0 for k,nn_nbr in enumerate(nn_nbrs)]):
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[nn_nbr][i%N] for k,nn_nbr in zip(range(4),nn_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[nn_nbr][i%N] for k,nn_nbr in zip(range(4),nn_nbrs)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[nn_nbr][i%N] for k,nn_nbr in zip(range(4),nn_nbrs)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025776234567901233}
#island_id: 1
#version_generated: 2
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = []
    for k in range(3):
      site_nbr_k = (k+N-1)%N
      if i//N == site_nbr_k:
        continue
      elif i%N == 0:
        if k == 2: 
          neighbors.append((site_nbr_k, J[2,i%N,i//N]))
      elif i%N == N-1:
        if k == 0: 
          neighbors.append((site_nbr_k, J[0,i%N,i//N]))
      else:
        if k in [0,2]:
          neighbors.append((site_nbr_k, J[k,i%N,i//N]))

    total_h = h_site + sum([neighbor[1]*h[neighbor[0]][i%N] for neighbor in neighbors])

    priorities[i][0] = total_h
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0003177469135802473}
#island_id: 1
#version_generated: 2
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 8.842592592592614e-05}
#island_id: 0
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_up = (i+N+1) % (N*N)
    nn_down = (i-N+1) % (N*N)
    if i % N == 0: nn_left = (i+N) % (N*N)
    elif i % N == N-1: nn_right = (i-N) % (N*N)
    else: nn_left = (i-N) % (N*N); nn_right = (i+N) % (N*N)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) \
               + J[2,i%N,i//N]*(-h[i//N][i%N]+h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) \
               + J[2,i%N,i//N]*(h[i//N][i%N]-h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 0
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0039007716049382734}
#island_id: 0
#version_generated: 2
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum(h, axis=1)
    if h[i//N][i%N] > 0:
      priorities[i][0] = (total_spin[i//N]+J[0,i%N,i//N]*h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(total_spin[i//N]-J[0,i%N,i//N]*h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002918209876543203}
#island_id: 2
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+1)%N, (i+N-1)%N, ((i+1)%N + (i//N-1)%2 - 1) % N]
    for k in range(3):
      if h[i//N][site_nbrs[k]] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbrs[k]][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbrs[k]][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time21:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037422839506172855}
#island_id: 0
#version_generated: 2
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      site_nbr2 = (k+N-1)%N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbr2][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05970262345679015}
#island_id: 0
#version_generated: 2
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N

    h_site = h[i//N][i%N] if J[0,i%N,i//N]>0 else -h[i//N][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,site_nbr1,i//N]*h[site_nbr1][i%N] + J[3,site_nbr2,i//N]*h[site_nbr2][i%N]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013671296296296302}
#island_id: 0
#version_generated: 2
#generate time21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i%N,(i+1)%N]*h[(k+N-1)%N][(i+1)%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if i < N or (i % N == 0 and i // N >= N):
      # left or top edge
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    elif i >= N*(N-1):
      # right or bottom edge
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
    else:
      # interior site
      if h[i//N][i%N] > 0:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017422839506172865}
#island_id: 0
#version_generated: 2
#generate time21:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_sum = h[i//N][i%N]
    for k in range(3):
      priority_sum += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priority_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priority_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time21:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002914351851851853}
#island_id: 3
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([h[j][min(i+N//2, N-1)]*J[0,i%N,j] for j in range(N)])
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.01118070987654321}
#island_id: 1
#version_generated: 2
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      for k in range(d):
        site_nbr2 = (site_nbr + ((k+1)%2 - 1)) % N
        if J[d,i%N,i//N] > 0:
          h_site += J[d,i%N,i//N]*h[site_nbr2][i%N]
        else:
          h_site -= J[d,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002142746913580247}
#island_id: 1
#version_generated: 2
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h_site2
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00031249999999999984}
#island_id: 1
#version_generated: 2
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.005023302469135803}
#island_id: 1
#version_generated: 2
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nnsite = (i // N + ((i % N-1) % N - N//2)) % N
    if J[0,i%N,nnsite] > 0:
      h_neighbor = h[nnsite][i%N]
    else:
      h_neighbor = -h[nnsite][i%N]

    priorities[i][0] = h_site + h_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0002905864197530865}
#island_id: 1
#version_generated: 2
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*J[0,i%N,i//N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0] - 2*J[0,i%N,i//N]

  return(priorities)




#score: {'data2D.txt': 0.0006908950617283954}
#island_id: 1
#version_generated: 2
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    neighbor_contributions = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if magnetism > 0:
      priorities[i][0] = h_site + neighbor_contributions
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_contributions
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.05473503086419754}
#island_id: 2
#version_generated: 3
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = (np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0) * 2 - 1
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023408950617283945}
#island_id: 2
#version_generated: 3
#generate time21:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for j in range(3):
      site_nbr_j = (i % N + ((i//N-1)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_j][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_j][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007066358024691359}
#island_id: 2
#version_generated: 3
#generate time21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + h_site
    if total_h > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07012824074074081}
#island_id: 2
#version_generated: 3
#generate time21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      if h[(j+N-1)%N][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011523148148148152}
#island_id: 2
#version_generated: 3
#generate time21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[i//N][i%N] > 0:
      for k in range(4):
        total_spin += J[k, i//N, i%N] * h[(k+N-1)%N][i%N]
    else:
      for k in range(4):
        total_spin -= J[k, i//N, i%N] * h[(k+N-1)%N][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038751543209876544}
#island_id: 0
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[s][i%N] if J[0,i%N,s] > 0 else -h[s][i%N] for s in site_nbrs])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.008918672839506139}
#island_id: 0
#version_generated: 2
#generate time21:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_spin_up = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + np.sum(h)
      priority_spin_down = -priority_spin_up
    else:
      priority_spin_up = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - np.sum(h)
      priority_spin_down = -priority_spin_up
    
    priorities[i][0] = priority_spin_up
    priorities[i][1] = priority_spin_down

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time21:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_neigh = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_neigh
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.002007253086419753}
#island_id: 0
#version_generated: 2
#generate time21:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(4)
    for j in range(-1,2):
      site_nbr2 = (i % N + ((i//N-1)%2 - 1) + j) % N
      if h[i//N][i%N] > 0:
        total_spin[abs(j)] += J[j,i//N,i%N]
      else:
        total_spin[abs(j)] -= J[j,i//N,i%N]

    priorities[i][0] = h_site + np.sum(total_spin)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0014313271604938281}
#island_id: 1
#version_generated: 2
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      h_site = sum([h[site_nbrs[j]][i%N] for j in range(4)])
    else:
      h_site = -sum([h[site_nbrs[j]][i%N] for j in range(4)])

    J_sum = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    site_nbr = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][1] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][1] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0033686728395061726}
#island_id: 3
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(3) if (i//N+k)%N != i//N or (i%N+k)%N != i%N]
    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in neighbors])
    
    priorities[i][0] = h_site + sum_neighbors
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if site_nbr == i % N:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if site_nbr == i % N:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.058940586419753103}
#island_id: 0
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priorities = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      
      if J[0,i,j] > 0:
        h_site = h[i][j]
      else:
        h_site = -h[i][j]

      spin_1 = J[0,i%N,j//N]*h[site_nbr1][j] + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])
      spin_2 = J[0,i%N,j//N]*h[site_nbr2][j] + sum([J[k,i,j]*h[(k+N-1)%N][j] for k in range(3)])

      priorities[i*N+j][0] = h_site + spin_1
      priorities[i*N+j][1] = -priorities[i*N+j][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0008970679012345676}
#island_id: 0
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if site_sum > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0001242283950617289}
#island_id: 0
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004689814814814821}
#island_id: 0
#version_generated: 2
#generate time21:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([-J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011415123456790129}
#island_id: 0
#version_generated: 2
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if (J[0,i%N,i//N] > 0) == (h[i//N][i%N] > 0):
      h_site = sum([h[j][i%N]*J[k,i%N,j] for k, j in enumerate(site_nbrs)])
    else:
      h_site = -sum([h[j][i%N]*J[k,i%N,j] for k, j in enumerate(site_nbrs)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0003023148148148125}
#island_id: 0
#version_generated: 2
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[j][i%N] for j in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  # Add nearest neighbor interaction terms
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N, (i % N + ((i//N+1)%2 - 1)) % N]
    h_site = sum([h[j][i%N] for j in site_nbrs])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.000302932098765433}
#island_id: 0
#version_generated: 2
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_h = sum([h[s][i%N] for s in site_nbrs]) 
    if h[i//N][i%N] > 0:
      priorities[i][0] = site_h + J[0,i%N,i//N]*site_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -site_h - J[0,i%N,i//N]*site_h
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003568981481481482}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or J[0,i%N,i//N] > 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 1
#version_generated: 2
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i % N + ((i//N-1)%2 - 2)) % N
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001318364197530865}
#island_id: 2
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr_left = (i % N + ((i//N-1)%2)) % N
    if J[0,i%N,i//N] > 0:
      left_h_site = h[site_nbr_left][i%N]
    else:
      left_h_site = -h[site_nbr_left][i%N]

    site_nbr_right = ((i+1)%N + ((i//N-1)%2)) % N
    if J[0,(i+1)%N,i//N] > 0:
      right_h_site = h[site_nbr_right][(i+1)%N]
    else:
      right_h_site = -h[site_nbr_right][(i+1)%N]

    site_nbr_top = (i % N + ((i//N-2)%2 - 1)) % N
    if J[0,i%N,(i//N)-1] > 0:
      top_h_site = h[site_nbr_top][i//N-1]
    else:
      top_h_site = -h[site_nbr_top][i//N-1]

    site_nbr_bottom = ((i+N-1)%N + ((i//N-1)%2 - 1)) % N
    if J[0,(i+N-1)%N,i//N] > 0:
      bottom_h_site = h[site_nbr_bottom][i//N]
    else:
      bottom_h_site = -h[site_nbr_bottom][i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + left_h_site + right_h_site + top_h_site + bottom_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - left_h_site - right_h_site - top_h_site - bottom_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 2
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for k in range(3):
      if ((i + (k-1)%2) % N == i%N and (i//N + (k-1)%2) % N != i//N):
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009470679012345678}
#island_id: 1
#version_generated: 2
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = 0
    for j in range(3):
      sum_nn += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006072530864197527}
#island_id: 0
#version_generated: 2
#generate time21:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    site_nbr2 = (i % N + ((i//N)%2 - 1)) % N
    if J[1,i%N,i//N] > 0:
      h_site += sum([J[3,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])
    else:
      h_site -= sum([J[3,k,i//N]*h[(k+N-1)%N][i%N] for k in range(N)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.21117608024691373}
#island_id: 3
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        if i == (k+N-1)%N and j==(j-1)%N: continue
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += J[0,i%N,i//N]*h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
        
  priority_total = [[total_spin[i*N+j][0],-total_spin[i*N+j][0]] for i in range(N) for j in range(N)]
  
  return(priority_total)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0018390432098765435}
#island_id: 3
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total = h[i//N][i%N]
    for k in range(3):
      if k == 0:
        site_nbr2 = (i % N + ((i//N-1)%2 - 1)) % N
      elif k == 1:
        site_nbr2 = (i % N + ((i//N+1)%N - 1)) % N
      else:
        site_nbr2 = (i % N + ((i//N-1)%N - N//2)) % N
      total += J[k,i%N,i//N]*h[site_nbr2][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00216712962962963}
#island_id: 3
#version_generated: 3
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10700077160493832}
#island_id: 0
#version_generated: 2
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sum = sum([h[j][i%N] if J[0,i%N,j] > 0 else -h[j][i%N] for j in site_nbrs])
    priorities[i][0] = h[i//N][i%N] + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.23886466049382718}
#island_id: 0
#version_generated: 2
#generate time21:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbr2 = (i // N + ((i % N-1)%2 - 1)) % N
    if J[2,i%N,i//N] > 0:
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * (1 + h_site2)
      priorities[i][1] = 1 - priorities[i][0]
    else:
      priorities[i][0] = -(1 - h_site) * (1 - h_site2)
      priorities[i][1] = 1 - priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time21:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.990740740740753e-05}
#island_id: 0
#version_generated: 2
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = np.exp(-2*h_site) / (np.exp(-2*h_site) + 1)

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 3
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(4):
      site_nbr2 = (k+N*i//N+(i%N)%N) % N
      if h[i//N][i%N] > 0:
        total_spin += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site + np.dot(total_spin, [1,-1])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006905864197530859}
#island_id: 2
#version_generated: 3
#generate time21:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(N**2):
      if i == j:
        continue
      site_diff = abs(j // N - i // N) + abs((j % N) - (i % N))
      if site_diff <= 1 and J[0, min(i % N, j % N), max(i // N, j // N)] > 0:
        priorities[i][0] += h_site * h[j//N][min(i % N, j % N)]
        priorities[i][1] -= priorities[i][0]
      elif site_diff <= 1 and J[0, min(i % N, j % N), max(i // N, j // N)] < 0:
        priorities[i][0] -= h_site * h[j//N][min(i % N, j % N)]
        priorities[i][1] += priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006476851851851851}
#island_id: 0
#version_generated: 2
#generate time21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i-1)%N, (i+1)%N, (i//N-1)%N, (i//N+1)%N]
    
    for k in range(4):
      if k == 0:
        h_nbr = h[site_nbrs[k]][i%N]
      elif k == 1:
        h_nbr = h[site_nbrs[k]][i%N]
      elif k == 2:
        h_nbr = h[i//N][site_nbrs[k]%N]
      else:
        h_nbr = -h[i//N][site_nbrs[k]%N]

      if J[k,i%N,i//N] > 0:
        h_site += h_nbr
      else:
        h_site -= h_nbr

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time21:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07254212962962968}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h[i//N][i%N] + h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      term1 = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      term1 = sum([-J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + term1
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -7.05246913580253e-05}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[1] += J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h_neighbor = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + sum_h_neighbor
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00024552469135802416}
#island_id: 3
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in [(0, 1), (1, 0)]:
      for k in range(N):
        if ((k-1+d[0]) % N + ((k+d[1]%2 - 1)) % N) == i:
          h_site += J[d[0], i%N, k]*h[k][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0902699074074075}
#island_id: 3
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] > 0 and i % N != N-1:
        priorities[i][0] += J[2,i%N,i//N]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] > 0 and i % N != N-1:
        priorities[i][0] -= J[2,i%N,i//N]

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site=(i%N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.004268055555555555}
#island_id: 3
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(8):
      neighbor = [(i+1)%N,(i-1+N)%N][(j%2)-1], (i//N + ((j//2-1) % 2 - 1)) % N
      if h[neighbor[0]][neighbor[1]] > 0:
        h_neighbor = h[neighbor[0]][neighbor[1]]
      else:
        h_neighbor = -h[neighbor[0]][neighbor[1]]

      if j<4:
        sign = 1
      else:
        sign = -1

      priorities[i][0] += J[j//2,i%N,i//N]*sign*h_site + J[j//2,neighbor[1],neighbor[0]]*sign*h_neighbor
      priorities[i][1] -= priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013054012345679043}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k, (i+N-1)%N, i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.10090694444444455}
#island_id: 3
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_2 = (i % N + ((i//N+k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_2][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h[site_nbr_2][i%N]
        total_spin[1] += 1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*x for k,x in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*x for k,x in enumerate(total_spin)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((2,))
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0004979938271604938}
#island_id: 2
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.024996450617283953}
#island_id: 2
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if J[0,i%N,i//N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    total_spin = np.sum(h, axis=1)
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000397376543209876}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (h_site+h[site_nbr][i//N])*(J[0,i//N,i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + (h_site-h[site_nbr][i//N])*(J[0,i//N,i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.000671141975308642}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if J[k, i%N, i//N] > 0:
        h_site += sum([J[k2, i%N, i//N]*h[(k+N-1)%N][i%N] for k2 in range(3)])
      else:
        h_site -= sum([J[k2, i%N, i//N]*h[(k+N-1)%N][i%N] for k2 in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + spin_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - spin_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010628086419753086}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]*h[site_nbr_k][i%N]

  return(priorities)




#score: {'data2D.txt': -0.1600875}
#island_id: 1
#version_generated: 2
#generate time21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = (h[i//N][i%N] + h_site) + h_sum
    priorities[i][1] = -(priorities[i][0])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.682098765432199e-05}
#island_id: 1
#version_generated: 2
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr=(i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priorities=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if total_spin[i][0] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*total_spin[(k+N-1)%N*N+i%N][0] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = (1-2*j) * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*(1-2*j) for k in range(3)])
      else:
        priorities[i][j] = -(1-2*j) * h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N]*(1-2*j) for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 0]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005069444444444446}
#island_id: 1
#version_generated: 2
#generate time22:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[i//N][i%N]
    for k in range(3):
      if J[k,i%N,i//N] > 0:
        total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        total_spin -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.004226697530864198}
#island_id: 1
#version_generated: 2
#generate time22:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k-1)%N - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    priorities[i][0] = h_site + np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.16049305555555557}
#island_id: 1
#version_generated: 2
#generate time22:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr, k in zip(site_nbrs, [0,1,2])])
    priorities[i][0] = h[i//N][i%N] + h_site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009259104938271605}
#island_id: 1
#version_generated: 2
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N+1, (i//N+N-1)%N]]
    if h[i//N][i%N] > 0:
      h_site = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    else:
      h_site = -sum(h[site_nbr][i%N] for site_nbr in site_nbrs)

    priorities[i][0] = h_site + sum(J[k,i//N,i%N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs))
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.03472824074074073}
#island_id: 2
#version_generated: 3
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(priorities[:i+1], axis=0)
      priorities[i][1] = -total_spin[0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      total_spin = np.sum(priorities[:i+1], axis=0)
      priorities[i][1] = -total_spin[1]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]

      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.016977932098765428}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i==k*N+k:
        continue
      priorities[i][0] += J[k,i//N,i%N]*h[(k+N-1)%N][i%N]
      priorities[i][1] -= J[k,i//N,i%N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] -= h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002650462962962963}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_energy = 0
    for k in range(4):
      site_nbr_nbr = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        spin_energy += h[site_nbr_nbr][i%N]
      else:
        spin_energy -= h[site_nbr_nbr][i%N]

    priorities[i][0] = h_site + spin_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*site_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      total_spin[0] += h[k][(i%N)%N]*J[1,i//N,k]%N
      total_spin[1] -= h[k][(i%N)%N]*J[3,i//N,k]%N

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011152777777777775}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-N//2)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.001016203703703704}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003202160493827157}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_neighbors = [(i+1)%N, (i-1+N)%N, ((i//N-1)*N+i)%N]
    total_spin = 0
    for neighbor in site_neighbors:
      if J[0,i%N,neighbor] > 0:
        total_spin += h[site_nbr][neighbor]
      else:
        total_spin -= h[site_nbr][neighbor]

    priorities[i][0] = total_spin + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0006637345679012354}
#island_id: 1
#version_generated: 2
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17843626543209903}
#island_id: 1
#version_generated: 2
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
    else:
      priorities[i][0] = -(1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * (h[site_nbr][i%N])
      priorities[i][1] = 1+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) * h[site_nbr][i%N]

  return(priorities)




#score: {'data2D.txt': -0.0008628086419753096}
#island_id: 3
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i % N + ((i//N+k)%N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        h_site += h[site_nbr2][i%N]
      else:
        h_site -= h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009581790123456796}
#island_id: 3
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      for k in range(4):
        if k == 0 and (i//N)%2==1: continue
        if k == 1 and i%N==0: continue
        if k == 2 and i%N==N-1: continue
        priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] += h_site
    else:
      for k in range(4):
        if k == 0 and (i//N)%2==1: continue
        if k == 1 and i%N==0: continue
        if k == 2 and i%N==N-1: continue
        priorities[i][0] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      priorities[i][0] -= h_site

    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.30326003086419684}
#island_id: 0
#version_generated: 2
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[i//N][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(3):
      total_spin += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = []
    for j in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if i%N < N//2:
        if j == 0: site_nbr = (site_nbr+1) % N
        elif j == 1: site_nbr = (site_nbr+N) % N
        else: site_nbr = (site_nbr-1) % N
      else:
        if j == 0: site_nbr = (site_nbr-1) % N
        elif j == 1: site_nbr = (site_nbr+1) % N
        else: site_nbr = (site_nbr-N) % N
      site_nbrs.append((site_nbr, J[0,i%N,i//N]*h[site_nbr][i%N]))
    priorities[i][0] = sum([a for a,b in site_nbrs])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.000783179012345679}
#island_id: 0
#version_generated: 2
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Add the priority of the site's magnetism
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[i//N][i%N]
      priorities[i][1] -= h[i//N][i%N]
    else:
      priorities[i][0] -= h[i//N][i%N]
      priorities[i][1] += h[i//N][i%N]

  return(priorities)




#score: {'data2D.txt': -0.003138117283950617}
#island_id: 2
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    magnetism = h[i//N][i%N]
    for k in range(3):
      site_k = (i % N + ((i//N+k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.17028163580246938}
#island_id: 2
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if h[i//N][site_nbr] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_nbr2][i%N]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_nbr2][i%N]
        priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': -0.06735447530864201}
#island_id: 2
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_up = 0
    sum_down = 0
    for k in range(3):
      if ((k==0 and i//N>0) or (k==1 and i//N<N-1)) and J[k,i%N,(i//N+k)%N] > 0:
        sum_up += h[(i//N+k)%N][i%N]
      elif ((k==2 and i//N>0) or (k==0 and i//N<N-1)) and J[k,i%N,(i//N+k)%N] < 0:
        sum_down += -h[(i//N+k)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_up
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_down
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0024331790123456793}
#island_id: 0
#version_generated: 2
#generate time22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001294598765432098}
#island_id: 3
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = 0
    for k in range(4):
      site_nbr_k = ((k+1)%2 + i % N + (i//N-1)%2 - 1) % N
      if J[k,i%N,i//N] > 0:
        total_h += h[site_nbr_k][i%N]
      else:
        total_h -= h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0007325617283950623}
#island_id: 3
#version_generated: 3
#generate time22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (k + i % N) % N
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] -= J[k,i%N,i//N]
      else:
        priorities[i][0] -= J[k,i%N,i//N]*h[site_k][i%N]
        priorities[i][1] += J[k,i%N,i//N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + priorities[i][0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - priorities[i][0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.007548302469135802}
#island_id: 1
#version_generated: 2
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      site_nbrs = [(i % N, (i//N-1)%N), ((i+N-1)%N, i%N), ((i+N//2-1)%N, (i+N//2)%N)]
    else:
      site_nbrs = [(i % N, (i//N+1)%N), ((i+N-1)%N, i%N), ((i-N//2-1)%N, (i-N//2)%N)]

    for j in range(3):
      if J[j,i%N,i//N] > 0:
        priorities[i][0] += h_site + sum([J[k,i%N,i//N]*h[site_nbrs[l][0]][site_nbrs[l][1]] for k,l in zip(range(3),range(2))])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] -= h_site - sum([J[k,i%N,i//N]*h[site_nbrs[l][0]][site_nbrs[l][1]] for k,l in zip(range(3),range(2))])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_neighbors = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_neighbors
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_neighbors
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0008973765432098765}
#island_id: 1
#version_generated: 2
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priorities = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priority_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priority_site += J[0,i%N,i//N]
    else:
      priority_site -= J[0,i%N,i//N]

    priorities.append([priority_site, -priority_site])

  return(priorities)




#score: {'data2D.txt': 0.0009692901234567896}
#island_id: 1
#version_generated: 2
#generate time22:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][j] = (-1)**(j)*h_site + sum_J
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  total_energy = np.zeros((N*N,3))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      total_energy[i,k] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(total_energy[i])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(total_energy[i])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002227006172839506}
#island_id: 0
#version_generated: 2
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_sum + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_sum - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 1
#version_generated: 2
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) >= 0 else -1
    priorities[i][0] = h[site_nbr][i%N]
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      priority = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] if k == 0 and (j==0 or j==1) else J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][j] = priority

  return(priorities)




#score: {'data2D.txt': 0.001188734567901235}
#island_id: 1
#version_generated: 2
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N]
    
    # calculate the magnetism at each neighboring site
    h_sites = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]
    
    # calculate the sum of interactions between current site and its neighbors
    J_sum = sum([J[k,i%N,i//N]*h_sites[k] for k in range(len(h_sites))])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[i//N][i%N] + J_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - J_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019841049382716106}
#island_id: 2
#version_generated: 2
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i-N) % N if i+N < N**2 else ((i-N)%N + ((i-1)//N - 1)) % N
    site_down = (i+N) % N if i+N >= N**2 else ((i+N)%N + ((i+1)//N - 1)) % N
    site_left = (i%N-1) if i%N > 0 else N-1
    site_right = (i%N+1) if i%N < N-1 else 0

    up_h_site = h[site_up//N][site_up%N] if J[0,site_up//N,site_up%N]>0 else -h[site_up//N][site_up%N]
    down_h_site = h[site_down//N][site_down%N] if J[0,site_down//N,site_down%N]>0 else -h[site_down//N][site_down%N]
    left_h_site = h[site_left//N][site_left%N] if J[0,site_left//N,site_left%N]>0 else -h[site_left//N][site_left%N]
    right_h_site = h[site_right//N][site_right%N] if J[0,site_right//N,site_right%N]>0 else -h[site_right//N][site_right%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + up_h_site + down_h_site + left_h_site + right_h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - up_h_site - down_h_site - left_h_site - right_h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 2
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -h[site_nbr][i%N]
      J_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + J_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 2
#generate time22:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0004927469135802469}
#island_id: 1
#version_generated: 2
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (site_nbr1 + 1) % N
    site_nbr3 = (site_nbr1 - 1) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013155864197530861}
#island_id: 1
#version_generated: 2
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i+((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0017174382716049388}
#island_id: 1
#version_generated: 2
#generate time22:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_nbr_k = (i % N + ((i//N-k)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h[site_nbr_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      else:
        total_spin[0] -= h[site_nbr_k][i%N]
        if h[i//N][i%N] > 0:
          total_spin[1] += 1
        else:
          total_spin[1] -= 1

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*total_spin[0] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0937020061728396}
#island_id: 1
#version_generated: 2
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1-h[i//N][i%N])*J[0,i%N,i//N]*h_site
      priorities[i][1] = (-1+h[i//N][i%N])*J[0,i%N,i//N]*(-h_site)
    else:
      priorities[i][0] = (1-h[i//N][i%N])*(-J[0,i%N,i//N])*h_site
      priorities[i][1] = (-1+h[i//N][i%N])*(J[0,i%N,i//N])*(-h_site)

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010621913580246916}
#island_id: 1
#version_generated: 2
#generate time22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_values = [h[site_nbr][i%N] if J[k,i%N,i//N]>0 else -h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)]
    if np.prod([1 if h[i//N][i%N]>0 else -1 for _ in range(4)])>0:
      priorities[i][0] = sum([value + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)]) for value in site_nbr_values])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([value + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)]) for value in site_nbr_values])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 1
#version_generated: 2
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      neighbors_sum = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site + neighbors_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006461419753086415}
#island_id: 1
#version_generated: 2
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]*(h[(i+1)%N][i%N]+h[(i-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,i//N,i//N]*(h[(i+1)%N][i%N]+h[(i-1)%N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 1
#version_generated: 2
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.006569907407407407}
#island_id: 0
#version_generated: 2
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (i + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 0
#version_generated: 2
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*int(h[(k+N-1)%N][i%N]) for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 0
#version_generated: 2
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': 0.0001158950617283957}
#island_id: 0
#version_generated: 2
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for direction in [(1,0), (-1,0), (0,1), (0,-1)]:
      offset = i + N*direction[0] + direction[1]
      if 0 <= offset < N*N:
        site_nbr_offset = (offset % N + ((offset//N-1)%2 - 1)) % N
        if J[0,offset%N,offset//N] > 0:
          h_site += J[direction[0],i%N,i//N]*h[site_nbr_offset][i%N]
        else:
          h_site -= J[direction[0],i%N,i//N]*h[site_nbr_offset][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011513888888888882}
#island_id: 0
#version_generated: 2
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[3,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001034104938271605}
#island_id: 0
#version_generated: 2
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * (h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N])
    for j in range(3):
      if J[j,i%N,i//N] > 0:
        h_site += J[j,i%N,i//N] * (h[(j+N-1)%N][i%N] if J[0,i%N,i//N] > 0 else -h[(j+N-1)%N][i%N])
      else:
        h_site -= J[j,i%N,i//N] * (-h[(j+N-1)%N][i%N] if J[0,i%N,i//N] < 0 else h[(j+N-1)%N][i%N])
    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0005504629629629622}
#island_id: 0
#version_generated: 2
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.02658842592592594}
#island_id: 3
#version_generated: 2
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    priorities[i][0] = h_site1 + h_site2
    if J[1,i%N,i//N] > 0:
      priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 2
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 2
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N]>0:
        priorities[i][0]=h[site_nbr][i%N]+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1]=-priorities[i][0]
      else:
        priorities[i][0]=-h[site_nbr][i%N]-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1]=-priorities[i][0]
    else:
      if J[0,i%N,i//N]>0:
        priorities[i][0]=-h[site_nbr][i%N]-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1]=-priorities[i][0]
      else:
        priorities[i][0]=h[site_nbr][i%N]+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1]=-priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.002082870370370371}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_k = ((i//N + (k-2)%2) % N)*N + (i%N)
      if J[k,i%N,i//N] > 0:
        priorities[i][0] += h_site + J[k,i%N,i//N]*h[site_k%N][site_k//N]
        priorities[i][1] -= priorities[i][0]
      else:
        priorities[i][0] -= h_site - J[k,i%N,i//N]*h[site_k%N][site_k//N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007378086419753095}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*abs(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 6.373456790123421e-05}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2,(i+1)%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.033207870370370374}
#island_id: 0
#version_generated: 2
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site = h[i//N][i%N]
    
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr1][i%N] - h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr1][i%N] + h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015313271604938273}
#island_id: 0
#version_generated: 2
#generate time22:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_up = (i // N + ((i % N) % 2)) % N
    site_down = (i // N + ((i % N + 1) % 2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N] * h[(k + (i % N) % 2) % N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N] * h[(k + (i % N) % 2) % N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

    if i < N**2 // N:
      site_left = (i % N)
      site_right = (i % N + 1) % N
    else:
      site_left = (i % N - 1) % N
      site_right = (i % N)

    if J[0, i%N, i//N] > 0:
      priorities[i][0] += sum([J[k, i%N, i//N] * h[site_nbr][k] for k in range(3)])
      priorities[i][1] -= sum([J[k, i%N, i//N] * h[site_nbr][k] for k in range(3)])
    else:
      priorities[i][0] -= sum([J[k, i%N, i//N] * h[site_nbr][k] for k in range(3)])
      priorities[i][1] += sum([J[k, i%N, i//N] * h[site_nbr][k] for k in range(3)])

    return(priorities)




#score: {'data2D.txt': -1.1574074074073514e-05}
#island_id: 0
#version_generated: 2
#generate time22:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time22:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = h[site_nbr][i%N] + neighbors_spin
      priorities[i][1] = -priorities[i][0]
    else:
      neighbors_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -h[site_nbr][i%N] - neighbors_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time22:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + h_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002022993827160494}
#island_id: 3
#version_generated: 3
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_h + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)]) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_h - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 1
#version_generated: 2
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 1
#version_generated: 2
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00017422839506172865}
#island_id: 1
#version_generated: 2
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = h[i//N][i%N]
    for k in range(3):
      sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [0,0]
    for k in range(3):
      total_spin[1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin[1]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin[1]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 0
#version_generated: 2
#generate time22:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0030714506172839513}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = [sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), -1]
    else:
      total_spin = [-sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 1]

    priorities[i][0] = h[site_nbr][i%N] + sum(J[:, i%N, i//N]*total_spin[0])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0023223765432098765}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002849537037037037}
#island_id: 0
#version_generated: 2
#generate time22:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    site_interactions = [J[k,i%N,i//N]*h[site_nbr][i%N] for k,site_nbr in zip(range(3),site_nbrs)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum(site_interactions) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum(site_interactions) - h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00013256172839506218}
#island_id: 0
#version_generated: 2
#generate time22:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(4):
      if J[j,i%N,i//N] > 0:
        total_spin += h[(i+N*j-1)%N][i%N]
      else:
        total_spin -= h[(i+N*j-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0011973765432098746}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(2):
      for j in range(N):
        for k in range(N):
          if (d==0 and i//N==k) or (d==1 and i%N==j):
            if J[d,k,j] > 0:
              h_site += J[d,k,j]*h[k][j]
            else:
              h_site -= J[d,k,j]*h[k][j]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr_k][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    interaction_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + interaction_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - interaction_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010276234567901227}
#island_id: 2
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 3
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for k in range(3):
      sum_h += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 3
#version_generated: 3
#generate time22:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00020509259259259287}
#island_id: 1
#version_generated: 2
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if J[0,i%N,i//N] > 0:
      h_site = sum([h[s][i%N] for s in site_nbrs])
    else:
      h_site = -sum([h[s][i%N] for s in site_nbrs])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002223611111111111}
#island_id: 1
#version_generated: 2
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006797839506172839}
#island_id: 2
#version_generated: 3
#generate time22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      if h[(k+N-1)%N][i%N] > 0:
        total_spin += J[k, i%N, i//N]
      else:
        total_spin -= J[k, i%N, i//N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k, i%N, i//N]*h[site_nbr][k] for k in range(3)]) + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k, i%N, i//N]*h[site_nbr][k] for k in range(3)]) - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0009560185185185193}
#island_id: 2
#version_generated: 3
#generate time22:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + 2*site_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  def calculate_priority(site, site_nbr):
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    return h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if total_spin[i][0] > 0:
      priorities[i][0] = calculate_priority(i, site_nbr) 
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -calculate_priority(i, site_nbr)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0038751543209876544}
#island_id: 1
#version_generated: 2
#generate time22:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    total_spin = sum([h[j][i%N] if J[0,i%N,j] > 0 else -h[j][i%N] for j in site_nbrs])
    priorities[i][0] = total_spin
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001457253086419753}
#island_id: 1
#version_generated: 2
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    # Calculate the interaction term for this site
    interaction_term = 0
    for j in range(3):
      k = (i//N + ((j-1)%2 - 1)) % N
      interaction_term += J[j,i//N,i%N]*h[k][i%N]

    priorities[i][0] = h_site + interaction_term
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002922685185185185}
#island_id: 1
#version_generated: 2
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(3):
      site = (i + ((j-1)%2 - 1)) % N
      if J[j,i//N,i%N] > 0:
        h_site += sum([J[k,i%N,s]*h[s][i%N] for k,s in zip(range(4),[site,(site+1)%N,(site-1)%N,site])])
      else:
        h_site -= sum([J[k,i//N,s]*h[s][i//N] for k,s in zip(range(4),[site,(site+1)%N,(site-1)%N,site])])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.2697010802469132}
#island_id: 1
#version_generated: 2
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      priorities[i][0] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      if h[i//N][i%N] > 0:
        priorities[i][1] -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        priorities[i][1] += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += h_site
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= h_site
      priorities[i][1] += 1

  return(priorities)




#score: {'data2D.txt': 0.001854166666666667}
#island_id: 1
#version_generated: 2
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    J_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = 2*h_site + J_sum
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001416512345679013}
#island_id: 1
#version_generated: 2
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    h_site = h[i//N][i%N]
    
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002290277777777778}
#island_id: 1
#version_generated: 2
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])]
    else:
      total_spin = [-sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])]

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.337950462962962}
#island_id: 1
#version_generated: 2
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1+h_site)+sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -(2+h_site)-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -(1+h_site)-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = (2-h_site)-sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 2.6697530864197516e-05}
#island_id: 1
#version_generated: 2
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if sum(J[:,i//N,i%N]) > 0 else -h[site_nbr][i%N]
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012171296296296299}
#island_id: 0
#version_generated: 2
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [k for k in range(4) if (J[k,i%N,i//N] != 0)]
    neighbor_h = sum([h[(i//N+k)%N][i%N]*J[k,i%N,i//N] for k in neighbors])
    
    priorities[i][0] = h_site + neighbor_h
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = [h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*neighbor_h for k, neighbor_h in zip(range(3), neighbors_h)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*neighbor_h for k, neighbor_h in zip(range(3), neighbors_h)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011804012345679005}
#island_id: 0
#version_generated: 2
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i//N-1, i//N+1]]
    h_site = sum(h[site][i%N] if J[0,i%N,i//N]>0 else -h[site][i%N] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0030044753086419756}
#island_id: 1
#version_generated: 2
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006699074074074071}
#island_id: 2
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[site_nbr][j] for k,j in itertools.product(range(3),range(N))])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[site_nbr][j] for k,j in itertools.product(range(3),range(N))])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 2
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[site_nbr2][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005331790123456787}
#island_id: 1
#version_generated: 2
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]*(h[(site_nbr+N-1)%N][i%N] - h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[3,i//N,i%N]*(h[(site_nbr+N-1)%N][i%N] - h[site_nbr][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -4.3981481481481236e-05}
#island_id: 1
#version_generated: 2
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = J[0,i%N,i//N]*(-h_site) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.189416512345679}
#island_id: 1
#version_generated: 2
#generate time22:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = -site_energy
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0026131172839506177}
#island_id: 1
#version_generated: 2
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N,
           (i % N + ((i//N+1)%2 - 1)) % N]
    h_site_sum = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.001041203703703704}
#island_id: 1
#version_generated: 2
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) - J[3,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)]) + J[3,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 1
#version_generated: 2
#generate time22:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    nn_sum = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + nn_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - nn_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00025601851851851843}
#island_id: 3
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:, i//N], axis=0)
    if h[i//N][i%N] > 0:
      priorities[i][0] = np.dot(total_spin, h[site_nbr])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -np.dot(total_spin, h[site_nbr])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_nn = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_nn
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_nn
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = 0
    for j in range(3):
      total_spin += J[j,i%N,i//N]*h[(j+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0002942901234567896}
#island_id: 3
#version_generated: 3
#generate time22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for d in range(4):
      jnbr = (i % N + ((i//N-1)%2 - 1)) % N
      if d==0: 
        jnbr=(i+N-1)%N
      elif d==1:
        jnbr=((i//N)*N+i%N+1)%N
      elif d==2:
        jnbr=(i+N//2)%N
      else:
        jnbr=(i//N*N+(i%N+1))%N

      if J[0,i%N,jnbr] > 0:
        h_site += h[jnbr][i%N]
      else:
        h_site -= h[jnbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0025930555555555563}
#island_id: 1
#version_generated: 2
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0,i%N,i//N]*h[site_nbr1][i%N] for _ in range(N)]) + \
        sum([J[1,(i+1)%N,i//N]*h[site_nbr2][i%N] for _ in range(N)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[0,i%N,i//N]*h[site_nbr1][i%N] for _ in range(N)]) - \
        sum([J[1,(i+1)%N,i//N]*h[site_nbr2][i%N] for _ in range(N)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
#generate time22:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros((N*N,2))
    for k in range(3):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        h_site_nbr = h[site_nbr][i%N]
      else:
        h_site_nbr = -h[site_nbr][i%N]

      if h[i//N][i%N] > 0:
        total_spin[i][0] += h_site_nbr + h_site
        total_spin[i][1] -= 2
      else:
        total_spin[i][0] -= h_site_nbr - h_site
        total_spin[i][1] += 2

    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin[i][0]
      priorities[i][1] = -total_spin[i][1]
    else:
      priorities[i][0] = -total_spin[i][0]
      priorities[i][1] = total_spin[i][1]

  return(priorities)




#score: {'data2D.txt': 0.01368966049382716}
#island_id: 3
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Apply a correction term based on the site interactions
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_spin = h[i//N][i%N]
    if site_spin > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04321620370370374}
#island_id: 3
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = 1
    else:
      h_site = -1

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.10153348765432109}
#island_id: 3
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if J[2,i%N,i//N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.0021060185185185184}
#island_id: 1
#version_generated: 2
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*(-1)**k*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0010711419753086423}
#island_id: 1
#version_generated: 2
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for d in range(4):
      if d == 0:
        dx, dy = 0, -1
      elif d == 1:
        dx, dy = 1, 0
      elif d == 2:
        dx, dy = 0, 1
      else:
        dx, dy = -1, 0
      if i%N+dx >= 0 and i%N+dx < N and (i//N)*N + i%N+dy >= 0 and (i//N)*N + i%N+dy < N*N:
        total_spin += J[d,i%N,i//N]*h[(i//N+N-1)%N][i%N+dx]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin
      priorities[i][1] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + total_spin
    else:
      priorities[i][0] = total_spin
      priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0, i % N, i // N] > 0:
      h_site += h[site_nbr][i % N]
    else:
      h_site -= h[site_nbr][i % N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.33490169753086324}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)]) - sum([J[k,i%N,i//N]**2 for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k in range(4)]) + sum([J[k,i%N,i//N]**2 for k in range(4)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0013501543209876537}
#island_id: 2
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[0, i%N, j]*h[j][i%N] for j in range(N)]) + h[site_nbr1][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[0, i%N, j]*h[j][i%N] for j in range(N)]) - h[site_nbr2][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0004921296296296298}
#island_id: 1
#version_generated: 2
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = h[i//N][i%N]
    else:
      h_site = -h[i//N][i%N]

    neighbors = [J[k, i%N, i//N]*h[site_nbrs[k]][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0010813271604938276}
#island_id: 1
#version_generated: 2
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - sum([J[k,i%N,(i+k-2)%N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + sum([J[k,i%N,(i+k-2)%N]*h[site_nbr][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 5.725308641975277e-05}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      spin = 1
    else:
      spin = -1

    for k in range(3):
      site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
      priorities[i][0] += J[k,i%N,i//N]*h[site_nbr2][i%N]
      priorities[i][1] -= J[k,i%N,i//N]*h[site_nbr2][i%N]

  return(priorities)




#score: {'data2D.txt': -0.31250694444444366}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.18767885802469136}
#island_id: 1
#version_generated: 2
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
      else:
        total_spin[i*N+j][0] -= h[site_nbr][j]

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 1
#version_generated: 2
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priority_site = h[i//N][i%N] * h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = priority_site
    priorities[i][1] = -priority_site

  return(priorities)




#score: {'data2D.txt': 0.0016479938271604941}
#island_id: 1
#version_generated: 2
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = 0 if h[site_nbr][i%N] > 0 else -h[site_nbr][i%N]
    
    # Calculate the priority for each spin assignment
    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0012310185185185182}
#island_id: 1
#version_generated: 2
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + h_site) * (1 + site_sum)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-1 + h_site) * (-1 + site_sum)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.19955725308641972}
#island_id: 0
#version_generated: 2
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      spin_total = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      spin_total = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h[i//N][i%N] + spin_total
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0011310185185185182}
#island_id: 0
#version_generated: 2
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = sum([J[k,i%N,i//N]*np.sign(h[(k+N-1)%N][i%N]) for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0015195987654320984}
#island_id: 2
#version_generated: 3
#generate time23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      if (k==0 and i//N>0) or (k==1 and i%N>0) or (k==2 and i//N<N-1) or (k==3 and i%N<N-1):
        J_site = J[k,i%N,i//N]
        break
    else:
      J_site = 0

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J_site*h[(k+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site1 = h[site_nbr1][i%N]
      h_site2 = h[site_nbr2][i%N]
    else:
      h_site1 = -h[site_nbr1][i%N]
      h_site2 = -h[site_nbr2][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site1 + h_site2 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site1 - h_site2 - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N]>0 else -h[site_nbr][i%N]
    spin_neighbours = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(spin_neighbours)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0014189814814814816}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h_site + h_sum
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.006074537037037038}
#island_id: 3
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = 0
    for j in range(4):
      if i % N + J[j][i//N,i%N] >= 0 and J[j][i//N,i%N] > 0:
        sum_h += h[(i+N*j)%N][i%N]
      elif i % N + J[j][i//N,i%N] < 0 and J[j][i//N,i%N] < 0:
        sum_h -= h[(i+N*j)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00040354938271604913}
#island_id: 3
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or h[i//N][i%N] < 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      if i % N == 0 or h[i//N][i%N] > 0:
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][1] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001044598765432099}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_energies = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    h_site = sum(site_nbr_energies)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008760802469135803}
#island_id: 1
#version_generated: 2
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      spin_product = (J[1,i%N,i//N]*h[(i+N-1)%N][i%N] + J[2,i%N,i//N]*h[(i+1)%N][i%N]) * h[i//N][i%N]
      if j == 0:
        priorities[i][j] = h_site - spin_product
      else:
        priorities[i][j] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 1
#version_generated: 2
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 0
#version_generated: 2
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i%N-1)%N - N//2)) % N
    if h[i//N][i%N] > 0:
      priorities[i][0] = J[0,i%N,i//N]*h[site_nbr1][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -J[0,i%N,i//N]*h[site_nbr1][i%N] - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.00182885802469136}
#island_id: 0
#version_generated: 2
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0007640432098765432}
#island_id: 0
#version_generated: 2
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[1,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[1,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[1,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[1,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': 0.0008162037037037048}
#island_id: 0
#version_generated: 2
#generate time23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i // N) % 2)
    
    h_site = h[site_nbr1][i%N] if h[i//N][i%N] > 0 else -h[site_nbr1][i%N]
    neighbor_h_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    priorities[i][0] = h_site + neighbor_h_sum
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.002702623456790124}
#island_id: 3
#version_generated: 3
#generate time23:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, 1]

    priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[site_nbr][j] for k in range(4) for j in [(i+N-1)%N, (i+N//2)%N]])
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time23:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.14141095679012364}
#island_id: 1
#version_generated: 2
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + abs(h_site)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - abs(h_site)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010692901234567904}
#island_id: 1
#version_generated: 2
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    total_spin = sum([J[k,i%N,i//N]*np.where(h[(k+N-1)%N][i%N], 1, -1) for k in range(3)])
    
    priorities[i][0] = h_site + total_spin
    priorities[i][1] = -priorities[i][0]
  
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.002305401234567902}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * np.sign(h[i//N][i%N])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
#generate time23:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(3):
      site_nbr2 = (i % N + ((i//N+j)%2 - 1)) % N
      if J[j,i%N,i//N] > 0:
        h_site2 = h[site_nbr2][i%N]
      else:
        h_site2 = -h[site_nbr2][i%N]

      total_spin += [h_site+h_site2, h_site-h_site2][j%2]
    if total_spin[1] > 0:
      priorities[i][0] = total_spin[0]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005535493827160494}
#island_id: 1
#version_generated: 2
#generate time23:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) / abs(sum([J[k,i%N,i//N] for k in range(4)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 9.243827160493811e-05}
#island_id: 3
#version_generated: 3
#generate time23:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if i % N == 0 or (i % N == 1 and i // N < N//2) or (i % N == N-1 and i // N >= N//2):
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time23:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0005066358024691379}
#island_id: 0
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      h_site += sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site -= sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = -h_site
      priorities[i][1] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      priorities[i][0] = 2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 0
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.010793055555555556}
#island_id: 1
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    h_site1 = 0 if J[0,i%N,i//N] > 0 else -h[site_nbr1][i%N]
    h_site2 = 0 if J[1,(i+N-1)%N,i//N] > 0 else -h[(site_nbr1+1)%N][i%N]
    priorities[i][0] = h_site1 + h_site2
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 1
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 1
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    total_spin = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_interaction = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_interaction
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_interaction
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 0
#version_generated: 2
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.09877361111111116}
#island_id: 0
#version_generated: 2
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([h[k][i%N] for k in range(N)]) - 2*h[i//N][i%N]
      priorities[i][0] = total_spin + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([h[k][i%N] for k in range(N)]) + 2*h[i//N][i%N]
      priorities[i][0] = -total_spin - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    h_center = h[i//N][i%N]
    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h_center > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.07077700617283955}
#island_id: 0
#version_generated: 2
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N] - h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 4.552469135802495e-05}
#island_id: 0
#version_generated: 2
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0013013888888888882}
#island_id: 0
#version_generated: 2
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = ((i//N + (i%N-1)//2) % N)
    h_site1 = h[site_nbr1][i%N]
    h_site2 = h[site_nbr2][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site1 + h_site2) + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site1 + h_site2) - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
      
  return(priorities)




#score: {'data2D.txt': -0.0008902777777777772}
#island_id: 0
#version_generated: 2
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i%N,i//N]
    else:
      h_site = -J[0,i%N,i//N]

    for k in range(3):
      if (k==0 and i%2==1) or (k==1 and i%2==0):
        site_nbr = ((i+N-1)%N)
        if h[i//N][i%N] > 0:
          h_site += J[k,i%N,i//N]*h[site_nbr][i%N]
        else:
          h_site -= J[k,i%N,i//N]*h[site_nbr][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 0
#version_generated: 2
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_h = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors_h)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.009372685185185185}
#island_id: 2
#version_generated: 2
#generate time23:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      for k, nbr in enumerate(site_nbrs):
        if J[0,k,i//N]%N==J[1,k,i//N]%N==i//N:
          if h[nbr][k]%N>0:
            priorities[i][0] += h[nbr][k]%N
            priorities[i][1] -= 1
          else:
            priorities[i][0] -= h[nbr][k]%N
            priorities[i][1] += 1
    else:
      for k, nbr in enumerate(site_nbrs):
        if J[0,k,i//N]%N==J[1,k,i//N]%N==i//N:
          if h[nbr][k]%N>0:
            priorities[i][0] -= h[nbr][k]%N
            priorities[i][1] += 1
          else:
            priorities[i][0] += h[nbr][k]%N
            priorities[i][1] -= 1

  return(priorities)




#score: {'data2D.txt': 8.009259259259249e-05}
#island_id: 2
#version_generated: 2
#generate time23:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  # Calculate the interaction energies with neighbors
  for i in range(N**2):
    site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N if k%2==0 else (i % N + ((i//N+1)%2 - 1)) % N for k in range(4)]
    
    h_site = np.sum([h[site_nbrs[k]][i%N] * J[k,i//N,i%N] for k in range(4)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = -h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = h[i//N][i%N] + h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0006183641975308633}
#island_id: 2
#version_generated: 2
#generate time23:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0019146604938271613}
#island_id: 3
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if J[0,i//N,i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00019243827160493816}
#island_id: 3
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) > 0:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
    elif h[site_nbr][i%N] < 0:
      if sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) < 0:
        priorities[i][0] = -h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h[site_nbr][i%N]
        priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0038986111111111114}
#island_id: 3
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + J[0,i%N,i//N]) * h_site
      priorities[i][1] = -(1 + J[0,i%N,i//N]) * h_site
    else:
      priorities[i][0] = -(1 - J[0,i%N,i//N]) * h_site
      priorities[i][1] = (1 - J[0,i%N,i//N]) * h_site

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = total_h
    priorities[i][1] = -total_h

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0036066358024691354}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * J[0,i%N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.04375169753086407}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Calculate the total spin energy
  total_spin_energy = np.sum(priorities, axis=0)

  # Assign spins based on the site interactions and magnetism
  for i in range(N**2):
    if total_spin_energy[0] > 0:
      priorities[i][0] = h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbor_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbor_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010819444444444435}
#island_id: 1
#version_generated: 2
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
      if j == 0 and i % N != 0: # left
        site_nbr = (i-1) % N
        h_site += J[j,i//N,i//N]*h[site_nbr][i%N]
      elif j == 1 and i % N != N-1: # right
        site_nbr = (i+1) % N
        h_site += J[j,i//N,i//N]*h[site_nbr][i%N]
      elif j == 2 and i // N > 0: # up
        site_nbr = (i-N) % (N*N)
        h_site += J[j,i//N,i//N]*h[site_nbr//N][site_nbr%N]
      elif j == 3 and i // N < N-1: # down
        site_nbr = (i+N) % (N*N)
        h_site += J[j,i//N,i//N]*h[site_nbr//N][site_nbr%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,i//N,i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 1
#version_generated: 2
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 1
#version_generated: 2
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    priorities[i][0] = h_site + sum(neighbors)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -4.7067901234567946e-05}
#island_id: 3
#version_generated: 3
#generate time23:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (J[1, i%N, i//N]*h[(i+N-1)%N][i%N] + J[2, i%N, i//N]*h[(i+2)%N][i%N]) * h_site
    else:
      priorities[i][0] = -(J[1, i%N, i//N]*h[(i+N-1)%N][i%N] + J[2, i%N, i//N]*h[(i+2)%N][i%N]) * h_site

    if h[i//N][i%N] > 0:
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
#generate time23:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site = (i % N + ((j-1)%2 - 1)) % N
      if h[i//N][j] > 0:
        total_spin += 1, -1
      else:
        total_spin -= 1, 1
    spin = np.sum(total_spin)
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0028023148148148148}
#island_id: 3
#version_generated: 3
#generate time23:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((j-1)%N - N//2)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i//N][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.001143055555555554}
#island_id: 1
#version_generated: 2
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in [i%N, (i//N-1)%N]]
    h_site_sum = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    J_site_sum = sum([J[k,i%N,i//N]*h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site_sum + J_site_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site_sum - J_site_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0003288580246913584}
#island_id: 1
#version_generated: 2
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[2, i%N, i//N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.010115895061728395}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += J[k,i//N,i%N]*h[site_k][i%N]
      else:
        h_site -= J[k,i//N,i%N]*h[site_k][i%N]

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0023470679012345683}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]

      if h[i//N][i%N] > 0:
        priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]
      else:
        priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
        priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    sum_J = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum_J
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum_J
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.002205401234567902}
#island_id: 3
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(4):
        site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
        if J[j,i//N,i%N] > 0:
            h_site += J[j,i//N,i%N]*h[site_nbr_j][i%N]
        else:
            h_site -= J[j,i//N,i%N]*h[site_nbr_j][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0009560185185185183}
#island_id: 3
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      sum_h = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      sum_h = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    if h[site_nbr][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + sum_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - sum_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0013189814814814817}
#island_id: 3
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(4)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.005480401234567902}
#island_id: 3
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      h_site = -h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.1875887345679012}
#island_id: 2
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_energy = h[i//N][i%N] + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = site_energy
    priorities[i][1] = -site_energy

  return(priorities)




#score: {'data2D.txt': 0.0013325617283950616}
#island_id: 2
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if i // N + (k % 2) == site_nbr or i % N + (k // 2) == site_nbr:
        J_term = J[k,i%N,i//N]
      else:
        J_term = -J[k,i%N,i//N]

      h_site += J_term * h[(site_nbr+k)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.004798611111111111}
#island_id: 2
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][k] > 0:
        total_spin[0] += h_site
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site
        total_spin[1] += 1

    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': 0.0009291666666666659}
#island_id: 0
#version_generated: 2
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_energy = sum([J[k,i%N,i//N]*2*h[(k+N-1)%N][i%N] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_energy
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_energy
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbors_sum = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + neighbors_sum
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - neighbors_sum
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0033461419753086415}
#island_id: 0
#version_generated: 2
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i%N,i//N]*h[site_nbrs[k]][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.029545216049382716}
#island_id: 0
#version_generated: 2
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for j in range(N):
      site_nbr = (i % N + ((i//N-j)%N - N//2)) % N
      if J[0,i%N,i//N] > 0:
        h_site_nbr = h[site_nbr][j]
      else:
        h_site_nbr = -h[site_nbr][j]
      total_spin[0] += h[i//N][j] + sum([J[k,j,i//N]*h[site_nbr][k] for k in range(3)])
      if J[0,i%N,i//N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[0]

  return(priorities)




#score: {'data2D.txt': -0.0009844135802469134}
#island_id: 0
#version_generated: 2
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i // N + ((i % N-1) % 2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr1][i%N]
    else:
      h_site = -h[site_nbr1][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(2)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0015865740740740749}
#island_id: 0
#version_generated: 2
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    site_nbrs = [(i//N, (i%N + ((k-1)%2 - 1)) % N) for k in range(3)]
    total_h = sum([J[k,i%N,i//N]*h[site_nbr[0]][site_nbr[1]] for k,site_nbr in enumerate(site_nbrs)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0032881172839506175}
#island_id: 0
#version_generated: 2
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001291820987654321}
#island_id: 0
#version_generated: 2
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N]
    if J[0,i%N,i//N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.043966820987654316}
#island_id: 0
#version_generated: 2
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (i + ((k-1)%2 - 1)) % N
      if J[k,i//N,i%N] > 0:
        h_site += h[site_k][i%N]
      else:
        h_site -= h[site_k][i%N]

    priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0011242283950617282}
#island_id: 0
#version_generated: 2
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    h_sites = [h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N] for site_nbr in site_nbrs]
    priorities[i][0] = sum(h_sites)
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0022665123456790132}
#island_id: 0
#version_generated: 2
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(3)]
    site_nbr_values = [h[site_nbr][i%N] if J[k,i%N,i//N] > 0 else -h[site_nbr][i%N] for k, site_nbr in zip(range(3), site_nbrs)]
    h_site = sum([J[k,i%N,i//N]*v for k, v in zip(range(3), site_nbr_values)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -h_site
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = h_site

  return(priorities)




#score: {'data2D.txt': -0.0014415123456790124}
#island_id: 0
#version_generated: 2
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(2*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - h_site
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = total_spin + h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][0] = -total_spin - h[site_nbr][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + np.tanh(h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = (1 - np.tanh(-h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])))
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0010819444444444448}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(4):
      site_k = (k + ((i//N-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[k,i//N,i%N]*h[site_k][i%N]
        priorities[i][1] -= J[k,i//N,i%N]*h[site_k][i%N]
      else:
        priorities[i][0] -= J[k,i//N,i%N]*h[site_k][i%N]
        priorities[i][1] += J[k,i//N,i%N]*h[site_k][i%N]

  return(priorities)




#score: {'data2D.txt': 0.00102854938271605}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      site_k = (site_nbr + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        h_site += J[k, i%N, i//N]*h[site_k][i%N]
      else:
        h_site -= J[k, i%N, i//N]*h[site_k][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00037762345679012466}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = J[0,i%N,i//N] * h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.0006554012345679004}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = (1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -(1 + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])) * h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0016955246913580243}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    h_magnetism = h[i//N][i%N]
    total_energy = h_magnetism*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = total_energy
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0022408950617283964}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for k in range(3):
      if (k == 1 and i % N != 0) or (k == 2 and i % N == N-1):
        continue
      if J[k,i%N,i//N] > 0:
        h_site += J[k,i%N,i//N]*h[(k+N-1)%N][i%N]
      else:
        h_site -= J[k,i%N,i//N]*h[(k+N-1)%N][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.0032695987654320986}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(4)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[1,i//N,i%N]
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.003023302469135803}
#island_id: 2
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      if J[0,i%N,i//N] > 0:
        h_site = h[site_nbr][i%N]
      else:
        h_site = -h[site_nbr][i%N]
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      if J[0,i%N,i//N] > 0:
        h_site = -h[site_nbr][i%N]
      else:
        h_site = h[site_nbr][i%N]
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][i % N][i // N] > 0:
      h_site = h[site_nbr][i % N]
    else:
      h_site = -h[site_nbr][i % N]

    total_spin = sum([J[k][i % N][i // N] * h[(k + N - 1) % N][i % N] for k in range(3)])
    if h[i // N][i % N] > 0:
      priorities[i][0] = h_site + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 2
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.00037978395061728364}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for j in range(2):
      if h[i//N][i%N] > 0:
        priorities[i][j] = (1-j)*h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      else:
        priorities[i][j] = -(1-j)*h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])

  return(priorities)




#score: {'data2D.txt': 0.034469290123456786}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(-1,2):
      site_nbr_k = (i % N + ((i//N-1+k)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[1] -= J[k,i%N,i//N]
      else:
        total_spin[0] -= J[k,i%N,i//N]*h[site_nbr_k][i%N]
        total_spin[1] += J[k,i%N,i//N]

    priorities[i][0] = h_site + total_spin[0]
    priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] += h[site_nbr][i%N] + total_spin
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h[site_nbr][i%N] - total_spin
      priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': 0.0012569444444444444}
#island_id: 1
#version_generated: 2
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    priorities[i][0] = total_spin
    priorities[i][1] = -total_spin

  return(priorities)




#score: {'data2D.txt': -0.0009412037037037029}
#island_id: 1
#version_generated: 2
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) + h[site_nbr][i%N]
    else:
      total_spin = -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) - h[site_nbr][i%N]

    if J[0,i%N,i//N] > 0:
      priorities[i][0] = total_spin
      priorities[i][1] = -total_spin
    else:
      priorities[i][0] = -total_spin
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0017359567901234568}
#island_id: 0
#version_generated: 2
#generate time23:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  # Improved version: take into account the interactions with the left and right sites
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] += J[1,i%N,i//N]*h[(i+1)%N][i%N] + J[3,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] -= priorities[i][0]
    else:
      priorities[i][0] -= h_site - J[1,i%N,i//N]*h[(i+1)%N][i%N] - J[3,i%N,i//N]*h[(i+N-1)%N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006998456790123442}
#island_id: 0
#version_generated: 2
#generate time23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (1,0)]:
      for _ in range(2):
        J_sum = sum([J[dir[0],(i+N-1)%N,(i+dir[1])%N]*h[(k+N-1)%N][(i+dir[1])%N] for k in range(N)])
        if h[i//N][i%N] > 0:
          priorities[i][0] = h_site + J_sum
          priorities[i][1] = -priorities[i][0]
        else:
          priorities[i][0] = -h_site - J_sum
          priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0008560185185185183}
#island_id: 0
#version_generated: 2
#generate time23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = J[0,i%N,i//N]*h[site_nbr][i%N]
    else:
      h_site = -J[0,i%N,i//N]*h[site_nbr][i%N]

    if J[1,i//N,i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 0
#version_generated: 2
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    neighbor_h_sites = [J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum(neighbor_h_sites)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum(neighbor_h_sites)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0, i%N, i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_h = sum([J[k, i%N, i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + total_h
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - total_h
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': 0.0006165123456790131}
#island_id: 3
#version_generated: 3
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for j in range(4)]
    if sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)]) > 0:
      h_site = np.sum(h[i//N])
    else:
      h_site = -np.sum(h[i//N])

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k, i%N, i//N]*h[site_nbr][i%N] for k, site_nbr in enumerate(site_nbrs)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    spin_product = np.prod([[-1, 1][k==j] for k in range(N) for j in [i//N,(i+N-1)%N,i%N]])
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = h[site_nbr][i%N] if J[0,i%N,i//N] > 0 else -h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    for dir in [(0,1), (1,0)]:
      site_nbr_dir = ((i // N + dir[0]) % N + ((i % N + dir[1]-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        priorities[i][0] += J[dir[0], i % N, i // N] * (h[site_nbr_dir][i % N] - 0.5)
        priorities[i][1] -= J[dir[0], i % N, i // N] * (h[site_nbr_dir][i % N] - 0.5)
      else:
        priorities[i][0] -= J[dir[0], i % N, i // N] * (h[site_nbr_dir][i % N] - 0.5)
        priorities[i][1] += J[dir[0], i % N, i // N] * (h[site_nbr_dir][i % N] - 0.5)

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.010218981481481482}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = np.zeros(2)
    for k in range(3):
      site_k = (i % N + ((k+i//N-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[0] += h_site + h[site_k][i%N]
        total_spin[1] -= 1
      else:
        total_spin[0] -= h_site + h[site_k][i%N]
        total_spin[1] += 1

    priorities[i][0] = -total_spin[1]
    priorities[i][1] = total_spin[1]

  return(priorities)




#score: {'data2D.txt': 0.003400462962962963}
#island_id: 3
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      h_site = sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])
    else:
      h_site = -sum([J[k,i//N,i%N]*h[(k+N-1)%N][i%N] for k in range(3)])

    priorities[i][0] = h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -0.001456944444444444}
#island_id: 2
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[site_nbr][k] for k in range(3)])
    
    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - J[0,i%N,i//N]*h[i//N][i%N]
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.00880324074074074}
#island_id: 2
#version_generated: 3
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    h_site = sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) if J[0,i%N,i//N]>0 else -sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
    priorities[i][0] = h[site_nbr][i%N] + h_site
    priorities[i][1] = -priorities[i][0]
  return(priorities)




#score: {'data2D.txt': -6.219135802469178e-05}
#island_id: 3
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    if h[i//N][i%N] > 0:
      priorities[i][0] = h_site + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)])
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.03230817901234567}
#island_id: 3
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      h_site = h[site_nbr][i%N]
    else:
      h_site = -h[site_nbr][i%N]

    total_spin = [sum([J[k,i%N,j]*h[(k+N-1)%N][j] for k in range(4)]) if i//N == j else 0 for j in range(N)]
    magnetism = sum(h[i//N][j] for j in range(N)) if h_site > 0 else -sum(h[i//N][j] for j in range(N))

    if total_spin[site_nbr] + magnetism > 0:
      priorities[i][0] = h_site + max(total_spin)
      priorities[i][1] = -priorities[i][0]
    else:
      priorities[i][0] = -h_site - min(total_spin)
      priorities[i][1] = -priorities[i][0]

  return(priorities)




#score: {'data2D.txt': -0.3118603395061721}
#island_id: 3
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), 1]
      priorities[i] = [-s - sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for s in total_spin]
    else:
      total_spin = [sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]), -1]
      priorities[i] = [-s + sum([J[k,i%N,i//N]*h[(k+N-1)%N][i%N] for k in range(3)]) for s in total_spin]

  return(priorities)




